/*
 * BC127.h
 */
#ifndef _BC127_H_
#define _BC127_H_

/*** IMPORTED EXTERNAL OBJECTS ***********************************************/
/*****************************************************************************/
#include "main.h"

/*** EXPORTED OBJECTS ********************************************************/
/*****************************************************************************/

/*** Constants ***************************************************************/
// Max amount of BT devices to list on inquiry
#define DEVLIST_MAXLEN 6
// Time offset to adjust from GPS UTC
#define GPS_TIME_OFFSET 1 // Central European Time
// BC127 serial port
#define BLUEPORT Serial4
// BC127 reset pin
#define BC127_RST_PIN 30
// Default waiting time after sending a command
#define BC127_CMD_WAIT_MS 80

/*** Types *******************************************************************/
/* serial messages from/to bc127
 * -----------------------------
 * type   | src   > fwd   > rcp     || example
 * -------|------->------->-------  ||------------------------------
 * BCCMD  | MCU   > --    > BC127   || 'ADVERTISING ON'
 * BLECMD | MCU   > BC127 > app     || 'SEND rwin 300 3600 24'
 * BCNOT  | BC127 > --    > MCU     || 'ABS_VOL 2 82'
 * BLENOT | app   > BC127 > MCU     || 'RECV latlong 44.2 14.5'
 * BCCONF | MCU   > --    > BC127   || 'CONFIG AUDIO=0 1' (currently not used)
 * BLEERR | MCU   > BC127 > app     || 'SEND err '
 */
enum serialMsgs {
  // BCCMD
  BCCMD_NOTHING = 0,
  BCCMD_ADVERTISING,
  BCCMD_AFH_MAP,
  BCCMD_ASSOCIATION,
  BCCMD_AT,
  BCCMD_AVRCP_META_DATA,
  BCCMD_BATTERY_STATUS,
  BCCMD_BC_SMART_COMMAND,
  BCCMD_BC_SMART_NOTIF,
  BCCMD_BLE_GET_CHAR,
  BCCMD_BLE_GET_SERV,
  BCCMD_BLE_INDICATION,
  BCCMD_BLE_NOTIFICATION,
  BCCMD_BLE_READ,
  BCCMD_BLE_READ_RES,
  BCCMD_BLE_SECURITY,
  BCCMD_BLE_SET_DB,
  BCCMD_BLE_WRITE,
  BCCMD_BROADCAST,
  BCCMD_BT_STATE,
  BCCMD_CALL,
  BCCMD_CLOSE,
  BCCMD_CONFIG,
  BCCMD_CVC_CFG,
  BCCMD_DFU,
  BCCMD_ENTER_DATA_MODE,
  BCCMD_GET,
  BCCMD_HELP,
  BCCMD_HID_DESC,
  BCCMD_HID_READ,
  BCCMD_IAP,
  BCCMD_IAP_APP_REQ,
  BCCMD_INQUIRY,
  BCCMD_LICENSE,
  BCCMD_LINK_POLICY,
  BCCMD_LIST,
  BCCMD_MAP_GET_MSG,
  BCCMD_MM_CFG,
  BCCMD_MUSIC,
  BCCMD_NAME,
  BCCMD_OPEN,
  BCCMD_PAIR,
  BCCMD_PASSKEY,
  BCCMD_PB_ABORT,
  BCCMD_PB_PULL,
  BCCMD_PIO,
  BCCMD_POWER,
  BCCMD_REMOTE_VOLUME,
  BCCMD_RESET,
  BCCMD_RESTORE,
  BCCMD_ROLE,
  BCCMD_ROUTE,
  BCCMD_RSSI,
  BCCMD_SCAN,
  BCCMD_SEND,
  BCCMD_SEND_RAW,
  BCCMD_SET,
  BCCMD_SPEECH_REC,
  BCCMD_SSRD,
  BCCMD_STATUS,
  BCCMD_TOGGLE_VR,
  BCCMD_TONE,
  BCCMD_TX_POWER,
  BCCMD_UNPAIR,
  BCCMD_VERSION,
  BCCMD_VOLUME,
  BCCMD_WRITE,
  BCCMD_UNKNOWN,
  // BLECMD
  BLECMD_NOTHING = 100,
  BLECMD_INQUIRY,
  BLECMD_DISC,
  BLECMD_CONN,
  BLECMD_LATLONG,
  BLECMD_TIME,
  BLECMD_REC,
  BLECMD_REC_NB,
  BLECMD_REC_NEXT,
  BLECMD_REC_TS,
  BLECMD_MON,
  BLECMD_VOL,
  BLECMD_BT,
  BLECMD_RWIN,
  BLECMD_FILEPATH,
  BLECMD_UNKNOWN,
  // BCNOT
  BCNOT_NOTHING = 200,
  BCNOT_A2DP_STREAM_START,
  BCNOT_A2DP_STREAM_SUSPEND,
  BCNOT_ABS_VOL,
  BCNOT_ASSOCIATION,
  BCNOT_ASSOCIATION_IN_PROGRESS,
  BCNOT_AT,
  BCNOT_AVRCP_BACKWARD,
  BCNOT_AVRCP_FORWARD,
  BCNOT_AVRCP_MEDIA,
  BCNOT_AVRCP_PAUSE,
  BCNOT_AVRCP_PLAY,
  BCNOT_AVRCP_STOP,
  BCNOT_BA_BROADCASTER_START,
  BCNOT_BA_BROADCASTER_STOP,
  BCNOT_BA_RECEIVER_START,
  BCNOT_BA_RECEIVER_STOP,
  BCNOT_BC_SMART_CMD,
  BCNOT_BC_SMART_CMD_RESP,
  BCNOT_BLE_INDICATION,
  BCNOT_BLE_NOTIFICATION,
  BCNOT_BLE_PAIR_ERROR,
  BCNOT_BLE_PAIR_OK,
  BCNOT_BLE_READ,
  BCNOT_BLE_WRITE,
  BCNOT_CALL_ACTIVE,
  BCNOT_CALL_DIAL,
  BCNOT_CALL_END,
  BCNOT_CALL_INCOMING,
  BCNOT_CALL_MEMORY,
  BCNOT_CALL_OUTGOING,
  BCNOT_CALL_REDIAL,
  BCNOT_CALLER_NUMBER,
  BCNOT_CHARGING_IN_PROGRESS,
  BCNOT_CHARGING_COMPLETE,
  BCNOT_CHARGER_DISCONNECTED,
  BCNOT_CLOSE_OK,
  BCNOT_DTMF,
  BCNOT_ERROR,
  BCNOT_IAP_CLOSE_SESSION,
  BCNOT_IAP_OPEN_SESSION,
  BCNOT_INBAND_RING,
  BCNOT_INQUIRY,
  BCNOT_INQ_OK,
  BCNOT_LINK,
  BCNOT_LINK_LOSS,
  BCNOT_MAP_NEW_MSG,
  BCNOT_NAME,
  BCNOT_OPEN_OK,
  BCNOT_PAIR_ERROR,
  BCNOT_PAIR_OK,
  BCNOT_PAIR_PASSKEY,
  BCNOT_PAIR_PENDING,
  BCNOT_READY,
  BCNOT_RECV,
  BCNOT_REMOTE_VOLUME,
  BCNOT_ROLE,
  BCNOT_ROLE_OK,
  BCNOT_ROLE_NOT_ALLOWED,
  BCNOT_SCO_OPEN,
  BCNOT_SCO_CLOSE,
  BCNOT_SR,
  BCNOT_STATE,
  BCNOT_UNKNOWN,
  // BLENOT
  BLENOT_NOTHING = 300,
  BLENOT_VOL,
  BLENOT_LATLONG,
  BLENOT_RWIN,
  BLENOT_FILEPATH,
  BLENOT_OK,
  // BCCONF
  BCCONF_NOTHING = 400,
  BCCONF_AUDIO,
  BCCONF_AUDIO_ANALOG,
  BCCONF_AUDIO_DIGITAL,
  BCCONF_AUTOCONN,
  BCCONF_AUTO_DATA,
  BCCONF_BA_CONFIG,
  BCCONF_BALANCE,
  BCCONF_BATT_CONFIG,
  BCCONF_BC_SMART_CONFIG,
  BCCONF_BEACON_DATA,
  BCCONF_BLE_CONFIG,
  BCCONF_BLE_CONN_PARAMS,
  BCCONF_BT_STATE_CONFIG,
  BCCONF_BT_VOL_CONFIG,
  BCCONF_CLASS_1,
  BCCONF_CMD_TO,
  BCCONF_COD,
  BCCONF_CODEC,
  BCCONF_DEEP_SLEEP,
  BCCONF_DEVICE_ID,
  BCCONF_ENABLE_BATT_IND,
  BCCONF_ENABLE_LED,
  BCCONF_ENABLE_SPP_SNIFF,
  BCCONF_GPIO_CONFIG,
  BCCONF_HFP_CONFIG,
  BCCONF_HIGH_SPEED,
  BCCONF_IAP_PARAMS,
  BCCONF_LOCAL_ADDR,
  BCCONF_MAX_REC,
  BCCONF_MM,
  BCCONF_MUSIC_META_DATA,
  BCCONF_MUSIC_OLD_AVRCP,
  BCCONF_NAME,
  BCCONF_NAME_SHORT,
  BCCONF_PIN,
  BCCONF_PROFILES,
  BCCONF_REMOTE_ADDR,
  BCCONF_SPP_UUID,
  BCCONF_SSP_CAPS,
  BCCONF_TWS_CONFIG,
  BCCONF_UART_CONFIG,
  BCCONF_USB_HOST,
  BCCONF_VREG_ROLE,
  BCCONF_UNKNOWN,
  // BLEERR
  BLEERR_NOTHING = 500,
  BLEERR_RWIN_BAD_REQ,
  BLEERR_RWIN_WRONG_PARAMS,
  BLEERR_LATLONG_WRONG_PARAMS,
  BLEERR_WRONG_PARAMS,
  BLEERR_VOL_BT_DIS,
  BLEERR_UNKNOWN,
};

extern struct btDev dev_list[DEVLIST_MAXLEN];

/*** Variables
 ***************************************************************/
extern unsigned int found_dev;
extern String BT_peer_address;
extern String BT_peer_name;
extern int BT_id_a2dp;
extern int BT_id_avrcp;
extern int BLE_conn_id;
extern bool BC127_ready;

/*** Functions
 ***************************************************************/
void initBc127(void);
void bc127Reset(void);
void bc127BlueOn(void);
void bc127BlueOff(void);
void bc127AdvStart(void);
void bc127AdvStop(void);
void bc127Inquiry(void);
void parseSerialIn(String input, serialAnswer_t *answer);
bool sendCmdOut(int msg);

#endif /* _BC127_H_ */
