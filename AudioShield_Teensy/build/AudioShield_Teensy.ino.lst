
C:\_code\Arduino\SoundingSoil\AudioShield_Teensy\build/AudioShield_Teensy.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
     *
     *******************************************************************************/
    void startup_early_hook( void ) __attribute__ ((weak, noinline));
    void startup_early_hook( void ) {
#if defined(KINETISK)
        WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
       0:	00 00 03 20 d1 01 00 00 f9 e7 00 00 b1 e7 00 00     ... ............
    
    static inline
    uint32_t llwu_clear_flags( void ) {
        
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
      10:	b1 e7 00 00 b1 e7 00 00 b1 e7 00 00 b1 e7 00 00     ................
      20:	b1 e7 00 00 b1 e7 00 00 b1 e7 00 00 f9 e7 00 00     ................
        LLWU_PF1 = 0xFF;
      30:	f9 e7 00 00 b1 e7 00 00 dd d2 00 00 2d d5 00 00     ............-...
        LLWU_PF2 = 0xFF;
        LLWU_PF3 = 0xFF;
        LLWU_PF4 = 0xFF;
      40:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
    
    static inline
    int llwu_disable( void ) {
        llwu_mask_t *mask = &llwuMask;
#if defined(HAS_KINETIS_LLWU_32CH)
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
      50:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        LLWU_PE2 = 0;
        LLWU_PE3 = 0;
        LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
        LLWU_PE5 = 0;
        LLWU_PE6 = 0;
      60:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        LLWU_PE8 = 0;
#endif
        mask->PE1 = 0;
        mask->PE2 = 0;
        mask->PE3 = 0;
        mask->PE4 = 0;
      70:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF5 ) mask->wakeupSource = 35;
    #endif
#endif
        LLWU_PE1 = 0;
        LLWU_PE2 = 0;
        LLWU_PE3 = 0;
      80:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        LLWU_PE5 = 0;
        LLWU_PE6 = 0;
        LLWU_PE7 = 0;
        LLWU_PE8 = 0;
#endif
        mask->PE1 = 0;
      90:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
    int llwu_disable( void ) {
        llwu_mask_t *mask = &llwuMask;
#if defined(HAS_KINETIS_LLWU_32CH)
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
        else if ( mask->llwuFlag & LLWU_PF1_WUF3 ) mask->wakeupSource = 33;
        else if ( mask->llwuFlag & LLWU_PF1_WUF4 ) mask->wakeupSource = 4;
      a0:	2d c9 00 00 65 ca 00 00 f9 e7 00 00 f9 e7 00 00     -...e...........
        else if ( mask->llwuFlag & LLWU_PF1_WUF5 ) mask->wakeupSource = 16;
        else if ( mask->llwuFlag & LLWU_PF1_WUF6 ) mask->wakeupSource = 22;
      b0:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 cd f1 00 00     ................
        else if ( mask->llwuFlag & LLWU_PF1_WUF7 ) mask->wakeupSource = 9;
      c0:	f9 e7 00 00 29 0c 01 00 f9 e7 00 00 55 0d 01 00     ....).......U...
      d0:	f9 e7 00 00 c1 f8 00 00 f9 e7 00 00 f9 e7 00 00     ................
        
        else if ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 59;
        else if ( mask->llwuFlag & LLWU_PF1_WUF1 ) mask->wakeupSource = 60;
        else if ( mask->llwuFlag & LLWU_PF1_WUF2 ) mask->wakeupSource = 62;
        
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF8  ) mask->wakeupSource = 10;
      e0:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF9  ) mask->wakeupSource = 13;
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF10 ) mask->wakeupSource = 11;
      f0:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF11 ) mask->wakeupSource = 30;
     100:	6d d7 00 00 81 d7 00 00 95 d7 00 00 a9 d7 00 00     m...............
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF12 ) mask->wakeupSource = 2;
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF13 ) mask->wakeupSource = 7;
     110:	f9 e7 00 00 4d fb 00 00 f9 e7 00 00 f9 e7 00 00     ....M...........
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF14 ) mask->wakeupSource = 6;
     120:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF15 ) mask->wakeupSource = 21;
        
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF15 ) mask->wakeupSource = 21;
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF15 ) mask->wakeupSource = 21;
        
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME0 ) mask->wakeupSource = 36;
     130:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME1 ) mask->wakeupSource = 34;
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME4 ) mask->wakeupSource = 37;
     140:	65 d0 00 00 f9 e7 00 00 4d 0e 01 00 f9 e7 00 00     e.......M.......
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME5 ) mask->wakeupSource = 35;
     150:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
     160:	f9 e7 00 00 f9 e7 00 00 9d cb 00 00 f9 e7 00 00     ................
     170:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
     180:	f9 e7 00 00 c1 9d 00 00 f9 e7 00 00 f9 e7 00 00     ................
     190:	f9 e7 00 00 f9 e7 00 00 45 0f 01 00 f9 e7 00 00     ........E.......
     1a0:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
     1b0:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................
     1c0:	f9 e7 00 00 f9 e7 00 00 f9 e7 00 00 f9 e7 00 00     ................

000001d0 <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d0:	4b5c      	ldr	r3, [pc, #368]	; (344 <ResetHandler+0x174>)
     1d2:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1d6:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1d8:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1da:	f64d 1228 	movw	r2, #55592	; 0xd928
     1de:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1e0:	bf00      	nop
	__asm__ volatile ("nop");
     1e2:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1e4:	f000 fac6 	bl	774 <startup_early_hook>
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2 | SIM_SCGC3_FTM3;
     1e8:	4b57      	ldr	r3, [pc, #348]	; (348 <ResetHandler+0x178>)
     1ea:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
     1ee:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1f0:	4a56      	ldr	r2, [pc, #344]	; (34c <ResetHandler+0x17c>)
     1f2:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1f4:	4a56      	ldr	r2, [pc, #344]	; (350 <ResetHandler+0x180>)
     1f6:	60da      	str	r2, [r3, #12]
	SIM_SCGC4 = SIM_SCGC4_USBOTG | 0xF0000030;
	SIM_SCGC5 = 0x00003F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_ADC0 | SIM_SCGC6_TPM0 | SIM_SCGC6_TPM1 | SIM_SCGC6_TPM2 | SIM_SCGC6_FTFL;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SCB_CPACR = 0x00F00000;
     1f8:	4b56      	ldr	r3, [pc, #344]	; (354 <ResetHandler+0x184>)
     1fa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
     1fe:	601a      	str	r2, [r3, #0]
#endif
#if defined(__MK66FX1M0__)
	LMEM_PCCCR = 0x85000003;
     200:	4b55      	ldr	r3, [pc, #340]	; (358 <ResetHandler+0x188>)
     202:	4a56      	ldr	r2, [pc, #344]	; (35c <ResetHandler+0x18c>)
     204:	601a      	str	r2, [r3, #0]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     206:	4a56      	ldr	r2, [pc, #344]	; (360 <ResetHandler+0x190>)
     208:	6813      	ldr	r3, [r2, #0]
     20a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     20e:	d104      	bne.n	21a <ResetHandler+0x4a>
		RTC_SR = 0;
     210:	4954      	ldr	r1, [pc, #336]	; (364 <ResetHandler+0x194>)
     212:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     214:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     218:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     21a:	4b53      	ldr	r3, [pc, #332]	; (368 <ResetHandler+0x198>)
     21c:	781a      	ldrb	r2, [r3, #0]
     21e:	0711      	lsls	r1, r2, #28
     220:	d503      	bpl.n	22a <ResetHandler+0x5a>
     222:	781a      	ldrb	r2, [r3, #0]
     224:	f042 0208 	orr.w	r2, r2, #8
     228:	701a      	strb	r2, [r3, #0]

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22a:	4b50      	ldr	r3, [pc, #320]	; (36c <ResetHandler+0x19c>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     22c:	4950      	ldr	r1, [pc, #320]	; (370 <ResetHandler+0x1a0>)
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;

    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     22e:	22aa      	movs	r2, #170	; 0xaa
     230:	701a      	strb	r2, [r3, #0]
     232:	4a50      	ldr	r2, [pc, #320]	; (374 <ResetHandler+0x1a4>)
     234:	4b50      	ldr	r3, [pc, #320]	; (378 <ResetHandler+0x1a8>)
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     236:	428b      	cmp	r3, r1
     238:	d204      	bcs.n	244 <ResetHandler+0x74>
     23a:	f852 0f04 	ldr.w	r0, [r2, #4]!
     23e:	f843 0b04 	str.w	r0, [r3], #4
     242:	e7f8      	b.n	236 <ResetHandler+0x66>
     244:	4b4d      	ldr	r3, [pc, #308]	; (37c <ResetHandler+0x1ac>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     246:	494e      	ldr	r1, [pc, #312]	; (380 <ResetHandler+0x1b0>)
     248:	2200      	movs	r2, #0
     24a:	428b      	cmp	r3, r1
     24c:	d202      	bcs.n	254 <ResetHandler+0x84>
     24e:	f843 2b04 	str.w	r2, [r3], #4
     252:	e7fa      	b.n	24a <ResetHandler+0x7a>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     254:	494b      	ldr	r1, [pc, #300]	; (384 <ResetHandler+0x1b4>)
     256:	4a4c      	ldr	r2, [pc, #304]	; (388 <ResetHandler+0x1b8>)
     258:	2300      	movs	r3, #0
     25a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     25e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     262:	3301      	adds	r3, #1
     264:	2b74      	cmp	r3, #116	; 0x74
     266:	d1f8      	bne.n	25a <ResetHandler+0x8a>
     268:	4b48      	ldr	r3, [pc, #288]	; (38c <ResetHandler+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     26a:	4a49      	ldr	r2, [pc, #292]	; (390 <ResetHandler+0x1c0>)
     26c:	2180      	movs	r1, #128	; 0x80
     26e:	f803 1b01 	strb.w	r1, [r3], #1
     272:	4293      	cmp	r3, r2
     274:	d1fb      	bne.n	26e <ResetHandler+0x9e>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     276:	4b47      	ldr	r3, [pc, #284]	; (394 <ResetHandler+0x1c4>)
     278:	4a42      	ldr	r2, [pc, #264]	; (384 <ResetHandler+0x1b4>)
     27a:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     27c:	4b46      	ldr	r3, [pc, #280]	; (398 <ResetHandler+0x1c8>)
     27e:	228a      	movs	r2, #138	; 0x8a
     280:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     282:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     286:	2224      	movs	r2, #36	; 0x24
     288:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     28a:	22a0      	movs	r2, #160	; 0xa0
     28c:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0792      	lsls	r2, r2, #30
     292:	d5fc      	bpl.n	28e <ResetHandler+0xbe>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     294:	799a      	ldrb	r2, [r3, #6]
     296:	06d4      	lsls	r4, r2, #27
     298:	d4fc      	bmi.n	294 <ResetHandler+0xc4>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     29a:	4a40      	ldr	r2, [pc, #256]	; (39c <ResetHandler+0x1cc>)
     29c:	7993      	ldrb	r3, [r2, #6]
     29e:	f003 030c 	and.w	r3, r3, #12
     2a2:	2b08      	cmp	r3, #8
     2a4:	d1fa      	bne.n	29c <ResetHandler+0xcc>
	//   C2[LP] bit is written to 1
  #else
	// if we need faster than the crystal, turn on the PLL
   #if defined(__MK66FX1M0__)
    #if F_CPU > 120000000
	SMC_PMCTRL = SMC_PMCTRL_RUNM(3); // enter HSRUN mode
     2a6:	4b3e      	ldr	r3, [pc, #248]	; (3a0 <ResetHandler+0x1d0>)
     2a8:	2260      	movs	r2, #96	; 0x60
     2aa:	701a      	strb	r2, [r3, #0]
	while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) ; // wait for HSRUN
     2ac:	3302      	adds	r3, #2
     2ae:	781a      	ldrb	r2, [r3, #0]
     2b0:	2a80      	cmp	r2, #128	; 0x80
     2b2:	d1fc      	bne.n	2ae <ResetHandler+0xde>
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(11);
    #elif F_CPU == 192000000
	MCG_C5 = MCG_C5_PRDIV0(0);
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(8);
    #elif F_CPU == 180000000
	MCG_C5 = MCG_C5_PRDIV0(1);
     2b4:	4b39      	ldr	r3, [pc, #228]	; (39c <ResetHandler+0x1cc>)
     2b6:	2201      	movs	r2, #1
     2b8:	711a      	strb	r2, [r3, #4]
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(29);
     2ba:	225d      	movs	r2, #93	; 0x5d
     2bc:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     2be:	799a      	ldrb	r2, [r3, #6]
     2c0:	0690      	lsls	r0, r2, #26
     2c2:	d5fc      	bpl.n	2be <ResetHandler+0xee>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     2c4:	7999      	ldrb	r1, [r3, #6]
     2c6:	4a35      	ldr	r2, [pc, #212]	; (39c <ResetHandler+0x1cc>)
     2c8:	0649      	lsls	r1, r1, #25
     2ca:	d5fb      	bpl.n	2c4 <ResetHandler+0xf4>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(3);
#elif F_CPU == 180000000
	// config divisors: 180 MHz core, 60 MHz bus, 25.7 MHz flash, USB = IRC48M
	#if F_BUS == 60000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(2) | SIM_CLKDIV1_OUTDIV4(6);
     2cc:	4b35      	ldr	r3, [pc, #212]	; (3a4 <ResetHandler+0x1d4>)
     2ce:	4936      	ldr	r1, [pc, #216]	; (3a8 <ResetHandler+0x1d8>)
     2d0:	6019      	str	r1, [r3, #0]
	#elif F_BUS == 90000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(6);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(0);
     2d2:	2100      	movs	r1, #0
     2d4:	6059      	str	r1, [r3, #4]
#error "Error, F_CPU must be 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2d6:	2320      	movs	r3, #32
     2d8:	7013      	strb	r3, [r2, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2da:	7993      	ldrb	r3, [r2, #6]
     2dc:	f003 030c 	and.w	r3, r3, #12
     2e0:	2b0c      	cmp	r3, #12
     2e2:	d1fa      	bne.n	2da <ResetHandler+0x10a>
	// now we're in PEE mode
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 216000000 || F_CPU == 180000000
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2e4:	4b31      	ldr	r3, [pc, #196]	; (3ac <ResetHandler+0x1dc>)
     2e6:	4a32      	ldr	r2, [pc, #200]	; (3b0 <ResetHandler+0x1e0>)
     2e8:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2ea:	4b32      	ldr	r3, [pc, #200]	; (3b4 <ResetHandler+0x1e4>)
     2ec:	4a32      	ldr	r2, [pc, #200]	; (3b8 <ResetHandler+0x1e8>)
     2ee:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2f0:	2200      	movs	r2, #0
     2f2:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2f4:	2207      	movs	r2, #7
     2f6:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2fa:	4a30      	ldr	r2, [pc, #192]	; (3bc <ResetHandler+0x1ec>)
     2fc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     300:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     302:	f00e fcc9 	bl	ec98 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     306:	4b17      	ldr	r3, [pc, #92]	; (364 <ResetHandler+0x194>)
     308:	681b      	ldr	r3, [r3, #0]
     30a:	07da      	lsls	r2, r3, #31
     30c:	d505      	bpl.n	31a <ResetHandler+0x14a>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     30e:	482c      	ldr	r0, [pc, #176]	; (3c0 <ResetHandler+0x1f0>)
     310:	f00e fcb0 	bl	ec74 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     314:	4b2b      	ldr	r3, [pc, #172]	; (3c4 <ResetHandler+0x1f4>)
     316:	4a2c      	ldr	r2, [pc, #176]	; (3c8 <ResetHandler+0x1f8>)
     318:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     31a:	4b2c      	ldr	r3, [pc, #176]	; (3cc <ResetHandler+0x1fc>)
     31c:	781b      	ldrb	r3, [r3, #0]
     31e:	065b      	lsls	r3, r3, #25
     320:	d509      	bpl.n	336 <ResetHandler+0x166>
     322:	4c28      	ldr	r4, [pc, #160]	; (3c4 <ResetHandler+0x1f4>)
     324:	4b28      	ldr	r3, [pc, #160]	; (3c8 <ResetHandler+0x1f8>)
     326:	6822      	ldr	r2, [r4, #0]
     328:	429a      	cmp	r2, r3
     32a:	d104      	bne.n	336 <ResetHandler+0x166>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     32c:	4824      	ldr	r0, [pc, #144]	; (3c0 <ResetHandler+0x1f0>)
     32e:	f00e fca1 	bl	ec74 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     332:	2300      	movs	r3, #0
     334:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     336:	f011 fd3d 	bl	11db4 <__libc_init_array>

	startup_late_hook();
     33a:	f00e fa61 	bl	e800 <startup_late_hook>
	main();
     33e:	f00e f995 	bl	e66c <main>
     342:	e7fe      	b.n	342 <ResetHandler+0x172>
     344:	4005200e 	.word	0x4005200e
     348:	40048030 	.word	0x40048030
     34c:	00043f82 	.word	0x00043f82
     350:	2b000001 	.word	0x2b000001
     354:	e000ed88 	.word	0xe000ed88
     358:	e0082000 	.word	0xe0082000
     35c:	85000003 	.word	0x85000003
     360:	4003d010 	.word	0x4003d010
     364:	4003d014 	.word	0x4003d014
     368:	4007d002 	.word	0x4007d002
     36c:	4007e000 	.word	0x4007e000
     370:	1fff5560 	.word	0x1fff5560
     374:	00017d30 	.word	0x00017d30
     378:	1fff4930 	.word	0x1fff4930
     37c:	1fff5560 	.word	0x1fff5560
     380:	1fff6c68 	.word	0x1fff6c68
     384:	1fff4400 	.word	0x1fff4400
     388:	00000000 	.word	0x00000000
     38c:	e000e400 	.word	0xe000e400
     390:	e000e464 	.word	0xe000e464
     394:	e000ed08 	.word	0xe000ed08
     398:	40065000 	.word	0x40065000
     39c:	40064000 	.word	0x40064000
     3a0:	4007e001 	.word	0x4007e001
     3a4:	40048044 	.word	0x40048044
     3a8:	02060000 	.word	0x02060000
     3ac:	40048004 	.word	0x40048004
     3b0:	000710c0 	.word	0x000710c0
     3b4:	e000e014 	.word	0xe000e014
     3b8:	0002bf1f 	.word	0x0002bf1f
     3bc:	20200000 	.word	0x20200000
     3c0:	5c65d586 	.word	0x5c65d586
     3c4:	4003e01c 	.word	0x4003e01c
     3c8:	5a94c3a5 	.word	0x5a94c3a5
     3cc:	4007f000 	.word	0x4007f000
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff5560 	.word	0x1fff5560
     42c:	00000000 	.word	0x00000000
     430:	00017d2c 	.word	0x00017d2c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff5564 	.word	0x1fff5564
     460:	00017d2c 	.word	0x00017d2c
     464:	1fff5560 	.word	0x1fff5560
     468:	00000000 	.word	0x00000000

0000046c <SnoozeBlock::wakeupIsr()>:
    }
protected:
    /***********************************************************************************
     *  Fired after waking from LLS-VLLS sleep modes
     ***********************************************************************************/
    static void wakeupIsr( void ) {
     46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    
    static inline
    uint32_t llwu_clear_flags( void ) {
        
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
     46e:	495b      	ldr	r1, [pc, #364]	; (5dc <SnoozeBlock::wakeupIsr()+0x170>)
     470:	4d5b      	ldr	r5, [pc, #364]	; (5e0 <SnoozeBlock::wakeupIsr()+0x174>)
     472:	4c5c      	ldr	r4, [pc, #368]	; (5e4 <SnoozeBlock::wakeupIsr()+0x178>)
     474:	782a      	ldrb	r2, [r5, #0]
     476:	f894 c000 	ldrb.w	ip, [r4]
     47a:	780b      	ldrb	r3, [r1, #0]
     47c:	485a      	ldr	r0, [pc, #360]	; (5e8 <SnoozeBlock::wakeupIsr()+0x17c>)
        LLWU_PF1 = 0xFF;
        LLWU_PF2 = 0xFF;
        LLWU_PF3 = 0xFF;
        LLWU_PF4 = 0xFF;
     47e:	f8df e184 	ldr.w	lr, [pc, #388]	; 604 <SnoozeBlock::wakeupIsr()+0x198>
        LLWU_MF5 = 0xFF;
        LLWU_FILT1 = 0x80;
     482:	4f5a      	ldr	r7, [pc, #360]	; (5ec <SnoozeBlock::wakeupIsr()+0x180>)
        LLWU_FILT2 = 0x80;
     484:	4e5a      	ldr	r6, [pc, #360]	; (5f0 <SnoozeBlock::wakeupIsr()+0x184>)
        
        llwuMask.llwuFlag = llwu_clear_flags( );
     486:	041b      	lsls	r3, r3, #16
     488:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
     48c:	4313      	orrs	r3, r2
    
    static inline
    uint32_t llwu_clear_flags( void ) {
        
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
     48e:	7802      	ldrb	r2, [r0, #0]
__attribute__((always_inline, unused));

static inline
CLOCK_MODE mcg_mode( void ) {
    // check if in FEI mode
    if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x00 ) &&   // check CLKS mux has selcted FLL output
     490:	f8df c164 	ldr.w	ip, [pc, #356]	; 5f8 <SnoozeBlock::wakeupIsr()+0x18c>
     494:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        LLWU_PF1 = 0xFF;
     498:	22ff      	movs	r2, #255	; 0xff
     49a:	702a      	strb	r2, [r5, #0]
        LLWU_PF2 = 0xFF;
     49c:	7022      	strb	r2, [r4, #0]
        LLWU_PF3 = 0xFF;
     49e:	700a      	strb	r2, [r1, #0]
        LLWU_PF4 = 0xFF;
        LLWU_MF5 = 0xFF;
        LLWU_FILT1 = 0x80;
     4a0:	2180      	movs	r1, #128	; 0x80
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
        LLWU_PF1 = 0xFF;
        LLWU_PF2 = 0xFF;
        LLWU_PF3 = 0xFF;
        LLWU_PF4 = 0xFF;
     4a2:	f88e 2000 	strb.w	r2, [lr]
        LLWU_MF5 = 0xFF;
     4a6:	7002      	strb	r2, [r0, #0]
        LLWU_FILT1 = 0x80;
     4a8:	7039      	strb	r1, [r7, #0]
        LLWU_FILT2 = 0x80;
     4aa:	7031      	strb	r1, [r6, #0]
     4ac:	f89c 2006 	ldrb.w	r2, [ip, #6]
     4b0:	4950      	ldr	r1, [pc, #320]	; (5f4 <SnoozeBlock::wakeupIsr()+0x188>)
        ( MCG_S & MCG_S_IREFST ) &&                                             // check FLL ref is internal ref clk
     4b2:	f012 0f0c 	tst.w	r2, #12
     4b6:	610b      	str	r3, [r1, #16]
     4b8:	d103      	bne.n	4c2 <SnoozeBlock::wakeupIsr()+0x56>
     4ba:	f89c 3006 	ldrb.w	r3, [ip, #6]
__attribute__((always_inline, unused));

static inline
CLOCK_MODE mcg_mode( void ) {
    // check if in FEI mode
    if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x00 ) &&   // check CLKS mux has selcted FLL output
     4be:	06dc      	lsls	r4, r3, #27
     4c0:	d43d      	bmi.n	53e <SnoozeBlock::wakeupIsr()+0xd2>
        ( !(  MCG_S & MCG_S_PLLST ) ) )                                         // check PLLS mux has selected FLL
    {
        return FEI;                                                             // return FEI code
    }
    // Check MCG is in PEE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x03 ) &&  // check CLKS mux has selcted PLL output
     4c2:	4a4d      	ldr	r2, [pc, #308]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     4c4:	7993      	ldrb	r3, [r2, #6]
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     4c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
     4ca:	2b03      	cmp	r3, #3
     4cc:	d041      	beq.n	552 <SnoozeBlock::wakeupIsr()+0xe6>
             ( MCG_S & MCG_S_PLLST ) )                                              // check PLLS mux has selected PLL
    {
        return PEE;                                                                 // return PEE code
    }
    // Check MCG is in PBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
     4ce:	4b4a      	ldr	r3, [pc, #296]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     4d0:	799a      	ldrb	r2, [r3, #6]
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( MCG_S & MCG_S_PLLST ) &&                                             // check PLLS mux has selected PLL
     4d2:	f3c2 0281 	ubfx	r2, r2, #2, #2
     4d6:	2a02      	cmp	r2, #2
     4d8:	d043      	beq.n	562 <SnoozeBlock::wakeupIsr()+0xf6>
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check MCG_C2[LP] bit is not set
    {
        return PBE;                                                                 // return PBE code
    }
    // Check MCG is in FBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&   // check CLKS mux has selcted external reference
     4da:	4a47      	ldr	r2, [pc, #284]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     4dc:	7993      	ldrb	r3, [r2, #6]
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     4de:	f3c3 0381 	ubfx	r3, r3, #2, #2
     4e2:	2b02      	cmp	r3, #2
     4e4:	d054      	beq.n	590 <SnoozeBlock::wakeupIsr()+0x124>
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check MCG_C2[LP] bit is not set
    {
        return FBE;                                                                 // return FBE code
    }
    // Check MCG is in BLPE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
     4e6:	4a44      	ldr	r2, [pc, #272]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     4e8:	7993      	ldrb	r3, [r2, #6]
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     4ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
     4ee:	2b02      	cmp	r3, #2
     4f0:	d062      	beq.n	5b8 <SnoozeBlock::wakeupIsr()+0x14c>
             ( MCG_C2 & MCG_C2_LP ) )                                               // check MCG_C2[LP] bit is set
    {
        return BLPE;                                                                // return BLPE code
    }
    // check if in BLPI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
     4f2:	4a41      	ldr	r2, [pc, #260]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     4f4:	7993      	ldrb	r3, [r2, #6]
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     4f6:	f3c3 0381 	ubfx	r3, r3, #2, #2
     4fa:	2b01      	cmp	r3, #1
     4fc:	d052      	beq.n	5a4 <SnoozeBlock::wakeupIsr()+0x138>
             ( MCG_C2 & MCG_C2_LP ) )                                               // check LP bit is set
    {
        return BLPI;                                                                // return BLPI code
    }
    // check if in FBI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
     4fe:	4a3e      	ldr	r2, [pc, #248]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     500:	7993      	ldrb	r3, [r2, #6]
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     502:	f3c3 0381 	ubfx	r3, r3, #2, #2
     506:	2b01      	cmp	r3, #1
     508:	d05d      	beq.n	5c6 <SnoozeBlock::wakeupIsr()+0x15a>
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check LP bit is clear
    {
        return FBI;                                                                 // return FBI code
    }
    // Check MCG is in FEE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x00 ) &&  // check CLKS mux has selcted FLL
     50a:	4b3b      	ldr	r3, [pc, #236]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     50c:	799a      	ldrb	r2, [r3, #6]
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     50e:	f012 0f0c 	tst.w	r2, #12
     512:	d103      	bne.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
     514:	799a      	ldrb	r2, [r3, #6]
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check LP bit is clear
    {
        return FBI;                                                                 // return FBI code
    }
    // Check MCG is in FEE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x00 ) &&  // check CLKS mux has selcted FLL
     516:	06d2      	lsls	r2, r2, #27
     518:	d400      	bmi.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) )                                         // check PLLS mux has selected FLL
     51a:	799b      	ldrb	r3, [r3, #6]
        pbe_pee( );
        SnoozeBlock *p = SnoozeBlock::root_block[current_block];
     51c:	4d37      	ldr	r5, [pc, #220]	; (5fc <SnoozeBlock::wakeupIsr()+0x190>)
     51e:	4b38      	ldr	r3, [pc, #224]	; (600 <SnoozeBlock::wakeupIsr()+0x194>)
     520:	782a      	ldrb	r2, [r5, #0]
     522:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
        for ( ; p; p = p->next_block[current_block] ) {
     526:	b1dc      	cbz	r4, 560 <SnoozeBlock::wakeupIsr()+0xf4>
            p->clearIsrFlags( );
     528:	6823      	ldr	r3, [r4, #0]
     52a:	4620      	mov	r0, r4
     52c:	689b      	ldr	r3, [r3, #8]
     52e:	4798      	blx	r3
    static void wakeupIsr( void ) {
        
        llwuMask.llwuFlag = llwu_clear_flags( );
        pbe_pee( );
        SnoozeBlock *p = SnoozeBlock::root_block[current_block];
        for ( ; p; p = p->next_block[current_block] ) {
     530:	782b      	ldrb	r3, [r5, #0]
     532:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     536:	6864      	ldr	r4, [r4, #4]
     538:	2c00      	cmp	r4, #0
     53a:	d1f5      	bne.n	528 <SnoozeBlock::wakeupIsr()+0xbc>
     53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline
CLOCK_MODE mcg_mode( void ) {
    // check if in FEI mode
    if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x00 ) &&   // check CLKS mux has selcted FLL output
        ( MCG_S & MCG_S_IREFST ) &&                                             // check FLL ref is internal ref clk
        ( !(  MCG_S & MCG_S_PLLST ) ) )                                         // check PLLS mux has selected FLL
     53e:	f89c 3006 	ldrb.w	r3, [ip, #6]

static inline
CLOCK_MODE mcg_mode( void ) {
    // check if in FEI mode
    if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x00 ) &&   // check CLKS mux has selcted FLL output
        ( MCG_S & MCG_S_IREFST ) &&                                             // check FLL ref is internal ref clk
     542:	0698      	lsls	r0, r3, #26
     544:	d5ea      	bpl.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
        ( !(  MCG_S & MCG_S_PLLST ) ) )                                         // check PLLS mux has selected FLL
    {
        return FEI;                                                             // return FEI code
    }
    // Check MCG is in PEE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x03 ) &&  // check CLKS mux has selcted PLL output
     546:	4a2c      	ldr	r2, [pc, #176]	; (5f8 <SnoozeBlock::wakeupIsr()+0x18c>)
     548:	7993      	ldrb	r3, [r2, #6]
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     54a:	f3c3 0381 	ubfx	r3, r3, #2, #2
     54e:	2b03      	cmp	r3, #3
     550:	d1bd      	bne.n	4ce <SnoozeBlock::wakeupIsr()+0x62>
     552:	7993      	ldrb	r3, [r2, #6]
        ( !(  MCG_S & MCG_S_PLLST ) ) )                                         // check PLLS mux has selected FLL
    {
        return FEI;                                                             // return FEI code
    }
    // Check MCG is in PEE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x03 ) &&  // check CLKS mux has selcted PLL output
     554:	06d9      	lsls	r1, r3, #27
     556:	d4ba      	bmi.n	4ce <SnoozeBlock::wakeupIsr()+0x62>
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( MCG_S & MCG_S_PLLST ) )                                              // check PLLS mux has selected PLL
     558:	7993      	ldrb	r3, [r2, #6]
    {
        return FEI;                                                             // return FEI code
    }
    // Check MCG is in PEE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x03 ) &&  // check CLKS mux has selcted PLL output
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     55a:	069b      	lsls	r3, r3, #26
     55c:	d4de      	bmi.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
     55e:	e7b6      	b.n	4ce <SnoozeBlock::wakeupIsr()+0x62>
     560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    {
        return PEE;                                                                 // return PEE code
    }
    // Check MCG is in PBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     562:	799a      	ldrb	r2, [r3, #6]
             ( MCG_S & MCG_S_PLLST ) )                                              // check PLLS mux has selected PLL
    {
        return PEE;                                                                 // return PEE code
    }
    // Check MCG is in PBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
     564:	06d7      	lsls	r7, r2, #27
     566:	d4b8      	bmi.n	4da <SnoozeBlock::wakeupIsr()+0x6e>
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( MCG_S & MCG_S_PLLST ) &&                                             // check PLLS mux has selected PLL
     568:	799a      	ldrb	r2, [r3, #6]
    {
        return PEE;                                                                 // return PEE code
    }
    // Check MCG is in PBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     56a:	0696      	lsls	r6, r2, #26
     56c:	d5b5      	bpl.n	4da <SnoozeBlock::wakeupIsr()+0x6e>
             ( MCG_S & MCG_S_PLLST ) &&                                             // check PLLS mux has selected PLL
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check MCG_C2[LP] bit is not set
     56e:	7859      	ldrb	r1, [r3, #1]
        return PEE;                                                                 // return PEE code
    }
    // Check MCG is in PBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( MCG_S & MCG_S_PLLST ) &&                                             // check PLLS mux has selected PLL
     570:	f001 0102 	and.w	r1, r1, #2
     574:	f001 02ff 	and.w	r2, r1, #255	; 0xff
     578:	2900      	cmp	r1, #0
     57a:	d1ae      	bne.n	4da <SnoozeBlock::wakeupIsr()+0x6e>
    // Check MCG is in PBE mode
    if ( mcg_mode( ) != PBE ) return;
    // we're in PBE mode
    // switch to PLL as clock source, FLL input = 16 MHz / 512
    MCG_C1 = 0x00;
    MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
     57c:	2120      	movs	r1, #32
void pbe_pee( void ) {
    // Check MCG is in PBE mode
    if ( mcg_mode( ) != PBE ) return;
    // we're in PBE mode
    // switch to PLL as clock source, FLL input = 16 MHz / 512
    MCG_C1 = 0x00;
     57e:	701a      	strb	r2, [r3, #0]
    MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
    // wait for PLL clock to be used
    while ( ( MCG_S & MCG_S_CLKST_MASK ) != MCG_S_CLKST( 0x03 ) ) ;
     580:	461a      	mov	r2, r3
    // Check MCG is in PBE mode
    if ( mcg_mode( ) != PBE ) return;
    // we're in PBE mode
    // switch to PLL as clock source, FLL input = 16 MHz / 512
    MCG_C1 = 0x00;
    MCG_C1 = MCG_C1_CLKS( 0 ) | MCG_C1_FRDIV( 4 );
     582:	7019      	strb	r1, [r3, #0]
    // wait for PLL clock to be used
    while ( ( MCG_S & MCG_S_CLKST_MASK ) != MCG_S_CLKST( 0x03 ) ) ;
     584:	7993      	ldrb	r3, [r2, #6]
     586:	f003 030c 	and.w	r3, r3, #12
     58a:	2b0c      	cmp	r3, #12
     58c:	d1fa      	bne.n	584 <SnoozeBlock::wakeupIsr()+0x118>
     58e:	e7c5      	b.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
    {
        return PBE;                                                                 // return PBE code
    }
    // Check MCG is in FBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&   // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     590:	7993      	ldrb	r3, [r2, #6]
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check MCG_C2[LP] bit is not set
    {
        return PBE;                                                                 // return PBE code
    }
    // Check MCG is in FBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&   // check CLKS mux has selcted external reference
     592:	06dd      	lsls	r5, r3, #27
     594:	d4a7      	bmi.n	4e6 <SnoozeBlock::wakeupIsr()+0x7a>
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     596:	7993      	ldrb	r3, [r2, #6]
    {
        return PBE;                                                                 // return PBE code
    }
    // Check MCG is in FBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&   // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     598:	069c      	lsls	r4, r3, #26
     59a:	d4a4      	bmi.n	4e6 <SnoozeBlock::wakeupIsr()+0x7a>
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check MCG_C2[LP] bit is not set
     59c:	7853      	ldrb	r3, [r2, #1]
        return PBE;                                                                 // return PBE code
    }
    // Check MCG is in FBE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&   // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     59e:	0798      	lsls	r0, r3, #30
     5a0:	d5bc      	bpl.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
     5a2:	e7a0      	b.n	4e6 <SnoozeBlock::wakeupIsr()+0x7a>
    {
        return BLPE;                                                                // return BLPE code
    }
    // check if in BLPI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
     5a4:	7993      	ldrb	r3, [r2, #6]
             ( MCG_C2 & MCG_C2_LP ) )                                               // check MCG_C2[LP] bit is set
    {
        return BLPE;                                                                // return BLPE code
    }
    // check if in BLPI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
     5a6:	06df      	lsls	r7, r3, #27
     5a8:	d5a9      	bpl.n	4fe <SnoozeBlock::wakeupIsr()+0x92>
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     5aa:	7993      	ldrb	r3, [r2, #6]
    {
        return BLPE;                                                                // return BLPE code
    }
    // check if in BLPI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
     5ac:	069e      	lsls	r6, r3, #26
     5ae:	d4a6      	bmi.n	4fe <SnoozeBlock::wakeupIsr()+0x92>
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
             ( MCG_C2 & MCG_C2_LP ) )                                               // check LP bit is set
     5b0:	7853      	ldrb	r3, [r2, #1]
        return BLPE;                                                                // return BLPE code
    }
    // check if in BLPI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     5b2:	079d      	lsls	r5, r3, #30
     5b4:	d4b2      	bmi.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
     5b6:	e7a2      	b.n	4fe <SnoozeBlock::wakeupIsr()+0x92>
    {
        return FBE;                                                                 // return FBE code
    }
    // Check MCG is in BLPE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     5b8:	7993      	ldrb	r3, [r2, #6]
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check MCG_C2[LP] bit is not set
    {
        return FBE;                                                                 // return FBE code
    }
    // Check MCG is in BLPE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
     5ba:	06d9      	lsls	r1, r3, #27
     5bc:	d499      	bmi.n	4f2 <SnoozeBlock::wakeupIsr()+0x86>
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
             ( MCG_C2 & MCG_C2_LP ) )                                               // check MCG_C2[LP] bit is set
     5be:	7853      	ldrb	r3, [r2, #1]
    {
        return FBE;                                                                 // return FBE code
    }
    // Check MCG is in BLPE mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x02 ) &&  // check CLKS mux has selcted external reference
             ( !( MCG_S & MCG_S_IREFST ) ) &&                                       // check FLL ref is external ref clk
     5c0:	079b      	lsls	r3, r3, #30
     5c2:	d4ab      	bmi.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
     5c4:	e795      	b.n	4f2 <SnoozeBlock::wakeupIsr()+0x86>
    {
        return BLPI;                                                                // return BLPI code
    }
    // check if in FBI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
     5c6:	7993      	ldrb	r3, [r2, #6]
             ( MCG_C2 & MCG_C2_LP ) )                                               // check LP bit is set
    {
        return BLPI;                                                                // return BLPI code
    }
    // check if in FBI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
     5c8:	06dc      	lsls	r4, r3, #27
     5ca:	d59e      	bpl.n	50a <SnoozeBlock::wakeupIsr()+0x9e>
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     5cc:	7993      	ldrb	r3, [r2, #6]
    {
        return BLPI;                                                                // return BLPI code
    }
    // check if in FBI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
     5ce:	0698      	lsls	r0, r3, #26
     5d0:	d49b      	bmi.n	50a <SnoozeBlock::wakeupIsr()+0x9e>
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
             ( !( MCG_C2 & MCG_C2_LP ) ) )                                          // check LP bit is clear
     5d2:	7853      	ldrb	r3, [r2, #1]
        return BLPI;                                                                // return BLPI code
    }
    // check if in FBI mode
    else if ( ( ( ( MCG_S & MCG_S_CLKST_MASK ) >> MCG_S_CLKST_SHIFT ) == 0x01 ) &&  // check CLKS mux has selcted int ref clk
             ( MCG_S & MCG_S_IREFST ) &&                                            // check FLL ref is internal ref clk
             ( !( MCG_S & MCG_S_PLLST ) ) &&                                        // check PLLS mux has selected FLL
     5d4:	0799      	lsls	r1, r3, #30
     5d6:	d5a1      	bpl.n	51c <SnoozeBlock::wakeupIsr()+0xb0>
     5d8:	e797      	b.n	50a <SnoozeBlock::wakeupIsr()+0x9e>
     5da:	bf00      	nop
     5dc:	4007c00b 	.word	0x4007c00b
     5e0:	4007c009 	.word	0x4007c009
     5e4:	4007c00a 	.word	0x4007c00a
     5e8:	4007c00d 	.word	0x4007c00d
     5ec:	4007c00e 	.word	0x4007c00e
     5f0:	4007c00f 	.word	0x4007c00f
     5f4:	1fff6c3c 	.word	0x1fff6c3c
     5f8:	40064000 	.word	0x40064000
     5fc:	1fff6664 	.word	0x1fff6664
     600:	1fff6624 	.word	0x1fff6624
     604:	4007c00c 	.word	0x4007c00c

00000608 <SnoozeBlock::~SnoozeBlock()>:
    /***********************************************************************************
     *  Deconstructor - Deallocate "this" SnoozeBlock
     ***********************************************************************************/
    ~SnoozeBlock ( void ) {

        if ( local_block == -1 ) return;
     608:	f990 1024 	ldrsb.w	r1, [r0, #36]	; 0x24
    }
    
    /***********************************************************************************
     *  Deconstructor - Deallocate "this" SnoozeBlock
     ***********************************************************************************/
    ~SnoozeBlock ( void ) {
     60c:	4b10      	ldr	r3, [pc, #64]	; (650 <SnoozeBlock::~SnoozeBlock()+0x48>)
     60e:	6003      	str	r3, [r0, #0]

        if ( local_block == -1 ) return;
     610:	1c4b      	adds	r3, r1, #1
     612:	d006      	beq.n	622 <SnoozeBlock::~SnoozeBlock()+0x1a>
    }
    
    /***********************************************************************************
     *  Deconstructor - Deallocate "this" SnoozeBlock
     ***********************************************************************************/
    ~SnoozeBlock ( void ) {
     614:	b4f0      	push	{r4, r5, r6, r7}

        if ( local_block == -1 ) return;
        if ( root_class_address[local_block] == this ) {
     616:	4e0f      	ldr	r6, [pc, #60]	; (654 <SnoozeBlock::~SnoozeBlock()+0x4c>)
     618:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
     61c:	4298      	cmp	r0, r3
     61e:	d001      	beq.n	624 <SnoozeBlock::~SnoozeBlock()+0x1c>
            }
            root_block[local_block] = NULL;
            root_class_address[local_block] = NULL;
            global_block_count--;
        }
    }
     620:	bcf0      	pop	{r4, r5, r6, r7}
     622:	4770      	bx	lr
    ~SnoozeBlock ( void ) {

        if ( local_block == -1 ) return;
        if ( root_class_address[local_block] == this ) {
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
     624:	4f0c      	ldr	r7, [pc, #48]	; (658 <SnoozeBlock::~SnoozeBlock()+0x50>)
     626:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
            u = p;
            while ( p != NULL ) {
     62a:	b133      	cbz	r3, 63a <SnoozeBlock::~SnoozeBlock()+0x32>
     62c:	008d      	lsls	r5, r1, #2
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
     62e:	2400      	movs	r4, #0
     630:	195a      	adds	r2, r3, r5
        if ( root_class_address[local_block] == this ) {
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            u = p;
            while ( p != NULL ) {
                p = p->next_block[local_block];
     632:	6853      	ldr	r3, [r2, #4]
                u->next_block[local_block] = NULL;
     634:	6054      	str	r4, [r2, #4]
        if ( local_block == -1 ) return;
        if ( root_class_address[local_block] == this ) {
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            u = p;
            while ( p != NULL ) {
     636:	2b00      	cmp	r3, #0
     638:	d1fa      	bne.n	630 <SnoozeBlock::~SnoozeBlock()+0x28>
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
            root_class_address[local_block] = NULL;
            global_block_count--;
     63a:	4c08      	ldr	r4, [pc, #32]	; (65c <SnoozeBlock::~SnoozeBlock()+0x54>)
     63c:	7823      	ldrb	r3, [r4, #0]
            while ( p != NULL ) {
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
     63e:	2200      	movs	r2, #0
            root_class_address[local_block] = NULL;
            global_block_count--;
     640:	3b01      	subs	r3, #1
     642:	7023      	strb	r3, [r4, #0]
            while ( p != NULL ) {
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
     644:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
            root_class_address[local_block] = NULL;
     648:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
     64c:	e7e8      	b.n	620 <SnoozeBlock::~SnoozeBlock()+0x18>
     64e:	bf00      	nop
     650:	00016b20 	.word	0x00016b20
     654:	1fff6644 	.word	0x1fff6644
     658:	1fff6624 	.word	0x1fff6624
     65c:	1fff6665 	.word	0x1fff6665

00000660 <SnoozeBlock::enableDriver()>:
    }
    
    /***********************************************************************************
     *  call drivers enable functions
     ***********************************************************************************/
    virtual void enableDriver ( void ) {
     660:	b538      	push	{r3, r4, r5, lr}
        if ( local_block == -1 ) return;
     662:	f990 5024 	ldrsb.w	r5, [r0, #36]	; 0x24
     666:	1c6b      	adds	r3, r5, #1
     668:	d01b      	beq.n	6a2 <SnoozeBlock::enableDriver()+0x42>
        current_block = local_block;
        source = -1;
        SnoozeBlock *p = SnoozeBlock::root_block[local_block];
     66a:	4b0e      	ldr	r3, [pc, #56]	; (6a4 <SnoozeBlock::enableDriver()+0x44>)
    /***********************************************************************************
     *  call drivers enable functions
     ***********************************************************************************/
    virtual void enableDriver ( void ) {
        if ( local_block == -1 ) return;
        current_block = local_block;
     66c:	490e      	ldr	r1, [pc, #56]	; (6a8 <SnoozeBlock::enableDriver()+0x48>)
        source = -1;
        SnoozeBlock *p = SnoozeBlock::root_block[local_block];
     66e:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
     *  call drivers enable functions
     ***********************************************************************************/
    virtual void enableDriver ( void ) {
        if ( local_block == -1 ) return;
        current_block = local_block;
        source = -1;
     672:	4b0e      	ldr	r3, [pc, #56]	; (6ac <SnoozeBlock::enableDriver()+0x4c>)
    /***********************************************************************************
     *  call drivers enable functions
     ***********************************************************************************/
    virtual void enableDriver ( void ) {
        if ( local_block == -1 ) return;
        current_block = local_block;
     674:	b2ed      	uxtb	r5, r5
        source = -1;
     676:	f04f 32ff 	mov.w	r2, #4294967295
    /***********************************************************************************
     *  call drivers enable functions
     ***********************************************************************************/
    virtual void enableDriver ( void ) {
        if ( local_block == -1 ) return;
        current_block = local_block;
     67a:	700d      	strb	r5, [r1, #0]
        source = -1;
     67c:	601a      	str	r2, [r3, #0]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock
     ***********************************************************************************/
    void forwardList( SnoozeBlock *p, uint8_t idx ) {
        for ( ; p; p = p->next_block[idx] ) {
     67e:	b184      	cbz	r4, 6a2 <SnoozeBlock::enableDriver()+0x42>
     680:	00ad      	lsls	r5, r5, #2
     682:	e002      	b.n	68a <SnoozeBlock::enableDriver()+0x2a>
     684:	442c      	add	r4, r5
     686:	6864      	ldr	r4, [r4, #4]
     688:	b15c      	cbz	r4, 6a2 <SnoozeBlock::enableDriver()+0x42>
            if ( p->isUsed ) {
     68a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
     68e:	2b00      	cmp	r3, #0
     690:	d0f8      	beq.n	684 <SnoozeBlock::enableDriver()+0x24>
                p->enableDriver( );
     692:	6823      	ldr	r3, [r4, #0]
     694:	4620      	mov	r0, r4
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock
     ***********************************************************************************/
    void forwardList( SnoozeBlock *p, uint8_t idx ) {
        for ( ; p; p = p->next_block[idx] ) {
     696:	442c      	add	r4, r5
            if ( p->isUsed ) {
                p->enableDriver( );
     698:	681b      	ldr	r3, [r3, #0]
     69a:	4798      	blx	r3
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock
     ***********************************************************************************/
    void forwardList( SnoozeBlock *p, uint8_t idx ) {
        for ( ; p; p = p->next_block[idx] ) {
     69c:	6864      	ldr	r4, [r4, #4]
     69e:	2c00      	cmp	r4, #0
     6a0:	d1f3      	bne.n	68a <SnoozeBlock::enableDriver()+0x2a>
     6a2:	bd38      	pop	{r3, r4, r5, pc}
     6a4:	1fff6624 	.word	0x1fff6624
     6a8:	1fff6664 	.word	0x1fff6664
     6ac:	1fff42f0 	.word	0x1fff42f0

000006b0 <SnoozeBlock::clearIsrFlags()>:
    }
    
    /***********************************************************************************
     *  drivers override this function to clear isr flags, gets called in wakeup isr
     ***********************************************************************************/
    virtual void clearIsrFlags ( void ) {
     6b0:	4770      	bx	lr
     6b2:	bf00      	nop

000006b4 <SnoozeDigital::~SnoozeDigital()>:
    /***********************************************************************************
     *  Deconstructor - Deallocate "this" SnoozeBlock
     ***********************************************************************************/
    ~SnoozeBlock ( void ) {

        if ( local_block == -1 ) return;
     6b4:	f990 1024 	ldrsb.w	r1, [r0, #36]	; 0x24
    }
    
    /***********************************************************************************
     *  Deconstructor - Deallocate "this" SnoozeBlock
     ***********************************************************************************/
    ~SnoozeBlock ( void ) {
     6b8:	4b10      	ldr	r3, [pc, #64]	; (6fc <SnoozeDigital::~SnoozeDigital()+0x48>)
     6ba:	6003      	str	r3, [r0, #0]

        if ( local_block == -1 ) return;
     6bc:	1c4b      	adds	r3, r1, #1
     6be:	d006      	beq.n	6ce <SnoozeDigital::~SnoozeDigital()+0x1a>
#define SnoozeDigital_h

#include "Arduino.h"
#include "SnoozeBlock.h"

class SnoozeDigital : public SnoozeBlock {
     6c0:	b4f0      	push	{r4, r5, r6, r7}
        if ( root_class_address[local_block] == this ) {
     6c2:	4e0f      	ldr	r6, [pc, #60]	; (700 <SnoozeDigital::~SnoozeDigital()+0x4c>)
     6c4:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
     6c8:	4298      	cmp	r0, r3
     6ca:	d001      	beq.n	6d0 <SnoozeDigital::~SnoozeDigital()+0x1c>
     6cc:	bcf0      	pop	{r4, r5, r6, r7}
     6ce:	4770      	bx	lr
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
     6d0:	4f0c      	ldr	r7, [pc, #48]	; (704 <SnoozeDigital::~SnoozeDigital()+0x50>)
     6d2:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
            u = p;
            while ( p != NULL ) {
     6d6:	b133      	cbz	r3, 6e6 <SnoozeDigital::~SnoozeDigital()+0x32>
     6d8:	008d      	lsls	r5, r1, #2
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
     6da:	2400      	movs	r4, #0
     6dc:	195a      	adds	r2, r3, r5
        if ( root_class_address[local_block] == this ) {
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            u = p;
            while ( p != NULL ) {
                p = p->next_block[local_block];
     6de:	6853      	ldr	r3, [r2, #4]
                u->next_block[local_block] = NULL;
     6e0:	6054      	str	r4, [r2, #4]
        if ( local_block == -1 ) return;
        if ( root_class_address[local_block] == this ) {
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            u = p;
            while ( p != NULL ) {
     6e2:	2b00      	cmp	r3, #0
     6e4:	d1fa      	bne.n	6dc <SnoozeDigital::~SnoozeDigital()+0x28>
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
            root_class_address[local_block] = NULL;
            global_block_count--;
     6e6:	4c08      	ldr	r4, [pc, #32]	; (708 <SnoozeDigital::~SnoozeDigital()+0x54>)
     6e8:	7823      	ldrb	r3, [r4, #0]
            while ( p != NULL ) {
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
     6ea:	2200      	movs	r2, #0
            root_class_address[local_block] = NULL;
            global_block_count--;
     6ec:	3b01      	subs	r3, #1
     6ee:	7023      	strb	r3, [r4, #0]
            while ( p != NULL ) {
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
     6f0:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
            root_class_address[local_block] = NULL;
     6f4:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
     6f8:	e7e8      	b.n	6cc <SnoozeDigital::~SnoozeDigital()+0x18>
     6fa:	bf00      	nop
     6fc:	00016b20 	.word	0x00016b20
     700:	1fff6644 	.word	0x1fff6644
     704:	1fff6624 	.word	0x1fff6624
     708:	1fff6665 	.word	0x1fff6665

0000070c <SnoozeAlarm::~SnoozeAlarm()>:
    /***********************************************************************************
     *  Deconstructor - Deallocate "this" SnoozeBlock
     ***********************************************************************************/
    ~SnoozeBlock ( void ) {

        if ( local_block == -1 ) return;
     70c:	f990 1024 	ldrsb.w	r1, [r0, #36]	; 0x24
    }
    
    /***********************************************************************************
     *  Deconstructor - Deallocate "this" SnoozeBlock
     ***********************************************************************************/
    ~SnoozeBlock ( void ) {
     710:	4b10      	ldr	r3, [pc, #64]	; (754 <SnoozeAlarm::~SnoozeAlarm()+0x48>)
     712:	6003      	str	r3, [r0, #0]

        if ( local_block == -1 ) return;
     714:	1c4b      	adds	r3, r1, #1
     716:	d006      	beq.n	726 <SnoozeAlarm::~SnoozeAlarm()+0x1a>
#define SnoozeAlarm_h

#include "Arduino.h"
#include "SnoozeBlock.h"

class SnoozeAlarm : public SnoozeBlock {
     718:	b4f0      	push	{r4, r5, r6, r7}
        if ( root_class_address[local_block] == this ) {
     71a:	4e0f      	ldr	r6, [pc, #60]	; (758 <SnoozeAlarm::~SnoozeAlarm()+0x4c>)
     71c:	f856 3021 	ldr.w	r3, [r6, r1, lsl #2]
     720:	4298      	cmp	r0, r3
     722:	d001      	beq.n	728 <SnoozeAlarm::~SnoozeAlarm()+0x1c>
     724:	bcf0      	pop	{r4, r5, r6, r7}
     726:	4770      	bx	lr
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
     728:	4f0c      	ldr	r7, [pc, #48]	; (75c <SnoozeAlarm::~SnoozeAlarm()+0x50>)
     72a:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
            u = p;
            while ( p != NULL ) {
     72e:	b133      	cbz	r3, 73e <SnoozeAlarm::~SnoozeAlarm()+0x32>
     730:	008d      	lsls	r5, r1, #2
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
     732:	2400      	movs	r4, #0
     734:	195a      	adds	r2, r3, r5
        if ( root_class_address[local_block] == this ) {
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            u = p;
            while ( p != NULL ) {
                p = p->next_block[local_block];
     736:	6853      	ldr	r3, [r2, #4]
                u->next_block[local_block] = NULL;
     738:	6054      	str	r4, [r2, #4]
        if ( local_block == -1 ) return;
        if ( root_class_address[local_block] == this ) {
            SnoozeBlock *u;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            u = p;
            while ( p != NULL ) {
     73a:	2b00      	cmp	r3, #0
     73c:	d1fa      	bne.n	734 <SnoozeAlarm::~SnoozeAlarm()+0x28>
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
            root_class_address[local_block] = NULL;
            global_block_count--;
     73e:	4c08      	ldr	r4, [pc, #32]	; (760 <SnoozeAlarm::~SnoozeAlarm()+0x54>)
     740:	7823      	ldrb	r3, [r4, #0]
            while ( p != NULL ) {
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
     742:	2200      	movs	r2, #0
            root_class_address[local_block] = NULL;
            global_block_count--;
     744:	3b01      	subs	r3, #1
     746:	7023      	strb	r3, [r4, #0]
            while ( p != NULL ) {
                p = p->next_block[local_block];
                u->next_block[local_block] = NULL;
                u = p;
            }
            root_block[local_block] = NULL;
     748:	f847 2021 	str.w	r2, [r7, r1, lsl #2]
            root_class_address[local_block] = NULL;
     74c:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
     750:	e7e8      	b.n	724 <SnoozeAlarm::~SnoozeAlarm()+0x18>
     752:	bf00      	nop
     754:	00016b20 	.word	0x00016b20
     758:	1fff6644 	.word	0x1fff6644
     75c:	1fff6624 	.word	0x1fff6624
     760:	1fff6665 	.word	0x1fff6665

00000764 <recInfo::~recInfo()>:
  enum btState bt_state;
	enum bleState ble_state;
};
extern volatile struct wState	working_state;
// Record informations
struct recInfo {
     764:	b510      	push	{r4, lr}
     766:	4604      	mov	r4, r0
     768:	300c      	adds	r0, #12
     76a:	f00d fa29 	bl	dbc0 <String::~String()>
     76e:	4620      	mov	r0, r4
     770:	bd10      	pop	{r4, pc}
     772:	bf00      	nop

00000774 <startup_early_hook>:
     *
     *******************************************************************************/
    void startup_early_hook( void ) __attribute__ ((weak, noinline));
    void startup_early_hook( void ) {
#if defined(KINETISK)
        WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
     774:	4a54      	ldr	r2, [pc, #336]	; (8c8 <startup_early_hook+0x154>)
#elif defined(KINETISL)
        SIM_COPC = 0;  // disable the watchdog
#endif
        if ( PMC_REGSC & PMC_REGSC_ACKISO ) {
     776:	4b55      	ldr	r3, [pc, #340]	; (8cc <startup_early_hook+0x158>)
     *
     *******************************************************************************/
    void startup_early_hook( void ) __attribute__ ((weak, noinline));
    void startup_early_hook( void ) {
#if defined(KINETISK)
        WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
     778:	2110      	movs	r1, #16
     77a:	8011      	strh	r1, [r2, #0]
#elif defined(KINETISL)
        SIM_COPC = 0;  // disable the watchdog
#endif
        if ( PMC_REGSC & PMC_REGSC_ACKISO ) {
     77c:	781b      	ldrb	r3, [r3, #0]
     77e:	071b      	lsls	r3, r3, #28
     780:	d54a      	bpl.n	818 <startup_early_hook+0xa4>
     *
     *       startup_early_hook -
     *
     *******************************************************************************/
    void startup_early_hook( void ) __attribute__ ((weak, noinline));
    void startup_early_hook( void ) {
     782:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    static inline
    uint32_t llwu_clear_flags( void ) {
        
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
     784:	4852      	ldr	r0, [pc, #328]	; (8d0 <startup_early_hook+0x15c>)
     786:	4d53      	ldr	r5, [pc, #332]	; (8d4 <startup_early_hook+0x160>)
     788:	4e53      	ldr	r6, [pc, #332]	; (8d8 <startup_early_hook+0x164>)
     78a:	4c54      	ldr	r4, [pc, #336]	; (8dc <startup_early_hook+0x168>)
     78c:	7832      	ldrb	r2, [r6, #0]
     78e:	782f      	ldrb	r7, [r5, #0]
     790:	7803      	ldrb	r3, [r0, #0]
     792:	f894 c000 	ldrb.w	ip, [r4]
        LLWU_PF1 = 0xFF;
        LLWU_PF2 = 0xFF;
        LLWU_PF3 = 0xFF;
        LLWU_PF4 = 0xFF;
     796:	f8df e168 	ldr.w	lr, [pc, #360]	; 900 <startup_early_hook+0x18c>
    
    static inline
    uint32_t llwu_clear_flags( void ) {
        
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
     79a:	408b      	lsls	r3, r1
     79c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
     7a0:	4313      	orrs	r3, r2
        LLWU_PF1 = 0xFF;
        LLWU_PF2 = 0xFF;
        LLWU_PF3 = 0xFF;
        LLWU_PF4 = 0xFF;
        LLWU_MF5 = 0xFF;
        LLWU_FILT1 = 0x80;
     7a2:	4f4f      	ldr	r7, [pc, #316]	; (8e0 <startup_early_hook+0x16c>)
    static inline
    uint32_t llwu_clear_flags( void ) {
        
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
        LLWU_PF1 = 0xFF;
     7a4:	22ff      	movs	r2, #255	; 0xff
     7a6:	7032      	strb	r2, [r6, #0]
    
    static inline
    uint32_t llwu_clear_flags( void ) {
        
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
     7a8:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        LLWU_PF1 = 0xFF;
        LLWU_PF2 = 0xFF;
     7ac:	702a      	strb	r2, [r5, #0]
        LLWU_PF3 = 0xFF;
     7ae:	7002      	strb	r2, [r0, #0]
        LLWU_PF4 = 0xFF;
        LLWU_MF5 = 0xFF;
        LLWU_FILT1 = 0x80;
     7b0:	2080      	movs	r0, #128	; 0x80
#if defined(HAS_KINETIS_LLWU_32CH)
        uint32_t flag = ( LLWU_PF1 | LLWU_PF2 << 8 | LLWU_PF3 << 16 | LLWU_MF5 << 24 );
        LLWU_PF1 = 0xFF;
        LLWU_PF2 = 0xFF;
        LLWU_PF3 = 0xFF;
        LLWU_PF4 = 0xFF;
     7b2:	f88e 2000 	strb.w	r2, [lr]
        LLWU_MF5 = 0xFF;
     7b6:	7022      	strb	r2, [r4, #0]
        LLWU_FILT1 = 0x80;
     7b8:	7038      	strb	r0, [r7, #0]
        LLWU_FILT2 = 0x80;
     7ba:	7168      	strb	r0, [r5, #5]
    
    static inline
    int llwu_disable( void ) {
        llwu_mask_t *mask = &llwuMask;
#if defined(HAS_KINETIS_LLWU_32CH)
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
     7bc:	07d8      	lsls	r0, r3, #31
        WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
#elif defined(KINETISL)
        SIM_COPC = 0;  // disable the watchdog
#endif
        if ( PMC_REGSC & PMC_REGSC_ACKISO ) {
            llwuMask.llwuFlag = llwu_clear_flags( );// clear flags
     7be:	4a49      	ldr	r2, [pc, #292]	; (8e4 <startup_early_hook+0x170>)
    
    static inline
    int llwu_disable( void ) {
        llwu_mask_t *mask = &llwuMask;
#if defined(HAS_KINETIS_LLWU_32CH)
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
     7c0:	d523      	bpl.n	80a <startup_early_hook+0x96>
     7c2:	231a      	movs	r3, #26
     7c4:	60d3      	str	r3, [r2, #12]
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF5 ) mask->wakeupSource = 35;
    #endif
#endif
        LLWU_PE1 = 0;
        LLWU_PE2 = 0;
        LLWU_PE3 = 0;
     7c6:	4948      	ldr	r1, [pc, #288]	; (8e8 <startup_early_hook+0x174>)
        LLWU_PE4 = 0;
     7c8:	4848      	ldr	r0, [pc, #288]	; (8ec <startup_early_hook+0x178>)
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF3 ) mask->wakeupSource = 34;
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF2 ) mask->wakeupSource = 34;
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF5 ) mask->wakeupSource = 35;
    #endif
#endif
        LLWU_PE1 = 0;
     7ca:	f8df c138 	ldr.w	ip, [pc, #312]	; 904 <startup_early_hook+0x190>
        LLWU_PE2 = 0;
     7ce:	f8df e138 	ldr.w	lr, [pc, #312]	; 908 <startup_early_hook+0x194>
        LLWU_PE3 = 0;
        LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
        LLWU_PE5 = 0;
     7d2:	4f47      	ldr	r7, [pc, #284]	; (8f0 <startup_early_hook+0x17c>)
        LLWU_PE6 = 0;
     7d4:	4e47      	ldr	r6, [pc, #284]	; (8f4 <startup_early_hook+0x180>)
        LLWU_PE7 = 0;
     7d6:	4d48      	ldr	r5, [pc, #288]	; (8f8 <startup_early_hook+0x184>)
        LLWU_PE8 = 0;
     7d8:	4c48      	ldr	r4, [pc, #288]	; (8fc <startup_early_hook+0x188>)
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF3 ) mask->wakeupSource = 34;
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF2 ) mask->wakeupSource = 34;
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF5 ) mask->wakeupSource = 35;
    #endif
#endif
        LLWU_PE1 = 0;
     7da:	2300      	movs	r3, #0
     7dc:	f88c 3000 	strb.w	r3, [ip]
        LLWU_PE6 = 0;
        LLWU_PE7 = 0;
        LLWU_PE8 = 0;
#endif
        mask->PE1 = 0;
        mask->PE2 = 0;
     7e0:	7053      	strb	r3, [r2, #1]
        mask->PE3 = 0;
     7e2:	7093      	strb	r3, [r2, #2]
        mask->PE4 = 0;
     7e4:	70d3      	strb	r3, [r2, #3]
#if defined(HAS_KINETIS_LLWU_32CH)
        mask->PE5 = 0;
     7e6:	7113      	strb	r3, [r2, #4]
        mask->PE6 = 0;
     7e8:	7153      	strb	r3, [r2, #5]
        mask->PE7 = 0;
     7ea:	7193      	strb	r3, [r2, #6]
        mask->PE8 = 0;
     7ec:	71d3      	strb	r3, [r2, #7]
#endif
        LLWU_ME  = mask->ME;
        mask->ME = 0;
        mask->llwuFlag = 0;
     7ee:	6113      	str	r3, [r2, #16]
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF2 ) mask->wakeupSource = 34;
        else if ( ( mask->llwuFlag>>16 ) & LLWU_F3_MWUF5 ) mask->wakeupSource = 35;
    #endif
#endif
        LLWU_PE1 = 0;
        LLWU_PE2 = 0;
     7f0:	f88e 3000 	strb.w	r3, [lr]
        LLWU_PE3 = 0;
     7f4:	700b      	strb	r3, [r1, #0]
        LLWU_PE4 = 0;
     7f6:	7003      	strb	r3, [r0, #0]
        mask->PE5 = 0;
        mask->PE6 = 0;
        mask->PE7 = 0;
        mask->PE8 = 0;
#endif
        LLWU_ME  = mask->ME;
     7f8:	7a10      	ldrb	r0, [r2, #8]
        LLWU_PE1 = 0;
        LLWU_PE2 = 0;
        LLWU_PE3 = 0;
        LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
        LLWU_PE5 = 0;
     7fa:	703b      	strb	r3, [r7, #0]
        mask->PE6 = 0;
        mask->PE7 = 0;
        mask->PE8 = 0;
#endif
        LLWU_ME  = mask->ME;
        mask->ME = 0;
     7fc:	7213      	strb	r3, [r2, #8]
        LLWU_PE2 = 0;
        LLWU_PE3 = 0;
        LLWU_PE4 = 0;
#if defined(HAS_KINETIS_LLWU_32CH)
        LLWU_PE5 = 0;
        LLWU_PE6 = 0;
     7fe:	7033      	strb	r3, [r6, #0]
        LLWU_PE7 = 0;
     800:	702b      	strb	r3, [r5, #0]
        LLWU_PE8 = 0;
     802:	7023      	strb	r3, [r4, #0]
#endif
        mask->PE1 = 0;
     804:	7013      	strb	r3, [r2, #0]
        mask->PE5 = 0;
        mask->PE6 = 0;
        mask->PE7 = 0;
        mask->PE8 = 0;
#endif
        LLWU_ME  = mask->ME;
     806:	7188      	strb	r0, [r1, #6]
     808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static inline
    int llwu_disable( void ) {
        llwu_mask_t *mask = &llwuMask;
#if defined(HAS_KINETIS_LLWU_32CH)
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
        else if ( mask->llwuFlag & LLWU_PF1_WUF3 ) mask->wakeupSource = 33;
     80a:	071f      	lsls	r7, r3, #28
     80c:	d405      	bmi.n	81a <startup_early_hook+0xa6>
        else if ( mask->llwuFlag & LLWU_PF1_WUF4 ) mask->wakeupSource = 4;
     80e:	06de      	lsls	r6, r3, #27
     810:	d506      	bpl.n	820 <startup_early_hook+0xac>
     812:	2304      	movs	r3, #4
     814:	60d3      	str	r3, [r2, #12]
     816:	e7d6      	b.n	7c6 <startup_early_hook+0x52>
     818:	4770      	bx	lr
    static inline
    int llwu_disable( void ) {
        llwu_mask_t *mask = &llwuMask;
#if defined(HAS_KINETIS_LLWU_32CH)
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
        else if ( mask->llwuFlag & LLWU_PF1_WUF3 ) mask->wakeupSource = 33;
     81a:	2321      	movs	r3, #33	; 0x21
     81c:	60d3      	str	r3, [r2, #12]
     81e:	e7d2      	b.n	7c6 <startup_early_hook+0x52>
        else if ( mask->llwuFlag & LLWU_PF1_WUF4 ) mask->wakeupSource = 4;
        else if ( mask->llwuFlag & LLWU_PF1_WUF5 ) mask->wakeupSource = 16;
     820:	069d      	lsls	r5, r3, #26
     822:	d404      	bmi.n	82e <startup_early_hook+0xba>
        else if ( mask->llwuFlag & LLWU_PF1_WUF6 ) mask->wakeupSource = 22;
     824:	065c      	lsls	r4, r3, #25
     826:	d504      	bpl.n	832 <startup_early_hook+0xbe>
     828:	2316      	movs	r3, #22
     82a:	60d3      	str	r3, [r2, #12]
     82c:	e7cb      	b.n	7c6 <startup_early_hook+0x52>
        llwu_mask_t *mask = &llwuMask;
#if defined(HAS_KINETIS_LLWU_32CH)
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
        else if ( mask->llwuFlag & LLWU_PF1_WUF3 ) mask->wakeupSource = 33;
        else if ( mask->llwuFlag & LLWU_PF1_WUF4 ) mask->wakeupSource = 4;
        else if ( mask->llwuFlag & LLWU_PF1_WUF5 ) mask->wakeupSource = 16;
     82e:	60d1      	str	r1, [r2, #12]
     830:	e7c9      	b.n	7c6 <startup_early_hook+0x52>
        else if ( mask->llwuFlag & LLWU_PF1_WUF6 ) mask->wakeupSource = 22;
        else if ( mask->llwuFlag & LLWU_PF1_WUF7 ) mask->wakeupSource = 9;
     832:	0618      	lsls	r0, r3, #24
     834:	d404      	bmi.n	840 <startup_early_hook+0xcc>
        
        else if ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 59;
        else if ( mask->llwuFlag & LLWU_PF1_WUF1 ) mask->wakeupSource = 60;
     836:	0799      	lsls	r1, r3, #30
     838:	d505      	bpl.n	846 <startup_early_hook+0xd2>
     83a:	233c      	movs	r3, #60	; 0x3c
     83c:	60d3      	str	r3, [r2, #12]
     83e:	e7c2      	b.n	7c6 <startup_early_hook+0x52>
        if      ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 26;
        else if ( mask->llwuFlag & LLWU_PF1_WUF3 ) mask->wakeupSource = 33;
        else if ( mask->llwuFlag & LLWU_PF1_WUF4 ) mask->wakeupSource = 4;
        else if ( mask->llwuFlag & LLWU_PF1_WUF5 ) mask->wakeupSource = 16;
        else if ( mask->llwuFlag & LLWU_PF1_WUF6 ) mask->wakeupSource = 22;
        else if ( mask->llwuFlag & LLWU_PF1_WUF7 ) mask->wakeupSource = 9;
     840:	2309      	movs	r3, #9
     842:	60d3      	str	r3, [r2, #12]
     844:	e7bf      	b.n	7c6 <startup_early_hook+0x52>
        
        else if ( mask->llwuFlag & LLWU_PF1_WUF0 ) mask->wakeupSource = 59;
        else if ( mask->llwuFlag & LLWU_PF1_WUF1 ) mask->wakeupSource = 60;
        else if ( mask->llwuFlag & LLWU_PF1_WUF2 ) mask->wakeupSource = 62;
     846:	075f      	lsls	r7, r3, #29
     848:	d502      	bpl.n	850 <startup_early_hook+0xdc>
     84a:	233e      	movs	r3, #62	; 0x3e
     84c:	60d3      	str	r3, [r2, #12]
     84e:	e7ba      	b.n	7c6 <startup_early_hook+0x52>
        
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF8  ) mask->wakeupSource = 10;
     850:	05de      	lsls	r6, r3, #23
     852:	d502      	bpl.n	85a <startup_early_hook+0xe6>
     854:	230a      	movs	r3, #10
     856:	60d3      	str	r3, [r2, #12]
     858:	e7b5      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF9  ) mask->wakeupSource = 13;
     85a:	059d      	lsls	r5, r3, #22
     85c:	d502      	bpl.n	864 <startup_early_hook+0xf0>
     85e:	230d      	movs	r3, #13
     860:	60d3      	str	r3, [r2, #12]
     862:	e7b0      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF10 ) mask->wakeupSource = 11;
     864:	055c      	lsls	r4, r3, #21
     866:	d502      	bpl.n	86e <startup_early_hook+0xfa>
     868:	230b      	movs	r3, #11
     86a:	60d3      	str	r3, [r2, #12]
     86c:	e7ab      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF11 ) mask->wakeupSource = 30;
     86e:	0518      	lsls	r0, r3, #20
     870:	d502      	bpl.n	878 <startup_early_hook+0x104>
     872:	231e      	movs	r3, #30
     874:	60d3      	str	r3, [r2, #12]
     876:	e7a6      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF12 ) mask->wakeupSource = 2;
     878:	04d9      	lsls	r1, r3, #19
     87a:	d502      	bpl.n	882 <startup_early_hook+0x10e>
     87c:	2302      	movs	r3, #2
     87e:	60d3      	str	r3, [r2, #12]
     880:	e7a1      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF13 ) mask->wakeupSource = 7;
     882:	049f      	lsls	r7, r3, #18
     884:	d502      	bpl.n	88c <startup_early_hook+0x118>
     886:	2307      	movs	r3, #7
     888:	60d3      	str	r3, [r2, #12]
     88a:	e79c      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF14 ) mask->wakeupSource = 6;
     88c:	045e      	lsls	r6, r3, #17
     88e:	d502      	bpl.n	896 <startup_early_hook+0x122>
     890:	2306      	movs	r3, #6
     892:	60d3      	str	r3, [r2, #12]
     894:	e797      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF15 ) mask->wakeupSource = 21;
     896:	041d      	lsls	r5, r3, #16
     898:	d502      	bpl.n	8a0 <startup_early_hook+0x12c>
     89a:	2315      	movs	r3, #21
     89c:	60d3      	str	r3, [r2, #12]
     89e:	e792      	b.n	7c6 <startup_early_hook+0x52>
        
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF15 ) mask->wakeupSource = 21;
        else if ( ( mask->llwuFlag>>8 ) & LLWU_PF2_WUF15 ) mask->wakeupSource = 21;
        
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME0 ) mask->wakeupSource = 36;
     8a0:	01dc      	lsls	r4, r3, #7
     8a2:	d502      	bpl.n	8aa <startup_early_hook+0x136>
     8a4:	2324      	movs	r3, #36	; 0x24
     8a6:	60d3      	str	r3, [r2, #12]
     8a8:	e78d      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME1 ) mask->wakeupSource = 34;
     8aa:	0198      	lsls	r0, r3, #6
     8ac:	d502      	bpl.n	8b4 <startup_early_hook+0x140>
     8ae:	2322      	movs	r3, #34	; 0x22
     8b0:	60d3      	str	r3, [r2, #12]
     8b2:	e788      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME4 ) mask->wakeupSource = 37;
     8b4:	00d9      	lsls	r1, r3, #3
     8b6:	d502      	bpl.n	8be <startup_early_hook+0x14a>
     8b8:	2325      	movs	r3, #37	; 0x25
     8ba:	60d3      	str	r3, [r2, #12]
     8bc:	e783      	b.n	7c6 <startup_early_hook+0x52>
        else if ( ( mask->llwuFlag>>24 ) & LLWU_ME_WUME5 ) mask->wakeupSource = 35;
     8be:	009b      	lsls	r3, r3, #2
     8c0:	bf44      	itt	mi
     8c2:	2323      	movmi	r3, #35	; 0x23
     8c4:	60d3      	strmi	r3, [r2, #12]
     8c6:	e77e      	b.n	7c6 <startup_early_hook+0x52>
     8c8:	40052000 	.word	0x40052000
     8cc:	4007d002 	.word	0x4007d002
     8d0:	4007c00b 	.word	0x4007c00b
     8d4:	4007c00a 	.word	0x4007c00a
     8d8:	4007c009 	.word	0x4007c009
     8dc:	4007c00d 	.word	0x4007c00d
     8e0:	4007c00e 	.word	0x4007c00e
     8e4:	1fff6c3c 	.word	0x1fff6c3c
     8e8:	4007c002 	.word	0x4007c002
     8ec:	4007c003 	.word	0x4007c003
     8f0:	4007c004 	.word	0x4007c004
     8f4:	4007c005 	.word	0x4007c005
     8f8:	4007c006 	.word	0x4007c006
     8fc:	4007c007 	.word	0x4007c007
     900:	4007c00c 	.word	0x4007c00c
     904:	4007c000 	.word	0x4007c000
     908:	4007c001 	.word	0x4007c001

0000090c <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)>:
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     90c:	2900      	cmp	r1, #0
     90e:	d076      	beq.n	9fe <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xf2>
     *  Driver list to be called after sleep
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
     910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     914:	460c      	mov	r4, r1
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
     916:	0091      	lsls	r1, r2, #2
     918:	1863      	adds	r3, r4, r1
     *  Driver list to be called after sleep
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
     91a:	b083      	sub	sp, #12
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
     91c:	685d      	ldr	r5, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     91e:	2d00      	cmp	r5, #0
     920:	d057      	beq.n	9d2 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xc6>
            reverseList(p->next_block[idx], idx );
     922:	186b      	adds	r3, r5, r1
     924:	685e      	ldr	r6, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     926:	2e00      	cmp	r6, #0
     928:	d050      	beq.n	9cc <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xc0>
            reverseList(p->next_block[idx], idx );
     92a:	1873      	adds	r3, r6, r1
     92c:	685f      	ldr	r7, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     92e:	2f00      	cmp	r7, #0
     930:	d049      	beq.n	9c6 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xba>
            reverseList(p->next_block[idx], idx );
     932:	187b      	adds	r3, r7, r1
     934:	f8d3 8004 	ldr.w	r8, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     938:	f1b8 0f00 	cmp.w	r8, #0
     93c:	d03c      	beq.n	9b8 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xac>
            reverseList(p->next_block[idx], idx );
     93e:	eb08 0301 	add.w	r3, r8, r1
     942:	f8d3 9004 	ldr.w	r9, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     946:	f1b9 0f00 	cmp.w	r9, #0
     94a:	d032      	beq.n	9b2 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xa6>
            reverseList(p->next_block[idx], idx );
     94c:	eb09 0301 	add.w	r3, r9, r1
     950:	f8d3 a004 	ldr.w	sl, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     954:	f1ba 0f00 	cmp.w	sl, #0
     958:	d027      	beq.n	9aa <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x9e>
            reverseList(p->next_block[idx], idx );
     95a:	eb0a 0301 	add.w	r3, sl, r1
     95e:	f8d3 b004 	ldr.w	fp, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     962:	f1bb 0f00 	cmp.w	fp, #0
     966:	d018      	beq.n	99a <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x8e>
            reverseList(p->next_block[idx], idx );
     968:	eb0b 0301 	add.w	r3, fp, r1
     96c:	685b      	ldr	r3, [r3, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     96e:	b163      	cbz	r3, 98a <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x7e>
            reverseList(p->next_block[idx], idx );
     970:	4419      	add	r1, r3
     972:	9301      	str	r3, [sp, #4]
     974:	6849      	ldr	r1, [r1, #4]
     976:	f7ff ffc9 	bl	90c <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)>
            if ( p->isUsed ) {
     97a:	9b01      	ldr	r3, [sp, #4]
     97c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
     980:	b11a      	cbz	r2, 98a <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x7e>
                p->disableDriver( );
     982:	681a      	ldr	r2, [r3, #0]
     984:	4618      	mov	r0, r3
     986:	6853      	ldr	r3, [r2, #4]
     988:	4798      	blx	r3
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
     98a:	f89b 3025 	ldrb.w	r3, [fp, #37]	; 0x25
     98e:	b123      	cbz	r3, 99a <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x8e>
                p->disableDriver( );
     990:	f8db 3000 	ldr.w	r3, [fp]
     994:	4658      	mov	r0, fp
     996:	685b      	ldr	r3, [r3, #4]
     998:	4798      	blx	r3
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
     99a:	f89a 3025 	ldrb.w	r3, [sl, #37]	; 0x25
     99e:	b123      	cbz	r3, 9aa <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x9e>
                p->disableDriver( );
     9a0:	f8da 3000 	ldr.w	r3, [sl]
     9a4:	4650      	mov	r0, sl
     9a6:	685b      	ldr	r3, [r3, #4]
     9a8:	4798      	blx	r3
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
     9aa:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
     9ae:	2b00      	cmp	r3, #0
     9b0:	d135      	bne.n	a1e <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x112>
     9b2:	f898 3025 	ldrb.w	r3, [r8, #37]	; 0x25
     9b6:	bb63      	cbnz	r3, a12 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0x106>
     9b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
     9bc:	b11b      	cbz	r3, 9c6 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xba>
                p->disableDriver( );
     9be:	683b      	ldr	r3, [r7, #0]
     9c0:	4638      	mov	r0, r7
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	4798      	blx	r3
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
     9c6:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
     9ca:	b9cb      	cbnz	r3, a00 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xf4>
     9cc:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     9d0:	b963      	cbnz	r3, 9ec <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xe0>
     9d2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
     9d6:	b913      	cbnz	r3, 9de <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xd2>
                p->disableDriver( );
            }
        }
    }
     9d8:	b003      	add	sp, #12
     9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
                p->disableDriver( );
     9de:	6823      	ldr	r3, [r4, #0]
     9e0:	685b      	ldr	r3, [r3, #4]
     9e2:	4620      	mov	r0, r4
            }
        }
    }
     9e4:	b003      	add	sp, #12
     9e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
                p->disableDriver( );
     9ea:	4718      	bx	r3
     9ec:	682b      	ldr	r3, [r5, #0]
     9ee:	4628      	mov	r0, r5
     9f0:	685b      	ldr	r3, [r3, #4]
     9f2:	4798      	blx	r3
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
     9f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
     9f8:	2b00      	cmp	r3, #0
     9fa:	d0ed      	beq.n	9d8 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xcc>
     9fc:	e7ef      	b.n	9de <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xd2>
     9fe:	4770      	bx	lr
                p->disableDriver( );
     a00:	6833      	ldr	r3, [r6, #0]
     a02:	4630      	mov	r0, r6
     a04:	685b      	ldr	r3, [r3, #4]
     a06:	4798      	blx	r3
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
     a08:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     a0c:	2b00      	cmp	r3, #0
     a0e:	d0e0      	beq.n	9d2 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xc6>
     a10:	e7ec      	b.n	9ec <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xe0>
                p->disableDriver( );
     a12:	f8d8 3000 	ldr.w	r3, [r8]
     a16:	4640      	mov	r0, r8
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	4798      	blx	r3
     a1c:	e7cc      	b.n	9b8 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xac>
     a1e:	f8d9 3000 	ldr.w	r3, [r9]
     a22:	4648      	mov	r0, r9
     a24:	685b      	ldr	r3, [r3, #4]
     a26:	4798      	blx	r3
     a28:	e7c3      	b.n	9b2 <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)+0xa6>
     a2a:	bf00      	nop

00000a2c <SnoozeBlock::disableDriver()>:
    
    /***********************************************************************************
     *  call drivers disable functions
     ***********************************************************************************/
    virtual void disableDriver ( void ) {
        if ( local_block == -1 ) return;
     a2c:	f990 2024 	ldrsb.w	r2, [r0, #36]	; 0x24
     a30:	1c53      	adds	r3, r2, #1
     a32:	d026      	beq.n	a82 <SnoozeBlock::disableDriver()+0x56>
        SnoozeBlock *p = SnoozeBlock::root_block[local_block];
     a34:	4b1b      	ldr	r3, [pc, #108]	; (aa4 <SnoozeBlock::disableDriver()+0x78>)
    }
    
    /***********************************************************************************
     *  call drivers disable functions
     ***********************************************************************************/
    virtual void disableDriver ( void ) {
     a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if ( local_block == -1 ) return;
        SnoozeBlock *p = SnoozeBlock::root_block[local_block];
     a3a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
        reverseList( p, local_block );
     a3e:	b2d2      	uxtb	r2, r2
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     a40:	b1ec      	cbz	r4, a7e <SnoozeBlock::disableDriver()+0x52>
            reverseList(p->next_block[idx], idx );
     a42:	0093      	lsls	r3, r2, #2
     a44:	18e1      	adds	r1, r4, r3
     a46:	684d      	ldr	r5, [r1, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     a48:	b1b5      	cbz	r5, a78 <SnoozeBlock::disableDriver()+0x4c>
            reverseList(p->next_block[idx], idx );
     a4a:	18e9      	adds	r1, r5, r3
     a4c:	684e      	ldr	r6, [r1, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     a4e:	b166      	cbz	r6, a6a <SnoozeBlock::disableDriver()+0x3e>
            reverseList(p->next_block[idx], idx );
     a50:	18f1      	adds	r1, r6, r3
     a52:	684f      	ldr	r7, [r1, #4]
     *
     *  @param p   Call SnoozeBlock virtual functions
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
     a54:	b137      	cbz	r7, a64 <SnoozeBlock::disableDriver()+0x38>
            reverseList(p->next_block[idx], idx );
     a56:	443b      	add	r3, r7
     a58:	6859      	ldr	r1, [r3, #4]
     a5a:	f7ff ff57 	bl	90c <SnoozeBlock::reverseList(SnoozeBlock*, unsigned char)>
            if ( p->isUsed ) {
     a5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
     a62:	b9a3      	cbnz	r3, a8e <SnoozeBlock::disableDriver()+0x62>
     a64:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
     a68:	b963      	cbnz	r3, a84 <SnoozeBlock::disableDriver()+0x58>
     a6a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
     a6e:	b11b      	cbz	r3, a78 <SnoozeBlock::disableDriver()+0x4c>
                p->disableDriver( );
     a70:	682b      	ldr	r3, [r5, #0]
     a72:	4628      	mov	r0, r5
     a74:	685b      	ldr	r3, [r3, #4]
     a76:	4798      	blx	r3
     *  @param idx Array index of the SnoozeBlock list
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
     a78:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
     a7c:	b963      	cbnz	r3, a98 <SnoozeBlock::disableDriver()+0x6c>
     a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     a82:	4770      	bx	lr
                p->disableDriver( );
     a84:	6833      	ldr	r3, [r6, #0]
     a86:	4630      	mov	r0, r6
     a88:	685b      	ldr	r3, [r3, #4]
     a8a:	4798      	blx	r3
     a8c:	e7ed      	b.n	a6a <SnoozeBlock::disableDriver()+0x3e>
     a8e:	683b      	ldr	r3, [r7, #0]
     a90:	4638      	mov	r0, r7
     a92:	685b      	ldr	r3, [r3, #4]
     a94:	4798      	blx	r3
     a96:	e7e5      	b.n	a64 <SnoozeBlock::disableDriver()+0x38>
     a98:	6823      	ldr	r3, [r4, #0]
     a9a:	4620      	mov	r0, r4
     a9c:	685b      	ldr	r3, [r3, #4]
     ***********************************************************************************/
    virtual void disableDriver ( void ) {
        if ( local_block == -1 ) return;
        SnoozeBlock *p = SnoozeBlock::root_block[local_block];
        reverseList( p, local_block );
    }
     a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     ***********************************************************************************/
    void reverseList( SnoozeBlock *p, uint8_t idx ) {
        if ( p != NULL ) {
            reverseList(p->next_block[idx], idx );
            if ( p->isUsed ) {
                p->disableDriver( );
     aa2:	4718      	bx	r3
     aa4:	1fff6624 	.word	0x1fff6624

00000aa8 <setup>:
struct recInfo								last_record;
struct recInfo								next_record;

bool													ready_to_sleep;

void setup() {
     aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

class HardwareSerial4 : public HardwareSerial
{
public:
	constexpr HardwareSerial4() {}
	virtual void begin(uint32_t baud) { serial4_begin(BAUD2DIV3(baud)); }
     aac:	f243 00d4 	movw	r0, #12500	; 0x30d4
     ab0:	f00e fc12 	bl	f2d8 <serial4_begin>
  MONPORT.begin(115200);			// Serial monitor port
  BLUEPORT.begin(9600);				// BC127 communication port
  GPSPORT.begin(9600);				// GPS port

	initLEDButtons();
	button_wakeup.pinMode(BUTTON_RECORD_PIN, INPUT_PULLUP, FALLING);
     ab4:	4c3f      	ldr	r4, [pc, #252]	; (bb4 <setup+0x10c>)
	
	pinMode(GPS_SWITCH_PIN, OUTPUT);
	digitalWrite(GPS_SWITCH_PIN, LOW);
	pinMode(AUDIO_VOLUME_PIN, INPUT);

	Alarm.delay(500);
     ab6:	f8df 812c 	ldr.w	r8, [pc, #300]	; be4 <setup+0x13c>
	rec_window.period.Hour = RWIN_PER_DEF_HOUR;
	rec_window.period.Day = RWIN_PER_DEF_DAY;
	rec_window.period.Month = RWIN_PER_DEF_MON;
	rec_window.period.Year = RWIN_PER_DEF_YEAR;
	rec_window.occurences = RWIN_OCC_DEF;
	last_record.cnt = 0;
     aba:	4e3f      	ldr	r6, [pc, #252]	; (bb8 <setup+0x110>)
     abc:	4d3f      	ldr	r5, [pc, #252]	; (bbc <setup+0x114>)

/* setDefaultValues(void)
 * ----------------------
 */
void setDefaultValues(void) {
  working_state.rec_state = RECSTATE_OFF;
     abe:	4f40      	ldr	r7, [pc, #256]	; (bc0 <setup+0x118>)
#include "Stream.h"
class HardwareSerial : public Stream
{
public:
	constexpr HardwareSerial() {}
	virtual void begin(uint32_t baud) { serial_begin(BAUD2DIV(baud)); }
     ac0:	f249 207c 	movw	r0, #37500	; 0x927c
     ac4:	f00e faea 	bl	f09c <serial_begin>
  // Initialize serial ports:
  MONPORT.begin(115200);			// Serial monitor port
  BLUEPORT.begin(9600);				// BC127 communication port
  GPSPORT.begin(9600);				// GPS port

	initLEDButtons();
     ac8:	f002 fed4 	bl	3874 <initLEDButtons()>
	button_wakeup.pinMode(BUTTON_RECORD_PIN, INPUT_PULLUP, FALLING);
     acc:	2302      	movs	r3, #2
     ace:	461a      	mov	r2, r3
     ad0:	4619      	mov	r1, r3
     ad2:	4620      	mov	r0, r4
     ad4:	f009 fd44 	bl	a560 <SnoozeDigital::pinMode(int, int, int)>
	button_wakeup.pinMode(BUTTON_MONITOR_PIN, INPUT_PULLUP, FALLING);
     ad8:	2302      	movs	r3, #2
     ada:	461a      	mov	r2, r3
     adc:	4620      	mov	r0, r4
     ade:	2110      	movs	r1, #16
     ae0:	f009 fd3e 	bl	a560 <SnoozeDigital::pinMode(int, int, int)>
  button_wakeup.pinMode(BUTTON_BLUETOOTH_PIN, INPUT_PULLUP, FALLING);
     ae4:	2302      	movs	r3, #2
     ae6:	461a      	mov	r2, r3
     ae8:	4620      	mov	r0, r4
     aea:	2115      	movs	r1, #21
     aec:	f009 fd38 	bl	a560 <SnoozeDigital::pinMode(int, int, int)>
	
	pinMode(GPS_SWITCH_PIN, OUTPUT);
     af0:	2101      	movs	r1, #1
     af2:	2003      	movs	r0, #3
     af4:	f00e fa44 	bl	ef80 <pinMode>
	digitalWrite(GPS_SWITCH_PIN, LOW);
     af8:	2100      	movs	r1, #0
     afa:	2003      	movs	r0, #3
     afc:	f00e fa0e 	bl	ef1c <digitalWrite>
	pinMode(AUDIO_VOLUME_PIN, INPUT);
     b00:	2100      	movs	r1, #0
     b02:	200f      	movs	r0, #15
     b04:	f00e fa3c 	bl	ef80 <pinMode>

	Alarm.delay(500);
     b08:	4640      	mov	r0, r8
     b0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     b0e:	f00a fcdb 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
	initAudio();
     b12:	f003 fb49 	bl	41a8 <initAudio()>
	initSDcard();
     b16:	f002 ffc5 	bl	3aa4 <initSDcard()>
	initWaveHeader();
     b1a:	f003 f89f 	bl	3c5c <initWaveHeader()>
     b1e:	4633      	mov	r3, r6
     b20:	462a      	mov	r2, r5
     b22:	f853 1b04 	ldr.w	r1, [r3], #4
     b26:	f842 1b04 	str.w	r1, [r2], #4
     b2a:	e893 0003 	ldmia.w	r3, {r0, r1}
     b2e:	3204      	adds	r2, #4
void setDefaultValues(void) {
  working_state.rec_state = RECSTATE_OFF;
  working_state.mon_state = MONSTATE_OFF;
  working_state.bt_state = BTSTATE_OFF;
  working_state.ble_state = BLESTATE_OFF;
	rec_window.length.Second = RWIN_LEN_DEF_SEC;
     b30:	4b24      	ldr	r3, [pc, #144]	; (bc4 <setup+0x11c>)
     b32:	f822 1b02 	strh.w	r1, [r2], #2
     b36:	0c09      	lsrs	r1, r1, #16

/* setDefaultValues(void)
 * ----------------------
 */
void setDefaultValues(void) {
  working_state.rec_state = RECSTATE_OFF;
     b38:	2400      	movs	r4, #0
     b3a:	7011      	strb	r1, [r2, #0]
	rec_window.length.Minute = RWIN_LEN_DEF_MIN;
	rec_window.length.Hour = RWIN_LEN_DEF_HOUR;
	rec_window.length.Day = RWIN_LEN_DEF_DAY;
	rec_window.length.Month = RWIN_LEN_DEF_MON;
	rec_window.length.Year = RWIN_LEN_DEF_YEAR;
	rec_window.period.Second = RWIN_PER_DEF_SEC;
     b3c:	2214      	movs	r2, #20
     b3e:	f896 e00b 	ldrb.w	lr, [r6, #11]

/* setDefaultValues(void)
 * ----------------------
 */
void setDefaultValues(void) {
  working_state.rec_state = RECSTATE_OFF;
     b42:	703c      	strb	r4, [r7, #0]
     b44:	6068      	str	r0, [r5, #4]
  working_state.mon_state = MONSTATE_OFF;
     b46:	707c      	strb	r4, [r7, #1]
     b48:	f106 010c 	add.w	r1, r6, #12
  working_state.bt_state = BTSTATE_OFF;
     b4c:	70bc      	strb	r4, [r7, #2]
	rec_window.length.Minute = RWIN_LEN_DEF_MIN;
	rec_window.length.Hour = RWIN_LEN_DEF_HOUR;
	rec_window.length.Day = RWIN_LEN_DEF_DAY;
	rec_window.length.Month = RWIN_LEN_DEF_MON;
	rec_window.length.Year = RWIN_LEN_DEF_YEAR;
	rec_window.period.Second = RWIN_PER_DEF_SEC;
     b4e:	71da      	strb	r2, [r3, #7]
 */
void setDefaultValues(void) {
  working_state.rec_state = RECSTATE_OFF;
  working_state.mon_state = MONSTATE_OFF;
  working_state.bt_state = BTSTATE_OFF;
  working_state.ble_state = BLESTATE_OFF;
     b50:	70fc      	strb	r4, [r7, #3]
	rec_window.length.Second = RWIN_LEN_DEF_SEC;
	rec_window.length.Minute = RWIN_LEN_DEF_MIN;
	rec_window.length.Hour = RWIN_LEN_DEF_HOUR;
	rec_window.length.Day = RWIN_LEN_DEF_DAY;
     b52:	2201      	movs	r2, #1
     b54:	f105 000c 	add.w	r0, r5, #12
	rec_window.period.Minute = RWIN_PER_DEF_MIN;
	rec_window.period.Hour = RWIN_PER_DEF_HOUR;
	rec_window.period.Day = RWIN_PER_DEF_DAY;
	rec_window.period.Month = RWIN_PER_DEF_MON;
	rec_window.period.Year = RWIN_PER_DEF_YEAR;
	rec_window.occurences = RWIN_OCC_DEF;
     b58:	2703      	movs	r7, #3
     b5a:	f885 e00b 	strb.w	lr, [r5, #11]
	last_record.cnt = 0;
     b5e:	61f4      	str	r4, [r6, #28]
void setDefaultValues(void) {
  working_state.rec_state = RECSTATE_OFF;
  working_state.mon_state = MONSTATE_OFF;
  working_state.bt_state = BTSTATE_OFF;
  working_state.ble_state = BLESTATE_OFF;
	rec_window.length.Second = RWIN_LEN_DEF_SEC;
     b60:	701c      	strb	r4, [r3, #0]
	rec_window.length.Minute = RWIN_LEN_DEF_MIN;
     b62:	705c      	strb	r4, [r3, #1]
	rec_window.length.Hour = RWIN_LEN_DEF_HOUR;
     b64:	709c      	strb	r4, [r3, #2]
	rec_window.length.Day = RWIN_LEN_DEF_DAY;
	rec_window.length.Month = RWIN_LEN_DEF_MON;
	rec_window.length.Year = RWIN_LEN_DEF_YEAR;
     b66:	719c      	strb	r4, [r3, #6]
	rec_window.period.Second = RWIN_PER_DEF_SEC;
	rec_window.period.Minute = RWIN_PER_DEF_MIN;
     b68:	721c      	strb	r4, [r3, #8]
	rec_window.period.Hour = RWIN_PER_DEF_HOUR;
     b6a:	725c      	strb	r4, [r3, #9]
	rec_window.period.Day = RWIN_PER_DEF_DAY;
	rec_window.period.Month = RWIN_PER_DEF_MON;
	rec_window.period.Year = RWIN_PER_DEF_YEAR;
     b6c:	735c      	strb	r4, [r3, #13]
	rec_window.occurences = RWIN_OCC_DEF;
     b6e:	611f      	str	r7, [r3, #16]
  working_state.bt_state = BTSTATE_OFF;
  working_state.ble_state = BLESTATE_OFF;
	rec_window.length.Second = RWIN_LEN_DEF_SEC;
	rec_window.length.Minute = RWIN_LEN_DEF_MIN;
	rec_window.length.Hour = RWIN_LEN_DEF_HOUR;
	rec_window.length.Day = RWIN_LEN_DEF_DAY;
     b70:	711a      	strb	r2, [r3, #4]
	rec_window.length.Month = RWIN_LEN_DEF_MON;
     b72:	715a      	strb	r2, [r3, #5]
	rec_window.length.Year = RWIN_LEN_DEF_YEAR;
	rec_window.period.Second = RWIN_PER_DEF_SEC;
	rec_window.period.Minute = RWIN_PER_DEF_MIN;
	rec_window.period.Hour = RWIN_PER_DEF_HOUR;
	rec_window.period.Day = RWIN_PER_DEF_DAY;
     b74:	72da      	strb	r2, [r3, #11]
	rec_window.period.Month = RWIN_PER_DEF_MON;
     b76:	731a      	strb	r2, [r3, #12]
	rec_window.period.Year = RWIN_PER_DEF_YEAR;
	rec_window.occurences = RWIN_OCC_DEF;
	last_record.cnt = 0;
	next_record = last_record;
	BT_conn_id1 = 0;
     b78:	4f13      	ldr	r7, [pc, #76]	; (bc8 <setup+0x120>)
     b7a:	f00d f829 	bl	dbd0 <String::operator=(String const&)>
	BT_conn_id2 = 0;
     b7e:	4a13      	ldr	r2, [pc, #76]	; (bcc <setup+0x124>)
	BLE_conn_id = 0;
     b80:	4b13      	ldr	r3, [pc, #76]	; (bd0 <setup+0x128>)
     b82:	69f6      	ldr	r6, [r6, #28]
	BT_peer_address = "";
     b84:	4913      	ldr	r1, [pc, #76]	; (bd4 <setup+0x12c>)
     b86:	4814      	ldr	r0, [pc, #80]	; (bd8 <setup+0x130>)
	rec_window.period.Year = RWIN_PER_DEF_YEAR;
	rec_window.occurences = RWIN_OCC_DEF;
	last_record.cnt = 0;
	next_record = last_record;
	BT_conn_id1 = 0;
	BT_conn_id2 = 0;
     b88:	6014      	str	r4, [r2, #0]
	BLE_conn_id = 0;
     b8a:	601c      	str	r4, [r3, #0]
     b8c:	61ee      	str	r6, [r5, #28]
	rec_window.period.Month = RWIN_PER_DEF_MON;
	rec_window.period.Year = RWIN_PER_DEF_YEAR;
	rec_window.occurences = RWIN_OCC_DEF;
	last_record.cnt = 0;
	next_record = last_record;
	BT_conn_id1 = 0;
     b8e:	603c      	str	r4, [r7, #0]
	BT_conn_id2 = 0;
	BLE_conn_id = 0;
	BT_peer_address = "";
     b90:	f00d f870 	bl	dc74 <String::operator=(char const*)>
	BT_peer_name = "auto";
     b94:	4911      	ldr	r1, [pc, #68]	; (bdc <setup+0x134>)
     b96:	4812      	ldr	r0, [pc, #72]	; (be0 <setup+0x138>)
     b98:	f00d f86c 	bl	dc74 <String::operator=(char const*)>
	Alarm.delay(500);
	initAudio();
	initSDcard();
	initWaveHeader();
	setDefaultValues();
	setTimeSource();
     b9c:	f003 ff18 	bl	49d0 <setTimeSource()>
	initBc127();
     ba0:	f000 fe34 	bl	180c <initBc127()>
	Alarm.delay(500);
     ba4:	4640      	mov	r0, r8
     ba6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
}
     baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	initSDcard();
	initWaveHeader();
	setDefaultValues();
	setTimeSource();
	initBc127();
	Alarm.delay(500);
     bae:	f00a bc8b 	b.w	b4c8 <TimeAlarmsClass::delay(unsigned long)>
     bb2:	bf00      	nop
     bb4:	1fff5580 	.word	0x1fff5580
     bb8:	1fff5720 	.word	0x1fff5720
     bbc:	1fff5740 	.word	0x1fff5740
     bc0:	1fff5820 	.word	0x1fff5820
     bc4:	1fff57e0 	.word	0x1fff57e0
     bc8:	1fff5984 	.word	0x1fff5984
     bcc:	1fff5988 	.word	0x1fff5988
     bd0:	1fff596c 	.word	0x1fff596c
     bd4:	00017130 	.word	0x00017130
     bd8:	1fff5970 	.word	0x1fff5970
     bdc:	00016b2c 	.word	0x00016b2c
     be0:	1fff5824 	.word	0x1fff5824
     be4:	1fff668c 	.word	0x1fff668c

00000be8 <loop>:
}

void loop() {
     be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bec:	4da0      	ldr	r5, [pc, #640]	; (e70 <loop+0x288>)
     bee:	4ca1      	ldr	r4, [pc, #644]	; (e74 <loop+0x28c>)
     bf0:	4fa1      	ldr	r7, [pc, #644]	; (e78 <loop+0x290>)
     bf2:	f8df 82dc 	ldr.w	r8, [pc, #732]	; ed0 <loop+0x2e8>
     bf6:	4ea1      	ldr	r6, [pc, #644]	; (e7c <loop+0x294>)
     bf8:	b097      	sub	sp, #92	; 0x5c
	SIM_SCGC6 |= SIM_SCGC6_I2S;
	Alarm.delay(100);

WORK:
	// needed for TimeAlarms timers
	Alarm.delay(0);
     bfa:	2100      	movs	r1, #0
     bfc:	48a0      	ldr	r0, [pc, #640]	; (e80 <loop+0x298>)
     bfe:	f00a fc63 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
	// needed for button bounces	
	but_rec.update();
     c02:	48a0      	ldr	r0, [pc, #640]	; (e84 <loop+0x29c>)
     c04:	f009 f89a 	bl	9d3c <Bounce::update()>
	but_mon.update();
     c08:	489f      	ldr	r0, [pc, #636]	; (e88 <loop+0x2a0>)
     c0a:	f009 f897 	bl	9d3c <Bounce::update()>
	but_blue.update();
     c0e:	489f      	ldr	r0, [pc, #636]	; (e8c <loop+0x2a4>)
     c10:	f009 f894 	bl	9d3c <Bounce::update()>
	// if button falling edge detected (awake state) -> notify which button was pressed
	if(but_rec.fallingEdge()) button_call = (enum bCalls)BUTTON_RECORD_PIN;
     c14:	489b      	ldr	r0, [pc, #620]	; (e84 <loop+0x29c>)
     c16:	f009 f8c9 	bl	9dac <Bounce::fallingEdge()>
     c1a:	b108      	cbz	r0, c20 <loop+0x38>
     c1c:	2302      	movs	r3, #2
     c1e:	702b      	strb	r3, [r5, #0]
	if(but_mon.fallingEdge()) button_call = (enum bCalls)BUTTON_MONITOR_PIN;
     c20:	4899      	ldr	r0, [pc, #612]	; (e88 <loop+0x2a0>)
     c22:	f009 f8c3 	bl	9dac <Bounce::fallingEdge()>
     c26:	b108      	cbz	r0, c2c <loop+0x44>
     c28:	2310      	movs	r3, #16
     c2a:	702b      	strb	r3, [r5, #0]
	if(but_blue.fallingEdge()) button_call = (enum bCalls)BUTTON_BLUETOOTH_PIN;
     c2c:	4897      	ldr	r0, [pc, #604]	; (e8c <loop+0x2a4>)
     c2e:	f009 f8bd 	bl	9dac <Bounce::fallingEdge()>
     c32:	2800      	cmp	r0, #0
     c34:	f000 8228 	beq.w	1088 <loop+0x4a0>
     c38:	2315      	movs	r3, #21
     c3a:	702b      	strb	r3, [r5, #0]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     c3c:	2126      	movs	r1, #38	; 0x26
     c3e:	4894      	ldr	r0, [pc, #592]	; (e90 <loop+0x2a8>)
			working_state.mon_state = MONSTATE_REQ_OFF;
		}
		button_call = (enum bCalls)BCALL_NONE;
	}
  if(button_call == BUTTON_BLUETOOTH_PIN) {
    MONPORT.print("Bluetooth button pressed: ble_state = "); MONPORT.println(working_state.ble_state);
     c40:	f8df 9230 	ldr.w	r9, [pc, #560]	; e74 <loop+0x28c>
     c44:	f00f fe1e 	bl	10884 <usb_serial_write>
     c48:	78e1      	ldrb	r1, [r4, #3]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     c4a:	4892      	ldr	r0, [pc, #584]	; (e94 <loop+0x2ac>)
     c4c:	f00c fdf0 	bl	d830 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c50:	4890      	ldr	r0, [pc, #576]	; (e94 <loop+0x2ac>)
     c52:	f00c fe45 	bl	d8e0 <Print::println()>
		if(working_state.ble_state == BLESTATE_OFF) {
     c56:	78e3      	ldrb	r3, [r4, #3]
     c58:	2b00      	cmp	r3, #0
     c5a:	f040 8321 	bne.w	12a0 <loop+0x6b8>
			working_state.ble_state = BLESTATE_REQ_ADV;
     c5e:	2302      	movs	r3, #2
     c60:	f889 3003 	strb.w	r3, [r9, #3]
			working_state.mon_state = MONSTATE_REQ_ON;
		}
		else {
			working_state.mon_state = MONSTATE_REQ_OFF;
		}
		button_call = (enum bCalls)BCALL_NONE;
     c64:	2300      	movs	r3, #0
     c66:	702b      	strb	r3, [r5, #0]
		}
		button_call = (enum bCalls)BCALL_NONE;
  }

  // REC state actions
	switch(working_state.rec_state) {
     c68:	7823      	ldrb	r3, [r4, #0]
     c6a:	3b01      	subs	r3, #1
     c6c:	2b07      	cmp	r3, #7
     c6e:	d828      	bhi.n	cc2 <loop+0xda>
     c70:	e8df f013 	tbh	[pc, r3, lsl #1]
     c74:	020501f4 	.word	0x020501f4
     c78:	002701f8 	.word	0x002701f8
     c7c:	00270027 	.word	0x00270027
     c80:	000801bd 	.word	0x000801bd
			detectPeaks();
			break;
		}
		
		case RECSTATE_REQ_OFF: {
			Alarm.free(alarm_wait_id);
     c84:	4b84      	ldr	r3, [pc, #528]	; (e98 <loop+0x2b0>)
     c86:	487e      	ldr	r0, [pc, #504]	; (e80 <loop+0x298>)
     c88:	7819      	ldrb	r1, [r3, #0]
     c8a:	f00a fc07 	bl	b49c <TimeAlarmsClass::free(unsigned char)>
			Alarm.free(alarm_rec_id);
     c8e:	4b83      	ldr	r3, [pc, #524]	; (e9c <loop+0x2b4>)
     c90:	487b      	ldr	r0, [pc, #492]	; (e80 <loop+0x298>)
     c92:	7819      	ldrb	r1, [r3, #0]
     c94:	f00a fc02 	bl	b49c <TimeAlarmsClass::free(unsigned char)>

			stopRecording(next_record.path);
     c98:	4981      	ldr	r1, [pc, #516]	; (ea0 <loop+0x2b8>)
     c9a:	a812      	add	r0, sp, #72	; 0x48
     c9c:	f00c feaa 	bl	d9f4 <String::String(String const&)>
     ca0:	a812      	add	r0, sp, #72	; 0x48
     ca2:	f003 fde7 	bl	4874 <stopRecording(String)>
     ca6:	a812      	add	r0, sp, #72	; 0x48
     ca8:	f00c ff8a 	bl	dbc0 <String::~String()>
			finishRecording();
     cac:	f003 f980 	bl	3fb0 <finishRecording()>
			stopLED(&leds[LED_PEAK]);
     cb0:	487c      	ldr	r0, [pc, #496]	; (ea4 <loop+0x2bc>)
     cb2:	f002 fea3 	bl	39fc <stopLED(leds_s*)>
			working_state.rec_state = RECSTATE_OFF;
     cb6:	2300      	movs	r3, #0
     cb8:	7023      	strb	r3, [r4, #0]
			if(working_state.ble_state == BLESTATE_CONNECTED) {
     cba:	78e3      	ldrb	r3, [r4, #3]
     cbc:	2b05      	cmp	r3, #5
     cbe:	f000 81a9 	beq.w	1014 <loop+0x42c>
		
		default:
			break;
	}
  // MON state actions
	switch(working_state.mon_state) {
     cc2:	f894 9001 	ldrb.w	r9, [r4, #1]
     cc6:	f8df a1ac 	ldr.w	sl, [pc, #428]	; e74 <loop+0x28c>
     cca:	fa5f f989 	uxtb.w	r9, r9
     cce:	f1b9 0f02 	cmp.w	r9, #2
     cd2:	f000 820f 	beq.w	10f4 <loop+0x50c>
     cd6:	f1b9 0f03 	cmp.w	r9, #3
     cda:	f000 8206 	beq.w	10ea <loop+0x502>
     cde:	f1b9 0f01 	cmp.w	r9, #1
     ce2:	f000 81da 	beq.w	109a <loop+0x4b2>
		
		default:
			break;
	}
  // BLE state actions
	switch(working_state.ble_state) {
     ce6:	78e3      	ldrb	r3, [r4, #3]
     ce8:	3b02      	subs	r3, #2
     cea:	2b05      	cmp	r3, #5
     cec:	d81c      	bhi.n	d28 <loop+0x140>
     cee:	e8df f013 	tbh	[pc, r3, lsl #1]
     cf2:	0198      	.short	0x0198
     cf4:	00f1001b 	.word	0x00f1001b
     cf8:	01690175 	.word	0x01690175
     cfc:	0006      	.short	0x0006
			}
			break;
		}
		
		case BLESTATE_REQ_OFF: {
			Alarm.free(alarm_adv_id);
     cfe:	f898 1000 	ldrb.w	r1, [r8]
     d02:	485f      	ldr	r0, [pc, #380]	; (e80 <loop+0x298>)
     d04:	f00a fbca 	bl	b49c <TimeAlarmsClass::free(unsigned char)>
			bc127AdvStop();
     d08:	f000 fda4 	bl	1854 <bc127AdvStop()>
			Alarm.delay(100);
     d0c:	2164      	movs	r1, #100	; 0x64
     d0e:	485c      	ldr	r0, [pc, #368]	; (e80 <loop+0x298>)
     d10:	f00a fbda 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
			if(working_state.bt_state != BTSTATE_OFF) {
     d14:	78a3      	ldrb	r3, [r4, #2]
     d16:	2b00      	cmp	r3, #0
     d18:	f000 82b8 	beq.w	128c <loop+0x6a4>
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_FAST);
     d1c:	2106      	movs	r1, #6
     d1e:	4862      	ldr	r0, [pc, #392]	; (ea8 <loop+0x2c0>)
     d20:	f002 fe20 	bl	3964 <startLED(leds_s*, lMode)>
			}
			else {
				bc127BlueOff();
				stopLED(&leds[LED_BLUETOOTH]);
			}
			working_state.ble_state = BLESTATE_OFF;
     d24:	2300      	movs	r3, #0
     d26:	70e3      	strb	r3, [r4, #3]
		
		default:
		break;
	}
  // BT state actions
	switch(working_state.bt_state) {
     d28:	78a3      	ldrb	r3, [r4, #2]
     d2a:	f8df 9148 	ldr.w	r9, [pc, #328]	; e74 <loop+0x28c>
     d2e:	b2db      	uxtb	r3, r3
     d30:	2b03      	cmp	r3, #3
     d32:	f000 80e5 	beq.w	f00 <loop+0x318>
     d36:	2b06      	cmp	r3, #6
     d38:	d11a      	bne.n	d70 <loop+0x188>
			sendCmdOut(BCNOT_BT_STATE);
			break;
		}
		
		case BTSTATE_REQ_DISC: {
			if(working_state.ble_state == BLESTATE_CONNECTED) {
     d3a:	f899 3003 	ldrb.w	r3, [r9, #3]
     d3e:	2b05      	cmp	r3, #5
     d40:	f000 8219 	beq.w	1176 <loop+0x58e>
				Alarm.delay(100);
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_SLOW);
				sendCmdOut(BCNOT_BT_STATE);
			}
			else {
				bc127BlueOff();
     d44:	f000 fd82 	bl	184c <bc127BlueOff()>
				stopLED(&leds[LED_BLUETOOTH]);
     d48:	4857      	ldr	r0, [pc, #348]	; (ea8 <loop+0x2c0>)
     d4a:	f002 fe57 	bl	39fc <stopLED(leds_s*)>
				working_state.ble_state = BLESTATE_OFF;
     d4e:	2300      	movs	r3, #0
     d50:	f889 3003 	strb.w	r3, [r9, #3]
			}
			working_state.bt_state = BTSTATE_OFF;
			BT_conn_id1 = 0;
     d54:	4a55      	ldr	r2, [pc, #340]	; (eac <loop+0x2c4>)
			BT_conn_id2 = 0;
			BT_peer_address = "";
     d56:	4956      	ldr	r1, [pc, #344]	; (eb0 <loop+0x2c8>)
     d58:	4856      	ldr	r0, [pc, #344]	; (eb4 <loop+0x2cc>)
			else {
				bc127BlueOff();
				stopLED(&leds[LED_BLUETOOTH]);
				working_state.ble_state = BLESTATE_OFF;
			}
			working_state.bt_state = BTSTATE_OFF;
     d5a:	2300      	movs	r3, #0
			BT_conn_id1 = 0;
     d5c:	6013      	str	r3, [r2, #0]
			BT_conn_id2 = 0;
     d5e:	4a56      	ldr	r2, [pc, #344]	; (eb8 <loop+0x2d0>)
			else {
				bc127BlueOff();
				stopLED(&leds[LED_BLUETOOTH]);
				working_state.ble_state = BLESTATE_OFF;
			}
			working_state.bt_state = BTSTATE_OFF;
     d60:	70a3      	strb	r3, [r4, #2]
			BT_conn_id1 = 0;
			BT_conn_id2 = 0;
     d62:	6013      	str	r3, [r2, #0]
			BT_peer_address = "";
     d64:	f00c ff86 	bl	dc74 <String::operator=(char const*)>
			BT_peer_name = "auto";
     d68:	4954      	ldr	r1, [pc, #336]	; (ebc <loop+0x2d4>)
     d6a:	4855      	ldr	r0, [pc, #340]	; (ec0 <loop+0x2d8>)
     d6c:	f00c ff82 	bl	dc74 <String::operator=(char const*)>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
     d70:	f00e fd38 	bl	f7e4 <serial4_available>
		default:
			break;
	}
	
	// Serial messaging
  if (BLUEPORT.available()) {
     d74:	2800      	cmp	r0, #0
     d76:	f040 80d7 	bne.w	f28 <loop+0x340>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     d7a:	f00f fd59 	bl	10830 <usb_serial_available>
    int outMsg = parseSerialIn(inMsg);
    if(!sendCmdOut(outMsg)) {
      MONPORT.println("Sending command error!!");
    }
  }	
  if (MONPORT.available()) {
     d7e:	2800      	cmp	r0, #0
     d80:	f040 80f1 	bne.w	f66 <loop+0x37e>
		MONPORT.printf("Sent to BLUEPORT: %s\n", manInput.c_str());
  }

	// Stay awake or go to sleep?...
	// ...first check all other working states
	if( (working_state.mon_state == MONSTATE_OFF) &&
     d84:	7862      	ldrb	r2, [r4, #1]
     d86:	4b3b      	ldr	r3, [pc, #236]	; (e74 <loop+0x28c>)
			(working_state.ble_state == BLESTATE_OFF) &&
     d88:	2a00      	cmp	r2, #0
     d8a:	f040 8118 	bne.w	fbe <loop+0x3d6>
     d8e:	78da      	ldrb	r2, [r3, #3]
		MONPORT.printf("Sent to BLUEPORT: %s\n", manInput.c_str());
  }

	// Stay awake or go to sleep?...
	// ...first check all other working states
	if( (working_state.mon_state == MONSTATE_OFF) &&
     d90:	2a00      	cmp	r2, #0
     d92:	f040 8114 	bne.w	fbe <loop+0x3d6>
			(working_state.ble_state == BLESTATE_OFF) &&
			(working_state.bt_state == BTSTATE_OFF) ) {
     d96:	789a      	ldrb	r2, [r3, #2]
  }

	// Stay awake or go to sleep?...
	// ...first check all other working states
	if( (working_state.mon_state == MONSTATE_OFF) &&
			(working_state.ble_state == BLESTATE_OFF) &&
     d98:	2a00      	cmp	r2, #0
     d9a:	f040 8110 	bne.w	fbe <loop+0x3d6>
			(working_state.bt_state == BTSTATE_OFF) ) {
		if(working_state.rec_state == RECSTATE_WAIT) working_state.rec_state = RECSTATE_REQ_WAIT;
     d9e:	781a      	ldrb	r2, [r3, #0]
     da0:	2a04      	cmp	r2, #4
     da2:	f000 81bb 	beq.w	111c <loop+0x534>
		ready_to_sleep = true;
     da6:	2301      	movs	r3, #1
     da8:	7033      	strb	r3, [r6, #0]
	}
	
	// ...then decide which alarm to set (SLEEP -> snooze, WORK -> timeAlarms)
	time_t delta;
	tmElements_t tm1, tm2, tm3;
	switch(working_state.rec_state) {
     daa:	7823      	ldrb	r3, [r4, #0]
     dac:	fa5f f983 	uxtb.w	r9, r3
     db0:	f1b9 0f03 	cmp.w	r9, #3
     db4:	f47f af21 	bne.w	bfa <loop+0x12>
		case RECSTATE_REQ_WAIT: {
			delta = next_record.ts - now();
     db8:	f8d7 a000 	ldr.w	sl, [r7]
     dbc:	f009 ffbc 	bl	ad38 <now()>
     dc0:	ebc0 0a0a 	rsb	sl, r0, sl
			breakTime(now(), tm1);
     dc4:	f009 ffb8 	bl	ad38 <now()>
     dc8:	a904      	add	r1, sp, #16
     dca:	f009 fd93 	bl	a8f4 <breakTime(long, tmElements_t&)>
			breakTime(next_record.ts, tm2);
     dce:	a906      	add	r1, sp, #24
     dd0:	6838      	ldr	r0, [r7, #0]
     dd2:	f009 fd8f 	bl	a8f4 <breakTime(long, tmElements_t&)>
			breakTime(delta, tm3);
     dd6:	a908      	add	r1, sp, #32
     dd8:	4650      	mov	r0, sl
     dda:	f009 fd8b 	bl	a8f4 <breakTime(long, tmElements_t&)>
			MONPORT.printf("Current time: %02d.%02d.%02d, %02dh%02dm%02ds\n", 
										tm1.Day, tm1.Month, (tm1.Year-30), tm1.Hour, tm1.Minute, tm1.Second);
     dde:	f89d 1016 	ldrb.w	r1, [sp, #22]
     de2:	f89d 0010 	ldrb.w	r0, [sp, #16]
     de6:	f89d e011 	ldrb.w	lr, [sp, #17]
     dea:	9003      	str	r0, [sp, #12]
     dec:	391e      	subs	r1, #30
     dee:	f89d 0012 	ldrb.w	r0, [sp, #18]
     df2:	f89d 3015 	ldrb.w	r3, [sp, #21]
     df6:	f89d 2014 	ldrb.w	r2, [sp, #20]
     dfa:	9100      	str	r1, [sp, #0]
     dfc:	f8cd e008 	str.w	lr, [sp, #8]
     e00:	9001      	str	r0, [sp, #4]
     e02:	4930      	ldr	r1, [pc, #192]	; (ec4 <loop+0x2dc>)
     e04:	4823      	ldr	r0, [pc, #140]	; (e94 <loop+0x2ac>)
     e06:	f00c fd83 	bl	d910 <Print::printf(char const*, ...)>
			MONPORT.printf("Delta: %02dh%02dm%02ds\n", 
										tm3.Hour, tm3.Minute, tm3.Second);
     e0a:	f89d 1020 	ldrb.w	r1, [sp, #32]
     e0e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e12:	9100      	str	r1, [sp, #0]
     e14:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     e18:	492b      	ldr	r1, [pc, #172]	; (ec8 <loop+0x2e0>)
     e1a:	481e      	ldr	r0, [pc, #120]	; (e94 <loop+0x2ac>)
     e1c:	f00c fd78 	bl	d910 <Print::printf(char const*, ...)>
			if(ready_to_sleep) {
     e20:	7833      	ldrb	r3, [r6, #0]
     e22:	2b00      	cmp	r3, #0
     e24:	f040 81e4 	bne.w	11f0 <loop+0x608>
  AlarmID_t alarmOnce(time_t value, OnTick_t onTickHandler) {
    if (value <= 0 || value > SECS_PER_DAY) return dtINVALID_ALARM_ID;
    return create(value, onTickHandler, true, dtDailyAlarm);
  }
  AlarmID_t alarmOnce(const int H, const int M, const int S, OnTick_t onTickHandler) {
    return alarmOnce(AlarmHMS(H,M,S), onTickHandler);
     e28:	f89d 3019 	ldrb.w	r3, [sp, #25]
     e2c:	f89d 101a 	ldrb.w	r1, [sp, #26]
     e30:	f89d 2018 	ldrb.w	r2, [sp, #24]
     e34:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
     e38:	009b      	lsls	r3, r3, #2
     e3a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
     e3e:	fb00 3301 	mla	r3, r0, r1, r3
     e42:	1899      	adds	r1, r3, r2
    return create(value, onTickHandler, true, dtExplicitAlarm);
  }

  // trigger once at given time of day
  AlarmID_t alarmOnce(time_t value, OnTick_t onTickHandler) {
    if (value <= 0 || value > SECS_PER_DAY) return dtINVALID_ALARM_ID;
     e44:	4b21      	ldr	r3, [pc, #132]	; (ecc <loop+0x2e4>)
     e46:	1e4a      	subs	r2, r1, #1
     e48:	429a      	cmp	r2, r3
     e4a:	f240 8235 	bls.w	12b8 <loop+0x6d0>
     e4e:	20ff      	movs	r0, #255	; 0xff
				// goto SLEEP;
				goto WORK;
			}
			else {
				alarm_wait_id = Alarm.alarmOnce(tm2.Hour, tm2.Minute, tm2.Second, alarmNextRec);
				working_state.rec_state = RECSTATE_WAIT;
     e50:	2304      	movs	r3, #4
     e52:	7023      	strb	r3, [r4, #0]
				if(working_state.ble_state == BLESTATE_CONNECTED) {
     e54:	78e3      	ldrb	r3, [r4, #3]
				}
				// goto SLEEP;
				goto WORK;
			}
			else {
				alarm_wait_id = Alarm.alarmOnce(tm2.Hour, tm2.Minute, tm2.Second, alarmNextRec);
     e56:	4a10      	ldr	r2, [pc, #64]	; (e98 <loop+0x2b0>)
				working_state.rec_state = RECSTATE_WAIT;
				if(working_state.ble_state == BLESTATE_CONNECTED) {
     e58:	2b05      	cmp	r3, #5
				}
				// goto SLEEP;
				goto WORK;
			}
			else {
				alarm_wait_id = Alarm.alarmOnce(tm2.Hour, tm2.Minute, tm2.Second, alarmNextRec);
     e5a:	6010      	str	r0, [r2, #0]
				working_state.rec_state = RECSTATE_WAIT;
				if(working_state.ble_state == BLESTATE_CONNECTED) {
     e5c:	f47f aecd 	bne.w	bfa <loop+0x12>
					sendCmdOut(BCNOT_REC_STATE);
     e60:	201a      	movs	r0, #26
     e62:	f000 fcf9 	bl	1858 <sendCmdOut(int)>
					sendCmdOut(BCNOT_FILEPATH);
     e66:	2015      	movs	r0, #21
     e68:	f000 fcf6 	bl	1858 <sendCmdOut(int)>
     e6c:	e6c5      	b.n	bfa <loop+0x12>
     e6e:	bf00      	nop
     e70:	1fff5a3c 	.word	0x1fff5a3c
     e74:	1fff5820 	.word	0x1fff5820
     e78:	1fff5740 	.word	0x1fff5740
     e7c:	1fff57f4 	.word	0x1fff57f4
     e80:	1fff668c 	.word	0x1fff668c
     e84:	1fff59bc 	.word	0x1fff59bc
     e88:	1fff59ac 	.word	0x1fff59ac
     e8c:	1fff5a2c 	.word	0x1fff5a2c
     e90:	00016b80 	.word	0x00016b80
     e94:	1fff4b00 	.word	0x1fff4b00
     e98:	1fff62ec 	.word	0x1fff62ec
     e9c:	1fff62e8 	.word	0x1fff62e8
     ea0:	1fff574c 	.word	0x1fff574c
     ea4:	1fff5a14 	.word	0x1fff5a14
     ea8:	1fff59fc 	.word	0x1fff59fc
     eac:	1fff5984 	.word	0x1fff5984
     eb0:	00017130 	.word	0x00017130
     eb4:	1fff5970 	.word	0x1fff5970
     eb8:	1fff5988 	.word	0x1fff5988
     ebc:	00016b2c 	.word	0x00016b2c
     ec0:	1fff5824 	.word	0x1fff5824
     ec4:	00016c0c 	.word	0x00016c0c
     ec8:	00016c3c 	.word	0x00016c3c
     ecc:	0001517f 	.word	0x0001517f
     ed0:	1fff62f0 	.word	0x1fff62f0
			working_state.ble_state = BLESTATE_ADV;
			break;
		}
		
		case BLESTATE_REQ_CONN: {
			Alarm.free(alarm_adv_id);
     ed4:	f898 1000 	ldrb.w	r1, [r8]
     ed8:	48b6      	ldr	r0, [pc, #728]	; (11b4 <loop+0x5cc>)
		
		default:
		break;
	}
  // BT state actions
	switch(working_state.bt_state) {
     eda:	f8df 92ec 	ldr.w	r9, [pc, #748]	; 11c8 <loop+0x5e0>
			working_state.ble_state = BLESTATE_ADV;
			break;
		}
		
		case BLESTATE_REQ_CONN: {
			Alarm.free(alarm_adv_id);
     ede:	f00a fadd 	bl	b49c <TimeAlarmsClass::free(unsigned char)>
			if(working_state.bt_state == BTSTATE_CONNECTED) {
     ee2:	78a3      	ldrb	r3, [r4, #2]
				startLED(&leds[LED_BLUETOOTH], LED_MODE_ON);
			}
			else {
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_SLOW);
     ee4:	48b4      	ldr	r0, [pc, #720]	; (11b8 <loop+0x5d0>)
			break;
		}
		
		case BLESTATE_REQ_CONN: {
			Alarm.free(alarm_adv_id);
			if(working_state.bt_state == BTSTATE_CONNECTED) {
     ee6:	2b04      	cmp	r3, #4
				startLED(&leds[LED_BLUETOOTH], LED_MODE_ON);
     ee8:	bf0c      	ite	eq
     eea:	2101      	moveq	r1, #1
			}
			else {
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_SLOW);
     eec:	2107      	movne	r1, #7
     eee:	f002 fd39 	bl	3964 <startLED(leds_s*, lMode)>
			}
			working_state.ble_state = BLESTATE_CONNECTED;
     ef2:	2305      	movs	r3, #5
     ef4:	70e3      	strb	r3, [r4, #3]
		
		default:
		break;
	}
  // BT state actions
	switch(working_state.bt_state) {
     ef6:	78a3      	ldrb	r3, [r4, #2]
     ef8:	b2db      	uxtb	r3, r3
     efa:	2b03      	cmp	r3, #3
     efc:	f47f af1b 	bne.w	d36 <loop+0x14e>
		case BTSTATE_REQ_CONN: {
			// Alarm.free(alarm_adv_id);
			working_state.bt_state = BTSTATE_CONNECTED;
     f00:	2304      	movs	r3, #4
     f02:	f889 3002 	strb.w	r3, [r9, #2]
			if(working_state.ble_state == BLESTATE_CONNECTED) {
     f06:	f899 3003 	ldrb.w	r3, [r9, #3]
				startLED(&leds[LED_BLUETOOTH], LED_MODE_ON);
			}
			else {
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_FAST);
     f0a:	48ab      	ldr	r0, [pc, #684]	; (11b8 <loop+0x5d0>)
  // BT state actions
	switch(working_state.bt_state) {
		case BTSTATE_REQ_CONN: {
			// Alarm.free(alarm_adv_id);
			working_state.bt_state = BTSTATE_CONNECTED;
			if(working_state.ble_state == BLESTATE_CONNECTED) {
     f0c:	2b05      	cmp	r3, #5
				startLED(&leds[LED_BLUETOOTH], LED_MODE_ON);
     f0e:	bf0c      	ite	eq
     f10:	2101      	moveq	r1, #1
			}
			else {
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_FAST);
     f12:	2106      	movne	r1, #6
     f14:	f002 fd26 	bl	3964 <startLED(leds_s*, lMode)>
			}
			sendCmdOut(BCNOT_BT_STATE);
     f18:	2014      	movs	r0, #20
     f1a:	f000 fc9d 	bl	1858 <sendCmdOut(int)>
     f1e:	f00e fc61 	bl	f7e4 <serial4_available>
		default:
			break;
	}
	
	// Serial messaging
  if (BLUEPORT.available()) {
     f22:	2800      	cmp	r0, #0
     f24:	f43f af29 	beq.w	d7a <loop+0x192>
    String inMsg = BLUEPORT.readStringUntil('\r');
     f28:	2378      	movs	r3, #120	; 0x78
     f2a:	220d      	movs	r2, #13
     f2c:	49a3      	ldr	r1, [pc, #652]	; (11bc <loop+0x5d4>)
     f2e:	a80e      	add	r0, sp, #56	; 0x38
     f30:	f00c fcfc 	bl	d92c <Stream::readStringUntil(char, unsigned int)>
    int outMsg = parseSerialIn(inMsg);
     f34:	a90e      	add	r1, sp, #56	; 0x38
     f36:	a812      	add	r0, sp, #72	; 0x48
     f38:	f00c fd5c 	bl	d9f4 <String::String(String const&)>
     f3c:	a812      	add	r0, sp, #72	; 0x48
     f3e:	f001 f8dd 	bl	20fc <parseSerialIn(String)>
     f42:	4681      	mov	r9, r0
     f44:	a812      	add	r0, sp, #72	; 0x48
     f46:	f00c fe3b 	bl	dbc0 <String::~String()>
    if(!sendCmdOut(outMsg)) {
     f4a:	4648      	mov	r0, r9
     f4c:	f000 fc84 	bl	1858 <sendCmdOut(int)>
     f50:	2800      	cmp	r0, #0
     f52:	f000 8126 	beq.w	11a2 <loop+0x5ba>
			break;
	}
	
	// Serial messaging
  if (BLUEPORT.available()) {
    String inMsg = BLUEPORT.readStringUntil('\r');
     f56:	a80e      	add	r0, sp, #56	; 0x38
     f58:	f00c fe32 	bl	dbc0 <String::~String()>
     f5c:	f00f fc68 	bl	10830 <usb_serial_available>
    int outMsg = parseSerialIn(inMsg);
    if(!sendCmdOut(outMsg)) {
      MONPORT.println("Sending command error!!");
    }
  }	
  if (MONPORT.available()) {
     f60:	2800      	cmp	r0, #0
     f62:	f43f af0f 	beq.w	d84 <loop+0x19c>
    String manInput = MONPORT.readStringUntil('\n');
     f66:	2378      	movs	r3, #120	; 0x78
     f68:	220a      	movs	r2, #10
     f6a:	4995      	ldr	r1, [pc, #596]	; (11c0 <loop+0x5d8>)
     f6c:	a80a      	add	r0, sp, #40	; 0x28
     f6e:	f00c fcdd 	bl	d92c <Stream::readStringUntil(char, unsigned int)>
    int len = manInput.length() - 1;
    BLUEPORT.print(manInput.substring(0, len)+'\r');
     f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     f74:	2200      	movs	r2, #0
     f76:	3b01      	subs	r3, #1
     f78:	a90a      	add	r1, sp, #40	; 0x28
     f7a:	a80e      	add	r0, sp, #56	; 0x38
     f7c:	f00d f97e 	bl	e27c <String::substring(unsigned int, unsigned int) const>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
     f80:	a90e      	add	r1, sp, #56	; 0x38
     f82:	a812      	add	r0, sp, #72	; 0x48
     f84:	f00c fd36 	bl	d9f4 <String::String(String const&)>
     f88:	210d      	movs	r1, #13
     f8a:	a812      	add	r0, sp, #72	; 0x48
     f8c:	f00d f840 	bl	e010 <operator+(StringSumHelper const&, char)>
     f90:	4601      	mov	r1, r0
     f92:	488a      	ldr	r0, [pc, #552]	; (11bc <loop+0x5d4>)
     f94:	f00c fc26 	bl	d7e4 <Print::print(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
     f98:	a812      	add	r0, sp, #72	; 0x48
     f9a:	f00c fe11 	bl	dbc0 <String::~String()>
     f9e:	a80e      	add	r0, sp, #56	; 0x38
     fa0:	f00c fe0e 	bl	dbc0 <String::~String()>
		MONPORT.printf("Sent to BLUEPORT: %s\n", manInput.c_str());
     fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     fa6:	4987      	ldr	r1, [pc, #540]	; (11c4 <loop+0x5dc>)
     fa8:	4885      	ldr	r0, [pc, #532]	; (11c0 <loop+0x5d8>)
     faa:	f00c fcb1 	bl	d910 <Print::printf(char const*, ...)>
    if(!sendCmdOut(outMsg)) {
      MONPORT.println("Sending command error!!");
    }
  }	
  if (MONPORT.available()) {
    String manInput = MONPORT.readStringUntil('\n');
     fae:	a80a      	add	r0, sp, #40	; 0x28
     fb0:	f00c fe06 	bl	dbc0 <String::~String()>
		MONPORT.printf("Sent to BLUEPORT: %s\n", manInput.c_str());
  }

	// Stay awake or go to sleep?...
	// ...first check all other working states
	if( (working_state.mon_state == MONSTATE_OFF) &&
     fb4:	7862      	ldrb	r2, [r4, #1]
     fb6:	4b84      	ldr	r3, [pc, #528]	; (11c8 <loop+0x5e0>)
			(working_state.ble_state == BLESTATE_OFF) &&
     fb8:	2a00      	cmp	r2, #0
     fba:	f43f aee8 	beq.w	d8e <loop+0x1a6>
			(working_state.bt_state == BTSTATE_OFF) ) {
		if(working_state.rec_state == RECSTATE_WAIT) working_state.rec_state = RECSTATE_REQ_WAIT;
		ready_to_sleep = true;
	}
	else {
		ready_to_sleep = false;
     fbe:	2300      	movs	r3, #0
     fc0:	7033      	strb	r3, [r6, #0]
     fc2:	e6f2      	b.n	daa <loop+0x1c2>
			break;
		}
		
		case BLESTATE_REQ_DIS: {
			BLE_conn_id = 0;
			if(working_state.bt_state == BTSTATE_CONNECTED) {
     fc4:	78a3      	ldrb	r3, [r4, #2]
     fc6:	4980      	ldr	r1, [pc, #512]	; (11c8 <loop+0x5e0>)
			}
			break;
		}
		
		case BLESTATE_REQ_DIS: {
			BLE_conn_id = 0;
     fc8:	4880      	ldr	r0, [pc, #512]	; (11cc <loop+0x5e4>)
			if(working_state.bt_state == BTSTATE_CONNECTED) {
     fca:	2b04      	cmp	r3, #4
			}
			break;
		}
		
		case BLESTATE_REQ_DIS: {
			BLE_conn_id = 0;
     fcc:	f04f 0200 	mov.w	r2, #0
			if(working_state.bt_state == BTSTATE_CONNECTED) {
				working_state.ble_state = BLESTATE_REQ_ADV;
     fd0:	bf0c      	ite	eq
     fd2:	2302      	moveq	r3, #2
			}
			else {
				working_state.ble_state = BLESTATE_REQ_OFF;
     fd4:	2307      	movne	r3, #7
			}
			break;
		}
		
		case BLESTATE_REQ_DIS: {
			BLE_conn_id = 0;
     fd6:	6002      	str	r2, [r0, #0]
			if(working_state.bt_state == BTSTATE_CONNECTED) {
				working_state.ble_state = BLESTATE_REQ_ADV;
			}
			else {
				working_state.ble_state = BLESTATE_REQ_OFF;
     fd8:	70cb      	strb	r3, [r1, #3]
     fda:	e6a5      	b.n	d28 <loop+0x140>
			working_state.ble_state = BLESTATE_CONNECTED;
			break;
		}
		
		case BLESTATE_CONNECTED: {
			if(working_state.bt_state == BTSTATE_CONNECTED) {
     fdc:	78a3      	ldrb	r3, [r4, #2]
     fde:	2b04      	cmp	r3, #4
     fe0:	f47f aea2 	bne.w	d28 <loop+0x140>
				startLED(&leds[LED_BLUETOOTH], LED_MODE_ON);
     fe4:	2101      	movs	r1, #1
     fe6:	4874      	ldr	r0, [pc, #464]	; (11b8 <loop+0x5d0>)
     fe8:	f002 fcbc 	bl	3964 <startLED(leds_s*, lMode)>
     fec:	e69c      	b.n	d28 <loop+0x140>
			}
			break;
		}
			
		case RECSTATE_RESTART: {
			prepareRecording(true);
     fee:	2001      	movs	r0, #1

  // REC state actions
	switch(working_state.rec_state) {
		case RECSTATE_REQ_ON: {
			next_record.cnt = 0;
			prepareRecording(true);
     ff0:	f002 fece 	bl	3d90 <prepareRecording(bool)>
			working_state.rec_state = RECSTATE_ON;
     ff4:	2302      	movs	r3, #2
			startRecording(next_record.path);
     ff6:	4976      	ldr	r1, [pc, #472]	; (11d0 <loop+0x5e8>)
  // REC state actions
	switch(working_state.rec_state) {
		case RECSTATE_REQ_ON: {
			next_record.cnt = 0;
			prepareRecording(true);
			working_state.rec_state = RECSTATE_ON;
     ff8:	7023      	strb	r3, [r4, #0]
			startRecording(next_record.path);
     ffa:	a812      	add	r0, sp, #72	; 0x48
     ffc:	f00c fcfa 	bl	d9f4 <String::String(String const&)>
    1000:	a812      	add	r0, sp, #72	; 0x48
    1002:	f002 ff49 	bl	3e98 <startRecording(String)>
    1006:	a812      	add	r0, sp, #72	; 0x48
    1008:	f00c fdda 	bl	dbc0 <String::~String()>
			if(working_state.ble_state == BLESTATE_CONNECTED) {
    100c:	78e3      	ldrb	r3, [r4, #3]
    100e:	2b05      	cmp	r3, #5
    1010:	f47f ae57 	bne.w	cc2 <loop+0xda>
				sendCmdOut(BCNOT_REC_STATE);
    1014:	201a      	movs	r0, #26
    1016:	f000 fc1f 	bl	1858 <sendCmdOut(int)>
				sendCmdOut(BCNOT_FILEPATH);
    101a:	2015      	movs	r0, #21
    101c:	f000 fc1c 	bl	1858 <sendCmdOut(int)>
    1020:	e64f      	b.n	cc2 <loop+0xda>
			break;
	}
  // BLE state actions
	switch(working_state.ble_state) {
		case BLESTATE_REQ_ADV: {
			if(working_state.bt_state == BTSTATE_CONNECTED) {
    1022:	78a3      	ldrb	r3, [r4, #2]
    1024:	2b04      	cmp	r3, #4
    1026:	f000 814f 	beq.w	12c8 <loop+0x6e0>
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_FAST);
			}
			else {
				// bc127Reset();
				// delay(500);
				bc127BlueOn();
    102a:	f000 fc0d 	bl	1848 <bc127BlueOn()>
				delay(500);
    102e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1032:	f00d ffe1 	bl	eff8 <delay>
				startLED(&leds[LED_BLUETOOTH], LED_MODE_WAITING);
    1036:	2102      	movs	r1, #2
    1038:	485f      	ldr	r0, [pc, #380]	; (11b8 <loop+0x5d0>)
    103a:	f002 fc93 	bl	3964 <startLED(leds_s*, lMode)>
  }

  // trigger once after the given number of seconds
  AlarmID_t timerOnce(time_t value, OnTick_t onTickHandler) {
    if (value <= 0) return dtINVALID_ALARM_ID;
    return create(value, onTickHandler, true, dtTimer);
    103e:	2301      	movs	r3, #1
    1040:	9300      	str	r3, [sp, #0]
    1042:	4a64      	ldr	r2, [pc, #400]	; (11d4 <loop+0x5ec>)
    1044:	485b      	ldr	r0, [pc, #364]	; (11b4 <loop+0x5cc>)
    1046:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    104a:	f00a faa9 	bl	b5a0 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)>
				alarm_adv_id = Alarm.timerOnce(BLEADV_TIMEOUT_S, alarmAdvTimeout);
    104e:	f8c8 0000 	str.w	r0, [r8]
			}
			bc127AdvStart();
    1052:	f000 fbfd 	bl	1850 <bc127AdvStart()>
			working_state.ble_state = BLESTATE_ADV;
    1056:	2303      	movs	r3, #3
    1058:	70e3      	strb	r3, [r4, #3]
			break;
    105a:	e665      	b.n	d28 <loop+0x140>
  }

  // REC state actions
	switch(working_state.rec_state) {
		case RECSTATE_REQ_ON: {
			next_record.cnt = 0;
    105c:	2300      	movs	r3, #0
			prepareRecording(true);
    105e:	2001      	movs	r0, #1
  }

  // REC state actions
	switch(working_state.rec_state) {
		case RECSTATE_REQ_ON: {
			next_record.cnt = 0;
    1060:	61fb      	str	r3, [r7, #28]
    1062:	e7c5      	b.n	ff0 <loop+0x408>
			}
			break;
		}
		
		case RECSTATE_REQ_WAIT: {
			stopRecording(next_record.path);
    1064:	495a      	ldr	r1, [pc, #360]	; (11d0 <loop+0x5e8>)
    1066:	a812      	add	r0, sp, #72	; 0x48
    1068:	f00c fcc4 	bl	d9f4 <String::String(String const&)>
    106c:	a812      	add	r0, sp, #72	; 0x48
    106e:	f003 fc01 	bl	4874 <stopRecording(String)>
    1072:	a812      	add	r0, sp, #72	; 0x48
    1074:	f00c fda4 	bl	dbc0 <String::~String()>
			pauseRecording();
    1078:	f002 ff58 	bl	3f2c <pauseRecording()>
			break;
    107c:	e621      	b.n	cc2 <loop+0xda>
		}
		
		case RECSTATE_ON: {
			continueRecording();
    107e:	f003 fbc3 	bl	4808 <continueRecording()>
			detectPeaks();
    1082:	f003 f83d 	bl	4100 <detectPeaks()>
			break;
    1086:	e61c      	b.n	cc2 <loop+0xda>
	if(but_rec.fallingEdge()) button_call = (enum bCalls)BUTTON_RECORD_PIN;
	if(but_mon.fallingEdge()) button_call = (enum bCalls)BUTTON_MONITOR_PIN;
	if(but_blue.fallingEdge()) button_call = (enum bCalls)BUTTON_BLUETOOTH_PIN;
    
  // centralized button call actions coming from SLEEP or WORK mode
  if(button_call == BUTTON_RECORD_PIN) {
    1088:	782b      	ldrb	r3, [r5, #0]
    108a:	2b02      	cmp	r3, #2
    108c:	d05e      	beq.n	114c <loop+0x564>
			// Alarm.free(alarm_rec_id);
			working_state.rec_state = RECSTATE_REQ_OFF;
    }
		button_call = (enum bCalls)BCALL_NONE;
  }
  if(button_call == BUTTON_MONITOR_PIN) {
    108e:	2b10      	cmp	r3, #16
    1090:	d047      	beq.n	1122 <loop+0x53a>
		else {
			working_state.mon_state = MONSTATE_REQ_OFF;
		}
		button_call = (enum bCalls)BCALL_NONE;
	}
  if(button_call == BUTTON_BLUETOOTH_PIN) {
    1092:	2b15      	cmp	r3, #21
    1094:	f47f ade8 	bne.w	c68 <loop+0x80>
    1098:	e5d0      	b.n	c3c <loop+0x54>
	}
  // MON state actions
	switch(working_state.mon_state) {
		case MONSTATE_REQ_ON: {
			MONPORT.printf("MON req... states: BT %d, BLE %d, REC %d, MON %d\n",
				working_state.bt_state, working_state.ble_state,
    109a:	f89a 2002 	ldrb.w	r2, [sl, #2]
    109e:	f89a 3003 	ldrb.w	r3, [sl, #3]
				working_state.rec_state, working_state.mon_state);
    10a2:	f89a 0000 	ldrb.w	r0, [sl]
    10a6:	f89a 1001 	ldrb.w	r1, [sl, #1]
    10aa:	e88d 0003 	stmia.w	sp, {r0, r1}
    10ae:	494a      	ldr	r1, [pc, #296]	; (11d8 <loop+0x5f0>)
    10b0:	4843      	ldr	r0, [pc, #268]	; (11c0 <loop+0x5d8>)
    10b2:	f00c fc2d 	bl	d910 <Print::printf(char const*, ...)>
			startLED(&leds[LED_MONITOR], LED_MODE_ON);
    10b6:	4649      	mov	r1, r9
    10b8:	4848      	ldr	r0, [pc, #288]	; (11dc <loop+0x5f4>)
    10ba:	f002 fc53 	bl	3964 <startLED(leds_s*, lMode)>
			startMonitoring();
    10be:	f002 ffb7 	bl	4030 <startMonitoring()>
			working_state.mon_state = MONSTATE_ON;
    10c2:	2303      	movs	r3, #3
    10c4:	f88a 3001 	strb.w	r3, [sl, #1]
			if(working_state.bt_state == BTSTATE_CONNECTED) {
    10c8:	f89a 3002 	ldrb.w	r3, [sl, #2]
    10cc:	2b04      	cmp	r3, #4
    10ce:	f000 8110 	beq.w	12f2 <loop+0x70a>
				sendCmdOut(BCCMD_MON_START);
				Alarm.delay(50);
				sendCmdOut(BCCMD_VOL_A2DP);
				Alarm.delay(50);
			}
			if(working_state.ble_state == BLESTATE_CONNECTED) {
    10d2:	78e3      	ldrb	r3, [r4, #3]
    10d4:	2b05      	cmp	r3, #5
    10d6:	f47f ae06 	bne.w	ce6 <loop+0xfe>
				sendCmdOut(BCNOT_MON_STATE);
    10da:	2019      	movs	r0, #25
    10dc:	f000 fbbc 	bl	1858 <sendCmdOut(int)>
				Alarm.delay(50);
    10e0:	2132      	movs	r1, #50	; 0x32
    10e2:	4834      	ldr	r0, [pc, #208]	; (11b4 <loop+0x5cc>)
    10e4:	f00a f9f0 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
    10e8:	e5fd      	b.n	ce6 <loop+0xfe>
			}
			break;
		}
		
		case MONSTATE_ON: {
			setHpGain();
    10ea:	f002 ffdb 	bl	40a4 <setHpGain()>
			detectPeaks();
    10ee:	f003 f807 	bl	4100 <detectPeaks()>
			break;
    10f2:	e5f8      	b.n	ce6 <loop+0xfe>
		}
		
		case MONSTATE_REQ_OFF: {
			stopMonitoring();
    10f4:	f002 ffd0 	bl	4098 <stopMonitoring()>
			stopLED(&leds[LED_MONITOR]);
    10f8:	4838      	ldr	r0, [pc, #224]	; (11dc <loop+0x5f4>)
    10fa:	f002 fc7f 	bl	39fc <stopLED(leds_s*)>
			stopLED(&leds[LED_PEAK]);
    10fe:	4838      	ldr	r0, [pc, #224]	; (11e0 <loop+0x5f8>)
    1100:	f002 fc7c 	bl	39fc <stopLED(leds_s*)>
			if(working_state.bt_state == BTSTATE_CONNECTED) {
    1104:	f89a 3002 	ldrb.w	r3, [sl, #2]
    1108:	2b04      	cmp	r3, #4
    110a:	f000 80ea 	beq.w	12e2 <loop+0x6fa>
				sendCmdOut(BCCMD_MON_STOP);
				Alarm.delay(50);
			}
			if(working_state.ble_state == BLESTATE_CONNECTED) {
    110e:	78e3      	ldrb	r3, [r4, #3]
    1110:	2b05      	cmp	r3, #5
    1112:	f000 80de 	beq.w	12d2 <loop+0x6ea>
				sendCmdOut(BCNOT_MON_STATE);
				Alarm.delay(50);
			}
			working_state.mon_state = MONSTATE_OFF;
    1116:	2300      	movs	r3, #0
    1118:	7063      	strb	r3, [r4, #1]
			break;
    111a:	e5e4      	b.n	ce6 <loop+0xfe>
	// Stay awake or go to sleep?...
	// ...first check all other working states
	if( (working_state.mon_state == MONSTATE_OFF) &&
			(working_state.ble_state == BLESTATE_OFF) &&
			(working_state.bt_state == BTSTATE_OFF) ) {
		if(working_state.rec_state == RECSTATE_WAIT) working_state.rec_state = RECSTATE_REQ_WAIT;
    111c:	2203      	movs	r2, #3
    111e:	701a      	strb	r2, [r3, #0]
    1120:	e641      	b.n	da6 <loop+0x1be>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1122:	2124      	movs	r1, #36	; 0x24
    1124:	482f      	ldr	r0, [pc, #188]	; (11e4 <loop+0x5fc>)
			working_state.rec_state = RECSTATE_REQ_OFF;
    }
		button_call = (enum bCalls)BCALL_NONE;
  }
  if(button_call == BUTTON_MONITOR_PIN) {
    MONPORT.print("Monitor button pressed: mon_state = "); MONPORT.println(working_state.mon_state);
    1126:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 11c8 <loop+0x5e0>
    112a:	f00f fbab 	bl	10884 <usb_serial_write>
    112e:	7861      	ldrb	r1, [r4, #1]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1130:	4823      	ldr	r0, [pc, #140]	; (11c0 <loop+0x5d8>)
    1132:	f00c fb7d 	bl	d830 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1136:	4822      	ldr	r0, [pc, #136]	; (11c0 <loop+0x5d8>)
    1138:	f00c fbd2 	bl	d8e0 <Print::println()>
		if(working_state.mon_state == MONSTATE_OFF) {
    113c:	7863      	ldrb	r3, [r4, #1]
    113e:	2b00      	cmp	r3, #0
    1140:	f040 80aa 	bne.w	1298 <loop+0x6b0>
			working_state.mon_state = MONSTATE_REQ_ON;
    1144:	2301      	movs	r3, #1
    1146:	f889 3001 	strb.w	r3, [r9, #1]
    114a:	e58b      	b.n	c64 <loop+0x7c>
    114c:	2123      	movs	r1, #35	; 0x23
    114e:	4826      	ldr	r0, [pc, #152]	; (11e8 <loop+0x600>)
	if(but_mon.fallingEdge()) button_call = (enum bCalls)BUTTON_MONITOR_PIN;
	if(but_blue.fallingEdge()) button_call = (enum bCalls)BUTTON_BLUETOOTH_PIN;
    
  // centralized button call actions coming from SLEEP or WORK mode
  if(button_call == BUTTON_RECORD_PIN) {
    MONPORT.print("Record button pressed: rec_state = "); MONPORT.println(working_state.rec_state);
    1150:	f8df 9074 	ldr.w	r9, [pc, #116]	; 11c8 <loop+0x5e0>
    1154:	f00f fb96 	bl	10884 <usb_serial_write>
    1158:	7821      	ldrb	r1, [r4, #0]
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    115a:	4819      	ldr	r0, [pc, #100]	; (11c0 <loop+0x5d8>)
    115c:	f00c fb68 	bl	d830 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1160:	4817      	ldr	r0, [pc, #92]	; (11c0 <loop+0x5d8>)
    1162:	f00c fbbd 	bl	d8e0 <Print::println()>
    if(working_state.rec_state == RECSTATE_OFF) {
    1166:	7823      	ldrb	r3, [r4, #0]
    1168:	2b00      	cmp	r3, #0
    116a:	f040 809d 	bne.w	12a8 <loop+0x6c0>
			working_state.rec_state = RECSTATE_REQ_ON;
    116e:	2301      	movs	r3, #1
    1170:	f889 3000 	strb.w	r3, [r9]
    1174:	e576      	b.n	c64 <loop+0x7c>
			break;
		}
		
		case BTSTATE_REQ_DISC: {
			if(working_state.ble_state == BLESTATE_CONNECTED) {
				sendCmdOut(BCCMD_DEV_DISCONNECT1);
    1176:	2007      	movs	r0, #7
    1178:	f000 fb6e 	bl	1858 <sendCmdOut(int)>
				Alarm.delay(100);
    117c:	2164      	movs	r1, #100	; 0x64
    117e:	480d      	ldr	r0, [pc, #52]	; (11b4 <loop+0x5cc>)
    1180:	f00a f9a2 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
				sendCmdOut(BCCMD_DEV_DISCONNECT2);
    1184:	2008      	movs	r0, #8
    1186:	f000 fb67 	bl	1858 <sendCmdOut(int)>
				Alarm.delay(100);
    118a:	2164      	movs	r1, #100	; 0x64
    118c:	4809      	ldr	r0, [pc, #36]	; (11b4 <loop+0x5cc>)
    118e:	f00a f99b 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_SLOW);
    1192:	2107      	movs	r1, #7
    1194:	4808      	ldr	r0, [pc, #32]	; (11b8 <loop+0x5d0>)
    1196:	f002 fbe5 	bl	3964 <startLED(leds_s*, lMode)>
				sendCmdOut(BCNOT_BT_STATE);
    119a:	2014      	movs	r0, #20
    119c:	f000 fb5c 	bl	1858 <sendCmdOut(int)>
    11a0:	e5d8      	b.n	d54 <loop+0x16c>
    11a2:	2117      	movs	r1, #23
    11a4:	4811      	ldr	r0, [pc, #68]	; (11ec <loop+0x604>)
    11a6:	f00f fb6d 	bl	10884 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    11aa:	4805      	ldr	r0, [pc, #20]	; (11c0 <loop+0x5d8>)
    11ac:	f00c fb98 	bl	d8e0 <Print::println()>
    11b0:	e6d1      	b.n	f56 <loop+0x36e>
    11b2:	bf00      	nop
    11b4:	1fff668c 	.word	0x1fff668c
    11b8:	1fff59fc 	.word	0x1fff59fc
    11bc:	1fff4ad4 	.word	0x1fff4ad4
    11c0:	1fff4b00 	.word	0x1fff4b00
    11c4:	00016bf4 	.word	0x00016bf4
    11c8:	1fff5820 	.word	0x1fff5820
    11cc:	1fff596c 	.word	0x1fff596c
    11d0:	1fff574c 	.word	0x1fff574c
    11d4:	00004a9d 	.word	0x00004a9d
    11d8:	00016ba8 	.word	0x00016ba8
    11dc:	1fff59e4 	.word	0x1fff59e4
    11e0:	1fff5a14 	.word	0x1fff5a14
    11e4:	00016b58 	.word	0x00016b58
    11e8:	00016b34 	.word	0x00016b34
    11ec:	00016bdc 	.word	0x00016bdc
    11f0:	2117      	movs	r1, #23
    11f2:	489e      	ldr	r0, [pc, #632]	; (146c <loop+0x884>)
    11f4:	f00f fb46 	bl	10884 <usb_serial_write>
    11f8:	489d      	ldr	r0, [pc, #628]	; (1470 <loop+0x888>)
    11fa:	f00c fb71 	bl	d8e0 <Print::println()>
     *
     *  @return this
     ***********************************************************************************/
    SnoozeBlock & operator += ( const SnoozeBlock &rhs ) {
        
        if ( isDriver ) return *this;
    11fe:	4b9d      	ldr	r3, [pc, #628]	; (1474 <loop+0x88c>)
    1200:	4a9c      	ldr	r2, [pc, #624]	; (1474 <loop+0x88c>)
    1202:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    1206:	bb43      	cbnz	r3, 125a <loop+0x672>
        //int b = local_block;
        if ( local_block == -1 ) local_block = global_block_count++;
    1208:	f992 0024 	ldrsb.w	r0, [r2, #36]	; 0x24
    120c:	1c43      	adds	r3, r0, #1
    120e:	f000 80e4 	beq.w	13da <loop+0x7f2>
        
        if ( rhs.isDriver ) {
    1212:	4b99      	ldr	r3, [pc, #612]	; (1478 <loop+0x890>)
    1214:	4a98      	ldr	r2, [pc, #608]	; (1478 <loop+0x890>)
    1216:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    121a:	2b00      	cmp	r3, #0
    121c:	d078      	beq.n	1310 <loop+0x728>
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
    121e:	4b97      	ldr	r3, [pc, #604]	; (147c <loop+0x894>)
    1220:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
            
            for ( ; p; p = p->next_block[local_block] ) if ( p == ( SnoozeBlock * )&rhs ) return *this;
    1224:	b15b      	cbz	r3, 123e <loop+0x656>
    1226:	4293      	cmp	r3, r2
    1228:	bf18      	it	ne
    122a:	0082      	lslne	r2, r0, #2
    122c:	d103      	bne.n	1236 <loop+0x64e>
    122e:	e014      	b.n	125a <loop+0x672>
    1230:	4991      	ldr	r1, [pc, #580]	; (1478 <loop+0x890>)
    1232:	428b      	cmp	r3, r1
    1234:	d011      	beq.n	125a <loop+0x672>
    1236:	4413      	add	r3, r2
    1238:	685b      	ldr	r3, [r3, #4]
    123a:	2b00      	cmp	r3, #0
    123c:	d1f8      	bne.n	1230 <loop+0x648>
            
            uint8_t idx = local_block;
            p = SnoozeBlock::root_block[idx];
    123e:	b2c0      	uxtb	r0, r0
    1240:	4b8e      	ldr	r3, [pc, #568]	; (147c <loop+0x894>)
    1242:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1246:	0081      	lsls	r1, r0, #2
            for ( ; p->next_block[idx]; p = p->next_block[idx] );
    1248:	185a      	adds	r2, r3, r1
    124a:	6853      	ldr	r3, [r2, #4]
    124c:	2b00      	cmp	r3, #0
    124e:	d1fb      	bne.n	1248 <loop+0x660>
            p->next_block[idx] = ( SnoozeBlock * )&rhs;
            next_block[idx] = NULL;
    1250:	4888      	ldr	r0, [pc, #544]	; (1474 <loop+0x88c>)
    1252:	4401      	add	r1, r0
            for ( ; p; p = p->next_block[local_block] ) if ( p == ( SnoozeBlock * )&rhs ) return *this;
            
            uint8_t idx = local_block;
            p = SnoozeBlock::root_block[idx];
            for ( ; p->next_block[idx]; p = p->next_block[idx] );
            p->next_block[idx] = ( SnoozeBlock * )&rhs;
    1254:	4888      	ldr	r0, [pc, #544]	; (1478 <loop+0x890>)
    1256:	6050      	str	r0, [r2, #4]
            next_block[idx] = NULL;
    1258:	604b      	str	r3, [r1, #4]
			MONPORT.printf("Delta: %02dh%02dm%02ds\n", 
										tm3.Hour, tm3.Minute, tm3.Second);
			if(ready_to_sleep) {
				MONPORT.println("Setting up Snooze alarm");
				snooze_config += snooze_rec;
				snooze_rec.setRtcTimer(tm3.Hour, tm3.Minute, tm3.Second);
    125a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    125e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    1262:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    1266:	4884      	ldr	r0, [pc, #528]	; (1478 <loop+0x890>)
    1268:	f008 fe9c 	bl	9fa4 <SnoozeAlarm::setRtcTimer(unsigned char, unsigned char, unsigned char)>
				working_state.rec_state = RECSTATE_IDLE;
    126c:	2306      	movs	r3, #6
    126e:	7023      	strb	r3, [r4, #0]
				if(working_state.ble_state == BLESTATE_CONNECTED) {
    1270:	78e3      	ldrb	r3, [r4, #3]
    1272:	2b05      	cmp	r3, #5
    1274:	f47f acc1 	bne.w	bfa <loop+0x12>
					sendCmdOut(BCNOT_REC_STATE);
    1278:	201a      	movs	r0, #26
    127a:	f000 faed 	bl	1858 <sendCmdOut(int)>
					sendCmdOut(BCNOT_FILEPATH);
    127e:	2015      	movs	r0, #21
    1280:	f000 faea 	bl	1858 <sendCmdOut(int)>
					delay(100);
    1284:	2064      	movs	r0, #100	; 0x64
    1286:	f00d feb7 	bl	eff8 <delay>
    128a:	e4b6      	b.n	bfa <loop+0x12>
			Alarm.delay(100);
			if(working_state.bt_state != BTSTATE_OFF) {
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_FAST);
			}
			else {
				bc127BlueOff();
    128c:	f000 fade 	bl	184c <bc127BlueOff()>
				stopLED(&leds[LED_BLUETOOTH]);
    1290:	487b      	ldr	r0, [pc, #492]	; (1480 <loop+0x898>)
    1292:	f002 fbb3 	bl	39fc <stopLED(leds_s*)>
    1296:	e545      	b.n	d24 <loop+0x13c>
    MONPORT.print("Monitor button pressed: mon_state = "); MONPORT.println(working_state.mon_state);
		if(working_state.mon_state == MONSTATE_OFF) {
			working_state.mon_state = MONSTATE_REQ_ON;
		}
		else {
			working_state.mon_state = MONSTATE_REQ_OFF;
    1298:	2302      	movs	r3, #2
    129a:	f889 3001 	strb.w	r3, [r9, #1]
    129e:	e4e1      	b.n	c64 <loop+0x7c>
    MONPORT.print("Bluetooth button pressed: ble_state = "); MONPORT.println(working_state.ble_state);
		if(working_state.ble_state == BLESTATE_OFF) {
			working_state.ble_state = BLESTATE_REQ_ADV;
		}
		else {
			working_state.ble_state = BLESTATE_REQ_OFF;
    12a0:	2307      	movs	r3, #7
    12a2:	f889 3003 	strb.w	r3, [r9, #3]
    12a6:	e4dd      	b.n	c64 <loop+0x7c>
     *  @param rhs Driver or SnoozeBlock(s) to subtract with the lhs
     *
     *  @return this
     ***********************************************************************************/
    SnoozeBlock & operator -= ( const SnoozeBlock &rhs ) {
        if ( isDriver || local_block == -1 ) return *this;
    12a8:	4b72      	ldr	r3, [pc, #456]	; (1474 <loop+0x88c>)
    12aa:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
    12ae:	2900      	cmp	r1, #0
    12b0:	d06c      	beq.n	138c <loop+0x7a4>
    }
    else {
			snooze_config -= snooze_rec;
			// Alarm.free(alarm_wait_id);
			// Alarm.free(alarm_rec_id);
			working_state.rec_state = RECSTATE_REQ_OFF;
    12b2:	2308      	movs	r3, #8
    12b4:	7023      	strb	r3, [r4, #0]
    12b6:	e4d5      	b.n	c64 <loop+0x7c>
  }

  // trigger once at given time of day
  AlarmID_t alarmOnce(time_t value, OnTick_t onTickHandler) {
    if (value <= 0 || value > SECS_PER_DAY) return dtINVALID_ALARM_ID;
    return create(value, onTickHandler, true, dtDailyAlarm);
    12b8:	f8cd 9000 	str.w	r9, [sp]
    12bc:	2301      	movs	r3, #1
    12be:	4a71      	ldr	r2, [pc, #452]	; (1484 <loop+0x89c>)
    12c0:	4871      	ldr	r0, [pc, #452]	; (1488 <loop+0x8a0>)
    12c2:	f00a f96d 	bl	b5a0 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)>
    12c6:	e5c3      	b.n	e50 <loop+0x268>
	}
  // BLE state actions
	switch(working_state.ble_state) {
		case BLESTATE_REQ_ADV: {
			if(working_state.bt_state == BTSTATE_CONNECTED) {
				startLED(&leds[LED_BLUETOOTH], LED_MODE_IDLE_FAST);
    12c8:	2106      	movs	r1, #6
    12ca:	486d      	ldr	r0, [pc, #436]	; (1480 <loop+0x898>)
    12cc:	f002 fb4a 	bl	3964 <startLED(leds_s*, lMode)>
    12d0:	e6bf      	b.n	1052 <loop+0x46a>
			if(working_state.bt_state == BTSTATE_CONNECTED) {
				sendCmdOut(BCCMD_MON_STOP);
				Alarm.delay(50);
			}
			if(working_state.ble_state == BLESTATE_CONNECTED) {
				sendCmdOut(BCNOT_MON_STATE);
    12d2:	2019      	movs	r0, #25
    12d4:	f000 fac0 	bl	1858 <sendCmdOut(int)>
				Alarm.delay(50);
    12d8:	2132      	movs	r1, #50	; 0x32
    12da:	486b      	ldr	r0, [pc, #428]	; (1488 <loop+0x8a0>)
    12dc:	f00a f8f4 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
    12e0:	e719      	b.n	1116 <loop+0x52e>
		case MONSTATE_REQ_OFF: {
			stopMonitoring();
			stopLED(&leds[LED_MONITOR]);
			stopLED(&leds[LED_PEAK]);
			if(working_state.bt_state == BTSTATE_CONNECTED) {
				sendCmdOut(BCCMD_MON_STOP);
    12e2:	200c      	movs	r0, #12
    12e4:	f000 fab8 	bl	1858 <sendCmdOut(int)>
				Alarm.delay(50);
    12e8:	2132      	movs	r1, #50	; 0x32
    12ea:	4867      	ldr	r0, [pc, #412]	; (1488 <loop+0x8a0>)
    12ec:	f00a f8ec 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
    12f0:	e70d      	b.n	110e <loop+0x526>
				working_state.rec_state, working_state.mon_state);
			startLED(&leds[LED_MONITOR], LED_MODE_ON);
			startMonitoring();
			working_state.mon_state = MONSTATE_ON;
			if(working_state.bt_state == BTSTATE_CONNECTED) {
				sendCmdOut(BCCMD_MON_START);
    12f2:	200b      	movs	r0, #11
    12f4:	f000 fab0 	bl	1858 <sendCmdOut(int)>
				Alarm.delay(50);
    12f8:	2132      	movs	r1, #50	; 0x32
    12fa:	4863      	ldr	r0, [pc, #396]	; (1488 <loop+0x8a0>)
    12fc:	f00a f8e4 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
				sendCmdOut(BCCMD_VOL_A2DP);
    1300:	2011      	movs	r0, #17
    1302:	f000 faa9 	bl	1858 <sendCmdOut(int)>
				Alarm.delay(50);
    1306:	2132      	movs	r1, #50	; 0x32
    1308:	485f      	ldr	r0, [pc, #380]	; (1488 <loop+0x8a0>)
    130a:	f00a f8dd 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
    130e:	e6e0      	b.n	10d2 <loop+0x4ea>
            for ( ; p->next_block[idx]; p = p->next_block[idx] );
            p->next_block[idx] = ( SnoozeBlock * )&rhs;
            next_block[idx] = NULL;
            return *this;
        }
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
    1310:	f992 e024 	ldrsb.w	lr, [r2, #36]	; 0x24
    1314:	4a59      	ldr	r2, [pc, #356]	; (147c <loop+0x894>)
    1316:	f852 102e 	ldr.w	r1, [r2, lr, lsl #2]
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    131a:	2900      	cmp	r1, #0
    131c:	d09d      	beq.n	125a <loop+0x672>
    131e:	b2c0      	uxtb	r0, r0
                        break;
                    }
                }
                if ( !flag ) p->next_block[idx] = rhsBlock;
            }
            if ( !flag ) next_block[idx] = NULL;
    1320:	469c      	mov	ip, r3
    1322:	4b54      	ldr	r3, [pc, #336]	; (1474 <loop+0x88c>)
    1324:	0082      	lsls	r2, r0, #2
    1326:	eb03 0902 	add.w	r9, r3, r2
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
            uint8_t idx = local_block;
            bool flag = false;
            
            if ( root_block[idx] == NULL ) {
    132a:	4b54      	ldr	r3, [pc, #336]	; (147c <loop+0x894>)
    132c:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
    1330:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    1334:	f1bb 0f00 	cmp.w	fp, #0
    1338:	d025      	beq.n	1386 <loop+0x79e>
    133a:	46da      	mov	sl, fp
    133c:	e000      	b.n	1340 <loop+0x758>
                root_block[idx] = rhsBlock;
            } else {
                SnoozeBlock *p;
                for ( p = root_block[idx]; p->next_block[idx]; p = p->next_block[idx] );
    133e:	469a      	mov	sl, r3
    1340:	eb0a 0302 	add.w	r3, sl, r2
    1344:	685b      	ldr	r3, [r3, #4]
    1346:	2b00      	cmp	r3, #0
    1348:	d1f9      	bne.n	133e <loop+0x756>
                SnoozeBlock *tmpBlock = SnoozeBlock::root_block[idx];
                for ( ; tmpBlock; tmpBlock = tmpBlock->next_block[idx] ) {
                    if ( tmpBlock == rhsBlock ) {
    134a:	4559      	cmp	r1, fp
    134c:	d010      	beq.n	1370 <loop+0x788>
                root_block[idx] = rhsBlock;
            } else {
                SnoozeBlock *p;
                for ( p = root_block[idx]; p->next_block[idx]; p = p->next_block[idx] );
                SnoozeBlock *tmpBlock = SnoozeBlock::root_block[idx];
                for ( ; tmpBlock; tmpBlock = tmpBlock->next_block[idx] ) {
    134e:	4493      	add	fp, r2
    1350:	f8db 3004 	ldr.w	r3, [fp, #4]
    1354:	b13b      	cbz	r3, 1366 <loop+0x77e>
                    if ( tmpBlock == rhsBlock ) {
    1356:	4299      	cmp	r1, r3
                root_block[idx] = rhsBlock;
            } else {
                SnoozeBlock *p;
                for ( p = root_block[idx]; p->next_block[idx]; p = p->next_block[idx] );
                SnoozeBlock *tmpBlock = SnoozeBlock::root_block[idx];
                for ( ; tmpBlock; tmpBlock = tmpBlock->next_block[idx] ) {
    1358:	eb03 0b02 	add.w	fp, r3, r2
                    if ( tmpBlock == rhsBlock ) {
    135c:	d008      	beq.n	1370 <loop+0x788>
                root_block[idx] = rhsBlock;
            } else {
                SnoozeBlock *p;
                for ( p = root_block[idx]; p->next_block[idx]; p = p->next_block[idx] );
                SnoozeBlock *tmpBlock = SnoozeBlock::root_block[idx];
                for ( ; tmpBlock; tmpBlock = tmpBlock->next_block[idx] ) {
    135e:	f8db 3004 	ldr.w	r3, [fp, #4]
    1362:	2b00      	cmp	r3, #0
    1364:	d1f7      	bne.n	1356 <loop+0x76e>
                    if ( tmpBlock == rhsBlock ) {
                        flag = true;
                        break;
                    }
                }
                if ( !flag ) p->next_block[idx] = rhsBlock;
    1366:	4492      	add	sl, r2
    1368:	f8ca 1004 	str.w	r1, [sl, #4]
            }
            if ( !flag ) next_block[idx] = NULL;
    136c:	f8c9 c004 	str.w	ip, [r9, #4]
            p->next_block[idx] = ( SnoozeBlock * )&rhs;
            next_block[idx] = NULL;
            return *this;
        }
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    1370:	4471      	add	r1, lr
    1372:	6849      	ldr	r1, [r1, #4]
    1374:	2900      	cmp	r1, #0
    1376:	f43f af70 	beq.w	125a <loop+0x672>
            uint8_t idx = local_block;
            bool flag = false;
            
            if ( root_block[idx] == NULL ) {
    137a:	4b40      	ldr	r3, [pc, #256]	; (147c <loop+0x894>)
    137c:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
    1380:	f1bb 0f00 	cmp.w	fp, #0
    1384:	d1d9      	bne.n	133a <loop+0x752>
                root_block[idx] = rhsBlock;
    1386:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    138a:	e7ef      	b.n	136c <loop+0x784>
     *  @param rhs Driver or SnoozeBlock(s) to subtract with the lhs
     *
     *  @return this
     ***********************************************************************************/
    SnoozeBlock & operator -= ( const SnoozeBlock &rhs ) {
        if ( isDriver || local_block == -1 ) return *this;
    138c:	f993 e024 	ldrsb.w	lr, [r3, #36]	; 0x24
    1390:	f1be 3fff 	cmp.w	lr, #4294967295
    1394:	d08d      	beq.n	12b2 <loop+0x6ca>
        
        if ( rhs.isDriver ) {
    1396:	4b38      	ldr	r3, [pc, #224]	; (1478 <loop+0x890>)
    1398:	4a37      	ldr	r2, [pc, #220]	; (1478 <loop+0x890>)
    139a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    139e:	b32b      	cbz	r3, 13ec <loop+0x804>
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
    13a0:	4b36      	ldr	r3, [pc, #216]	; (147c <loop+0x894>)
    13a2:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    13a6:	2b00      	cmp	r3, #0
    13a8:	d083      	beq.n	12b2 <loop+0x6ca>
                if ( p == ( SnoozeBlock * )&rhs ) {
    13aa:	4293      	cmp	r3, r2
    13ac:	ea4f 008e 	mov.w	r0, lr, lsl #2
    13b0:	d054      	beq.n	145c <loop+0x874>
    13b2:	4684      	mov	ip, r0
        
        if ( rhs.isDriver ) {
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    13b4:	eb03 020c 	add.w	r2, r3, ip
                    p = p->next_block[local_block];
                    u->next_block[local_block] = p;
                    break;
                }
                u = p;
                index++;
    13b8:	3101      	adds	r1, #1
        
        if ( rhs.isDriver ) {
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    13ba:	6853      	ldr	r3, [r2, #4]
                    p = p->next_block[local_block];
                    u->next_block[local_block] = p;
                    break;
                }
                u = p;
                index++;
    13bc:	b2c9      	uxtb	r1, r1
        
        if ( rhs.isDriver ) {
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    13be:	2b00      	cmp	r3, #0
    13c0:	f43f af77 	beq.w	12b2 <loop+0x6ca>
                if ( p == ( SnoozeBlock * )&rhs ) {
    13c4:	482c      	ldr	r0, [pc, #176]	; (1478 <loop+0x890>)
    13c6:	4283      	cmp	r3, r0
    13c8:	d1f4      	bne.n	13b4 <loop+0x7cc>
    13ca:	4660      	mov	r0, ip
                    if ( index == 0 ) {
    13cc:	2900      	cmp	r1, #0
    13ce:	d045      	beq.n	145c <loop+0x874>
                        SnoozeBlock::root_block[local_block] = p->next_block[local_block];
                        break;
                    }
                    p = p->next_block[local_block];
    13d0:	4b29      	ldr	r3, [pc, #164]	; (1478 <loop+0x890>)
    13d2:	4418      	add	r0, r3
    13d4:	6843      	ldr	r3, [r0, #4]
                    u->next_block[local_block] = p;
    13d6:	6053      	str	r3, [r2, #4]
    13d8:	e76b      	b.n	12b2 <loop+0x6ca>
     ***********************************************************************************/
    SnoozeBlock & operator += ( const SnoozeBlock &rhs ) {
        
        if ( isDriver ) return *this;
        //int b = local_block;
        if ( local_block == -1 ) local_block = global_block_count++;
    13da:	4b2c      	ldr	r3, [pc, #176]	; (148c <loop+0x8a4>)
    13dc:	492b      	ldr	r1, [pc, #172]	; (148c <loop+0x8a4>)
    13de:	7818      	ldrb	r0, [r3, #0]
    13e0:	1c43      	adds	r3, r0, #1
    13e2:	b240      	sxtb	r0, r0
    13e4:	700b      	strb	r3, [r1, #0]
    13e6:	f882 0024 	strb.w	r0, [r2, #36]	; 0x24
    13ea:	e712      	b.n	1212 <loop+0x62a>
                index++;
            }
            return *this;
        }
        
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
    13ec:	f992 c024 	ldrsb.w	ip, [r2, #36]	; 0x24
    13f0:	4b22      	ldr	r3, [pc, #136]	; (147c <loop+0x894>)
    13f2:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    13f6:	2900      	cmp	r1, #0
    13f8:	f43f af5b 	beq.w	12b2 <loop+0x6ca>
    13fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    1400:	ea4f 008e 	mov.w	r0, lr, lsl #2
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
    1404:	4b1d      	ldr	r3, [pc, #116]	; (147c <loop+0x894>)
    1406:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    140a:	b16b      	cbz	r3, 1428 <loop+0x840>
                if ( p == rhsBlock  ) {
    140c:	4299      	cmp	r1, r3
    140e:	d01a      	beq.n	1446 <loop+0x85e>
    1410:	2200      	movs	r2, #0
    1412:	e001      	b.n	1418 <loop+0x830>
    1414:	4299      	cmp	r1, r3
    1416:	d00c      	beq.n	1432 <loop+0x84a>
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    1418:	eb03 0900 	add.w	r9, r3, r0
                    p = p->next_block[local_block];
                    u->next_block[local_block] = p;
                    break;
                }
                u = p;
                index++;
    141c:	3201      	adds	r2, #1
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    141e:	f8d9 3004 	ldr.w	r3, [r9, #4]
                    p = p->next_block[local_block];
                    u->next_block[local_block] = p;
                    break;
                }
                u = p;
                index++;
    1422:	b2d2      	uxtb	r2, r2
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
    1424:	2b00      	cmp	r3, #0
    1426:	d1f5      	bne.n	1414 <loop+0x82c>
            }
            return *this;
        }
        
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    1428:	4461      	add	r1, ip
    142a:	6849      	ldr	r1, [r1, #4]
    142c:	2900      	cmp	r1, #0
    142e:	d1e9      	bne.n	1404 <loop+0x81c>
    1430:	e73f      	b.n	12b2 <loop+0x6ca>
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
                if ( p == rhsBlock  ) {
                    if ( index == 0 ) {
    1432:	b14a      	cbz	r2, 1448 <loop+0x860>
                        SnoozeBlock::root_block[local_block] = p->next_block[local_block];
                        break;
                    }
                    p = p->next_block[local_block];
    1434:	180b      	adds	r3, r1, r0
            }
            return *this;
        }
        
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    1436:	4461      	add	r1, ip
                if ( p == rhsBlock  ) {
                    if ( index == 0 ) {
                        SnoozeBlock::root_block[local_block] = p->next_block[local_block];
                        break;
                    }
                    p = p->next_block[local_block];
    1438:	685a      	ldr	r2, [r3, #4]
                    u->next_block[local_block] = p;
    143a:	f8c9 2004 	str.w	r2, [r9, #4]
            }
            return *this;
        }
        
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    143e:	6849      	ldr	r1, [r1, #4]
    1440:	2900      	cmp	r1, #0
    1442:	d1df      	bne.n	1404 <loop+0x81c>
    1444:	e735      	b.n	12b2 <loop+0x6ca>
            uint8_t index = 0;
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
                if ( p == rhsBlock  ) {
    1446:	460b      	mov	r3, r1
            }
            return *this;
        }
        
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    1448:	4461      	add	r1, ip
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
                if ( p == rhsBlock  ) {
                    if ( index == 0 ) {
                        SnoozeBlock::root_block[local_block] = p->next_block[local_block];
    144a:	4403      	add	r3, r0
    144c:	4a0b      	ldr	r2, [pc, #44]	; (147c <loop+0x894>)
            }
            return *this;
        }
        
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    144e:	6849      	ldr	r1, [r1, #4]
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
                if ( p == rhsBlock  ) {
                    if ( index == 0 ) {
                        SnoozeBlock::root_block[local_block] = p->next_block[local_block];
    1450:	685b      	ldr	r3, [r3, #4]
    1452:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
            }
            return *this;
        }
        
        SnoozeBlock *rhsBlock = SnoozeBlock::root_block[rhs.local_block];
        for ( ; rhsBlock; rhsBlock = rhsBlock->next_block[rhs.local_block] ) {
    1456:	2900      	cmp	r1, #0
    1458:	d1d4      	bne.n	1404 <loop+0x81c>
    145a:	e72a      	b.n	12b2 <loop+0x6ca>
            SnoozeBlock *p = SnoozeBlock::root_block[local_block];
            SnoozeBlock *u = SnoozeBlock::root_block[local_block];
            for ( ; p; p = p->next_block[local_block] ) {
                if ( p == ( SnoozeBlock * )&rhs ) {
                    if ( index == 0 ) {
                        SnoozeBlock::root_block[local_block] = p->next_block[local_block];
    145c:	4b06      	ldr	r3, [pc, #24]	; (1478 <loop+0x890>)
    145e:	4a07      	ldr	r2, [pc, #28]	; (147c <loop+0x894>)
    1460:	4418      	add	r0, r3
    1462:	6843      	ldr	r3, [r0, #4]
    1464:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
    1468:	e723      	b.n	12b2 <loop+0x6ca>
    146a:	bf00      	nop
    146c:	00016c54 	.word	0x00016c54
    1470:	1fff4b00 	.word	0x1fff4b00
    1474:	1fff57f8 	.word	0x1fff57f8
    1478:	1fff57a0 	.word	0x1fff57a0
    147c:	1fff6624 	.word	0x1fff6624
    1480:	1fff59fc 	.word	0x1fff59fc
    1484:	00004b25 	.word	0x00004b25
    1488:	1fff668c 	.word	0x1fff668c
    148c:	1fff6665 	.word	0x1fff6665

00001490 <_GLOBAL__sub_I_button_wakeup>:
	BT_conn_id1 = 0;
	BT_conn_id2 = 0;
	BLE_conn_id = 0;
	BT_peer_address = "";
	BT_peer_name = "auto";
}
    1490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     *  @return this
     ***********************************************************************************/
    SnoozeBlock ( void ) :
                local_block( -1 ),
                isUsed( false ),
                isDriver( false )
    1494:	4c4e      	ldr	r4, [pc, #312]	; (15d0 <_GLOBAL__sub_I_button_wakeup+0x140>)
    uint8_t  return_priority_a;
    uint8_t  return_priority_cd;
#endif
    volatile uint32_t return_core_pin_config[CORE_NUM_INTERRUPT];
public:
    SnoozeDigital( void ) {
    1496:	4b4f      	ldr	r3, [pc, #316]	; (15d4 <_GLOBAL__sub_I_button_wakeup+0x144>)
  - Teensy_recorder (PJRC)
*/
#include "main.h"

// Load drivers
SnoozeDigital 								button_wakeup; 	// Wakeup pins on Teensy 3.6:
    1498:	4a4f      	ldr	r2, [pc, #316]	; (15d8 <_GLOBAL__sub_I_button_wakeup+0x148>)
    149a:	4950      	ldr	r1, [pc, #320]	; (15dc <_GLOBAL__sub_I_button_wakeup+0x14c>)
    149c:	6023      	str	r3, [r4, #0]
    149e:	2500      	movs	r5, #0
    14a0:	27ff      	movs	r7, #255	; 0xff
        isDriver = true;
    14a2:	2601      	movs	r6, #1
    14a4:	4620      	mov	r0, r4
    14a6:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
    14aa:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    14ae:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    14b2:	f010 fc53 	bl	11d5c <__aeabi_atexit>
    14b6:	4b4a      	ldr	r3, [pc, #296]	; (15e0 <_GLOBAL__sub_I_button_wakeup+0x150>)
    uint32_t IER;
    bool SIM_SCGC6_clock_active;
    bool timer_;
public:
    SnoozeAlarm( void ) : TAR( false ), IER( false ),
                        SIM_SCGC6_clock_active( false )
    14b8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 162c <_GLOBAL__sub_I_button_wakeup+0x19c>
    14bc:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    14c0:	f883 5025 	strb.w	r5, [r3, #37]	; 0x25
																							// 2,4,6,7,9,10,11,13,16,21,22,26,30,33
SnoozeAlarm										snooze_rec;
    14c4:	4a44      	ldr	r2, [pc, #272]	; (15d8 <_GLOBAL__sub_I_button_wakeup+0x148>)
    14c6:	4947      	ldr	r1, [pc, #284]	; (15e4 <_GLOBAL__sub_I_button_wakeup+0x154>)
    14c8:	635d      	str	r5, [r3, #52]	; 0x34
    14ca:	4618      	mov	r0, r3
    14cc:	639d      	str	r5, [r3, #56]	; 0x38
    14ce:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    {
        isDriver = true;
    14d2:	f883 6026 	strb.w	r6, [r3, #38]	; 0x26
    uint32_t IER;
    bool SIM_SCGC6_clock_active;
    bool timer_;
public:
    SnoozeAlarm( void ) : TAR( false ), IER( false ),
                        SIM_SCGC6_clock_active( false )
    14d6:	f8c3 8000 	str.w	r8, [r3]
    14da:	f010 fc3f 	bl	11d5c <__aeabi_atexit>
    14de:	4b42      	ldr	r3, [pc, #264]	; (15e8 <_GLOBAL__sub_I_button_wakeup+0x158>)
SnoozeAlarm										snooze_led;
    14e0:	4a3d      	ldr	r2, [pc, #244]	; (15d8 <_GLOBAL__sub_I_button_wakeup+0x148>)
    14e2:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
    14e6:	f883 5025 	strb.w	r5, [r3, #37]	; 0x25
    14ea:	493e      	ldr	r1, [pc, #248]	; (15e4 <_GLOBAL__sub_I_button_wakeup+0x154>)
    {
        isDriver = true;
    14ec:	f883 6026 	strb.w	r6, [r3, #38]	; 0x26
    14f0:	4618      	mov	r0, r3
    uint32_t IER;
    bool SIM_SCGC6_clock_active;
    bool timer_;
public:
    SnoozeAlarm( void ) : TAR( false ), IER( false ),
                        SIM_SCGC6_clock_active( false )
    14f2:	635d      	str	r5, [r3, #52]	; 0x34
    14f4:	639d      	str	r5, [r3, #56]	; 0x38
    14f6:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    14fa:	f8c3 8000 	str.w	r8, [r3]
    14fe:	f010 fc2d 	bl	11d5c <__aeabi_atexit>
     *  @return nothing
     ***********************************************************************************/
    template<class ...Tail>
    SnoozeBlock ( SnoozeBlock &head, Tail&... tail )  : local_block( -1 ), isUsed( false ), isDriver( false ) {
        
        if ( mode < VLLS3 ) mode = RUN;
    1502:	4b3a      	ldr	r3, [pc, #232]	; (15ec <_GLOBAL__sub_I_button_wakeup+0x15c>)
     *  @param tail Driver
     *
     *  @return nothing
     ***********************************************************************************/
    template<class ...Tail>
    SnoozeBlock ( SnoozeBlock &head, Tail&... tail )  : local_block( -1 ), isUsed( false ), isDriver( false ) {
    1504:	4e3a      	ldr	r6, [pc, #232]	; (15f0 <_GLOBAL__sub_I_button_wakeup+0x160>)
        
        if ( mode < VLLS3 ) mode = RUN;
    1506:	781a      	ldrb	r2, [r3, #0]
     *  @param tail Driver
     *
     *  @return nothing
     ***********************************************************************************/
    template<class ...Tail>
    SnoozeBlock ( SnoozeBlock &head, Tail&... tail )  : local_block( -1 ), isUsed( false ), isDriver( false ) {
    1508:	f886 5025 	strb.w	r5, [r6, #37]	; 0x25
        
        if ( mode < VLLS3 ) mode = RUN;
    150c:	2a06      	cmp	r2, #6
     *  @param tail Driver
     *
     *  @return nothing
     ***********************************************************************************/
    template<class ...Tail>
    SnoozeBlock ( SnoozeBlock &head, Tail&... tail )  : local_block( -1 ), isUsed( false ), isDriver( false ) {
    150e:	f886 5026 	strb.w	r5, [r6, #38]	; 0x26
        
        if ( mode < VLLS3 ) mode = RUN;
    1512:	bf98      	it	ls
    1514:	701d      	strbls	r5, [r3, #0]
        // number of drivers connected to this Snooze Block
        int i = sizeof...( tail );
        // check for duplicate Drivers
        SnoozeBlock *p = SnoozeBlock::root_block[global_block_count];
    1516:	4d37      	ldr	r5, [pc, #220]	; (15f4 <_GLOBAL__sub_I_button_wakeup+0x164>)
     *  @param tail Driver
     *
     *  @return nothing
     ***********************************************************************************/
    template<class ...Tail>
    SnoozeBlock ( SnoozeBlock &head, Tail&... tail )  : local_block( -1 ), isUsed( false ), isDriver( false ) {
    1518:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
        
        if ( mode < VLLS3 ) mode = RUN;
        // number of drivers connected to this Snooze Block
        int i = sizeof...( tail );
        // check for duplicate Drivers
        SnoozeBlock *p = SnoozeBlock::root_block[global_block_count];
    151c:	7828      	ldrb	r0, [r5, #0]
    151e:	4f36      	ldr	r7, [pc, #216]	; (15f8 <_GLOBAL__sub_I_button_wakeup+0x168>)
     *  @param tail Driver
     *
     *  @return nothing
     ***********************************************************************************/
    template<class ...Tail>
    SnoozeBlock ( SnoozeBlock &head, Tail&... tail )  : local_block( -1 ), isUsed( false ), isDriver( false ) {
    1520:	4936      	ldr	r1, [pc, #216]	; (15fc <_GLOBAL__sub_I_button_wakeup+0x16c>)
        
        if ( mode < VLLS3 ) mode = RUN;
        // number of drivers connected to this Snooze Block
        int i = sizeof...( tail );
        // check for duplicate Drivers
        SnoozeBlock *p = SnoozeBlock::root_block[global_block_count];
    1522:	f857 2020 	ldr.w	r2, [r7, r0, lsl #2]
     *  @param tail Driver
     *
     *  @return nothing
     ***********************************************************************************/
    template<class ...Tail>
    SnoozeBlock ( SnoozeBlock &head, Tail&... tail )  : local_block( -1 ), isUsed( false ), isDriver( false ) {
    1526:	6031      	str	r1, [r6, #0]
        if ( mode < VLLS3 ) mode = RUN;
        // number of drivers connected to this Snooze Block
        int i = sizeof...( tail );
        // check for duplicate Drivers
        SnoozeBlock *p = SnoozeBlock::root_block[global_block_count];
        for ( ; p; p = p->next_block[global_block_count] ) {
    1528:	2a00      	cmp	r2, #0
    152a:	d036      	beq.n	159a <_GLOBAL__sub_I_button_wakeup+0x10a>
            if ( p == &head ) {
    152c:	42a2      	cmp	r2, r4
    152e:	d031      	beq.n	1594 <_GLOBAL__sub_I_button_wakeup+0x104>
    1530:	4613      	mov	r3, r2
    1532:	0081      	lsls	r1, r0, #2
    1534:	e001      	b.n	153a <_GLOBAL__sub_I_button_wakeup+0xaa>
    1536:	42a3      	cmp	r3, r4
    1538:	d02c      	beq.n	1594 <_GLOBAL__sub_I_button_wakeup+0x104>
        if ( mode < VLLS3 ) mode = RUN;
        // number of drivers connected to this Snooze Block
        int i = sizeof...( tail );
        // check for duplicate Drivers
        SnoozeBlock *p = SnoozeBlock::root_block[global_block_count];
        for ( ; p; p = p->next_block[global_block_count] ) {
    153a:	440b      	add	r3, r1
    153c:	685b      	ldr	r3, [r3, #4]
    153e:	2b00      	cmp	r3, #0
    1540:	d1f9      	bne.n	1536 <_GLOBAL__sub_I_button_wakeup+0xa6>
    1542:	e000      	b.n	1546 <_GLOBAL__sub_I_button_wakeup+0xb6>
            }
            root_class_address[global_block_count] = this;
            root_block[global_block_count] = &head;
        } else {
            p = root_block[global_block_count];
            for ( ; p->next_block[global_block_count]; p = p->next_block[global_block_count] );
    1544:	461a      	mov	r2, r3
    1546:	440a      	add	r2, r1
    1548:	6853      	ldr	r3, [r2, #4]
    154a:	2b00      	cmp	r3, #0
    154c:	d1fa      	bne.n	1544 <_GLOBAL__sub_I_button_wakeup+0xb4>
            p->next_block[global_block_count] = &head;
    154e:	6054      	str	r4, [r2, #4]
        }
        
        next_block[global_block_count] = NULL;
    1550:	782b      	ldrb	r3, [r5, #0]
        local_block = global_block_count;
    1552:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
            p = root_block[global_block_count];
            for ( ; p->next_block[global_block_count]; p = p->next_block[global_block_count] );
            p->next_block[global_block_count] = &head;
        }
        
        next_block[global_block_count] = NULL;
    1556:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    155a:	2200      	movs	r2, #0
        local_block = global_block_count;
        
        if ( i <= 0 ) {
            global_block_count++;
    155c:	3301      	adds	r3, #1
    155e:	702b      	strb	r3, [r5, #0]
            p = root_block[global_block_count];
            for ( ; p->next_block[global_block_count]; p = p->next_block[global_block_count] );
            p->next_block[global_block_count] = &head;
        }
        
        next_block[global_block_count] = NULL;
    1560:	6072      	str	r2, [r6, #4]
// install driver into SnoozeBlock
SnoozeBlock 									snooze_config(button_wakeup);
    1562:	4a1d      	ldr	r2, [pc, #116]	; (15d8 <_GLOBAL__sub_I_button_wakeup+0x148>)
    1564:	4926      	ldr	r1, [pc, #152]	; (1600 <_GLOBAL__sub_I_button_wakeup+0x170>)
    1566:	4822      	ldr	r0, [pc, #136]	; (15f0 <_GLOBAL__sub_I_button_wakeup+0x160>)
    1568:	f010 fbf8 	bl	11d5c <__aeabi_atexit>
    156c:	2100      	movs	r1, #0
    156e:	4825      	ldr	r0, [pc, #148]	; (1604 <_GLOBAL__sub_I_button_wakeup+0x174>)
    1570:	f00c fa14 	bl	d99c <String::String(char const*)>


volatile struct wState 				working_state;
struct rWindow								rec_window;
struct recInfo								last_record;
    1574:	4a18      	ldr	r2, [pc, #96]	; (15d8 <_GLOBAL__sub_I_button_wakeup+0x148>)
    1576:	4924      	ldr	r1, [pc, #144]	; (1608 <_GLOBAL__sub_I_button_wakeup+0x178>)
    1578:	4824      	ldr	r0, [pc, #144]	; (160c <_GLOBAL__sub_I_button_wakeup+0x17c>)
    157a:	f010 fbef 	bl	11d5c <__aeabi_atexit>
    157e:	2100      	movs	r1, #0
    1580:	4823      	ldr	r0, [pc, #140]	; (1610 <_GLOBAL__sub_I_button_wakeup+0x180>)
    1582:	f00c fa0b 	bl	d99c <String::String(char const*)>
struct recInfo								next_record;
    1586:	4a14      	ldr	r2, [pc, #80]	; (15d8 <_GLOBAL__sub_I_button_wakeup+0x148>)
    1588:	491f      	ldr	r1, [pc, #124]	; (1608 <_GLOBAL__sub_I_button_wakeup+0x178>)
    158a:	4822      	ldr	r0, [pc, #136]	; (1614 <_GLOBAL__sub_I_button_wakeup+0x184>)
	BT_conn_id1 = 0;
	BT_conn_id2 = 0;
	BLE_conn_id = 0;
	BT_peer_address = "";
	BT_peer_name = "auto";
}
    158c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}


volatile struct wState 				working_state;
struct rWindow								rec_window;
struct recInfo								last_record;
struct recInfo								next_record;
    1590:	f010 bbe4 	b.w	11d5c <__aeabi_atexit>
        SnoozeBlock *p = SnoozeBlock::root_block[global_block_count];
        for ( ; p; p = p->next_block[global_block_count] ) {
            if ( p == &head ) {
                // last driver that is a duplicate, increment global block count
                if ( i <= 0 ) {
                    global_block_count++;
    1594:	3001      	adds	r0, #1
    1596:	7028      	strb	r0, [r5, #0]
    1598:	e7e3      	b.n	1562 <_GLOBAL__sub_I_button_wakeup+0xd2>
        }
        // update linked list
        // set the root block
        if ( root_block[global_block_count] == NULL ) {
            // update registers on first driver installed only once
            if ( global_block_count == 0 ) {
    159a:	b130      	cbz	r0, 15aa <_GLOBAL__sub_I_button_wakeup+0x11a>
                SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
                SIM_SOPT1 &= ~SIM_SOPT1_USBSSTBY;
                attachInterruptVector( IRQ_LLWU, wakeupIsr );
                NVIC_ENABLE_IRQ( IRQ_LLWU );
            }
            root_class_address[global_block_count] = this;
    159c:	782b      	ldrb	r3, [r5, #0]
    159e:	4a1e      	ldr	r2, [pc, #120]	; (1618 <_GLOBAL__sub_I_button_wakeup+0x188>)
            root_block[global_block_count] = &head;
    15a0:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
                SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
                SIM_SOPT1 &= ~SIM_SOPT1_USBSSTBY;
                attachInterruptVector( IRQ_LLWU, wakeupIsr );
                NVIC_ENABLE_IRQ( IRQ_LLWU );
            }
            root_class_address[global_block_count] = this;
    15a4:	f842 6023 	str.w	r6, [r2, r3, lsl #2]
    15a8:	e7d2      	b.n	1550 <_GLOBAL__sub_I_button_wakeup+0xc0>
        // update linked list
        // set the root block
        if ( root_block[global_block_count] == NULL ) {
            // update registers on first driver installed only once
            if ( global_block_count == 0 ) {
                SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    15aa:	481c      	ldr	r0, [pc, #112]	; (161c <_GLOBAL__sub_I_button_wakeup+0x18c>)
                SIM_SOPT1 &= ~SIM_SOPT1_USBSSTBY;
    15ac:	4a1c      	ldr	r2, [pc, #112]	; (1620 <_GLOBAL__sub_I_button_wakeup+0x190>)
        // update linked list
        // set the root block
        if ( root_block[global_block_count] == NULL ) {
            // update registers on first driver installed only once
            if ( global_block_count == 0 ) {
                SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    15ae:	6803      	ldr	r3, [r0, #0]
                SIM_SOPT1 &= ~SIM_SOPT1_USBSSTBY;
                attachInterruptVector( IRQ_LLWU, wakeupIsr );
    15b0:	491c      	ldr	r1, [pc, #112]	; (1624 <_GLOBAL__sub_I_button_wakeup+0x194>)
        // update linked list
        // set the root block
        if ( root_block[global_block_count] == NULL ) {
            // update registers on first driver installed only once
            if ( global_block_count == 0 ) {
                SIM_SOPT1CFG |= SIM_SOPT1CFG_USSWE;
    15b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    15b6:	6003      	str	r3, [r0, #0]
                SIM_SOPT1 &= ~SIM_SOPT1_USBSSTBY;
    15b8:	6813      	ldr	r3, [r2, #0]
    15ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
    15be:	6013      	str	r3, [r2, #0]
                attachInterruptVector( IRQ_LLWU, wakeupIsr );
    15c0:	2015      	movs	r0, #21
    15c2:	f00d fb49 	bl	ec58 <attachInterruptVector>
                NVIC_ENABLE_IRQ( IRQ_LLWU );
    15c6:	4b18      	ldr	r3, [pc, #96]	; (1628 <_GLOBAL__sub_I_button_wakeup+0x198>)
    15c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    15cc:	601a      	str	r2, [r3, #0]
    15ce:	e7e5      	b.n	159c <_GLOBAL__sub_I_button_wakeup+0x10c>
    15d0:	1fff5580 	.word	0x1fff5580
    15d4:	000175c4 	.word	0x000175c4
    15d8:	1fff4930 	.word	0x1fff4930
    15dc:	000006b5 	.word	0x000006b5
    15e0:	1fff57a0 	.word	0x1fff57a0
    15e4:	0000070d 	.word	0x0000070d
    15e8:	1fff5760 	.word	0x1fff5760
    15ec:	1fff42f4 	.word	0x1fff42f4
    15f0:	1fff57f8 	.word	0x1fff57f8
    15f4:	1fff6665 	.word	0x1fff6665
    15f8:	1fff6624 	.word	0x1fff6624
    15fc:	00016b20 	.word	0x00016b20
    1600:	00000609 	.word	0x00000609
    1604:	1fff572c 	.word	0x1fff572c
    1608:	00000765 	.word	0x00000765
    160c:	1fff5720 	.word	0x1fff5720
    1610:	1fff574c 	.word	0x1fff574c
    1614:	1fff5740 	.word	0x1fff5740
    1618:	1fff6644 	.word	0x1fff6644
    161c:	40047004 	.word	0x40047004
    1620:	40047000 	.word	0x40047000
    1624:	0000046d 	.word	0x0000046d
    1628:	e000e100 	.word	0xe000e100
    162c:	000175b0 	.word	0x000175b0

00001630 <__tcf_0>:
  String address;
	String name;
  String capabilities;
  unsigned int strength;
};
struct btDev dev_list[DEVLIST_MAXLEN];
    1630:	b538      	push	{r3, r4, r5, lr}
    1632:	4c09      	ldr	r4, [pc, #36]	; (1658 <__tcf_0+0x28>)
    1634:	f5a4 759c 	sub.w	r5, r4, #312	; 0x138
    1638:	3c34      	subs	r4, #52	; 0x34
 */

#include "BC127.h"

// BT device informations for connection
struct btDev {
    163a:	f104 0020 	add.w	r0, r4, #32
    163e:	f00c fabf 	bl	dbc0 <String::~String()>
    1642:	f104 0010 	add.w	r0, r4, #16
    1646:	f00c fabb 	bl	dbc0 <String::~String()>
    164a:	4620      	mov	r0, r4
    164c:	f00c fab8 	bl	dbc0 <String::~String()>
  String address;
	String name;
  String capabilities;
  unsigned int strength;
};
struct btDev dev_list[DEVLIST_MAXLEN];
    1650:	42ac      	cmp	r4, r5
    1652:	d1f1      	bne.n	1638 <__tcf_0+0x8>
    1654:	bd38      	pop	{r3, r4, r5, pc}
    1656:	bf00      	nop
    1658:	1fff596c 	.word	0x1fff596c

0000165c <sendCmdOut(int) [clone .constprop.5]>:
 * ---------------
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
    165c:	b500      	push	{lr}
    165e:	b089      	sub	sp, #36	; 0x24
  String devString = "";
    1660:	4912      	ldr	r1, [pc, #72]	; (16ac <sendCmdOut(int) [clone .constprop.5]+0x50>)
    1662:	4668      	mov	r0, sp
    1664:	f00c f99a 	bl	d99c <String::String(char const*)>
  String cmdLine = "";
    1668:	4910      	ldr	r1, [pc, #64]	; (16ac <sendCmdOut(int) [clone .constprop.5]+0x50>)
    166a:	a804      	add	r0, sp, #16
    166c:	f00c f996 	bl	d99c <String::String(char const*)>
		 * -------- */
    case BCCMD__NOTHING:
			break;
    // Start advertising on BLE
    case BCCMD_ADV_ON: {
			cmdLine = "ADVERTISING ON\r";
    1670:	490f      	ldr	r1, [pc, #60]	; (16b0 <sendCmdOut(int) [clone .constprop.5]+0x54>)
    1672:	a804      	add	r0, sp, #16
    1674:	f00c fafe 	bl	dc74 <String::operator=(char const*)>
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    1678:	a804      	add	r0, sp, #16
    167a:	490c      	ldr	r1, [pc, #48]	; (16ac <sendCmdOut(int) [clone .constprop.5]+0x50>)
    167c:	f00c fd2c 	bl	e0d8 <String::equals(char const*) const>
		// No recognised command -> send negative confirmation
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
    1680:	b168      	cbz	r0, 169e <sendCmdOut(int) [clone .constprop.5]+0x42>
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
    1682:	a904      	add	r1, sp, #16
    1684:	480b      	ldr	r0, [pc, #44]	; (16b4 <sendCmdOut(int) [clone .constprop.5]+0x58>)
    1686:	f00c f8ad 	bl	d7e4 <Print::print(String const&)>
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
  String cmdLine = "";
    168a:	a804      	add	r0, sp, #16
    168c:	f00c fa98 	bl	dbc0 <String::~String()>
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
    1690:	4668      	mov	r0, sp
    1692:	f00c fa95 	bl	dbc0 <String::~String()>
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
  // Send positive confirmation
  return true;
}
    1696:	2001      	movs	r0, #1
    1698:	b009      	add	sp, #36	; 0x24
    169a:	f85d fb04 	ldr.w	pc, [sp], #4
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
    169e:	9a04      	ldr	r2, [sp, #16]
    16a0:	4905      	ldr	r1, [pc, #20]	; (16b8 <sendCmdOut(int) [clone .constprop.5]+0x5c>)
    16a2:	4806      	ldr	r0, [pc, #24]	; (16bc <sendCmdOut(int) [clone .constprop.5]+0x60>)
    16a4:	f00c f934 	bl	d910 <Print::printf(char const*, ...)>
    16a8:	e7eb      	b.n	1682 <sendCmdOut(int) [clone .constprop.5]+0x26>
    16aa:	bf00      	nop
    16ac:	00017130 	.word	0x00017130
    16b0:	00016c6c 	.word	0x00016c6c
    16b4:	1fff4ad4 	.word	0x1fff4ad4
    16b8:	00016c7c 	.word	0x00016c7c
    16bc:	1fff4b00 	.word	0x1fff4b00

000016c0 <sendCmdOut(int) [clone .constprop.6]>:
 * ---------------
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
    16c0:	b500      	push	{lr}
    16c2:	b089      	sub	sp, #36	; 0x24
  String devString = "";
    16c4:	4912      	ldr	r1, [pc, #72]	; (1710 <sendCmdOut(int) [clone .constprop.6]+0x50>)
    16c6:	4668      	mov	r0, sp
    16c8:	f00c f968 	bl	d99c <String::String(char const*)>
  String cmdLine = "";
    16cc:	4910      	ldr	r1, [pc, #64]	; (1710 <sendCmdOut(int) [clone .constprop.6]+0x50>)
    16ce:	a804      	add	r0, sp, #16
    16d0:	f00c f964 	bl	d99c <String::String(char const*)>
			cmdLine = "ADVERTISING ON\r";
			break;
		}
		// Stop advertising
		case BCCMD_ADV_OFF: {
			cmdLine = "ADVERTISING OFF\r";
    16d4:	490f      	ldr	r1, [pc, #60]	; (1714 <sendCmdOut(int) [clone .constprop.6]+0x54>)
    16d6:	a804      	add	r0, sp, #16
    16d8:	f00c facc 	bl	dc74 <String::operator=(char const*)>
    16dc:	a804      	add	r0, sp, #16
    16de:	490c      	ldr	r1, [pc, #48]	; (1710 <sendCmdOut(int) [clone .constprop.6]+0x50>)
    16e0:	f00c fcfa 	bl	e0d8 <String::equals(char const*) const>
		// No recognised command -> send negative confirmation
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
    16e4:	b168      	cbz	r0, 1702 <sendCmdOut(int) [clone .constprop.6]+0x42>
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
    16e6:	a904      	add	r1, sp, #16
    16e8:	480b      	ldr	r0, [pc, #44]	; (1718 <sendCmdOut(int) [clone .constprop.6]+0x58>)
    16ea:	f00c f87b 	bl	d7e4 <Print::print(String const&)>
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
  String cmdLine = "";
    16ee:	a804      	add	r0, sp, #16
    16f0:	f00c fa66 	bl	dbc0 <String::~String()>
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
    16f4:	4668      	mov	r0, sp
    16f6:	f00c fa63 	bl	dbc0 <String::~String()>
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
  // Send positive confirmation
  return true;
}
    16fa:	2001      	movs	r0, #1
    16fc:	b009      	add	sp, #36	; 0x24
    16fe:	f85d fb04 	ldr.w	pc, [sp], #4
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
    1702:	9a04      	ldr	r2, [sp, #16]
    1704:	4905      	ldr	r1, [pc, #20]	; (171c <sendCmdOut(int) [clone .constprop.6]+0x5c>)
    1706:	4806      	ldr	r0, [pc, #24]	; (1720 <sendCmdOut(int) [clone .constprop.6]+0x60>)
    1708:	f00c f902 	bl	d910 <Print::printf(char const*, ...)>
    170c:	e7eb      	b.n	16e6 <sendCmdOut(int) [clone .constprop.6]+0x26>
    170e:	bf00      	nop
    1710:	00017130 	.word	0x00017130
    1714:	00016c8c 	.word	0x00016c8c
    1718:	1fff4ad4 	.word	0x1fff4ad4
    171c:	00016c7c 	.word	0x00016c7c
    1720:	1fff4b00 	.word	0x1fff4b00

00001724 <sendCmdOut(int) [clone .constprop.3]>:
 * ---------------
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
    1724:	b500      	push	{lr}
    1726:	b089      	sub	sp, #36	; 0x24
  String devString = "";
    1728:	4915      	ldr	r1, [pc, #84]	; (1780 <sendCmdOut(int) [clone .constprop.3]+0x5c>)
    172a:	4668      	mov	r0, sp
    172c:	f00c f936 	bl	d99c <String::String(char const*)>
  String cmdLine = "";
    1730:	4913      	ldr	r1, [pc, #76]	; (1780 <sendCmdOut(int) [clone .constprop.3]+0x5c>)
    1732:	a804      	add	r0, sp, #16
    1734:	f00c f932 	bl	d99c <String::String(char const*)>
    1738:	2116      	movs	r1, #22
    173a:	4812      	ldr	r0, [pc, #72]	; (1784 <sendCmdOut(int) [clone .constprop.3]+0x60>)
    173c:	f00f f8a2 	bl	10884 <usb_serial_write>
    1740:	4811      	ldr	r0, [pc, #68]	; (1788 <sendCmdOut(int) [clone .constprop.3]+0x64>)
    1742:	f00c f8cd 	bl	d8e0 <Print::println()>
			break;
		}
		// Power-on
		case BCCMD_BLUE_ON: {
			MONPORT.println("Switching bluetooth on");
			cmdLine = "POWER ON\r";
    1746:	4911      	ldr	r1, [pc, #68]	; (178c <sendCmdOut(int) [clone .constprop.3]+0x68>)
    1748:	a804      	add	r0, sp, #16
    174a:	f00c fa93 	bl	dc74 <String::operator=(char const*)>
    174e:	a804      	add	r0, sp, #16
    1750:	490b      	ldr	r1, [pc, #44]	; (1780 <sendCmdOut(int) [clone .constprop.3]+0x5c>)
    1752:	f00c fcc1 	bl	e0d8 <String::equals(char const*) const>
		// No recognised command -> send negative confirmation
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
    1756:	b168      	cbz	r0, 1774 <sendCmdOut(int) [clone .constprop.3]+0x50>
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
    1758:	a904      	add	r1, sp, #16
    175a:	480d      	ldr	r0, [pc, #52]	; (1790 <sendCmdOut(int) [clone .constprop.3]+0x6c>)
    175c:	f00c f842 	bl	d7e4 <Print::print(String const&)>
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
  String cmdLine = "";
    1760:	a804      	add	r0, sp, #16
    1762:	f00c fa2d 	bl	dbc0 <String::~String()>
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
    1766:	4668      	mov	r0, sp
    1768:	f00c fa2a 	bl	dbc0 <String::~String()>
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
  // Send positive confirmation
  return true;
}
    176c:	2001      	movs	r0, #1
    176e:	b009      	add	sp, #36	; 0x24
    1770:	f85d fb04 	ldr.w	pc, [sp], #4
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
    1774:	9a04      	ldr	r2, [sp, #16]
    1776:	4907      	ldr	r1, [pc, #28]	; (1794 <sendCmdOut(int) [clone .constprop.3]+0x70>)
    1778:	4803      	ldr	r0, [pc, #12]	; (1788 <sendCmdOut(int) [clone .constprop.3]+0x64>)
    177a:	f00c f8c9 	bl	d910 <Print::printf(char const*, ...)>
    177e:	e7eb      	b.n	1758 <sendCmdOut(int) [clone .constprop.3]+0x34>
    1780:	00017130 	.word	0x00017130
    1784:	00016ca0 	.word	0x00016ca0
    1788:	1fff4b00 	.word	0x1fff4b00
    178c:	00016cb8 	.word	0x00016cb8
    1790:	1fff4ad4 	.word	0x1fff4ad4
    1794:	00016c7c 	.word	0x00016c7c

00001798 <sendCmdOut(int) [clone .constprop.4]>:
 * ---------------
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
    1798:	b500      	push	{lr}
    179a:	b089      	sub	sp, #36	; 0x24
  String devString = "";
    179c:	4915      	ldr	r1, [pc, #84]	; (17f4 <sendCmdOut(int) [clone .constprop.4]+0x5c>)
    179e:	4668      	mov	r0, sp
    17a0:	f00c f8fc 	bl	d99c <String::String(char const*)>
  String cmdLine = "";
    17a4:	4913      	ldr	r1, [pc, #76]	; (17f4 <sendCmdOut(int) [clone .constprop.4]+0x5c>)
    17a6:	a804      	add	r0, sp, #16
    17a8:	f00c f8f8 	bl	d99c <String::String(char const*)>
    17ac:	2117      	movs	r1, #23
    17ae:	4812      	ldr	r0, [pc, #72]	; (17f8 <sendCmdOut(int) [clone .constprop.4]+0x60>)
    17b0:	f00f f868 	bl	10884 <usb_serial_write>
    17b4:	4811      	ldr	r0, [pc, #68]	; (17fc <sendCmdOut(int) [clone .constprop.4]+0x64>)
    17b6:	f00c f893 	bl	d8e0 <Print::println()>
			break;
		}
		// Power-off
		case BCCMD_BLUE_OFF: {
			MONPORT.println("Switching bluetooth off");
			cmdLine = "POWER OFF\r";
    17ba:	4911      	ldr	r1, [pc, #68]	; (1800 <sendCmdOut(int) [clone .constprop.4]+0x68>)
    17bc:	a804      	add	r0, sp, #16
    17be:	f00c fa59 	bl	dc74 <String::operator=(char const*)>
    17c2:	a804      	add	r0, sp, #16
    17c4:	490b      	ldr	r1, [pc, #44]	; (17f4 <sendCmdOut(int) [clone .constprop.4]+0x5c>)
    17c6:	f00c fc87 	bl	e0d8 <String::equals(char const*) const>
		// No recognised command -> send negative confirmation
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
    17ca:	b168      	cbz	r0, 17e8 <sendCmdOut(int) [clone .constprop.4]+0x50>
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
    17cc:	a904      	add	r1, sp, #16
    17ce:	480d      	ldr	r0, [pc, #52]	; (1804 <sendCmdOut(int) [clone .constprop.4]+0x6c>)
    17d0:	f00c f808 	bl	d7e4 <Print::print(String const&)>
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
  String cmdLine = "";
    17d4:	a804      	add	r0, sp, #16
    17d6:	f00c f9f3 	bl	dbc0 <String::~String()>
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
    17da:	4668      	mov	r0, sp
    17dc:	f00c f9f0 	bl	dbc0 <String::~String()>
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
  // Send positive confirmation
  return true;
}
    17e0:	2001      	movs	r0, #1
    17e2:	b009      	add	sp, #36	; 0x24
    17e4:	f85d fb04 	ldr.w	pc, [sp], #4
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
    17e8:	9a04      	ldr	r2, [sp, #16]
    17ea:	4907      	ldr	r1, [pc, #28]	; (1808 <sendCmdOut(int) [clone .constprop.4]+0x70>)
    17ec:	4803      	ldr	r0, [pc, #12]	; (17fc <sendCmdOut(int) [clone .constprop.4]+0x64>)
    17ee:	f00c f88f 	bl	d910 <Print::printf(char const*, ...)>
    17f2:	e7eb      	b.n	17cc <sendCmdOut(int) [clone .constprop.4]+0x34>
    17f4:	00017130 	.word	0x00017130
    17f8:	00016cc4 	.word	0x00016cc4
    17fc:	1fff4b00 	.word	0x1fff4b00
    1800:	00016cdc 	.word	0x00016cdc
    1804:	1fff4ad4 	.word	0x1fff4ad4
    1808:	00016c7c 	.word	0x00016c7c

0000180c <initBc127()>:
 * ---------------
 * Initialize BC127 by sending a reset command
 * IN:	- none
 * OUT:	- none
 */
void initBc127(void) {
    180c:	b510      	push	{r4, lr}
	pinMode(BC127_RST_PIN, OUTPUT);
    180e:	2101      	movs	r1, #1
 * IN:	- none
 * OUT:	- none
 */
void bc127Reset(void) {
	// sendCmdOut(BCCMD_RESET);
	Alarm.delay(10);
    1810:	4c0c      	ldr	r4, [pc, #48]	; (1844 <initBc127()+0x38>)
 * Initialize BC127 by sending a reset command
 * IN:	- none
 * OUT:	- none
 */
void initBc127(void) {
	pinMode(BC127_RST_PIN, OUTPUT);
    1812:	201e      	movs	r0, #30
    1814:	f00d fbb4 	bl	ef80 <pinMode>
	digitalWrite(BC127_RST_PIN, HIGH);
    1818:	2101      	movs	r1, #1
    181a:	201e      	movs	r0, #30
    181c:	f00d fb7e 	bl	ef1c <digitalWrite>
 * IN:	- none
 * OUT:	- none
 */
void bc127Reset(void) {
	// sendCmdOut(BCCMD_RESET);
	Alarm.delay(10);
    1820:	4620      	mov	r0, r4
    1822:	210a      	movs	r1, #10
    1824:	f009 fe50 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
	digitalWrite(BC127_RST_PIN, LOW);
    1828:	2100      	movs	r1, #0
    182a:	201e      	movs	r0, #30
    182c:	f00d fb76 	bl	ef1c <digitalWrite>
	Alarm.delay(30);
    1830:	4620      	mov	r0, r4
    1832:	211e      	movs	r1, #30
    1834:	f009 fe48 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
	digitalWrite(BC127_RST_PIN, HIGH);
    1838:	2101      	movs	r1, #1
    183a:	201e      	movs	r0, #30
	digitalWrite(BC127_RST_PIN, HIGH);
	bc127Reset();
	// Alarm.delay(2000);
	// bc127BlueOff();
	// Alarm.delay(2000);
}
    183c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void bc127Reset(void) {
	// sendCmdOut(BCCMD_RESET);
	Alarm.delay(10);
	digitalWrite(BC127_RST_PIN, LOW);
	Alarm.delay(30);
	digitalWrite(BC127_RST_PIN, HIGH);
    1840:	f00d bb6c 	b.w	ef1c <digitalWrite>
    1844:	1fff668c 	.word	0x1fff668c

00001848 <bc127BlueOn()>:
 * Switch on the Bluetooth interface
 * IN:	- none
 * OUT:	- none
 */
void bc127BlueOn(void) {
	sendCmdOut(BCCMD_BLUE_ON);
    1848:	f7ff bf6c 	b.w	1724 <sendCmdOut(int) [clone .constprop.3]>

0000184c <bc127BlueOff()>:
 * Switch off the Bluetooth interface
 * IN:	- none
 * OUT:	- none
 */
void bc127BlueOff(void) {
	sendCmdOut(BCCMD_BLUE_OFF);
    184c:	f7ff bfa4 	b.w	1798 <sendCmdOut(int) [clone .constprop.4]>

00001850 <bc127AdvStart()>:
 * Start advertising on the BLE channel.
 * IN:	- none
 * OUT:	- none
 */
void bc127AdvStart(void) {
	sendCmdOut(BCCMD_ADV_ON);
    1850:	f7ff bf04 	b.w	165c <sendCmdOut(int) [clone .constprop.5]>

00001854 <bc127AdvStop()>:
 * Stop advertising on the BLE channel.
 * IN:	- none
 * OUT:	- none
 */
void bc127AdvStop(void) {
		sendCmdOut(BCCMD_ADV_OFF);
    1854:	f7ff bf34 	b.w	16c0 <sendCmdOut(int) [clone .constprop.6]>

00001858 <sendCmdOut(int)>:
 * ---------------
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
    1858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    185c:	b09c      	sub	sp, #112	; 0x70
    185e:	4604      	mov	r4, r0
  String devString = "";
    1860:	49a0      	ldr	r1, [pc, #640]	; (1ae4 <sendCmdOut(int)+0x28c>)
    1862:	4668      	mov	r0, sp
    1864:	f00c f89a 	bl	d99c <String::String(char const*)>
  String cmdLine = "";
    1868:	a804      	add	r0, sp, #16
    186a:	499e      	ldr	r1, [pc, #632]	; (1ae4 <sendCmdOut(int)+0x28c>)
    186c:	f00c f896 	bl	d99c <String::String(char const*)>
	unsigned int l, p, o;
  
  switch(msg) {
    1870:	2c20      	cmp	r4, #32
    1872:	f200 83c3 	bhi.w	1ffc <sendCmdOut(int)+0x7a4>
    1876:	e8df f014 	tbh	[pc, r4, lsl #1]
    187a:	004a      	.short	0x004a
    187c:	03200325 	.word	0x03200325
    1880:	03080314 	.word	0x03080314
    1884:	032a0362 	.word	0x032a0362
    1888:	03020370 	.word	0x03020370
    188c:	028c02df 	.word	0x028c02df
    1890:	0265027c 	.word	0x0265027c
    1894:	025d0261 	.word	0x025d0261
    1898:	024c0251 	.word	0x024c0251
    189c:	02060216 	.word	0x02060216
    18a0:	01d001f6 	.word	0x01d001f6
    18a4:	02260236 	.word	0x02260236
    18a8:	017b01c0 	.word	0x017b01c0
    18ac:	00210159 	.word	0x00210159
    18b0:	00ce0124 	.word	0x00ce0124
    18b4:	009000a0 	.word	0x009000a0
    18b8:	00640080 	.word	0x00640080

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    18bc:	498a      	ldr	r1, [pc, #552]	; (1ae8 <sendCmdOut(int)+0x290>)
    18be:	a818      	add	r0, sp, #96	; 0x60
    18c0:	f00c f86c 	bl	d99c <String::String(char const*)>
			else cmdLine += " MON OFF\r";
			break;
		}
		// REC state notification
		case BCNOT_REC_STATE: {
			cmdLine = "SEND " + String(BLE_conn_id);
    18c4:	4b89      	ldr	r3, [pc, #548]	; (1aec <sendCmdOut(int)+0x294>)
    18c6:	220a      	movs	r2, #10
    18c8:	6819      	ldr	r1, [r3, #0]
    18ca:	a814      	add	r0, sp, #80	; 0x50
    18cc:	f00c f8be 	bl	da4c <String::String(int, unsigned char)>
    18d0:	a914      	add	r1, sp, #80	; 0x50
    18d2:	a818      	add	r0, sp, #96	; 0x60
    18d4:	f00c fb18 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    18d8:	4601      	mov	r1, r0
    18da:	a804      	add	r0, sp, #16
    18dc:	f00c f978 	bl	dbd0 <String::operator=(String const&)>
    18e0:	a814      	add	r0, sp, #80	; 0x50
    18e2:	f00c f96d 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    18e6:	a818      	add	r0, sp, #96	; 0x60
    18e8:	f00c f96a 	bl	dbc0 <String::~String()>
			if(working_state.rec_state == RECSTATE_ON) cmdLine += " REC ON\r";
    18ec:	4b80      	ldr	r3, [pc, #512]	; (1af0 <sendCmdOut(int)+0x298>)
    18ee:	781a      	ldrb	r2, [r3, #0]
    18f0:	2a02      	cmp	r2, #2
    18f2:	f000 836b 	beq.w	1fcc <sendCmdOut(int)+0x774>
			else if((working_state.rec_state == RECSTATE_WAIT) || (working_state.rec_state == RECSTATE_IDLE)) cmdLine += " REC WAIT\r";
    18f6:	781a      	ldrb	r2, [r3, #0]
    18f8:	2a04      	cmp	r2, #4
    18fa:	f000 8362 	beq.w	1fc2 <sendCmdOut(int)+0x76a>
    18fe:	781b      	ldrb	r3, [r3, #0]
    1900:	2b06      	cmp	r3, #6
    1902:	f000 835e 	beq.w	1fc2 <sendCmdOut(int)+0x76a>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    1906:	497b      	ldr	r1, [pc, #492]	; (1af4 <sendCmdOut(int)+0x29c>)
    1908:	a804      	add	r0, sp, #16
    190a:	f00c fa25 	bl	dd58 <String::append(char const*)>
	//unsigned char equals(const __FlashStringHelper *pgmstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator == (const __FlashStringHelper *s) const {return equals((const char *)s);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
    190e:	4975      	ldr	r1, [pc, #468]	; (1ae4 <sendCmdOut(int)+0x28c>)
    1910:	a804      	add	r0, sp, #16
    1912:	f00c fbe1 	bl	e0d8 <String::equals(char const*) const>
		// No recognised command -> send negative confirmation
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
    1916:	b170      	cbz	r0, 1936 <sendCmdOut(int)+0xde>
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
    1918:	a904      	add	r1, sp, #16
    191a:	4877      	ldr	r0, [pc, #476]	; (1af8 <sendCmdOut(int)+0x2a0>)
    191c:	f00b ff62 	bl	d7e4 <Print::print(String const&)>
  // Send positive confirmation
  return true;
    1920:	2401      	movs	r4, #1
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
  String cmdLine = "";
    1922:	a804      	add	r0, sp, #16
    1924:	f00c f94c 	bl	dbc0 <String::~String()>
 * Send specific commands to the BC127 UART
 * IN:	- message (int)
 * OUT:	- command confirmation (bool)
 */
bool sendCmdOut(int msg) {
  String devString = "";
    1928:	4668      	mov	r0, sp
    192a:	f00c f949 	bl	dbc0 <String::~String()>
	}
	// Send the prepared command line to UART
	BLUEPORT.print(cmdLine);
  // Send positive confirmation
  return true;
}
    192e:	4620      	mov	r0, r4
    1930:	b01c      	add	sp, #112	; 0x70
    1932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    default:
			return false;
			break;
  }
	if(cmdLine != "") {
		MONPORT.printf("To BC127: %s\n", cmdLine.c_str());
    1936:	9a04      	ldr	r2, [sp, #16]
    1938:	4970      	ldr	r1, [pc, #448]	; (1afc <sendCmdOut(int)+0x2a4>)
    193a:	4871      	ldr	r0, [pc, #452]	; (1b00 <sendCmdOut(int)+0x2a8>)
    193c:	f00b ffe8 	bl	d910 <Print::printf(char const*, ...)>
    1940:	e7ea      	b.n	1918 <sendCmdOut(int)+0xc0>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1942:	4969      	ldr	r1, [pc, #420]	; (1ae8 <sendCmdOut(int)+0x290>)
    1944:	a818      	add	r0, sp, #96	; 0x60
    1946:	f00c f829 	bl	d99c <String::String(char const*)>
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN ERR WRONG PARAMS!\r";
			break;
		}
		// VOL ERR NO DEVICE
		case BCERR_VOL_BT_DIS: {
			cmdLine = "SEND " + String(BLE_conn_id) + " VOL ERR NO BT DEVICE!\r";
    194a:	4b68      	ldr	r3, [pc, #416]	; (1aec <sendCmdOut(int)+0x294>)
    194c:	220a      	movs	r2, #10
    194e:	6819      	ldr	r1, [r3, #0]
    1950:	a814      	add	r0, sp, #80	; 0x50
    1952:	f00c f87b 	bl	da4c <String::String(int, unsigned char)>
    1956:	a914      	add	r1, sp, #80	; 0x50
    1958:	a818      	add	r0, sp, #96	; 0x60
    195a:	f00c fad5 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    195e:	4969      	ldr	r1, [pc, #420]	; (1b04 <sendCmdOut(int)+0x2ac>)
    1960:	f00c fb12 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1964:	4601      	mov	r1, r0
    1966:	a804      	add	r0, sp, #16
    1968:	f00c f932 	bl	dbd0 <String::operator=(String const&)>
    196c:	a814      	add	r0, sp, #80	; 0x50
    196e:	f00c f927 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1972:	a818      	add	r0, sp, #96	; 0x60
    1974:	f00c f924 	bl	dbc0 <String::~String()>
			break;
    1978:	e7c9      	b.n	190e <sendCmdOut(int)+0xb6>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    197a:	495b      	ldr	r1, [pc, #364]	; (1ae8 <sendCmdOut(int)+0x290>)
    197c:	a818      	add	r0, sp, #96	; 0x60
    197e:	f00c f80d 	bl	d99c <String::String(char const*)>
		case BCERR_RWIN_BAD_REQ: {
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN ERR BAD REQUEST!\r";
			break;
		}
		case BCERR_RWIN_WRONG_PARAMS: {
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN ERR WRONG PARAMS!\r";
    1982:	4b5a      	ldr	r3, [pc, #360]	; (1aec <sendCmdOut(int)+0x294>)
    1984:	220a      	movs	r2, #10
    1986:	6819      	ldr	r1, [r3, #0]
    1988:	a814      	add	r0, sp, #80	; 0x50
    198a:	f00c f85f 	bl	da4c <String::String(int, unsigned char)>
    198e:	a914      	add	r1, sp, #80	; 0x50
    1990:	a818      	add	r0, sp, #96	; 0x60
    1992:	f00c fab9 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1996:	495c      	ldr	r1, [pc, #368]	; (1b08 <sendCmdOut(int)+0x2b0>)
    1998:	e7e2      	b.n	1960 <sendCmdOut(int)+0x108>
    199a:	4953      	ldr	r1, [pc, #332]	; (1ae8 <sendCmdOut(int)+0x290>)
    199c:	a818      	add	r0, sp, #96	; 0x60
    199e:	f00b fffd 	bl	d99c <String::String(char const*)>
		/* ------
		 * ERRORS
		 * ------ */
		// RWIN ERR BAD REQUEST
		case BCERR_RWIN_BAD_REQ: {
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN ERR BAD REQUEST!\r";
    19a2:	4b52      	ldr	r3, [pc, #328]	; (1aec <sendCmdOut(int)+0x294>)
    19a4:	220a      	movs	r2, #10
    19a6:	6819      	ldr	r1, [r3, #0]
    19a8:	a814      	add	r0, sp, #80	; 0x50
    19aa:	f00c f84f 	bl	da4c <String::String(int, unsigned char)>
    19ae:	a914      	add	r1, sp, #80	; 0x50
    19b0:	a818      	add	r0, sp, #96	; 0x60
    19b2:	f00c faa9 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    19b6:	4955      	ldr	r1, [pc, #340]	; (1b0c <sendCmdOut(int)+0x2b4>)
    19b8:	e7d2      	b.n	1960 <sendCmdOut(int)+0x108>
    19ba:	a814      	add	r0, sp, #80	; 0x50
    19bc:	494a      	ldr	r1, [pc, #296]	; (1ae8 <sendCmdOut(int)+0x290>)
    19be:	f00b ffed 	bl	d99c <String::String(char const*)>
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN " + String(l) + " " + String(p) + " " + String(o) + "\r";
			break;
		}
		// VOL level notification
		case BCNOT_VOL_LEVEL: {
			cmdLine = "SEND " + String(BLE_conn_id) + " VOL " + String(vol_value) + "\r";
    19c2:	4b4a      	ldr	r3, [pc, #296]	; (1aec <sendCmdOut(int)+0x294>)
    19c4:	220a      	movs	r2, #10
    19c6:	6819      	ldr	r1, [r3, #0]
    19c8:	a810      	add	r0, sp, #64	; 0x40
    19ca:	f00c f83f 	bl	da4c <String::String(int, unsigned char)>
    19ce:	a910      	add	r1, sp, #64	; 0x40
    19d0:	a814      	add	r0, sp, #80	; 0x50
    19d2:	f00c fa99 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    19d6:	494e      	ldr	r1, [pc, #312]	; (1b10 <sendCmdOut(int)+0x2b8>)
    19d8:	f00c fad6 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    19dc:	4b4d      	ldr	r3, [pc, #308]	; (1b14 <sendCmdOut(int)+0x2bc>)
    19de:	4604      	mov	r4, r0
    19e0:	ed93 0a00 	vldr	s0, [r3]
    19e4:	a818      	add	r0, sp, #96	; 0x60
    19e6:	2102      	movs	r1, #2
    19e8:	f00c f8ac 	bl	db44 <String::String(float, unsigned char)>
    19ec:	a918      	add	r1, sp, #96	; 0x60
    19ee:	4620      	mov	r0, r4
    19f0:	f00c fa8a 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    19f4:	4948      	ldr	r1, [pc, #288]	; (1b18 <sendCmdOut(int)+0x2c0>)
    19f6:	f00c fac7 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    19fa:	4601      	mov	r1, r0
    19fc:	a804      	add	r0, sp, #16
    19fe:	f00c f8e7 	bl	dbd0 <String::operator=(String const&)>
    1a02:	a818      	add	r0, sp, #96	; 0x60
    1a04:	f00c f8dc 	bl	dbc0 <String::~String()>
    1a08:	a810      	add	r0, sp, #64	; 0x40
    1a0a:	f00c f8d9 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1a0e:	a814      	add	r0, sp, #80	; 0x50
    1a10:	f00c f8d6 	bl	dbc0 <String::~String()>
			break;
    1a14:	e77b      	b.n	190e <sendCmdOut(int)+0xb6>
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN PARAMS OK\r";
			break;
		}
		// RWIN values notification
		case BCNOT_RWIN_VALS: {
			l = makeTime(rec_window.length);
    1a16:	4c41      	ldr	r4, [pc, #260]	; (1b1c <sendCmdOut(int)+0x2c4>)
    1a18:	4620      	mov	r0, r4
    1a1a:	f009 f8a3 	bl	ab64 <makeTime(tmElements_t const&)>
    1a1e:	4607      	mov	r7, r0
			p = makeTime(rec_window.period);
    1a20:	1de0      	adds	r0, r4, #7
    1a22:	f009 f89f 	bl	ab64 <makeTime(tmElements_t const&)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1a26:	4930      	ldr	r1, [pc, #192]	; (1ae8 <sendCmdOut(int)+0x290>)
			o = rec_window.occurences;
    1a28:	6925      	ldr	r5, [r4, #16]
			break;
		}
		// RWIN values notification
		case BCNOT_RWIN_VALS: {
			l = makeTime(rec_window.length);
			p = makeTime(rec_window.period);
    1a2a:	4606      	mov	r6, r0
    1a2c:	a80c      	add	r0, sp, #48	; 0x30
    1a2e:	f00b ffb5 	bl	d99c <String::String(char const*)>
			o = rec_window.occurences;
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN " + String(l) + " " + String(p) + " " + String(o) + "\r";
    1a32:	4b2e      	ldr	r3, [pc, #184]	; (1aec <sendCmdOut(int)+0x294>)
    1a34:	220a      	movs	r2, #10
    1a36:	6819      	ldr	r1, [r3, #0]
    1a38:	a808      	add	r0, sp, #32
    1a3a:	f00c f807 	bl	da4c <String::String(int, unsigned char)>
    1a3e:	a908      	add	r1, sp, #32
    1a40:	a80c      	add	r0, sp, #48	; 0x30
    1a42:	f00c fa61 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1a46:	4936      	ldr	r1, [pc, #216]	; (1b20 <sendCmdOut(int)+0x2c8>)
    1a48:	f00c fa9e 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1a4c:	220a      	movs	r2, #10
    1a4e:	4604      	mov	r4, r0
    1a50:	4639      	mov	r1, r7
    1a52:	a810      	add	r0, sp, #64	; 0x40
    1a54:	f00c f838 	bl	dac8 <String::String(unsigned int, unsigned char)>
    1a58:	a910      	add	r1, sp, #64	; 0x40
    1a5a:	4620      	mov	r0, r4
    1a5c:	f00c fa54 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1a60:	4930      	ldr	r1, [pc, #192]	; (1b24 <sendCmdOut(int)+0x2cc>)
    1a62:	f00c fa91 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1a66:	220a      	movs	r2, #10
    1a68:	4604      	mov	r4, r0
    1a6a:	4631      	mov	r1, r6
    1a6c:	a814      	add	r0, sp, #80	; 0x50
    1a6e:	f00c f82b 	bl	dac8 <String::String(unsigned int, unsigned char)>
    1a72:	a914      	add	r1, sp, #80	; 0x50
    1a74:	4620      	mov	r0, r4
    1a76:	f00c fa47 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1a7a:	492a      	ldr	r1, [pc, #168]	; (1b24 <sendCmdOut(int)+0x2cc>)
    1a7c:	f00c fa84 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1a80:	220a      	movs	r2, #10
    1a82:	4604      	mov	r4, r0
    1a84:	4629      	mov	r1, r5
    1a86:	a818      	add	r0, sp, #96	; 0x60
    1a88:	f00c f81e 	bl	dac8 <String::String(unsigned int, unsigned char)>
    1a8c:	a918      	add	r1, sp, #96	; 0x60
    1a8e:	4620      	mov	r0, r4
    1a90:	f00c fa3a 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1a94:	4920      	ldr	r1, [pc, #128]	; (1b18 <sendCmdOut(int)+0x2c0>)
    1a96:	f00c fa77 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1a9a:	4601      	mov	r1, r0
    1a9c:	a804      	add	r0, sp, #16
    1a9e:	f00c f897 	bl	dbd0 <String::operator=(String const&)>
    1aa2:	a818      	add	r0, sp, #96	; 0x60
    1aa4:	f00c f88c 	bl	dbc0 <String::~String()>
    1aa8:	a814      	add	r0, sp, #80	; 0x50
    1aaa:	f00c f889 	bl	dbc0 <String::~String()>
    1aae:	a810      	add	r0, sp, #64	; 0x40
    1ab0:	f00c f886 	bl	dbc0 <String::~String()>
    1ab4:	a808      	add	r0, sp, #32
    1ab6:	f00c f883 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1aba:	a80c      	add	r0, sp, #48	; 0x30
    1abc:	f00c f880 	bl	dbc0 <String::~String()>
			break;
    1ac0:	e725      	b.n	190e <sendCmdOut(int)+0xb6>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1ac2:	4909      	ldr	r1, [pc, #36]	; (1ae8 <sendCmdOut(int)+0x290>)
    1ac4:	a818      	add	r0, sp, #96	; 0x60
    1ac6:	f00b ff69 	bl	d99c <String::String(char const*)>
			else cmdLine += " REC OFF\r";
			break;
		}
		// RWIN command confirmation
		case BCNOT_RWIN_OK: {
			cmdLine = "SEND " + String(BLE_conn_id) + " RWIN PARAMS OK\r";
    1aca:	4b08      	ldr	r3, [pc, #32]	; (1aec <sendCmdOut(int)+0x294>)
    1acc:	220a      	movs	r2, #10
    1ace:	6819      	ldr	r1, [r3, #0]
    1ad0:	a814      	add	r0, sp, #80	; 0x50
    1ad2:	f00b ffbb 	bl	da4c <String::String(int, unsigned char)>
    1ad6:	a914      	add	r1, sp, #80	; 0x50
    1ad8:	a818      	add	r0, sp, #96	; 0x60
    1ada:	f00c fa15 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1ade:	4912      	ldr	r1, [pc, #72]	; (1b28 <sendCmdOut(int)+0x2d0>)
    1ae0:	e73e      	b.n	1960 <sendCmdOut(int)+0x108>
    1ae2:	bf00      	nop
    1ae4:	00017130 	.word	0x00017130
    1ae8:	00016d50 	.word	0x00016d50
    1aec:	1fff596c 	.word	0x1fff596c
    1af0:	1fff5820 	.word	0x1fff5820
    1af4:	00016ecc 	.word	0x00016ecc
    1af8:	1fff4ad4 	.word	0x1fff4ad4
    1afc:	00016c7c 	.word	0x00016c7c
    1b00:	1fff4b00 	.word	0x1fff4b00
    1b04:	00016ea8 	.word	0x00016ea8
    1b08:	00016e8c 	.word	0x00016e8c
    1b0c:	00016e74 	.word	0x00016e74
    1b10:	00016e6c 	.word	0x00016e6c
    1b14:	1fff5e2c 	.word	0x1fff5e2c
    1b18:	00016e00 	.word	0x00016e00
    1b1c:	1fff57e0 	.word	0x1fff57e0
    1b20:	00016e64 	.word	0x00016e64
    1b24:	00016d54 	.word	0x00016d54
    1b28:	00016e50 	.word	0x00016e50
    1b2c:	a818      	add	r0, sp, #96	; 0x60
    1b2e:	49a4      	ldr	r1, [pc, #656]	; (1dc0 <sendCmdOut(int)+0x568>)
    1b30:	f00b ff34 	bl	d99c <String::String(char const*)>
			cmdLine = "";
			break;
		}
		// MON state notification
		case BCNOT_MON_STATE: {
			cmdLine = "SEND " + String(BLE_conn_id);
    1b34:	4ba3      	ldr	r3, [pc, #652]	; (1dc4 <sendCmdOut(int)+0x56c>)
    1b36:	220a      	movs	r2, #10
    1b38:	6819      	ldr	r1, [r3, #0]
    1b3a:	a814      	add	r0, sp, #80	; 0x50
    1b3c:	f00b ff86 	bl	da4c <String::String(int, unsigned char)>
    1b40:	a914      	add	r1, sp, #80	; 0x50
    1b42:	a818      	add	r0, sp, #96	; 0x60
    1b44:	f00c f9e0 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1b48:	4601      	mov	r1, r0
    1b4a:	a804      	add	r0, sp, #16
    1b4c:	f00c f840 	bl	dbd0 <String::operator=(String const&)>
    1b50:	a814      	add	r0, sp, #80	; 0x50
    1b52:	f00c f835 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1b56:	a818      	add	r0, sp, #96	; 0x60
    1b58:	f00c f832 	bl	dbc0 <String::~String()>
			if(working_state.mon_state == MONSTATE_ON) cmdLine += " MON ON\r";
    1b5c:	4b9a      	ldr	r3, [pc, #616]	; (1dc8 <sendCmdOut(int)+0x570>)
    1b5e:	785b      	ldrb	r3, [r3, #1]
    1b60:	2b03      	cmp	r3, #3
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    1b62:	bf0c      	ite	eq
    1b64:	4999      	ldreq	r1, [pc, #612]	; (1dcc <sendCmdOut(int)+0x574>)
    1b66:	499a      	ldrne	r1, [pc, #616]	; (1dd0 <sendCmdOut(int)+0x578>)
    1b68:	a804      	add	r0, sp, #16
    1b6a:	f00c f8f5 	bl	dd58 <String::append(char const*)>
    1b6e:	e6ce      	b.n	190e <sendCmdOut(int)+0xb6>
			cmdLine = "SEND " + String(BLE_conn_id) + " INQ START\r";
			break;
		}
    // Results of the inquiry -> store devices with address & signal strength
    case BCNOT_INQ_STATE: {
			for(unsigned int i = 0; i < found_dev; i++) {
    1b70:	4f98      	ldr	r7, [pc, #608]	; (1dd4 <sendCmdOut(int)+0x57c>)
    1b72:	683b      	ldr	r3, [r7, #0]
    1b74:	2b00      	cmp	r3, #0
    1b76:	d03b      	beq.n	1bf0 <sendCmdOut(int)+0x398>
    1b78:	4d97      	ldr	r5, [pc, #604]	; (1dd8 <sendCmdOut(int)+0x580>)
    1b7a:	f8df 8248 	ldr.w	r8, [pc, #584]	; 1dc4 <sendCmdOut(int)+0x56c>
    1b7e:	2600      	movs	r6, #0
    1b80:	ac18      	add	r4, sp, #96	; 0x60
				devString = dev_list[i].address;
    1b82:	4629      	mov	r1, r5
    1b84:	4668      	mov	r0, sp
    1b86:	f00c f823 	bl	dbd0 <String::operator=(String const&)>
	friend StringSumHelper & operator + (const StringSumHelper &lhs, long num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	String & concat(const String &str)		{return append(str);}
	String & concat(const char *cstr)		{return append(cstr);}
    1b8a:	4994      	ldr	r1, [pc, #592]	; (1ddc <sendCmdOut(int)+0x584>)
    1b8c:	4668      	mov	r0, sp
    1b8e:	f00c f8e3 	bl	dd58 <String::append(char const*)>
	String & concat(const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & concat(char c)				{return append(c);}
	String & concat(unsigned char c)		{return append((int)c);}
	String & concat(int num)			{return append(num);}
	String & concat(unsigned int num)		{return append(num);}
    1b92:	6b29      	ldr	r1, [r5, #48]	; 0x30
    1b94:	4668      	mov	r0, sp
    1b96:	f00c f969 	bl	de6c <String::append(unsigned int)>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1b9a:	4989      	ldr	r1, [pc, #548]	; (1dc0 <sendCmdOut(int)+0x568>)
    1b9c:	4620      	mov	r0, r4
    1b9e:	f00b fefd 	bl	d99c <String::String(char const*)>
				devString.concat(" ");
				devString.concat(dev_list[i].strength);
				cmdLine = "SEND " + String(BLE_conn_id) + " INQ " + devString + "\r";
    1ba2:	220a      	movs	r2, #10
    1ba4:	f8d8 1000 	ldr.w	r1, [r8]
    1ba8:	a814      	add	r0, sp, #80	; 0x50
    1baa:	f00b ff4f 	bl	da4c <String::String(int, unsigned char)>
    1bae:	a914      	add	r1, sp, #80	; 0x50
    1bb0:	4620      	mov	r0, r4
    1bb2:	f00c f9a9 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1bb6:	498a      	ldr	r1, [pc, #552]	; (1de0 <sendCmdOut(int)+0x588>)
    1bb8:	f00c f9e6 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1bbc:	4669      	mov	r1, sp
    1bbe:	f00c f9a3 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1bc2:	4988      	ldr	r1, [pc, #544]	; (1de4 <sendCmdOut(int)+0x58c>)
    1bc4:	f00c f9e0 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1bc8:	4601      	mov	r1, r0
    1bca:	a804      	add	r0, sp, #16
    1bcc:	f00c f800 	bl	dbd0 <String::operator=(String const&)>
    1bd0:	a814      	add	r0, sp, #80	; 0x50
    1bd2:	f00b fff5 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1bd6:	4620      	mov	r0, r4
    1bd8:	f00b fff2 	bl	dbc0 <String::~String()>
				BLUEPORT.print(cmdLine);
    1bdc:	a904      	add	r1, sp, #16
    1bde:	4882      	ldr	r0, [pc, #520]	; (1de8 <sendCmdOut(int)+0x590>)
    1be0:	f00b fe00 	bl	d7e4 <Print::print(String const&)>
			cmdLine = "SEND " + String(BLE_conn_id) + " INQ START\r";
			break;
		}
    // Results of the inquiry -> store devices with address & signal strength
    case BCNOT_INQ_STATE: {
			for(unsigned int i = 0; i < found_dev; i++) {
    1be4:	683b      	ldr	r3, [r7, #0]
    1be6:	3601      	adds	r6, #1
    1be8:	42b3      	cmp	r3, r6
    1bea:	f105 0534 	add.w	r5, r5, #52	; 0x34
    1bee:	d8c8      	bhi.n	1b82 <sendCmdOut(int)+0x32a>
				devString.concat(" ");
				devString.concat(dev_list[i].strength);
				cmdLine = "SEND " + String(BLE_conn_id) + " INQ " + devString + "\r";
				BLUEPORT.print(cmdLine);
			}
			cmdLine = "";
    1bf0:	497e      	ldr	r1, [pc, #504]	; (1dec <sendCmdOut(int)+0x594>)
    1bf2:	a804      	add	r0, sp, #16
    1bf4:	f00c f83e 	bl	dc74 <String::operator=(char const*)>
			break;
    1bf8:	e689      	b.n	190e <sendCmdOut(int)+0xb6>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1bfa:	4971      	ldr	r1, [pc, #452]	; (1dc0 <sendCmdOut(int)+0x568>)
    1bfc:	a818      	add	r0, sp, #96	; 0x60
    1bfe:	f00b fecd 	bl	d99c <String::String(char const*)>
			cmdLine = "SEND " + String(BLE_conn_id) + " INQ DONE\r";
			break;
		}
		// Starting inquiry sequences -> send notification
		case BCNOT_INQ_START: {
			cmdLine = "SEND " + String(BLE_conn_id) + " INQ START\r";
    1c02:	4b70      	ldr	r3, [pc, #448]	; (1dc4 <sendCmdOut(int)+0x56c>)
    1c04:	220a      	movs	r2, #10
    1c06:	6819      	ldr	r1, [r3, #0]
    1c08:	a814      	add	r0, sp, #80	; 0x50
    1c0a:	f00b ff1f 	bl	da4c <String::String(int, unsigned char)>
    1c0e:	a914      	add	r1, sp, #80	; 0x50
    1c10:	a818      	add	r0, sp, #96	; 0x60
    1c12:	f00c f979 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1c16:	4976      	ldr	r1, [pc, #472]	; (1df0 <sendCmdOut(int)+0x598>)
    1c18:	e6a2      	b.n	1960 <sendCmdOut(int)+0x108>
    1c1a:	4969      	ldr	r1, [pc, #420]	; (1dc0 <sendCmdOut(int)+0x568>)
    1c1c:	a818      	add	r0, sp, #96	; 0x60
    1c1e:	f00b febd 	bl	d99c <String::String(char const*)>
		/* -------------
		 * NOTIFICATIONS
		 * ------------- */
		// BT state notification
		case BCNOT_BT_STATE: {
			cmdLine = "SEND " + String(BLE_conn_id);
    1c22:	4b68      	ldr	r3, [pc, #416]	; (1dc4 <sendCmdOut(int)+0x56c>)
    1c24:	220a      	movs	r2, #10
    1c26:	6819      	ldr	r1, [r3, #0]
    1c28:	a814      	add	r0, sp, #80	; 0x50
    1c2a:	f00b ff0f 	bl	da4c <String::String(int, unsigned char)>
    1c2e:	a914      	add	r1, sp, #80	; 0x50
    1c30:	a818      	add	r0, sp, #96	; 0x60
    1c32:	f00c f969 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1c36:	4601      	mov	r1, r0
    1c38:	a804      	add	r0, sp, #16
    1c3a:	f00b ffc9 	bl	dbd0 <String::operator=(String const&)>
    1c3e:	a814      	add	r0, sp, #80	; 0x50
    1c40:	f00b ffbe 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1c44:	a818      	add	r0, sp, #96	; 0x60
    1c46:	f00b ffbb 	bl	dbc0 <String::~String()>
			if(working_state.bt_state == BTSTATE_CONNECTED) cmdLine += (" BT " + BT_peer_name + "\r");
    1c4a:	4b5f      	ldr	r3, [pc, #380]	; (1dc8 <sendCmdOut(int)+0x570>)
    1c4c:	789a      	ldrb	r2, [r3, #2]
    1c4e:	2a04      	cmp	r2, #4
    1c50:	f000 81c1 	beq.w	1fd6 <sendCmdOut(int)+0x77e>
			else if(working_state.bt_state == BTSTATE_INQUIRY) cmdLine += " BT INQ\r";
    1c54:	789b      	ldrb	r3, [r3, #2]
    1c56:	2b02      	cmp	r3, #2
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    1c58:	bf0c      	ite	eq
    1c5a:	4966      	ldreq	r1, [pc, #408]	; (1df4 <sendCmdOut(int)+0x59c>)
    1c5c:	4966      	ldrne	r1, [pc, #408]	; (1df8 <sendCmdOut(int)+0x5a0>)
    1c5e:	a804      	add	r0, sp, #16
    1c60:	f00c f87a 	bl	dd58 <String::append(char const*)>
    1c64:	e653      	b.n	190e <sendCmdOut(int)+0xb6>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1c66:	4965      	ldr	r1, [pc, #404]	; (1dfc <sendCmdOut(int)+0x5a4>)
    1c68:	a818      	add	r0, sp, #96	; 0x60
    1c6a:	f00b fe97 	bl	d99c <String::String(char const*)>
			cmdLine = "VOLUME " + String(BT_conn_id1) + "\r";
			break;
		}
		// Volume up -> AVRCP volume up
    case BCCMD_VOL_UP: {
			cmdLine = "VOLUME " + String(BT_conn_id1) + " UP\r";
    1c6e:	4b64      	ldr	r3, [pc, #400]	; (1e00 <sendCmdOut(int)+0x5a8>)
    1c70:	220a      	movs	r2, #10
    1c72:	6819      	ldr	r1, [r3, #0]
    1c74:	a814      	add	r0, sp, #80	; 0x50
    1c76:	f00b fee9 	bl	da4c <String::String(int, unsigned char)>
    1c7a:	a914      	add	r1, sp, #80	; 0x50
    1c7c:	a818      	add	r0, sp, #96	; 0x60
    1c7e:	f00c f943 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1c82:	4960      	ldr	r1, [pc, #384]	; (1e04 <sendCmdOut(int)+0x5ac>)
    1c84:	e66c      	b.n	1960 <sendCmdOut(int)+0x108>
    1c86:	495d      	ldr	r1, [pc, #372]	; (1dfc <sendCmdOut(int)+0x5a4>)
    1c88:	a818      	add	r0, sp, #96	; 0x60
    1c8a:	f00b fe87 	bl	d99c <String::String(char const*)>
			break;
		}
		// Volume down -> AVRCP volume down
    case BCCMD_VOL_DOWN: {
			cmdLine = "VOLUME " + String(BT_conn_id1) + " DOWN\r";
    1c8e:	4b5c      	ldr	r3, [pc, #368]	; (1e00 <sendCmdOut(int)+0x5a8>)
    1c90:	220a      	movs	r2, #10
    1c92:	6819      	ldr	r1, [r3, #0]
    1c94:	a814      	add	r0, sp, #80	; 0x50
    1c96:	f00b fed9 	bl	da4c <String::String(int, unsigned char)>
    1c9a:	a914      	add	r1, sp, #80	; 0x50
    1c9c:	a818      	add	r0, sp, #96	; 0x60
    1c9e:	f00c f933 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1ca2:	4959      	ldr	r1, [pc, #356]	; (1e08 <sendCmdOut(int)+0x5b0>)
    1ca4:	e65c      	b.n	1960 <sendCmdOut(int)+0x108>
    1ca6:	a818      	add	r0, sp, #96	; 0x60
    1ca8:	4954      	ldr	r1, [pc, #336]	; (1dfc <sendCmdOut(int)+0x5a4>)
    1caa:	f00b fe77 	bl	d99c <String::String(char const*)>
			cmdLine = "STATUS\r";
			break;
		}
		// Volume level request
		case BCCMD_VOL_A2DP: {
			cmdLine = "VOLUME " + String(BT_conn_id1) + "\r";
    1cae:	4b54      	ldr	r3, [pc, #336]	; (1e00 <sendCmdOut(int)+0x5a8>)
		case BCCMD_DEV_DISCONNECT1: {
			cmdLine = "CLOSE " + String(BT_conn_id1) + "\r";
			break;
		}
		case BCCMD_DEV_DISCONNECT2: {
			cmdLine = "CLOSE " + String(BT_conn_id2) + "\r";
    1cb0:	6819      	ldr	r1, [r3, #0]
    1cb2:	220a      	movs	r2, #10
    1cb4:	a814      	add	r0, sp, #80	; 0x50
    1cb6:	f00b fec9 	bl	da4c <String::String(int, unsigned char)>
    1cba:	a914      	add	r1, sp, #80	; 0x50
    1cbc:	a818      	add	r0, sp, #96	; 0x60
    1cbe:	f00c f923 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1cc2:	4948      	ldr	r1, [pc, #288]	; (1de4 <sendCmdOut(int)+0x58c>)
    1cc4:	e64c      	b.n	1960 <sendCmdOut(int)+0x108>
    1cc6:	493e      	ldr	r1, [pc, #248]	; (1dc0 <sendCmdOut(int)+0x568>)
    1cc8:	a818      	add	r0, sp, #96	; 0x60
    1cca:	f00b fe67 	bl	d99c <String::String(char const*)>
			// MONPORT.printf("Sending: %s\n", cmdLine.c_str());
			break;
		}
		// Inquiry sequence done -> send notification
		case BCNOT_INQ_DONE: {
			cmdLine = "SEND " + String(BLE_conn_id) + " INQ DONE\r";
    1cce:	4b3d      	ldr	r3, [pc, #244]	; (1dc4 <sendCmdOut(int)+0x56c>)
    1cd0:	220a      	movs	r2, #10
    1cd2:	6819      	ldr	r1, [r3, #0]
    1cd4:	a814      	add	r0, sp, #80	; 0x50
    1cd6:	f00b feb9 	bl	da4c <String::String(int, unsigned char)>
    1cda:	a914      	add	r1, sp, #80	; 0x50
    1cdc:	a818      	add	r0, sp, #96	; 0x60
    1cde:	f00c f913 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1ce2:	494a      	ldr	r1, [pc, #296]	; (1e0c <sendCmdOut(int)+0x5b4>)
    1ce4:	e63c      	b.n	1960 <sendCmdOut(int)+0x108>
    1ce6:	4936      	ldr	r1, [pc, #216]	; (1dc0 <sendCmdOut(int)+0x568>)
    1ce8:	a818      	add	r0, sp, #96	; 0x60
    1cea:	f00b fe57 	bl	d99c <String::String(char const*)>
			else cmdLine += " BT IDLE\r";
			break;
		}
		// FILEPATH notification
		case BCNOT_FILEPATH: {
			cmdLine = "SEND " + String(BLE_conn_id) + " FP " + rec_path + "\r";
    1cee:	4b35      	ldr	r3, [pc, #212]	; (1dc4 <sendCmdOut(int)+0x56c>)
    1cf0:	220a      	movs	r2, #10
    1cf2:	6819      	ldr	r1, [r3, #0]
    1cf4:	a814      	add	r0, sp, #80	; 0x50
    1cf6:	f00b fea9 	bl	da4c <String::String(int, unsigned char)>
    1cfa:	a914      	add	r1, sp, #80	; 0x50
    1cfc:	a818      	add	r0, sp, #96	; 0x60
    1cfe:	f00c f903 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1d02:	4943      	ldr	r1, [pc, #268]	; (1e10 <sendCmdOut(int)+0x5b8>)
    1d04:	f00c f940 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1d08:	4942      	ldr	r1, [pc, #264]	; (1e14 <sendCmdOut(int)+0x5bc>)
    1d0a:	f00c f8fd 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1d0e:	4935      	ldr	r1, [pc, #212]	; (1de4 <sendCmdOut(int)+0x58c>)
    1d10:	e626      	b.n	1960 <sendCmdOut(int)+0x108>
			cmdLine = "RESET\r";
			break;
		}
		// Status
		case BCCMD_STATUS: {
			cmdLine = "STATUS\r";
    1d12:	4941      	ldr	r1, [pc, #260]	; (1e18 <sendCmdOut(int)+0x5c0>)
    1d14:	a804      	add	r0, sp, #16
    1d16:	f00b ffad 	bl	dc74 <String::operator=(char const*)>
			break;
    1d1a:	e5f8      	b.n	190e <sendCmdOut(int)+0xb6>
    1d1c:	2112      	movs	r1, #18
    1d1e:	483f      	ldr	r0, [pc, #252]	; (1e1c <sendCmdOut(int)+0x5c4>)
    1d20:	f00e fdb0 	bl	10884 <usb_serial_write>
    1d24:	483e      	ldr	r0, [pc, #248]	; (1e20 <sendCmdOut(int)+0x5c8>)
    1d26:	f00b fddb 	bl	d8e0 <Print::println()>
			break;
		}
		// Reset
    case BCCMD_RESET: {
			MONPORT.println("Resetting BC127...");
			cmdLine = "RESET\r";
    1d2a:	493e      	ldr	r1, [pc, #248]	; (1e24 <sendCmdOut(int)+0x5cc>)
    1d2c:	a804      	add	r0, sp, #16
    1d2e:	f00b ffa1 	bl	dc74 <String::operator=(char const*)>
			break;
    1d32:	e5ec      	b.n	190e <sendCmdOut(int)+0xb6>
			working_state.rec_state = RECSTATE_REQ_ON;
			break;
		}
		// Stop recording
    case BCCMD_REC_STOP: {
			working_state.rec_state = RECSTATE_REQ_OFF;
    1d34:	4b24      	ldr	r3, [pc, #144]	; (1dc8 <sendCmdOut(int)+0x570>)
    1d36:	2208      	movs	r2, #8
    1d38:	701a      	strb	r2, [r3, #0]
			break;
    1d3a:	e5e8      	b.n	190e <sendCmdOut(int)+0xb6>
			}
			break;
		}
		// Start recording
    case BCCMD_REC_START: {
			working_state.rec_state = RECSTATE_REQ_ON;
    1d3c:	4b22      	ldr	r3, [pc, #136]	; (1dc8 <sendCmdOut(int)+0x570>)
    1d3e:	2201      	movs	r2, #1
    1d40:	701a      	strb	r2, [r3, #0]
			break;
    1d42:	e5e4      	b.n	190e <sendCmdOut(int)+0xb6>
			// }
			break;
		}
		// Stop monitoring -> AVRCP pause
    case BCCMD_MON_STOP: {
			working_state.mon_state = MONSTATE_REQ_OFF;
    1d44:	4b20      	ldr	r3, [pc, #128]	; (1dc8 <sendCmdOut(int)+0x570>)
    1d46:	2202      	movs	r2, #2
    1d48:	705a      	strb	r2, [r3, #1]
			if(working_state.bt_state == BTSTATE_CONNECTED) {
    1d4a:	789b      	ldrb	r3, [r3, #2]
    1d4c:	2b04      	cmp	r3, #4
    1d4e:	f47f adde 	bne.w	190e <sendCmdOut(int)+0xb6>
    1d52:	4935      	ldr	r1, [pc, #212]	; (1e28 <sendCmdOut(int)+0x5d0>)
    1d54:	a818      	add	r0, sp, #96	; 0x60
    1d56:	f00b fe21 	bl	d99c <String::String(char const*)>
				cmdLine = "MUSIC " + String(BT_conn_id1) + " STOP\r";
    1d5a:	4b29      	ldr	r3, [pc, #164]	; (1e00 <sendCmdOut(int)+0x5a8>)
    1d5c:	220a      	movs	r2, #10
    1d5e:	6819      	ldr	r1, [r3, #0]
    1d60:	a814      	add	r0, sp, #80	; 0x50
    1d62:	f00b fe73 	bl	da4c <String::String(int, unsigned char)>
    1d66:	a914      	add	r1, sp, #80	; 0x50
    1d68:	a818      	add	r0, sp, #96	; 0x60
    1d6a:	f00c f8cd 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1d6e:	492f      	ldr	r1, [pc, #188]	; (1e2c <sendCmdOut(int)+0x5d4>)
    1d70:	e5f6      	b.n	1960 <sendCmdOut(int)+0x108>
    1d72:	492d      	ldr	r1, [pc, #180]	; (1e28 <sendCmdOut(int)+0x5d0>)
    1d74:	a818      	add	r0, sp, #96	; 0x60
    1d76:	f00b fe11 	bl	d99c <String::String(char const*)>
		}
		// Start monitoring -> AVRCP play
    case BCCMD_MON_START: {
			// working_state.mon_state = MONSTATE_REQ_ON;
			// if(working_state.bt_state == BTSTATE_CONNECTED) {
				cmdLine = "MUSIC " + String(BT_conn_id1) + " PLAY\r";
    1d7a:	4b21      	ldr	r3, [pc, #132]	; (1e00 <sendCmdOut(int)+0x5a8>)
    1d7c:	220a      	movs	r2, #10
    1d7e:	6819      	ldr	r1, [r3, #0]
    1d80:	a814      	add	r0, sp, #80	; 0x50
    1d82:	f00b fe63 	bl	da4c <String::String(int, unsigned char)>
    1d86:	a914      	add	r1, sp, #80	; 0x50
    1d88:	a818      	add	r0, sp, #96	; 0x60
    1d8a:	f00c f8bd 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1d8e:	4928      	ldr	r1, [pc, #160]	; (1e30 <sendCmdOut(int)+0x5d8>)
    1d90:	e5e6      	b.n	1960 <sendCmdOut(int)+0x108>
			cmdLine = "INQUIRY 10\r";
			break;
		}
		// Pause monitoring -> AVRCP pause
		case BCCMD_MON_PAUSE: {
			working_state.mon_state = MONSTATE_REQ_OFF;
    1d92:	4b0d      	ldr	r3, [pc, #52]	; (1dc8 <sendCmdOut(int)+0x570>)
    1d94:	2202      	movs	r2, #2
    1d96:	705a      	strb	r2, [r3, #1]
			if(working_state.bt_state == BTSTATE_CONNECTED) {
    1d98:	789b      	ldrb	r3, [r3, #2]
    1d9a:	2b04      	cmp	r3, #4
    1d9c:	f47f adb7 	bne.w	190e <sendCmdOut(int)+0xb6>
    1da0:	4921      	ldr	r1, [pc, #132]	; (1e28 <sendCmdOut(int)+0x5d0>)
    1da2:	a818      	add	r0, sp, #96	; 0x60
    1da4:	f00b fdfa 	bl	d99c <String::String(char const*)>
				cmdLine = "MUSIC " + String(BT_conn_id1) + " PAUSE\r";
    1da8:	4b15      	ldr	r3, [pc, #84]	; (1e00 <sendCmdOut(int)+0x5a8>)
    1daa:	220a      	movs	r2, #10
    1dac:	6819      	ldr	r1, [r3, #0]
    1dae:	a814      	add	r0, sp, #80	; 0x50
    1db0:	f00b fe4c 	bl	da4c <String::String(int, unsigned char)>
    1db4:	a914      	add	r1, sp, #80	; 0x50
    1db6:	a818      	add	r0, sp, #96	; 0x60
    1db8:	f00c f8a6 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1dbc:	491d      	ldr	r1, [pc, #116]	; (1e34 <sendCmdOut(int)+0x5dc>)
    1dbe:	e5cf      	b.n	1960 <sendCmdOut(int)+0x108>
    1dc0:	00016d50 	.word	0x00016d50
    1dc4:	1fff596c 	.word	0x1fff596c
    1dc8:	1fff5820 	.word	0x1fff5820
    1dcc:	00016e2c 	.word	0x00016e2c
    1dd0:	00016e38 	.word	0x00016e38
    1dd4:	1fff5980 	.word	0x1fff5980
    1dd8:	1fff5834 	.word	0x1fff5834
    1ddc:	00016d54 	.word	0x00016d54
    1de0:	00016e24 	.word	0x00016e24
    1de4:	00016e00 	.word	0x00016e00
    1de8:	1fff4ad4 	.word	0x1fff4ad4
    1dec:	00017130 	.word	0x00017130
    1df0:	00016e18 	.word	0x00016e18
    1df4:	00016dec 	.word	0x00016dec
    1df8:	00016df8 	.word	0x00016df8
    1dfc:	00016dcc 	.word	0x00016dcc
    1e00:	1fff5984 	.word	0x1fff5984
    1e04:	00016dd4 	.word	0x00016dd4
    1e08:	00016ddc 	.word	0x00016ddc
    1e0c:	00016e0c 	.word	0x00016e0c
    1e10:	00016e04 	.word	0x00016e04
    1e14:	1fff5e1c 	.word	0x1fff5e1c
    1e18:	00016dc4 	.word	0x00016dc4
    1e1c:	00016da8 	.word	0x00016da8
    1e20:	1fff4b00 	.word	0x1fff4b00
    1e24:	00016dbc 	.word	0x00016dbc
    1e28:	00016d88 	.word	0x00016d88
    1e2c:	00016da0 	.word	0x00016da0
    1e30:	00016d98 	.word	0x00016d98
    1e34:	00016d90 	.word	0x00016d90
    1e38:	4c71      	ldr	r4, [pc, #452]	; (2000 <sendCmdOut(int)+0x7a8>)
    case BCCMD_INQUIRY: {
			// MONPORT.println("Start inquiry");
			for(int i = 0; i < DEVLIST_MAXLEN; i++) {
				dev_list[i].address = "";
				dev_list[i].capabilities = "";
				dev_list[i].strength = 0;
    1e3a:	2600      	movs	r6, #0
    1e3c:	f504 759c 	add.w	r5, r4, #312	; 0x138
		}
    // Start inquiry on BT for 10 s, first clear the device list
    case BCCMD_INQUIRY: {
			// MONPORT.println("Start inquiry");
			for(int i = 0; i < DEVLIST_MAXLEN; i++) {
				dev_list[i].address = "";
    1e40:	4970      	ldr	r1, [pc, #448]	; (2004 <sendCmdOut(int)+0x7ac>)
    1e42:	4620      	mov	r0, r4
    1e44:	f00b ff16 	bl	dc74 <String::operator=(char const*)>
				dev_list[i].capabilities = "";
    1e48:	f104 0020 	add.w	r0, r4, #32
    1e4c:	496d      	ldr	r1, [pc, #436]	; (2004 <sendCmdOut(int)+0x7ac>)
    1e4e:	f00b ff11 	bl	dc74 <String::operator=(char const*)>
    1e52:	3434      	adds	r4, #52	; 0x34
				dev_list[i].strength = 0;
    1e54:	f844 6c04 	str.w	r6, [r4, #-4]
			break;
		}
    // Start inquiry on BT for 10 s, first clear the device list
    case BCCMD_INQUIRY: {
			// MONPORT.println("Start inquiry");
			for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    1e58:	42a5      	cmp	r5, r4
				dev_list[i].address = "";
				dev_list[i].capabilities = "";
				dev_list[i].strength = 0;
    1e5a:	f04f 0300 	mov.w	r3, #0
			break;
		}
    // Start inquiry on BT for 10 s, first clear the device list
    case BCCMD_INQUIRY: {
			// MONPORT.println("Start inquiry");
			for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    1e5e:	d1ef      	bne.n	1e40 <sendCmdOut(int)+0x5e8>
				dev_list[i].address = "";
				dev_list[i].capabilities = "";
				dev_list[i].strength = 0;
			}
			found_dev = 0;
    1e60:	4a69      	ldr	r2, [pc, #420]	; (2008 <sendCmdOut(int)+0x7b0>)
			BT_peer_address = "";
    1e62:	4968      	ldr	r1, [pc, #416]	; (2004 <sendCmdOut(int)+0x7ac>)
    1e64:	4869      	ldr	r0, [pc, #420]	; (200c <sendCmdOut(int)+0x7b4>)
			for(int i = 0; i < DEVLIST_MAXLEN; i++) {
				dev_list[i].address = "";
				dev_list[i].capabilities = "";
				dev_list[i].strength = 0;
			}
			found_dev = 0;
    1e66:	6013      	str	r3, [r2, #0]
			BT_peer_address = "";
    1e68:	f00b ff04 	bl	dc74 <String::operator=(char const*)>
			devString = "";
    1e6c:	4965      	ldr	r1, [pc, #404]	; (2004 <sendCmdOut(int)+0x7ac>)
    1e6e:	4668      	mov	r0, sp
    1e70:	f00b ff00 	bl	dc74 <String::operator=(char const*)>
			cmdLine = "INQUIRY 10\r";
    1e74:	4966      	ldr	r1, [pc, #408]	; (2010 <sendCmdOut(int)+0x7b8>)
    1e76:	a804      	add	r0, sp, #16
    1e78:	f00b fefc 	bl	dc74 <String::operator=(char const*)>
			break;
    1e7c:	e547      	b.n	190e <sendCmdOut(int)+0xb6>
    1e7e:	a818      	add	r0, sp, #96	; 0x60
    1e80:	4964      	ldr	r1, [pc, #400]	; (2014 <sendCmdOut(int)+0x7bc>)
    1e82:	f00b fd8b 	bl	d99c <String::String(char const*)>
		case BCCMD_DEV_DISCONNECT1: {
			cmdLine = "CLOSE " + String(BT_conn_id1) + "\r";
			break;
		}
		case BCCMD_DEV_DISCONNECT2: {
			cmdLine = "CLOSE " + String(BT_conn_id2) + "\r";
    1e86:	4b64      	ldr	r3, [pc, #400]	; (2018 <sendCmdOut(int)+0x7c0>)
    1e88:	e712      	b.n	1cb0 <sendCmdOut(int)+0x458>
    1e8a:	2116      	movs	r1, #22
    1e8c:	4863      	ldr	r0, [pc, #396]	; (201c <sendCmdOut(int)+0x7c4>)
    1e8e:	f00e fcf9 	bl	10884 <usb_serial_write>
    1e92:	4863      	ldr	r0, [pc, #396]	; (2020 <sendCmdOut(int)+0x7c8>)
    1e94:	f00b fd24 	bl	d8e0 <Print::println()>
			break;
		}
		// Power-on
		case BCCMD_BLUE_ON: {
			MONPORT.println("Switching bluetooth on");
			cmdLine = "POWER ON\r";
    1e98:	4962      	ldr	r1, [pc, #392]	; (2024 <sendCmdOut(int)+0x7cc>)
    1e9a:	a804      	add	r0, sp, #16
    1e9c:	f00b feea 	bl	dc74 <String::operator=(char const*)>
			break;
    1ea0:	e535      	b.n	190e <sendCmdOut(int)+0xb6>
    1ea2:	2117      	movs	r1, #23
    1ea4:	4860      	ldr	r0, [pc, #384]	; (2028 <sendCmdOut(int)+0x7d0>)
    1ea6:	f00e fced 	bl	10884 <usb_serial_write>
    1eaa:	485d      	ldr	r0, [pc, #372]	; (2020 <sendCmdOut(int)+0x7c8>)
    1eac:	f00b fd18 	bl	d8e0 <Print::println()>
			break;
		}
		// Power-off
		case BCCMD_BLUE_OFF: {
			MONPORT.println("Switching bluetooth off");
			cmdLine = "POWER OFF\r";
    1eb0:	495e      	ldr	r1, [pc, #376]	; (202c <sendCmdOut(int)+0x7d4>)
    1eb2:	a804      	add	r0, sp, #16
    1eb4:	f00b fede 	bl	dc74 <String::operator=(char const*)>
			break;
    1eb8:	e529      	b.n	190e <sendCmdOut(int)+0xb6>
			cmdLine = "ADVERTISING ON\r";
			break;
		}
		// Stop advertising
		case BCCMD_ADV_OFF: {
			cmdLine = "ADVERTISING OFF\r";
    1eba:	495d      	ldr	r1, [pc, #372]	; (2030 <sendCmdOut(int)+0x7d8>)
    1ebc:	a804      	add	r0, sp, #16
    1ebe:	f00b fed9 	bl	dc74 <String::operator=(char const*)>
			break;
    1ec2:	e524      	b.n	190e <sendCmdOut(int)+0xb6>
		 * -------- */
    case BCCMD__NOTHING:
			break;
    // Start advertising on BLE
    case BCCMD_ADV_ON: {
			cmdLine = "ADVERTISING ON\r";
    1ec4:	495b      	ldr	r1, [pc, #364]	; (2034 <sendCmdOut(int)+0x7dc>)
    1ec6:	a804      	add	r0, sp, #16
    1ec8:	f00b fed4 	bl	dc74 <String::operator=(char const*)>
			break;
    1ecc:	e51f      	b.n	190e <sendCmdOut(int)+0xb6>
			cmdLine = "NAME " + String(BT_peer_address) + "\r";
			break;
		}
		// Open A2DP connection with 'BT_peer_address'
    case BCCMD_DEV_CONNECT: {
			if(searchDevlist(BT_peer_address)) {
    1ece:	ac18      	add	r4, sp, #96	; 0x60
    1ed0:	4620      	mov	r0, r4
    1ed2:	494e      	ldr	r1, [pc, #312]	; (200c <sendCmdOut(int)+0x7b4>)
    1ed4:	4f4a      	ldr	r7, [pc, #296]	; (2000 <sendCmdOut(int)+0x7a8>)
    1ed6:	f00b fd8d 	bl	d9f4 <String::String(String const&)>
    1eda:	463e      	mov	r6, r7
 * filled device list, in order to open a A2DP connection.
 * IN:	- device address (String)
 * OUT:	- device found (bool)
 */
bool searchDevlist(String addr) {
	for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    1edc:	2500      	movs	r5, #0
		if(dev_list[i].address.equalsIgnoreCase(addr)) {
    1ede:	4630      	mov	r0, r6
    1ee0:	4621      	mov	r1, r4
    1ee2:	f00c f90f 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    1ee6:	3634      	adds	r6, #52	; 0x34
    1ee8:	2800      	cmp	r0, #0
    1eea:	d13c      	bne.n	1f66 <sendCmdOut(int)+0x70e>
 * filled device list, in order to open a A2DP connection.
 * IN:	- device address (String)
 * OUT:	- device found (bool)
 */
bool searchDevlist(String addr) {
	for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    1eec:	3501      	adds	r5, #1
    1eee:	2d06      	cmp	r5, #6
    1ef0:	d1f5      	bne.n	1ede <sendCmdOut(int)+0x686>
    1ef2:	2115      	movs	r1, #21
    1ef4:	4850      	ldr	r0, [pc, #320]	; (2038 <sendCmdOut(int)+0x7e0>)
    1ef6:	f00e fcc5 	bl	10884 <usb_serial_write>
    1efa:	4849      	ldr	r0, [pc, #292]	; (2020 <sendCmdOut(int)+0x7c8>)
    1efc:	f00b fcf0 	bl	d8e0 <Print::println()>
			cmdLine = "NAME " + String(BT_peer_address) + "\r";
			break;
		}
		// Open A2DP connection with 'BT_peer_address'
    case BCCMD_DEV_CONNECT: {
			if(searchDevlist(BT_peer_address)) {
    1f00:	4620      	mov	r0, r4
    1f02:	f00b fe5d 	bl	dbc0 <String::~String()>
    1f06:	494d      	ldr	r1, [pc, #308]	; (203c <sendCmdOut(int)+0x7e4>)
    1f08:	4620      	mov	r0, r4
    1f0a:	f00b fd47 	bl	d99c <String::String(char const*)>
				MONPORT.printf("Opening BT connection @%s (%s)\n", BT_peer_address.c_str(), BT_peer_name.c_str());
				cmdLine = "OPEN " + BT_peer_address + " A2DP\r";
			}
			else {
				cmdLine = "SEND " + String(BLE_conn_id) + " CONN ERR NO BT DEVICE!\r";
    1f0e:	4b4c      	ldr	r3, [pc, #304]	; (2040 <sendCmdOut(int)+0x7e8>)
    1f10:	220a      	movs	r2, #10
    1f12:	6819      	ldr	r1, [r3, #0]
    1f14:	a814      	add	r0, sp, #80	; 0x50
    1f16:	f00b fd99 	bl	da4c <String::String(int, unsigned char)>
    1f1a:	a914      	add	r1, sp, #80	; 0x50
    1f1c:	4620      	mov	r0, r4
    1f1e:	f00b fff3 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1f22:	4948      	ldr	r1, [pc, #288]	; (2044 <sendCmdOut(int)+0x7ec>)
    1f24:	f00c f830 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1f28:	4601      	mov	r1, r0
    1f2a:	a804      	add	r0, sp, #16
    1f2c:	f00b fe50 	bl	dbd0 <String::operator=(String const&)>
    1f30:	a814      	add	r0, sp, #80	; 0x50
    1f32:	f00b fe45 	bl	dbc0 <String::~String()>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1f36:	4620      	mov	r0, r4
    1f38:	f00b fe42 	bl	dbc0 <String::~String()>
    1f3c:	e4e7      	b.n	190e <sendCmdOut(int)+0xb6>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1f3e:	4942      	ldr	r1, [pc, #264]	; (2048 <sendCmdOut(int)+0x7f0>)
    1f40:	a818      	add	r0, sp, #96	; 0x60
    1f42:	f00b fd2b 	bl	d99c <String::String(char const*)>
			cmdLine = "POWER ON\r";
			break;
		}
		// Ask for friendly name of connected BT device
		case BCCMD_BT_NAME: {
			cmdLine = "NAME " + String(BT_peer_address) + "\r";
    1f46:	4931      	ldr	r1, [pc, #196]	; (200c <sendCmdOut(int)+0x7b4>)
    1f48:	a814      	add	r0, sp, #80	; 0x50
    1f4a:	f00b fd53 	bl	d9f4 <String::String(String const&)>
    1f4e:	a914      	add	r1, sp, #80	; 0x50
    1f50:	a818      	add	r0, sp, #96	; 0x60
    1f52:	f00b ffd9 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1f56:	493d      	ldr	r1, [pc, #244]	; (204c <sendCmdOut(int)+0x7f4>)
    1f58:	e502      	b.n	1960 <sendCmdOut(int)+0x108>
    1f5a:	a818      	add	r0, sp, #96	; 0x60
    1f5c:	492d      	ldr	r1, [pc, #180]	; (2014 <sendCmdOut(int)+0x7bc>)
    1f5e:	f00b fd1d 	bl	d99c <String::String(char const*)>
			}
			break;
		}
		// Close connection with BT device
		case BCCMD_DEV_DISCONNECT1: {
			cmdLine = "CLOSE " + String(BT_conn_id1) + "\r";
    1f62:	4b3b      	ldr	r3, [pc, #236]	; (2050 <sendCmdOut(int)+0x7f8>)
    1f64:	e6a4      	b.n	1cb0 <sendCmdOut(int)+0x458>
    1f66:	2115      	movs	r1, #21
    1f68:	483a      	ldr	r0, [pc, #232]	; (2054 <sendCmdOut(int)+0x7fc>)
 */
bool searchDevlist(String addr) {
	for(int i = 0; i < DEVLIST_MAXLEN; i++) {
		if(dev_list[i].address.equalsIgnoreCase(addr)) {
			MONPORT.println("Device found in list!");
			BT_peer_name = dev_list[i].name;
    1f6a:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2070 <sendCmdOut(int)+0x818>
    1f6e:	4e27      	ldr	r6, [pc, #156]	; (200c <sendCmdOut(int)+0x7b4>)
    1f70:	f00e fc88 	bl	10884 <usb_serial_write>
    1f74:	482a      	ldr	r0, [pc, #168]	; (2020 <sendCmdOut(int)+0x7c8>)
    1f76:	f00b fcb3 	bl	d8e0 <Print::println()>
    1f7a:	2134      	movs	r1, #52	; 0x34
    1f7c:	fb01 7105 	mla	r1, r1, r5, r7
    1f80:	3110      	adds	r1, #16
    1f82:	4640      	mov	r0, r8
    1f84:	f00b fe24 	bl	dbd0 <String::operator=(String const&)>
			cmdLine = "NAME " + String(BT_peer_address) + "\r";
			break;
		}
		// Open A2DP connection with 'BT_peer_address'
    case BCCMD_DEV_CONNECT: {
			if(searchDevlist(BT_peer_address)) {
    1f88:	4620      	mov	r0, r4
    1f8a:	f00b fe19 	bl	dbc0 <String::~String()>
				MONPORT.printf("Opening BT connection @%s (%s)\n", BT_peer_address.c_str(), BT_peer_name.c_str());
    1f8e:	f8d8 3000 	ldr.w	r3, [r8]
    1f92:	6832      	ldr	r2, [r6, #0]
    1f94:	4930      	ldr	r1, [pc, #192]	; (2058 <sendCmdOut(int)+0x800>)
    1f96:	4822      	ldr	r0, [pc, #136]	; (2020 <sendCmdOut(int)+0x7c8>)
    1f98:	f00b fcba 	bl	d910 <Print::printf(char const*, ...)>
    1f9c:	492f      	ldr	r1, [pc, #188]	; (205c <sendCmdOut(int)+0x804>)
    1f9e:	4620      	mov	r0, r4
    1fa0:	f00b fcfc 	bl	d99c <String::String(char const*)>
				cmdLine = "OPEN " + BT_peer_address + " A2DP\r";
    1fa4:	4631      	mov	r1, r6
    1fa6:	4620      	mov	r0, r4
    1fa8:	f00b ffae 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1fac:	492c      	ldr	r1, [pc, #176]	; (2060 <sendCmdOut(int)+0x808>)
    1fae:	f00b ffeb 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    1fb2:	4601      	mov	r1, r0
    1fb4:	a804      	add	r0, sp, #16
    1fb6:	f00b fe0b 	bl	dbd0 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1fba:	4620      	mov	r0, r4
    1fbc:	f00b fe00 	bl	dbc0 <String::~String()>
    1fc0:	e4a5      	b.n	190e <sendCmdOut(int)+0xb6>
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
    1fc2:	4928      	ldr	r1, [pc, #160]	; (2064 <sendCmdOut(int)+0x80c>)
    1fc4:	a804      	add	r0, sp, #16
    1fc6:	f00b fec7 	bl	dd58 <String::append(char const*)>
    1fca:	e4a0      	b.n	190e <sendCmdOut(int)+0xb6>
    1fcc:	4926      	ldr	r1, [pc, #152]	; (2068 <sendCmdOut(int)+0x810>)
    1fce:	a804      	add	r0, sp, #16
    1fd0:	f00b fec2 	bl	dd58 <String::append(char const*)>
    1fd4:	e49b      	b.n	190e <sendCmdOut(int)+0xb6>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1fd6:	4925      	ldr	r1, [pc, #148]	; (206c <sendCmdOut(int)+0x814>)
    1fd8:	a818      	add	r0, sp, #96	; 0x60
    1fda:	f00b fcdf 	bl	d99c <String::String(char const*)>
		 * NOTIFICATIONS
		 * ------------- */
		// BT state notification
		case BCNOT_BT_STATE: {
			cmdLine = "SEND " + String(BLE_conn_id);
			if(working_state.bt_state == BTSTATE_CONNECTED) cmdLine += (" BT " + BT_peer_name + "\r");
    1fde:	4924      	ldr	r1, [pc, #144]	; (2070 <sendCmdOut(int)+0x818>)
    1fe0:	a818      	add	r0, sp, #96	; 0x60
    1fe2:	f00b ff91 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    1fe6:	4919      	ldr	r1, [pc, #100]	; (204c <sendCmdOut(int)+0x7f4>)
    1fe8:	f00b ffce 	bl	df88 <operator+(StringSumHelper const&, char const*)>
	String & append(unsigned int num);
	String & append(long num);
	String & append(unsigned long num);
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
    1fec:	4601      	mov	r1, r0
    1fee:	a804      	add	r0, sp, #16
    1ff0:	f00b fe72 	bl	dcd8 <String::append(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    1ff4:	a818      	add	r0, sp, #96	; 0x60
    1ff6:	f00b fde3 	bl	dbc0 <String::~String()>
    1ffa:	e488      	b.n	190e <sendCmdOut(int)+0xb6>
			cmdLine = "SEND " + String(BLE_conn_id) + " VOL ERR NO BT DEVICE!\r";
			break;
		}
		// No recognised command -> send negative confirmation
    default:
			return false;
    1ffc:	2400      	movs	r4, #0
    1ffe:	e490      	b.n	1922 <sendCmdOut(int)+0xca>
    2000:	1fff5834 	.word	0x1fff5834
    2004:	00017130 	.word	0x00017130
    2008:	1fff5980 	.word	0x1fff5980
    200c:	1fff5970 	.word	0x1fff5970
    2010:	00016d7c 	.word	0x00016d7c
    2014:	00016d74 	.word	0x00016d74
    2018:	1fff5988 	.word	0x1fff5988
    201c:	00016ca0 	.word	0x00016ca0
    2020:	1fff4b00 	.word	0x1fff4b00
    2024:	00016cb8 	.word	0x00016cb8
    2028:	00016cc4 	.word	0x00016cc4
    202c:	00016cdc 	.word	0x00016cdc
    2030:	00016c8c 	.word	0x00016c8c
    2034:	00016c6c 	.word	0x00016c6c
    2038:	00016d38 	.word	0x00016d38
    203c:	00016d50 	.word	0x00016d50
    2040:	1fff596c 	.word	0x1fff596c
    2044:	00016d58 	.word	0x00016d58
    2048:	00016ce8 	.word	0x00016ce8
    204c:	00016e00 	.word	0x00016e00
    2050:	1fff5984 	.word	0x1fff5984
    2054:	00016cf0 	.word	0x00016cf0
    2058:	00016d08 	.word	0x00016d08
    205c:	00016d28 	.word	0x00016d28
    2060:	00016d30 	.word	0x00016d30
    2064:	00016ec0 	.word	0x00016ec0
    2068:	00016e44 	.word	0x00016e44
    206c:	00016de4 	.word	0x00016de4
    2070:	1fff5824 	.word	0x1fff5824

00002074 <populateDevlist(String, String, String, unsigned int)>:
 *			- device name (String)
 *			- device capabilities (String)
 *			- absolute signal stregth value (unsigned int)
 * OUT:	- none
 */
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
    2074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2078:	4f1d      	ldr	r7, [pc, #116]	; (20f0 <populateDevlist(String, String, String, unsigned int)+0x7c>)
    207a:	4698      	mov	r8, r3
    207c:	4606      	mov	r6, r0
    207e:	468a      	mov	sl, r1
    2080:	4691      	mov	r9, r2
    2082:	463b      	mov	r3, r7
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    2084:	2400      	movs	r4, #0
		// Received address matches to an already existing one.
    if(addr.equals(dev_list[i].address)) {
    2086:	4619      	mov	r1, r3
    2088:	4630      	mov	r0, r6
    208a:	461d      	mov	r5, r3
    208c:	f00c f806 	bl	e09c <String::equals(String const&) const>
      dev_list[i].strength = stren;
      found = true;
      break;
    }
		// No address matched and the current position is empty.
    else if(dev_list[i].address.equals("")) {
    2090:	4918      	ldr	r1, [pc, #96]	; (20f4 <populateDevlist(String, String, String, unsigned int)+0x80>)
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
		// Received address matches to an already existing one.
    if(addr.equals(dev_list[i].address)) {
    2092:	bb30      	cbnz	r0, 20e2 <populateDevlist(String, String, String, unsigned int)+0x6e>
      dev_list[i].strength = stren;
      found = true;
      break;
    }
		// No address matched and the current position is empty.
    else if(dev_list[i].address.equals("")) {
    2094:	4628      	mov	r0, r5
    2096:	f00c f81f 	bl	e0d8 <String::equals(char const*) const>
    209a:	f105 0334 	add.w	r3, r5, #52	; 0x34
    209e:	b920      	cbnz	r0, 20aa <populateDevlist(String, String, String, unsigned int)+0x36>
 * OUT:	- none
 */
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    20a0:	3401      	adds	r4, #1
    20a2:	2c06      	cmp	r4, #6
    20a4:	d1ef      	bne.n	2086 <populateDevlist(String, String, String, unsigned int)+0x12>
    20a6:	4d12      	ldr	r5, [pc, #72]	; (20f0 <populateDevlist(String, String, String, unsigned int)+0x7c>)
 *			- absolute signal stregth value (unsigned int)
 * OUT:	- none
 */
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
  bool found = false;
  int lastPos = 0;
    20a8:	4604      	mov	r4, r0
    }
  }

	// If not matching device has been found, fill the next emplacement.
  if(!found) {
    dev_list[lastPos].address = addr;
    20aa:	4631      	mov	r1, r6
    20ac:	4628      	mov	r0, r5
    20ae:	f00b fd8f 	bl	dbd0 <String::operator=(String const&)>
		dev_list[lastPos].name = name;
    20b2:	2334      	movs	r3, #52	; 0x34
    20b4:	fb03 f404 	mul.w	r4, r3, r4
    20b8:	f104 0010 	add.w	r0, r4, #16
    20bc:	4651      	mov	r1, sl
    20be:	4438      	add	r0, r7
    20c0:	f00b fd86 	bl	dbd0 <String::operator=(String const&)>
    dev_list[lastPos].capabilities = caps;
    20c4:	f104 0020 	add.w	r0, r4, #32
    20c8:	4649      	mov	r1, r9
    20ca:	4438      	add	r0, r7
    20cc:	f00b fd80 	bl	dbd0 <String::operator=(String const&)>
    dev_list[lastPos].strength = stren;
    found_dev += 1;
    20d0:	4a09      	ldr	r2, [pc, #36]	; (20f8 <populateDevlist(String, String, String, unsigned int)+0x84>)
    20d2:	6813      	ldr	r3, [r2, #0]
	// If not matching device has been found, fill the next emplacement.
  if(!found) {
    dev_list[lastPos].address = addr;
		dev_list[lastPos].name = name;
    dev_list[lastPos].capabilities = caps;
    dev_list[lastPos].strength = stren;
    20d4:	443c      	add	r4, r7
    found_dev += 1;
    20d6:	3301      	adds	r3, #1
	// If not matching device has been found, fill the next emplacement.
  if(!found) {
    dev_list[lastPos].address = addr;
		dev_list[lastPos].name = name;
    dev_list[lastPos].capabilities = caps;
    dev_list[lastPos].strength = stren;
    20d8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    found_dev += 1;
    20dc:	6013      	str	r3, [r2, #0]
    20de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
		// Received address matches to an already existing one.
    if(addr.equals(dev_list[i].address)) {
      dev_list[i].strength = stren;
    20e2:	2334      	movs	r3, #52	; 0x34
    20e4:	fb03 7404 	mla	r4, r3, r4, r7
    20e8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
    20ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20f0:	1fff5834 	.word	0x1fff5834
    20f4:	00017130 	.word	0x00017130
    20f8:	1fff5980 	.word	0x1fff5980

000020fc <parseSerialIn(String)>:
 * Parse received string and read information along
 * minimal keywords.
 * IN:	- received input (String)
 * OUT:	- message to send back (int)
 */
int parseSerialIn(String input) {
    20fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2100:	b0d3      	sub	sp, #332	; 0x14c
    2102:	4604      	mov	r4, r0
  // Currently 3 usefull schemes:
  // - 2 words   --> e.g. "OPEN_OK AVRCP"
  // - RECV BLE  --> commands received from phone over BLE
  // - other     --> 3+ words inputs like "INQUIRY xxxx 240404 -54dB"
  // ================================================================
	String notif, param1, param2, param3, param4, param5, param6, param7, param8, param9, trash;
    2104:	2100      	movs	r1, #0
    2106:	a80e      	add	r0, sp, #56	; 0x38
    2108:	f00b fc48 	bl	d99c <String::String(char const*)>
    210c:	2100      	movs	r1, #0
    210e:	a812      	add	r0, sp, #72	; 0x48
    2110:	f00b fc44 	bl	d99c <String::String(char const*)>
    2114:	2100      	movs	r1, #0
    2116:	a816      	add	r0, sp, #88	; 0x58
    2118:	f00b fc40 	bl	d99c <String::String(char const*)>
    211c:	2100      	movs	r1, #0
    211e:	a81a      	add	r0, sp, #104	; 0x68
    2120:	f00b fc3c 	bl	d99c <String::String(char const*)>
    2124:	2100      	movs	r1, #0
    2126:	a81e      	add	r0, sp, #120	; 0x78
    2128:	f00b fc38 	bl	d99c <String::String(char const*)>
    212c:	2100      	movs	r1, #0
    212e:	a822      	add	r0, sp, #136	; 0x88
    2130:	f00b fc34 	bl	d99c <String::String(char const*)>
    2134:	2100      	movs	r1, #0
    2136:	a826      	add	r0, sp, #152	; 0x98
    2138:	f00b fc30 	bl	d99c <String::String(char const*)>
    213c:	2100      	movs	r1, #0
    213e:	a82a      	add	r0, sp, #168	; 0xa8
    2140:	f00b fc2c 	bl	d99c <String::String(char const*)>
    2144:	2100      	movs	r1, #0
    2146:	a82e      	add	r0, sp, #184	; 0xb8
    2148:	f00b fc28 	bl	d99c <String::String(char const*)>
    214c:	2100      	movs	r1, #0
    214e:	a832      	add	r0, sp, #200	; 0xc8
    2150:	f00b fc24 	bl	d99c <String::String(char const*)>
    2154:	2100      	movs	r1, #0
    2156:	a836      	add	r0, sp, #216	; 0xd8
    2158:	f00b fc20 	bl	d99c <String::String(char const*)>
  unsigned int nb_params = 0;
  int slice1 = input.indexOf(" ");
    215c:	49a9      	ldr	r1, [pc, #676]	; (2404 <parseSerialIn(String)+0x308>)
    215e:	a84e      	add	r0, sp, #312	; 0x138
    2160:	f00b fc1c 	bl	d99c <String::String(char const*)>
    2164:	a94e      	add	r1, sp, #312	; 0x138
    2166:	4620      	mov	r0, r4
    2168:	f00c f808 	bl	e17c <String::indexOf(String const&) const>
    216c:	4683      	mov	fp, r0
    216e:	a84e      	add	r0, sp, #312	; 0x138
    2170:	f00b fd26 	bl	dbc0 <String::~String()>
  int slice2 = input.indexOf(" ", slice1+1);
    2174:	f10b 0701 	add.w	r7, fp, #1
    2178:	49a2      	ldr	r1, [pc, #648]	; (2404 <parseSerialIn(String)+0x308>)
    217a:	a84e      	add	r0, sp, #312	; 0x138
    217c:	f00b fc0e 	bl	d99c <String::String(char const*)>
    2180:	463a      	mov	r2, r7
    2182:	a94e      	add	r1, sp, #312	; 0x138
    2184:	4620      	mov	r0, r4
    2186:	f00c f80b 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    218a:	4605      	mov	r5, r0
    218c:	a84e      	add	r0, sp, #312	; 0x138
    218e:	f00b fd17 	bl	dbc0 <String::~String()>
	int slice3 = input.indexOf(" ", slice2+1);
    2192:	f105 0901 	add.w	r9, r5, #1
    2196:	499b      	ldr	r1, [pc, #620]	; (2404 <parseSerialIn(String)+0x308>)
    2198:	a84e      	add	r0, sp, #312	; 0x138
    219a:	f00b fbff 	bl	d99c <String::String(char const*)>
    219e:	464a      	mov	r2, r9
    21a0:	a94e      	add	r1, sp, #312	; 0x138
    21a2:	4620      	mov	r0, r4
    21a4:	f00b fffc 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    21a8:	4606      	mov	r6, r0
    21aa:	a84e      	add	r0, sp, #312	; 0x138
    21ac:	f00b fd08 	bl	dbc0 <String::~String()>
	int slice4 = input.indexOf(" ", slice3+1);
    21b0:	1c73      	adds	r3, r6, #1
    21b2:	4994      	ldr	r1, [pc, #592]	; (2404 <parseSerialIn(String)+0x308>)
    21b4:	930c      	str	r3, [sp, #48]	; 0x30
    21b6:	a84e      	add	r0, sp, #312	; 0x138
    21b8:	f00b fbf0 	bl	d99c <String::String(char const*)>
    21bc:	1c72      	adds	r2, r6, #1
    21be:	a94e      	add	r1, sp, #312	; 0x138
    21c0:	4620      	mov	r0, r4
    21c2:	f00b ffed 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    21c6:	4680      	mov	r8, r0
    21c8:	a84e      	add	r0, sp, #312	; 0x138
    21ca:	f00b fcf9 	bl	dbc0 <String::~String()>
	int slice5 = input.indexOf(" ", slice4+1);
    21ce:	f108 0301 	add.w	r3, r8, #1
    21d2:	498c      	ldr	r1, [pc, #560]	; (2404 <parseSerialIn(String)+0x308>)
    21d4:	9303      	str	r3, [sp, #12]
    21d6:	a84e      	add	r0, sp, #312	; 0x138
    21d8:	f00b fbe0 	bl	d99c <String::String(char const*)>
    21dc:	9a03      	ldr	r2, [sp, #12]
    21de:	a94e      	add	r1, sp, #312	; 0x138
    21e0:	4620      	mov	r0, r4
    21e2:	f00b ffdd 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    21e6:	4682      	mov	sl, r0
    21e8:	a84e      	add	r0, sp, #312	; 0x138
    21ea:	f00b fce9 	bl	dbc0 <String::~String()>
	int slice6 = input.indexOf(" ", slice5+1);
    21ee:	f10a 0301 	add.w	r3, sl, #1
    21f2:	4984      	ldr	r1, [pc, #528]	; (2404 <parseSerialIn(String)+0x308>)
    21f4:	9305      	str	r3, [sp, #20]
    21f6:	a84e      	add	r0, sp, #312	; 0x138
    21f8:	f00b fbd0 	bl	d99c <String::String(char const*)>
    21fc:	a94e      	add	r1, sp, #312	; 0x138
    21fe:	9a05      	ldr	r2, [sp, #20]
    2200:	4620      	mov	r0, r4
    2202:	f00b ffcd 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    2206:	aa4e      	add	r2, sp, #312	; 0x138
    2208:	9002      	str	r0, [sp, #8]
    220a:	4610      	mov	r0, r2
    220c:	f00b fcd8 	bl	dbc0 <String::~String()>
	int slice7 = input.indexOf(" ", slice6+1);
    2210:	9b02      	ldr	r3, [sp, #8]
    2212:	497c      	ldr	r1, [pc, #496]	; (2404 <parseSerialIn(String)+0x308>)
    2214:	3301      	adds	r3, #1
    2216:	a84e      	add	r0, sp, #312	; 0x138
    2218:	9306      	str	r3, [sp, #24]
    221a:	f00b fbbf 	bl	d99c <String::String(char const*)>
    221e:	a94e      	add	r1, sp, #312	; 0x138
    2220:	9a06      	ldr	r2, [sp, #24]
    2222:	4620      	mov	r0, r4
    2224:	f00b ffbc 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    2228:	aa4e      	add	r2, sp, #312	; 0x138
    222a:	9004      	str	r0, [sp, #16]
    222c:	4610      	mov	r0, r2
    222e:	f00b fcc7 	bl	dbc0 <String::~String()>
	int slice8 = input.indexOf(" ", slice7+1);
    2232:	9b04      	ldr	r3, [sp, #16]
    2234:	4973      	ldr	r1, [pc, #460]	; (2404 <parseSerialIn(String)+0x308>)
    2236:	3301      	adds	r3, #1
    2238:	a84e      	add	r0, sp, #312	; 0x138
    223a:	9308      	str	r3, [sp, #32]
    223c:	f00b fbae 	bl	d99c <String::String(char const*)>
    2240:	a94e      	add	r1, sp, #312	; 0x138
    2242:	9a08      	ldr	r2, [sp, #32]
    2244:	4620      	mov	r0, r4
    2246:	f00b ffab 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    224a:	aa4e      	add	r2, sp, #312	; 0x138
    224c:	9007      	str	r0, [sp, #28]
    224e:	4610      	mov	r0, r2
    2250:	f00b fcb6 	bl	dbc0 <String::~String()>
	int slice9 = input.indexOf(" ", slice8+1);
    2254:	9b07      	ldr	r3, [sp, #28]
    2256:	496b      	ldr	r1, [pc, #428]	; (2404 <parseSerialIn(String)+0x308>)
    2258:	3301      	adds	r3, #1
    225a:	a84e      	add	r0, sp, #312	; 0x138
    225c:	930a      	str	r3, [sp, #40]	; 0x28
    225e:	f00b fb9d 	bl	d99c <String::String(char const*)>
    2262:	a94e      	add	r1, sp, #312	; 0x138
    2264:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2266:	4620      	mov	r0, r4
    2268:	f00b ff9a 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    226c:	aa4e      	add	r2, sp, #312	; 0x138
    226e:	900b      	str	r0, [sp, #44]	; 0x2c
    2270:	4610      	mov	r0, r2
    2272:	f00b fca5 	bl	dbc0 <String::~String()>
	int slice10 = input.indexOf(" ", slice9+1);
    2276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2278:	4962      	ldr	r1, [pc, #392]	; (2404 <parseSerialIn(String)+0x308>)
    227a:	3301      	adds	r3, #1
    227c:	a84e      	add	r0, sp, #312	; 0x138
    227e:	9309      	str	r3, [sp, #36]	; 0x24
    2280:	f00b fb8c 	bl	d99c <String::String(char const*)>
    2284:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2286:	a94e      	add	r1, sp, #312	; 0x138
    2288:	4620      	mov	r0, r4
    228a:	f00b ff89 	bl	e1a0 <String::indexOf(String const&, unsigned int) const>
    228e:	900d      	str	r0, [sp, #52]	; 0x34
    2290:	a84e      	add	r0, sp, #312	; 0x138
    2292:	f00b fc95 	bl	dbc0 <String::~String()>
	MONPORT.printf("From BC127: %s\n", input.c_str());
    2296:	6822      	ldr	r2, [r4, #0]
    2298:	495b      	ldr	r1, [pc, #364]	; (2408 <parseSerialIn(String)+0x30c>)
    229a:	485c      	ldr	r0, [pc, #368]	; (240c <parseSerialIn(String)+0x310>)
    229c:	f00b fb38 	bl	d910 <Print::printf(char const*, ...)>
	// no space found -> notification without parameter
	if(slice1 == -1) {
    22a0:	f1bb 3fff 	cmp.w	fp, #4294967295
    22a4:	f000 80b4 	beq.w	2410 <parseSerialIn(String)+0x314>
		notif = input;
		nb_params = 0;
	}
  // 1+ parameter
  else {
    notif = input.substring(0, slice1);
    22a8:	2200      	movs	r2, #0
    22aa:	465b      	mov	r3, fp
    22ac:	4621      	mov	r1, r4
    22ae:	a84e      	add	r0, sp, #312	; 0x138
    22b0:	f00b ffe4 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    22b4:	a94e      	add	r1, sp, #312	; 0x138
    22b6:	a80e      	add	r0, sp, #56	; 0x38
    22b8:	f00b fcba 	bl	dc30 <String::operator=(String&&)>
    22bc:	a84e      	add	r0, sp, #312	; 0x138
    22be:	f00b fc7f 	bl	dbc0 <String::~String()>
		if(slice2 == -1) {
    22c2:	1c6a      	adds	r2, r5, #1
    22c4:	f000 80dd 	beq.w	2482 <parseSerialIn(String)+0x386>
			param1 = input.substring(slice1 + 1);
			nb_params = 1;
		}
		// 2+ parameters
		else {
			param1 = input.substring(slice1 + 1, slice2);
    22c8:	462b      	mov	r3, r5
    22ca:	463a      	mov	r2, r7
    22cc:	4621      	mov	r1, r4
    22ce:	a84e      	add	r0, sp, #312	; 0x138
    22d0:	f00b ffd4 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    22d4:	a94e      	add	r1, sp, #312	; 0x138
    22d6:	a812      	add	r0, sp, #72	; 0x48
    22d8:	f00b fcaa 	bl	dc30 <String::operator=(String&&)>
    22dc:	a84e      	add	r0, sp, #312	; 0x138
    22de:	f00b fc6f 	bl	dbc0 <String::~String()>
			if(slice3 == -1) {
    22e2:	1c73      	adds	r3, r6, #1
    22e4:	f000 8130 	beq.w	2548 <parseSerialIn(String)+0x44c>
				param2 = input.substring(slice2 + 1);
				nb_params = 2;
			}
			// 3+ parameters
			else {
				param2 = input.substring(slice2 + 1, slice3);
    22e8:	4633      	mov	r3, r6
    22ea:	464a      	mov	r2, r9
    22ec:	4621      	mov	r1, r4
    22ee:	a84e      	add	r0, sp, #312	; 0x138
    22f0:	f00b ffc4 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    22f4:	a94e      	add	r1, sp, #312	; 0x138
    22f6:	a816      	add	r0, sp, #88	; 0x58
    22f8:	f00b fc9a 	bl	dc30 <String::operator=(String&&)>
    22fc:	a84e      	add	r0, sp, #312	; 0x138
    22fe:	f00b fc5f 	bl	dbc0 <String::~String()>
				if(slice4 == -1) {
    2302:	f1b8 3fff 	cmp.w	r8, #4294967295
    2306:	f000 81fb 	beq.w	2700 <parseSerialIn(String)+0x604>
					param3 = input.substring(slice3 + 1);
					nb_params = 3;
				}
				// 4+ parameters
				else {
					param3 = input.substring(slice3 + 1, slice4);
    230a:	4643      	mov	r3, r8
    230c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    230e:	4621      	mov	r1, r4
    2310:	a84e      	add	r0, sp, #312	; 0x138
    2312:	f00b ffb3 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    2316:	a94e      	add	r1, sp, #312	; 0x138
    2318:	a81a      	add	r0, sp, #104	; 0x68
    231a:	f00b fc89 	bl	dc30 <String::operator=(String&&)>
    231e:	a84e      	add	r0, sp, #312	; 0x138
    2320:	f00b fc4e 	bl	dbc0 <String::~String()>
					if(slice5 == -1) {
    2324:	f1ba 3fff 	cmp.w	sl, #4294967295
    2328:	f000 813e 	beq.w	25a8 <parseSerialIn(String)+0x4ac>
						param4 = input.substring(slice4 + 1);
						nb_params = 4;
					}
					// 5+ parameters
					else {
						param4 = input.substring(slice4 + 1, slice5);
    232c:	4653      	mov	r3, sl
    232e:	9a03      	ldr	r2, [sp, #12]
    2330:	4621      	mov	r1, r4
    2332:	a84e      	add	r0, sp, #312	; 0x138
    2334:	f00b ffa2 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    2338:	a94e      	add	r1, sp, #312	; 0x138
    233a:	a81e      	add	r0, sp, #120	; 0x78
    233c:	f00b fc78 	bl	dc30 <String::operator=(String&&)>
    2340:	a84e      	add	r0, sp, #312	; 0x138
    2342:	f00b fc3d 	bl	dbc0 <String::~String()>
						if(slice6 == -1) {
    2346:	9b02      	ldr	r3, [sp, #8]
							param5 = input.substring(slice5 + 1);
    2348:	9a05      	ldr	r2, [sp, #20]
						nb_params = 4;
					}
					// 5+ parameters
					else {
						param4 = input.substring(slice4 + 1, slice5);
						if(slice6 == -1) {
    234a:	1c5f      	adds	r7, r3, #1
							param5 = input.substring(slice5 + 1);
    234c:	4621      	mov	r1, r4
    234e:	a84e      	add	r0, sp, #312	; 0x138
						nb_params = 4;
					}
					// 5+ parameters
					else {
						param4 = input.substring(slice4 + 1, slice5);
						if(slice6 == -1) {
    2350:	f000 82f0 	beq.w	2934 <parseSerialIn(String)+0x838>
							param5 = input.substring(slice5 + 1);
							nb_params = 5;
						}
						// 6+ parameters
						else {
							param5 = input.substring(slice5 + 1, slice6);
    2354:	f00b ff92 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    2358:	a94e      	add	r1, sp, #312	; 0x138
    235a:	a822      	add	r0, sp, #136	; 0x88
    235c:	f00b fc68 	bl	dc30 <String::operator=(String&&)>
    2360:	a84e      	add	r0, sp, #312	; 0x138
    2362:	f00b fc2d 	bl	dbc0 <String::~String()>
							if(slice7 == -1) {
    2366:	9b04      	ldr	r3, [sp, #16]
								param6 = input.substring(slice6 + 1);
    2368:	9a06      	ldr	r2, [sp, #24]
							nb_params = 5;
						}
						// 6+ parameters
						else {
							param5 = input.substring(slice5 + 1, slice6);
							if(slice7 == -1) {
    236a:	1c5e      	adds	r6, r3, #1
								param6 = input.substring(slice6 + 1);
    236c:	4621      	mov	r1, r4
    236e:	a84e      	add	r0, sp, #312	; 0x138
							nb_params = 5;
						}
						// 6+ parameters
						else {
							param5 = input.substring(slice5 + 1, slice6);
							if(slice7 == -1) {
    2370:	f000 826d 	beq.w	284e <parseSerialIn(String)+0x752>
								param6 = input.substring(slice6 + 1);
								nb_params = 6;
							}
							// 7+ parameters
							else {
								param6 = input.substring(slice6 + 1, slice7);
    2374:	f00b ff82 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    2378:	a94e      	add	r1, sp, #312	; 0x138
    237a:	a826      	add	r0, sp, #152	; 0x98
    237c:	f00b fc58 	bl	dc30 <String::operator=(String&&)>
    2380:	a84e      	add	r0, sp, #312	; 0x138
    2382:	f00b fc1d 	bl	dbc0 <String::~String()>
								if(slice8 == -1) {
    2386:	9b07      	ldr	r3, [sp, #28]
									trash = input.substring(slice7 + 1);
    2388:	9a08      	ldr	r2, [sp, #32]
								nb_params = 6;
							}
							// 7+ parameters
							else {
								param6 = input.substring(slice6 + 1, slice7);
								if(slice8 == -1) {
    238a:	1c5d      	adds	r5, r3, #1
									trash = input.substring(slice7 + 1);
    238c:	4621      	mov	r1, r4
    238e:	a84e      	add	r0, sp, #312	; 0x138
								nb_params = 6;
							}
							// 7+ parameters
							else {
								param6 = input.substring(slice6 + 1, slice7);
								if(slice8 == -1) {
    2390:	f000 8242 	beq.w	2818 <parseSerialIn(String)+0x71c>
									trash = input.substring(slice7 + 1);
									nb_params = 7;
								}
								// 8+ paramters
								else {
									param7 = input.substring(slice7 + 1, slice8);
    2394:	f00b ff72 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    2398:	a94e      	add	r1, sp, #312	; 0x138
    239a:	a82a      	add	r0, sp, #168	; 0xa8
    239c:	f00b fc48 	bl	dc30 <String::operator=(String&&)>
    23a0:	a84e      	add	r0, sp, #312	; 0x138
    23a2:	f00b fc0d 	bl	dbc0 <String::~String()>
										trash = input.substring(slice8 + 1);
										nb_params = 8;
									}
									// 9+ parameters
									else {
										param8 = input.substring(slice8 + 1, slice9);
    23a6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    23a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    23aa:	462b      	mov	r3, r5
    23ac:	4621      	mov	r1, r4
    23ae:	a84e      	add	r0, sp, #312	; 0x138
    23b0:	f00b ff64 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    23b4:	a94e      	add	r1, sp, #312	; 0x138
    23b6:	a82e      	add	r0, sp, #184	; 0xb8
    23b8:	f00b fc3a 	bl	dc30 <String::operator=(String&&)>
    23bc:	a84e      	add	r0, sp, #312	; 0x138
    23be:	f00b fbff 	bl	dbc0 <String::~String()>
										if(slice9 == -1) {
    23c2:	1c6b      	adds	r3, r5, #1
											trash = input.substring(slice9 + 1);
    23c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
										nb_params = 8;
									}
									// 9+ parameters
									else {
										param8 = input.substring(slice8 + 1, slice9);
										if(slice9 == -1) {
    23c6:	f000 81d5 	beq.w	2774 <parseSerialIn(String)+0x678>
											trash = input.substring(slice9 + 1);
											nb_params = 9;
										}
										// 10+ parameters
										else {
											param9 = input.substring(slice9 + 1, slice10);
    23ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    23cc:	4621      	mov	r1, r4
    23ce:	462b      	mov	r3, r5
    23d0:	a84e      	add	r0, sp, #312	; 0x138
    23d2:	f00b ff53 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    23d6:	a94e      	add	r1, sp, #312	; 0x138
    23d8:	a832      	add	r0, sp, #200	; 0xc8
    23da:	f00b fc29 	bl	dc30 <String::operator=(String&&)>
    23de:	a84e      	add	r0, sp, #312	; 0x138
    23e0:	f00b fbee 	bl	dbc0 <String::~String()>
											if(slice10 == -1) {
    23e4:	1c6b      	adds	r3, r5, #1
    23e6:	d117      	bne.n	2418 <parseSerialIn(String)+0x31c>
												trash = input.substring(slice10 + 1);
    23e8:	4621      	mov	r1, r4
    23ea:	2200      	movs	r2, #0
    23ec:	a84e      	add	r0, sp, #312	; 0x138
    23ee:	f00b fee9 	bl	e1c4 <String::substring(unsigned int) const>
    23f2:	a94e      	add	r1, sp, #312	; 0x138
    23f4:	a836      	add	r0, sp, #216	; 0xd8
    23f6:	f00b fc1b 	bl	dc30 <String::operator=(String&&)>
    23fa:	a84e      	add	r0, sp, #312	; 0x138
    23fc:	f00b fbe0 	bl	dbc0 <String::~String()>
		default:
			// MONPORT.println(input.c_str());
			break;
	}
	
  return BCCMD__NOTHING;
    2400:	2400      	movs	r4, #0
    2402:	e019      	b.n	2438 <parseSerialIn(String)+0x33c>
    2404:	00016d54 	.word	0x00016d54
    2408:	00016ed8 	.word	0x00016ed8
    240c:	1fff4b00 	.word	0x1fff4b00
	int slice9 = input.indexOf(" ", slice8+1);
	int slice10 = input.indexOf(" ", slice9+1);
	MONPORT.printf("From BC127: %s\n", input.c_str());
	// no space found -> notification without parameter
	if(slice1 == -1) {
		notif = input;
    2410:	4621      	mov	r1, r4
    2412:	a80e      	add	r0, sp, #56	; 0x38
    2414:	f00b fbdc 	bl	dbd0 <String::operator=(String const&)>
		// PENDING
		// INQU_OK
		// PAIR_PENDING
		// READY
		case 0: {
			if(notif.equalsIgnoreCase("PENDING")) {
    2418:	49a7      	ldr	r1, [pc, #668]	; (26b8 <parseSerialIn(String)+0x5bc>)
    241a:	a84e      	add	r0, sp, #312	; 0x138
    241c:	f00b fabe 	bl	d99c <String::String(char const*)>
    2420:	a94e      	add	r1, sp, #312	; 0x138
    2422:	a80e      	add	r0, sp, #56	; 0x38
    2424:	f00b fe6e 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2428:	4604      	mov	r4, r0
    242a:	a84e      	add	r0, sp, #312	; 0x138
    242c:	f00b fbc8 	bl	dbc0 <String::~String()>
    2430:	2c00      	cmp	r4, #0
    2432:	f000 830e 	beq.w	2a52 <parseSerialIn(String)+0x956>
		default:
			// MONPORT.println(input.c_str());
			break;
	}
	
  return BCCMD__NOTHING;
    2436:	2400      	movs	r4, #0
  // Currently 3 usefull schemes:
  // - 2 words   --> e.g. "OPEN_OK AVRCP"
  // - RECV BLE  --> commands received from phone over BLE
  // - other     --> 3+ words inputs like "INQUIRY xxxx 240404 -54dB"
  // ================================================================
	String notif, param1, param2, param3, param4, param5, param6, param7, param8, param9, trash;
    2438:	a836      	add	r0, sp, #216	; 0xd8
    243a:	f00b fbc1 	bl	dbc0 <String::~String()>
    243e:	a832      	add	r0, sp, #200	; 0xc8
    2440:	f00b fbbe 	bl	dbc0 <String::~String()>
    2444:	a82e      	add	r0, sp, #184	; 0xb8
    2446:	f00b fbbb 	bl	dbc0 <String::~String()>
    244a:	a82a      	add	r0, sp, #168	; 0xa8
    244c:	f00b fbb8 	bl	dbc0 <String::~String()>
    2450:	a826      	add	r0, sp, #152	; 0x98
    2452:	f00b fbb5 	bl	dbc0 <String::~String()>
    2456:	a822      	add	r0, sp, #136	; 0x88
    2458:	f00b fbb2 	bl	dbc0 <String::~String()>
    245c:	a81e      	add	r0, sp, #120	; 0x78
    245e:	f00b fbaf 	bl	dbc0 <String::~String()>
    2462:	a81a      	add	r0, sp, #104	; 0x68
    2464:	f00b fbac 	bl	dbc0 <String::~String()>
    2468:	a816      	add	r0, sp, #88	; 0x58
    246a:	f00b fba9 	bl	dbc0 <String::~String()>
    246e:	a812      	add	r0, sp, #72	; 0x48
    2470:	f00b fba6 	bl	dbc0 <String::~String()>
    2474:	a80e      	add	r0, sp, #56	; 0x38
    2476:	f00b fba3 	bl	dbc0 <String::~String()>
			// MONPORT.println(input.c_str());
			break;
	}
	
  return BCCMD__NOTHING;
}
    247a:	4620      	mov	r0, r4
    247c:	b053      	add	sp, #332	; 0x14c
    247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
  // 1+ parameter
  else {
    notif = input.substring(0, slice1);
		if(slice2 == -1) {
			param1 = input.substring(slice1 + 1);
    2482:	463a      	mov	r2, r7
    2484:	4621      	mov	r1, r4
    2486:	a84e      	add	r0, sp, #312	; 0x138
    2488:	f00b fe9c 	bl	e1c4 <String::substring(unsigned int) const>
    248c:	a94e      	add	r1, sp, #312	; 0x138
    248e:	a812      	add	r0, sp, #72	; 0x48
    2490:	f00b fbce 	bl	dc30 <String::operator=(String&&)>
    2494:	a84e      	add	r0, sp, #312	; 0x138
    2496:	f00b fb93 	bl	dbc0 <String::~String()>
		// PAIR_ERROR (Bluetooth address)
		// PAIR_OK (Bluetooth address)
		// TIME (timestamp)
		case 1: {
			// MONPORT.printf("- param1 = %s\n", param1.c_str());
			if(notif.equalsIgnoreCase("A2DP_STREAM_START")) {
    249a:	4988      	ldr	r1, [pc, #544]	; (26bc <parseSerialIn(String)+0x5c0>)
    249c:	a84e      	add	r0, sp, #312	; 0x138
    249e:	f00b fa7d 	bl	d99c <String::String(char const*)>
    24a2:	a94e      	add	r1, sp, #312	; 0x138
    24a4:	a80e      	add	r0, sp, #56	; 0x38
    24a6:	f00b fe2d 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    24aa:	4604      	mov	r4, r0
    24ac:	a84e      	add	r0, sp, #312	; 0x138
    24ae:	f00b fb87 	bl	dbc0 <String::~String()>
    24b2:	2c00      	cmp	r4, #0
    24b4:	d1bf      	bne.n	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("A2DP_STREAM_SUSPEND")) {
    24b6:	4982      	ldr	r1, [pc, #520]	; (26c0 <parseSerialIn(String)+0x5c4>)
    24b8:	a84e      	add	r0, sp, #312	; 0x138
    24ba:	f00b fa6f 	bl	d99c <String::String(char const*)>
    24be:	a94e      	add	r1, sp, #312	; 0x138
    24c0:	a80e      	add	r0, sp, #56	; 0x38
    24c2:	f00b fe1f 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    24c6:	4604      	mov	r4, r0
    24c8:	a84e      	add	r0, sp, #312	; 0x138
    24ca:	f00b fb79 	bl	dbc0 <String::~String()>
    24ce:	2c00      	cmp	r4, #0
    24d0:	d1b1      	bne.n	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("AVRCP_PLAY")) {
    24d2:	497c      	ldr	r1, [pc, #496]	; (26c4 <parseSerialIn(String)+0x5c8>)
    24d4:	a84e      	add	r0, sp, #312	; 0x138
    24d6:	f00b fa61 	bl	d99c <String::String(char const*)>
    24da:	a94e      	add	r1, sp, #312	; 0x138
    24dc:	a80e      	add	r0, sp, #56	; 0x38
    24de:	f00b fe11 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    24e2:	4604      	mov	r4, r0
    24e4:	a84e      	add	r0, sp, #312	; 0x138
    24e6:	f00b fb6b 	bl	dbc0 <String::~String()>
    24ea:	2c00      	cmp	r4, #0
    24ec:	d1a3      	bne.n	2436 <parseSerialIn(String)+0x33a>
				// working_state.mon_state = MONSTATE_REQ_ON;
			}
			else if(notif.equalsIgnoreCase("AVRCP_STOP")) {
    24ee:	4976      	ldr	r1, [pc, #472]	; (26c8 <parseSerialIn(String)+0x5cc>)
    24f0:	a84e      	add	r0, sp, #312	; 0x138
    24f2:	f00b fa53 	bl	d99c <String::String(char const*)>
    24f6:	a94e      	add	r1, sp, #312	; 0x138
    24f8:	a80e      	add	r0, sp, #56	; 0x38
    24fa:	f00b fe03 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    24fe:	4604      	mov	r4, r0
    2500:	a84e      	add	r0, sp, #312	; 0x138
    2502:	f00b fb5d 	bl	dbc0 <String::~String()>
    2506:	2c00      	cmp	r4, #0
    2508:	d195      	bne.n	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("AVRCP_PAUSE")) {
    250a:	4970      	ldr	r1, [pc, #448]	; (26cc <parseSerialIn(String)+0x5d0>)
    250c:	a84e      	add	r0, sp, #312	; 0x138
    250e:	f00b fa45 	bl	d99c <String::String(char const*)>
    2512:	a94e      	add	r1, sp, #312	; 0x138
    2514:	a80e      	add	r0, sp, #56	; 0x38
    2516:	f00b fdf5 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    251a:	4604      	mov	r4, r0
    251c:	a84e      	add	r0, sp, #312	; 0x138
    251e:	f00b fb4f 	bl	dbc0 <String::~String()>
    2522:	2c00      	cmp	r4, #0
    2524:	d187      	bne.n	2436 <parseSerialIn(String)+0x33a>
				// working_state.mon_state = MONSTATE_REQ_OFF;
			}
			else if(notif.equalsIgnoreCase("AVRCP_FORWARD")) {
    2526:	496a      	ldr	r1, [pc, #424]	; (26d0 <parseSerialIn(String)+0x5d4>)
    2528:	a84e      	add	r0, sp, #312	; 0x138
    252a:	f00b fa37 	bl	d99c <String::String(char const*)>
    252e:	a94e      	add	r1, sp, #312	; 0x138
    2530:	a80e      	add	r0, sp, #56	; 0x38
    2532:	f00b fde7 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2536:	4604      	mov	r4, r0
    2538:	a84e      	add	r0, sp, #312	; 0x138
    253a:	f00b fb41 	bl	dbc0 <String::~String()>
    253e:	2c00      	cmp	r4, #0
    2540:	f000 84ac 	beq.w	2e9c <parseSerialIn(String)+0xda0>
						else {
							MONPORT.println("Received time not correct!");
						}
					}
					else if(param3.equalsIgnoreCase("rec")) {
						if(param4.equalsIgnoreCase("start")) return BCCMD_REC_START;
    2544:	240d      	movs	r4, #13
    2546:	e777      	b.n	2438 <parseSerialIn(String)+0x33c>
		}
		// 2+ parameters
		else {
			param1 = input.substring(slice1 + 1, slice2);
			if(slice3 == -1) {
				param2 = input.substring(slice2 + 1);
    2548:	464a      	mov	r2, r9
    254a:	4621      	mov	r1, r4
    254c:	a84e      	add	r0, sp, #312	; 0x138
    254e:	f00b fe39 	bl	e1c4 <String::substring(unsigned int) const>
    2552:	a94e      	add	r1, sp, #312	; 0x138
    2554:	a816      	add	r0, sp, #88	; 0x58
    2556:	f00b fb6b 	bl	dc30 <String::operator=(String&&)>
    255a:	a84e      	add	r0, sp, #312	; 0x138
    255c:	f00b fb30 	bl	dbc0 <String::~String()>
		// NAME [addr] [remote_name]
		// OPEN_ERROR [link_ID] (profile)
		case 2: {
			// MONPORT.printf("- param1 = %s\n", param1.c_str());
			// MONPORT.printf("- param2 = %s\n", param2.c_str());
			if(notif.equalsIgnoreCase("ABS_VOL")) {
    2560:	495c      	ldr	r1, [pc, #368]	; (26d4 <parseSerialIn(String)+0x5d8>)
    2562:	a84e      	add	r0, sp, #312	; 0x138
    2564:	f00b fa1a 	bl	d99c <String::String(char const*)>
    2568:	a94e      	add	r1, sp, #312	; 0x138
    256a:	a80e      	add	r0, sp, #56	; 0x38
    256c:	f00b fdca 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2570:	4604      	mov	r4, r0
    2572:	a84e      	add	r0, sp, #312	; 0x138
    2574:	f00b fb24 	bl	dbc0 <String::~String()>
    2578:	2c00      	cmp	r4, #0
    257a:	f000 829f 	beq.w	2abc <parseSerialIn(String)+0x9c0>
				vol_value = (float)param2.toInt()/ABS_VOL_MAX_VAL;
    257e:	a816      	add	r0, sp, #88	; 0x58
    2580:	f00b fede 	bl	e340 <String::toInt() const>
    2584:	ee07 0a90 	vmov	s15, r0
    2588:	ed9f 7a53 	vldr	s14, [pc, #332]	; 26d8 <parseSerialIn(String)+0x5dc>
				if(working_state.ble_state == BLESTATE_CONNECTED) return BCNOT_VOL_LEVEL;
    258c:	4b53      	ldr	r3, [pc, #332]	; (26dc <parseSerialIn(String)+0x5e0>)
		// OPEN_ERROR [link_ID] (profile)
		case 2: {
			// MONPORT.printf("- param1 = %s\n", param1.c_str());
			// MONPORT.printf("- param2 = %s\n", param2.c_str());
			if(notif.equalsIgnoreCase("ABS_VOL")) {
				vol_value = (float)param2.toInt()/ABS_VOL_MAX_VAL;
    258e:	4a54      	ldr	r2, [pc, #336]	; (26e0 <parseSerialIn(String)+0x5e4>)
				if(working_state.ble_state == BLESTATE_CONNECTED) return BCNOT_VOL_LEVEL;
    2590:	78db      	ldrb	r3, [r3, #3]
		// OPEN_ERROR [link_ID] (profile)
		case 2: {
			// MONPORT.printf("- param1 = %s\n", param1.c_str());
			// MONPORT.printf("- param2 = %s\n", param2.c_str());
			if(notif.equalsIgnoreCase("ABS_VOL")) {
				vol_value = (float)param2.toInt()/ABS_VOL_MAX_VAL;
    2592:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				if(working_state.ble_state == BLESTATE_CONNECTED) return BCNOT_VOL_LEVEL;
    2596:	2b05      	cmp	r3, #5
		// OPEN_ERROR [link_ID] (profile)
		case 2: {
			// MONPORT.printf("- param1 = %s\n", param1.c_str());
			// MONPORT.printf("- param2 = %s\n", param2.c_str());
			if(notif.equalsIgnoreCase("ABS_VOL")) {
				vol_value = (float)param2.toInt()/ABS_VOL_MAX_VAL;
    2598:	eec6 7a87 	vdiv.f32	s15, s13, s14
    259c:	edc2 7a00 	vstr	s15, [r2]
				if(working_state.ble_state == BLESTATE_CONNECTED) return BCNOT_VOL_LEVEL;
    25a0:	f47f af49 	bne.w	2436 <parseSerialIn(String)+0x33a>
							}
							else if(param4.equalsIgnoreCase("-")) {
								return BCCMD_VOL_DOWN;
							}
							else if(param4.equalsIgnoreCase("?")) {
								return BCNOT_VOL_LEVEL;
    25a4:	241d      	movs	r4, #29
    25a6:	e747      	b.n	2438 <parseSerialIn(String)+0x33c>
				}
				// 4+ parameters
				else {
					param3 = input.substring(slice3 + 1, slice4);
					if(slice5 == -1) {
						param4 = input.substring(slice4 + 1);
    25a8:	9a03      	ldr	r2, [sp, #12]
    25aa:	4621      	mov	r1, r4
    25ac:	a84e      	add	r0, sp, #312	; 0x138
    25ae:	f00b fe09 	bl	e1c4 <String::substring(unsigned int) const>
    25b2:	a94e      	add	r1, sp, #312	; 0x138
    25b4:	a81e      	add	r0, sp, #120	; 0x78
    25b6:	f00b fb3b 	bl	dc30 <String::operator=(String&&)>
    25ba:	a84e      	add	r0, sp, #312	; 0x138
    25bc:	f00b fb00 	bl	dbc0 <String::~String()>
		case 4: {
			// MONPORT.printf("- param1 = %s\n", param1.c_str());
			// MONPORT.printf("- param2 = %s\n", param2.c_str());
			// MONPORT.printf("- param3 = %s\n", param3.c_str());
			// MONPORT.printf("- param4 = %s\n", param4.c_str());
			if(notif.equalsIgnoreCase("BLE_CHAR")) {
    25c0:	4948      	ldr	r1, [pc, #288]	; (26e4 <parseSerialIn(String)+0x5e8>)
    25c2:	a84e      	add	r0, sp, #312	; 0x138
    25c4:	f00b f9ea 	bl	d99c <String::String(char const*)>
    25c8:	a94e      	add	r1, sp, #312	; 0x138
    25ca:	a80e      	add	r0, sp, #56	; 0x38
    25cc:	f00b fd9a 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    25d0:	4604      	mov	r4, r0
    25d2:	a84e      	add	r0, sp, #312	; 0x138
    25d4:	f00b faf4 	bl	dbc0 <String::~String()>
    25d8:	2c00      	cmp	r4, #0
    25da:	f47f af2c 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("BLE_INDICATION")) {
    25de:	4942      	ldr	r1, [pc, #264]	; (26e8 <parseSerialIn(String)+0x5ec>)
    25e0:	a84e      	add	r0, sp, #312	; 0x138
    25e2:	f00b f9db 	bl	d99c <String::String(char const*)>
    25e6:	a94e      	add	r1, sp, #312	; 0x138
    25e8:	a80e      	add	r0, sp, #56	; 0x38
    25ea:	f00b fd8b 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    25ee:	4604      	mov	r4, r0
    25f0:	a84e      	add	r0, sp, #312	; 0x138
    25f2:	f00b fae5 	bl	dbc0 <String::~String()>
    25f6:	2c00      	cmp	r4, #0
    25f8:	f47f af1d 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("BLE_NOTIFICATION")) {
    25fc:	493b      	ldr	r1, [pc, #236]	; (26ec <parseSerialIn(String)+0x5f0>)
    25fe:	a84e      	add	r0, sp, #312	; 0x138
    2600:	f00b f9cc 	bl	d99c <String::String(char const*)>
    2604:	a94e      	add	r1, sp, #312	; 0x138
    2606:	a80e      	add	r0, sp, #56	; 0x38
    2608:	f00b fd7c 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    260c:	4604      	mov	r4, r0
    260e:	a84e      	add	r0, sp, #312	; 0x138
    2610:	f00b fad6 	bl	dbc0 <String::~String()>
    2614:	2c00      	cmp	r4, #0
    2616:	f47f af0e 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("BLE_READ_RES")) {
    261a:	4935      	ldr	r1, [pc, #212]	; (26f0 <parseSerialIn(String)+0x5f4>)
    261c:	a84e      	add	r0, sp, #312	; 0x138
    261e:	f00b f9bd 	bl	d99c <String::String(char const*)>
    2622:	a94e      	add	r1, sp, #312	; 0x138
    2624:	a80e      	add	r0, sp, #56	; 0x38
    2626:	f00b fd6d 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    262a:	4604      	mov	r4, r0
    262c:	a84e      	add	r0, sp, #312	; 0x138
    262e:	f00b fac7 	bl	dbc0 <String::~String()>
    2632:	2c00      	cmp	r4, #0
    2634:	f47f aeff 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("BLE_SERV")) {
    2638:	492e      	ldr	r1, [pc, #184]	; (26f4 <parseSerialIn(String)+0x5f8>)
    263a:	a84e      	add	r0, sp, #312	; 0x138
    263c:	f00b f9ae 	bl	d99c <String::String(char const*)>
    2640:	a94e      	add	r1, sp, #312	; 0x138
    2642:	a80e      	add	r0, sp, #56	; 0x38
    2644:	f00b fd5e 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2648:	4604      	mov	r4, r0
    264a:	a84e      	add	r0, sp, #312	; 0x138
    264c:	f00b fab8 	bl	dbc0 <String::~String()>
    2650:	2c00      	cmp	r4, #0
    2652:	f47f aef0 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("BLE_WRITE")) {
    2656:	4928      	ldr	r1, [pc, #160]	; (26f8 <parseSerialIn(String)+0x5fc>)
    2658:	a84e      	add	r0, sp, #312	; 0x138
    265a:	f00b f99f 	bl	d99c <String::String(char const*)>
    265e:	a94e      	add	r1, sp, #312	; 0x138
    2660:	a80e      	add	r0, sp, #56	; 0x38
    2662:	f00b fd4f 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2666:	4604      	mov	r4, r0
    2668:	a84e      	add	r0, sp, #312	; 0x138
    266a:	f00b faa9 	bl	dbc0 <String::~String()>
    266e:	2c00      	cmp	r4, #0
    2670:	f47f aee1 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("STATE")) {
    2674:	4921      	ldr	r1, [pc, #132]	; (26fc <parseSerialIn(String)+0x600>)
    2676:	a84e      	add	r0, sp, #312	; 0x138
    2678:	f00b f990 	bl	d99c <String::String(char const*)>
    267c:	a94e      	add	r1, sp, #312	; 0x138
    267e:	a80e      	add	r0, sp, #56	; 0x38
    2680:	f00b fd40 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2684:	4604      	mov	r4, r0
    2686:	a84e      	add	r0, sp, #312	; 0x138
    2688:	f00b fa9a 	bl	dbc0 <String::~String()>
    268c:	2c00      	cmp	r4, #0
    268e:	f000 83b7 	beq.w	2e00 <parseSerialIn(String)+0xd04>
    2692:	9a14      	ldr	r2, [sp, #80]	; 0x50
				if(!param1.substring(param1.length()-2, param1.length()-1).toInt()) {
    2694:	a912      	add	r1, sp, #72	; 0x48
    2696:	1e53      	subs	r3, r2, #1
    2698:	a84e      	add	r0, sp, #312	; 0x138
    269a:	3a02      	subs	r2, #2
    269c:	f00b fdee 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    26a0:	a84e      	add	r0, sp, #312	; 0x138
    26a2:	f00b fe4d 	bl	e340 <String::toInt() const>
    26a6:	4604      	mov	r4, r0
    26a8:	a84e      	add	r0, sp, #312	; 0x138
    26aa:	f00b fa89 	bl	dbc0 <String::~String()>
    26ae:	2c00      	cmp	r4, #0
    26b0:	f47f aec1 	bne.w	2436 <parseSerialIn(String)+0x33a>
					return BCNOT_BT_STATE;
    26b4:	2414      	movs	r4, #20
    26b6:	e6bf      	b.n	2438 <parseSerialIn(String)+0x33c>
    26b8:	000171f8 	.word	0x000171f8
    26bc:	00016ee8 	.word	0x00016ee8
    26c0:	00016f4c 	.word	0x00016f4c
    26c4:	00016f60 	.word	0x00016f60
    26c8:	00016f6c 	.word	0x00016f6c
    26cc:	00016f78 	.word	0x00016f78
    26d0:	00016f84 	.word	0x00016f84
    26d4:	00016efc 	.word	0x00016efc
    26d8:	42f00000 	.word	0x42f00000
    26dc:	1fff5820 	.word	0x1fff5820
    26e0:	1fff5e2c 	.word	0x1fff5e2c
    26e4:	00016f08 	.word	0x00016f08
    26e8:	000170b4 	.word	0x000170b4
    26ec:	000170c4 	.word	0x000170c4
    26f0:	000170d8 	.word	0x000170d8
    26f4:	000170e8 	.word	0x000170e8
    26f8:	000170f4 	.word	0x000170f4
    26fc:	00017100 	.word	0x00017100
			}
			// 3+ parameters
			else {
				param2 = input.substring(slice2 + 1, slice3);
				if(slice4 == -1) {
					param3 = input.substring(slice3 + 1);
    2700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2702:	4621      	mov	r1, r4
    2704:	a84e      	add	r0, sp, #312	; 0x138
    2706:	f00b fd5d 	bl	e1c4 <String::substring(unsigned int) const>
    270a:	a94e      	add	r1, sp, #312	; 0x138
    270c:	a81a      	add	r0, sp, #104	; 0x68
    270e:	f00b fa8f 	bl	dc30 <String::operator=(String&&)>
    2712:	a84e      	add	r0, sp, #312	; 0x138
    2714:	f00b fa54 	bl	dbc0 <String::~String()>
		// RECV [link_ID] (size) (report data)
		case 3: {
			// MONPORT.printf("- param1 = %s\n", param1.c_str());
			// MONPORT.printf("- param2 = %s\n", param2.c_str());
			// MONPORT.printf("- param3 = %s\n", param3.c_str());
			if(notif.equalsIgnoreCase("AT")) {
    2718:	4976      	ldr	r1, [pc, #472]	; (28f4 <parseSerialIn(String)+0x7f8>)
    271a:	a84e      	add	r0, sp, #312	; 0x138
    271c:	f00b f93e 	bl	d99c <String::String(char const*)>
    2720:	a94e      	add	r1, sp, #312	; 0x138
    2722:	a80e      	add	r0, sp, #56	; 0x38
    2724:	f00b fcee 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2728:	4604      	mov	r4, r0
    272a:	a84e      	add	r0, sp, #312	; 0x138
    272c:	f00b fa48 	bl	dbc0 <String::~String()>
    2730:	2c00      	cmp	r4, #0
    2732:	f47f ae80 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("CLOSE_OK")) {
    2736:	4970      	ldr	r1, [pc, #448]	; (28f8 <parseSerialIn(String)+0x7fc>)
    2738:	a84e      	add	r0, sp, #312	; 0x138
    273a:	f00b f92f 	bl	d99c <String::String(char const*)>
    273e:	a94e      	add	r1, sp, #312	; 0x138
    2740:	a80e      	add	r0, sp, #56	; 0x38
    2742:	f00b fcdf 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2746:	4605      	mov	r5, r0
    2748:	a84e      	add	r0, sp, #312	; 0x138
    274a:	f00b fa39 	bl	dbc0 <String::~String()>
    274e:	2d00      	cmp	r5, #0
    2750:	f000 822a 	beq.w	2ba8 <parseSerialIn(String)+0xaac>
				if(param1.toInt() == BT_conn_id1) {	
    2754:	a812      	add	r0, sp, #72	; 0x48
    2756:	f00b fdf3 	bl	e340 <String::toInt() const>
    275a:	4b68      	ldr	r3, [pc, #416]	; (28fc <parseSerialIn(String)+0x800>)
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	4298      	cmp	r0, r3
    2760:	f040 8244 	bne.w	2bec <parseSerialIn(String)+0xaf0>
					if(working_state.bt_state != BTSTATE_OFF) working_state.bt_state = BTSTATE_REQ_DISC;
    2764:	4b66      	ldr	r3, [pc, #408]	; (2900 <parseSerialIn(String)+0x804>)
    2766:	789a      	ldrb	r2, [r3, #2]
    2768:	2a00      	cmp	r2, #0
    276a:	f43f ae64 	beq.w	2436 <parseSerialIn(String)+0x33a>
					if(param3.equalsIgnoreCase("inq")) {
					  // MONPORT.println("Received BT inquiry command");
						return BCCMD_INQUIRY;
					}
					if(param3.equalsIgnoreCase("disc")) {
						working_state.bt_state = BTSTATE_REQ_DISC;
    276e:	2206      	movs	r2, #6
    2770:	709a      	strb	r2, [r3, #2]
    2772:	e661      	b.n	2438 <parseSerialIn(String)+0x33c>
									}
									// 9+ parameters
									else {
										param8 = input.substring(slice8 + 1, slice9);
										if(slice9 == -1) {
											trash = input.substring(slice9 + 1);
    2774:	4621      	mov	r1, r4
    2776:	a84e      	add	r0, sp, #312	; 0x138
    2778:	f00b fd24 	bl	e1c4 <String::substring(unsigned int) const>
    277c:	a94e      	add	r1, sp, #312	; 0x138
    277e:	a836      	add	r0, sp, #216	; 0xd8
    2780:	f00b fa56 	bl	dc30 <String::operator=(String&&)>
    2784:	a84e      	add	r0, sp, #312	; 0x138
    2786:	f00b fa1b 	bl	dbc0 <String::~String()>
			break;
		}
		
		// LINK [link_ID] (state) (profile) (btaddr) (info1) (info2) (info3) (info4) (info5)
		case 9: {
			if(notif.equalsIgnoreCase("LINK")) {
    278a:	495e      	ldr	r1, [pc, #376]	; (2904 <parseSerialIn(String)+0x808>)
    278c:	a84e      	add	r0, sp, #312	; 0x138
    278e:	f00b f905 	bl	d99c <String::String(char const*)>
    2792:	a94e      	add	r1, sp, #312	; 0x138
    2794:	a80e      	add	r0, sp, #56	; 0x38
    2796:	f00b fcb5 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    279a:	4604      	mov	r4, r0
    279c:	a84e      	add	r0, sp, #312	; 0x138
    279e:	f00b fa0f 	bl	dbc0 <String::~String()>
    27a2:	2c00      	cmp	r4, #0
    27a4:	f43f ae47 	beq.w	2436 <parseSerialIn(String)+0x33a>
    27a8:	210e      	movs	r1, #14
    27aa:	4857      	ldr	r0, [pc, #348]	; (2908 <parseSerialIn(String)+0x80c>)
    27ac:	f00e f86a 	bl	10884 <usb_serial_write>
    27b0:	4856      	ldr	r0, [pc, #344]	; (290c <parseSerialIn(String)+0x810>)
    27b2:	f00b f895 	bl	d8e0 <Print::println()>
				MONPORT.println("LINK9 received");
				if(param3.equalsIgnoreCase("A2DP")) {
    27b6:	4956      	ldr	r1, [pc, #344]	; (2910 <parseSerialIn(String)+0x814>)
    27b8:	a84e      	add	r0, sp, #312	; 0x138
    27ba:	f00b f8ef 	bl	d99c <String::String(char const*)>
    27be:	a94e      	add	r1, sp, #312	; 0x138
    27c0:	a81a      	add	r0, sp, #104	; 0x68
    27c2:	f00b fc9f 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    27c6:	4604      	mov	r4, r0
    27c8:	a84e      	add	r0, sp, #312	; 0x138
    27ca:	f00b f9f9 	bl	dbc0 <String::~String()>
    27ce:	2c00      	cmp	r4, #0
    27d0:	d17a      	bne.n	28c8 <parseSerialIn(String)+0x7cc>
					MONPORT.printf("A2DP address: %s, ID: %d\n", BT_peer_address.c_str(), BT_conn_id1);
					working_state.bt_state = BTSTATE_CONNECTED;
					// return BCNOT_BT_STATE;
					return BCCMD_BT_NAME;
				}
				else if(param3.equalsIgnoreCase("AVRCP")) {
    27d2:	4950      	ldr	r1, [pc, #320]	; (2914 <parseSerialIn(String)+0x818>)
    27d4:	a84e      	add	r0, sp, #312	; 0x138
    27d6:	f00b f8e1 	bl	d99c <String::String(char const*)>
    27da:	a94e      	add	r1, sp, #312	; 0x138
    27dc:	a81a      	add	r0, sp, #104	; 0x68
    27de:	f00b fc91 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    27e2:	4605      	mov	r5, r0
    27e4:	a84e      	add	r0, sp, #312	; 0x138
    27e6:	f00b f9eb 	bl	dbc0 <String::~String()>
    27ea:	2d00      	cmp	r5, #0
    27ec:	f43f ae23 	beq.w	2436 <parseSerialIn(String)+0x33a>
					BT_conn_id2 = param1.toInt();
    27f0:	a812      	add	r0, sp, #72	; 0x48
    27f2:	f00b fda5 	bl	e340 <String::toInt() const>
    27f6:	4e48      	ldr	r6, [pc, #288]	; (2918 <parseSerialIn(String)+0x81c>)
					BT_peer_address = param4;
    27f8:	4d48      	ldr	r5, [pc, #288]	; (291c <parseSerialIn(String)+0x820>)
					working_state.bt_state = BTSTATE_CONNECTED;
					// return BCNOT_BT_STATE;
					return BCCMD_BT_NAME;
				}
				else if(param3.equalsIgnoreCase("AVRCP")) {
					BT_conn_id2 = param1.toInt();
    27fa:	6030      	str	r0, [r6, #0]
					BT_peer_address = param4;
    27fc:	a91e      	add	r1, sp, #120	; 0x78
    27fe:	4628      	mov	r0, r5
    2800:	f00b f9e6 	bl	dbd0 <String::operator=(String const&)>
					MONPORT.printf("AVRCP address: %s, ID: %d\n", BT_peer_address.c_str(), BT_conn_id2);
    2804:	6833      	ldr	r3, [r6, #0]
    2806:	682a      	ldr	r2, [r5, #0]
    2808:	4945      	ldr	r1, [pc, #276]	; (2920 <parseSerialIn(String)+0x824>)
    280a:	4840      	ldr	r0, [pc, #256]	; (290c <parseSerialIn(String)+0x810>)
    280c:	f00b f880 	bl	d910 <Print::printf(char const*, ...)>
					working_state.bt_state = BTSTATE_CONNECTED;
    2810:	4b3b      	ldr	r3, [pc, #236]	; (2900 <parseSerialIn(String)+0x804>)
    2812:	2204      	movs	r2, #4
    2814:	709a      	strb	r2, [r3, #2]
    2816:	e60f      	b.n	2438 <parseSerialIn(String)+0x33c>
							}
							// 7+ parameters
							else {
								param6 = input.substring(slice6 + 1, slice7);
								if(slice8 == -1) {
									trash = input.substring(slice7 + 1);
    2818:	f00b fcd4 	bl	e1c4 <String::substring(unsigned int) const>
    281c:	a94e      	add	r1, sp, #312	; 0x138
    281e:	a836      	add	r0, sp, #216	; 0xd8
    2820:	f00b fa06 	bl	dc30 <String::operator=(String&&)>
    2824:	a84e      	add	r0, sp, #312	; 0x138
    2826:	f00b f9cb 	bl	dbc0 <String::~String()>
			break;
		}
		
		// LINK [link_ID] (state) (profile) (btaddr) (info1) (info2) (info3)
		case 7: {
			if(notif.equalsIgnoreCase("LINK")) {
    282a:	4936      	ldr	r1, [pc, #216]	; (2904 <parseSerialIn(String)+0x808>)
    282c:	a84e      	add	r0, sp, #312	; 0x138
    282e:	f00b f8b5 	bl	d99c <String::String(char const*)>
    2832:	a94e      	add	r1, sp, #312	; 0x138
    2834:	a80e      	add	r0, sp, #56	; 0x38
    2836:	f00b fc65 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    283a:	4604      	mov	r4, r0
    283c:	a84e      	add	r0, sp, #312	; 0x138
    283e:	f00b f9bf 	bl	dbc0 <String::~String()>
    2842:	2c00      	cmp	r4, #0
    2844:	f43f adf7 	beq.w	2436 <parseSerialIn(String)+0x33a>
    2848:	210e      	movs	r1, #14
    284a:	4836      	ldr	r0, [pc, #216]	; (2924 <parseSerialIn(String)+0x828>)
    284c:	e028      	b.n	28a0 <parseSerialIn(String)+0x7a4>
						}
						// 6+ parameters
						else {
							param5 = input.substring(slice5 + 1, slice6);
							if(slice7 == -1) {
								param6 = input.substring(slice6 + 1);
    284e:	f00b fcb9 	bl	e1c4 <String::substring(unsigned int) const>
    2852:	a94e      	add	r1, sp, #312	; 0x138
    2854:	a826      	add	r0, sp, #152	; 0x98
    2856:	f00b f9eb 	bl	dc30 <String::operator=(String&&)>
    285a:	a84e      	add	r0, sp, #312	; 0x138
    285c:	f00b f9b0 	bl	dbc0 <String::~String()>
		}
		
		// LINK [link_ID] (state) (profile) (btaddr) (info1) (info2)
		// RECV [link_ID] (size) (report data) <-- (report data) with 4 parameters
		case 6: {
			if(notif.equalsIgnoreCase("RECV")) {
    2860:	4931      	ldr	r1, [pc, #196]	; (2928 <parseSerialIn(String)+0x82c>)
    2862:	a84e      	add	r0, sp, #312	; 0x138
    2864:	f00b f89a 	bl	d99c <String::String(char const*)>
    2868:	a94e      	add	r1, sp, #312	; 0x138
    286a:	a80e      	add	r0, sp, #56	; 0x38
    286c:	f00b fc4a 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2870:	4604      	mov	r4, r0
    2872:	a84e      	add	r0, sp, #312	; 0x138
    2874:	f00b f9a4 	bl	dbc0 <String::~String()>
    2878:	2c00      	cmp	r4, #0
    287a:	f040 80fb 	bne.w	2a74 <parseSerialIn(String)+0x978>
							return BCERR_RWIN_WRONG_PARAMS;
						}
					}
				}
			}
			else if(notif.equalsIgnoreCase("LINK")) {
    287e:	4921      	ldr	r1, [pc, #132]	; (2904 <parseSerialIn(String)+0x808>)
    2880:	a84e      	add	r0, sp, #312	; 0x138
    2882:	f00b f88b 	bl	d99c <String::String(char const*)>
    2886:	a94e      	add	r1, sp, #312	; 0x138
    2888:	a80e      	add	r0, sp, #56	; 0x38
    288a:	f00b fc3b 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    288e:	4604      	mov	r4, r0
    2890:	a84e      	add	r0, sp, #312	; 0x138
    2892:	f00b f995 	bl	dbc0 <String::~String()>
    2896:	2c00      	cmp	r4, #0
    2898:	f43f adcd 	beq.w	2436 <parseSerialIn(String)+0x33a>
    289c:	4823      	ldr	r0, [pc, #140]	; (292c <parseSerialIn(String)+0x830>)
    289e:	210e      	movs	r1, #14
    28a0:	f00d fff0 	bl	10884 <usb_serial_write>
    28a4:	4819      	ldr	r0, [pc, #100]	; (290c <parseSerialIn(String)+0x810>)
    28a6:	f00b f81b 	bl	d8e0 <Print::println()>
		
		// LINK [link_ID] (state) (profile) (btaddr) (info1) (info2) (info3)
		case 7: {
			if(notif.equalsIgnoreCase("LINK")) {
				MONPORT.println("LINK7 received");
				if(param3.equalsIgnoreCase("A2DP")) {
    28aa:	4919      	ldr	r1, [pc, #100]	; (2910 <parseSerialIn(String)+0x814>)
    28ac:	a84e      	add	r0, sp, #312	; 0x138
    28ae:	f00b f875 	bl	d99c <String::String(char const*)>
    28b2:	a94e      	add	r1, sp, #312	; 0x138
    28b4:	a81a      	add	r0, sp, #104	; 0x68
    28b6:	f00b fc25 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    28ba:	4604      	mov	r4, r0
    28bc:	a84e      	add	r0, sp, #312	; 0x138
    28be:	f00b f97f 	bl	dbc0 <String::~String()>
    28c2:	2c00      	cmp	r4, #0
    28c4:	f000 814c 	beq.w	2b60 <parseSerialIn(String)+0xa64>
		// LINK [link_ID] (state) (profile) (btaddr) (info1) (info2) (info3) (info4) (info5)
		case 9: {
			if(notif.equalsIgnoreCase("LINK")) {
				MONPORT.println("LINK9 received");
				if(param3.equalsIgnoreCase("A2DP")) {
					BT_conn_id1 = param1.toInt();
    28c8:	a812      	add	r0, sp, #72	; 0x48
    28ca:	f00b fd39 	bl	e340 <String::toInt() const>
					BT_peer_address = param4;
    28ce:	4c13      	ldr	r4, [pc, #76]	; (291c <parseSerialIn(String)+0x820>)
		// LINK [link_ID] (state) (profile) (btaddr) (info1) (info2) (info3) (info4) (info5)
		case 9: {
			if(notif.equalsIgnoreCase("LINK")) {
				MONPORT.println("LINK9 received");
				if(param3.equalsIgnoreCase("A2DP")) {
					BT_conn_id1 = param1.toInt();
    28d0:	4d0a      	ldr	r5, [pc, #40]	; (28fc <parseSerialIn(String)+0x800>)
					BT_peer_address = param4;
    28d2:	a91e      	add	r1, sp, #120	; 0x78
		// LINK [link_ID] (state) (profile) (btaddr) (info1) (info2) (info3) (info4) (info5)
		case 9: {
			if(notif.equalsIgnoreCase("LINK")) {
				MONPORT.println("LINK9 received");
				if(param3.equalsIgnoreCase("A2DP")) {
					BT_conn_id1 = param1.toInt();
    28d4:	6028      	str	r0, [r5, #0]
					BT_peer_address = param4;
    28d6:	4620      	mov	r0, r4
    28d8:	f00b f97a 	bl	dbd0 <String::operator=(String const&)>
					MONPORT.printf("A2DP address: %s, ID: %d\n", BT_peer_address.c_str(), BT_conn_id1);
    28dc:	6822      	ldr	r2, [r4, #0]
    28de:	682b      	ldr	r3, [r5, #0]
    28e0:	4913      	ldr	r1, [pc, #76]	; (2930 <parseSerialIn(String)+0x834>)
    28e2:	480a      	ldr	r0, [pc, #40]	; (290c <parseSerialIn(String)+0x810>)
    28e4:	f00b f814 	bl	d910 <Print::printf(char const*, ...)>
					working_state.bt_state = BTSTATE_CONNECTED;
    28e8:	4b05      	ldr	r3, [pc, #20]	; (2900 <parseSerialIn(String)+0x804>)
    28ea:	2204      	movs	r2, #4
    28ec:	709a      	strb	r2, [r3, #2]
					// return BCNOT_BT_STATE;
					return BCCMD_BT_NAME;
    28ee:	2405      	movs	r4, #5
    28f0:	e5a2      	b.n	2438 <parseSerialIn(String)+0x33c>
    28f2:	bf00      	nop
    28f4:	00016f04 	.word	0x00016f04
    28f8:	00016ff8 	.word	0x00016ff8
    28fc:	1fff5984 	.word	0x1fff5984
    2900:	1fff5820 	.word	0x1fff5820
    2904:	00016f24 	.word	0x00016f24
    2908:	000171e8 	.word	0x000171e8
    290c:	1fff4b00 	.word	0x1fff4b00
    2910:	0001700c 	.word	0x0001700c
    2914:	0001704c 	.word	0x0001704c
    2918:	1fff5988 	.word	0x1fff5988
    291c:	1fff5970 	.word	0x1fff5970
    2920:	000171ac 	.word	0x000171ac
    2924:	000171d8 	.word	0x000171d8
    2928:	00016f1c 	.word	0x00016f1c
    292c:	000171c8 	.word	0x000171c8
    2930:	00017190 	.word	0x00017190
					}
					// 5+ parameters
					else {
						param4 = input.substring(slice4 + 1, slice5);
						if(slice6 == -1) {
							param5 = input.substring(slice5 + 1);
    2934:	f00b fc46 	bl	e1c4 <String::substring(unsigned int) const>
    2938:	a94e      	add	r1, sp, #312	; 0x138
    293a:	a822      	add	r0, sp, #136	; 0x88
    293c:	f00b f978 	bl	dc30 <String::operator=(String&&)>
    2940:	a84e      	add	r0, sp, #312	; 0x138
    2942:	f00b f93d 	bl	dbc0 <String::~String()>
		
		// INQUIRY(BTADDR) ("NAME SURNAME") (COD) (RSSI)
		// LINK [link_ID] (STATE) (PROFILE) (BTADDR) (INFO)
		// RECV [link_ID] (size) (report data) <-- (report data) with 3 parameters
		case 5: {
			if(notif.equalsIgnoreCase("INQUIRY")) {
    2946:	49b4      	ldr	r1, [pc, #720]	; (2c18 <parseSerialIn(String)+0xb1c>)
    2948:	a84e      	add	r0, sp, #312	; 0x138
    294a:	f00b f827 	bl	d99c <String::String(char const*)>
    294e:	a94e      	add	r1, sp, #312	; 0x138
    2950:	a80e      	add	r0, sp, #56	; 0x38
    2952:	f00b fbd7 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2956:	4604      	mov	r4, r0
    2958:	a84e      	add	r0, sp, #312	; 0x138
    295a:	f00b f931 	bl	dbc0 <String::~String()>
    295e:	2c00      	cmp	r4, #0
    2960:	f000 80ee 	beq.w	2b40 <parseSerialIn(String)+0xa44>
				String addr = param1;
    2964:	a912      	add	r1, sp, #72	; 0x48
    2966:	a83a      	add	r0, sp, #232	; 0xe8
    2968:	f00b f844 	bl	d9f4 <String::String(String const&)>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    296c:	a916      	add	r1, sp, #88	; 0x58
    296e:	a84e      	add	r0, sp, #312	; 0x138
    2970:	f00b f840 	bl	d9f4 <String::String(String const&)>
				String name = param2 + " " + param3;
    2974:	49a9      	ldr	r1, [pc, #676]	; (2c1c <parseSerialIn(String)+0xb20>)
    2976:	4faa      	ldr	r7, [pc, #680]	; (2c20 <parseSerialIn(String)+0xb24>)
    2978:	a84e      	add	r0, sp, #312	; 0x138
    297a:	f00b fb05 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    297e:	a91a      	add	r1, sp, #104	; 0x68
    2980:	f00b fac2 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    2984:	4601      	mov	r1, r0
    2986:	a83e      	add	r0, sp, #248	; 0xf8
    2988:	f00b f834 	bl	d9f4 <String::String(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    298c:	a84e      	add	r0, sp, #312	; 0x138
    298e:	f00b f917 	bl	dbc0 <String::~String()>
				String caps = param4;
    2992:	a91e      	add	r1, sp, #120	; 0x78
    2994:	a842      	add	r0, sp, #264	; 0x108
    2996:	f00b f82d 	bl	d9f4 <String::String(String const&)>
				unsigned int stren = param5.substring(1, 3).toInt();
    299a:	2303      	movs	r3, #3
    299c:	2201      	movs	r2, #1
    299e:	a922      	add	r1, sp, #136	; 0x88
    29a0:	a84e      	add	r0, sp, #312	; 0x138
    29a2:	f00b fc6b 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    29a6:	a84e      	add	r0, sp, #312	; 0x138
    29a8:	f00b fcca 	bl	e340 <String::toInt() const>
    29ac:	4606      	mov	r6, r0
    29ae:	a84e      	add	r0, sp, #312	; 0x138
    29b0:	f00b f906 	bl	dbc0 <String::~String()>
				populateDevlist(addr, name, caps, stren);
    29b4:	a93a      	add	r1, sp, #232	; 0xe8
    29b6:	a846      	add	r0, sp, #280	; 0x118
    29b8:	f00b f81c 	bl	d9f4 <String::String(String const&)>
    29bc:	a93e      	add	r1, sp, #248	; 0xf8
    29be:	a84a      	add	r0, sp, #296	; 0x128
    29c0:	f00b f818 	bl	d9f4 <String::String(String const&)>
    29c4:	a942      	add	r1, sp, #264	; 0x108
    29c6:	a84e      	add	r0, sp, #312	; 0x138
    29c8:	f00b f814 	bl	d9f4 <String::String(String const&)>
 * OUT:	- none
 */
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    29cc:	2400      	movs	r4, #0
    29ce:	463b      	mov	r3, r7
		// Received address matches to an already existing one.
    if(addr.equals(dev_list[i].address)) {
    29d0:	4619      	mov	r1, r3
    29d2:	a846      	add	r0, sp, #280	; 0x118
    29d4:	461d      	mov	r5, r3
    29d6:	f00b fb61 	bl	e09c <String::equals(String const&) const>
      dev_list[i].strength = stren;
      found = true;
      break;
    }
		// No address matched and the current position is empty.
    else if(dev_list[i].address.equals("")) {
    29da:	4992      	ldr	r1, [pc, #584]	; (2c24 <parseSerialIn(String)+0xb28>)
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
		// Received address matches to an already existing one.
    if(addr.equals(dev_list[i].address)) {
    29dc:	2800      	cmp	r0, #0
    29de:	f040 8115 	bne.w	2c0c <parseSerialIn(String)+0xb10>
      dev_list[i].strength = stren;
      found = true;
      break;
    }
		// No address matched and the current position is empty.
    else if(dev_list[i].address.equals("")) {
    29e2:	4628      	mov	r0, r5
    29e4:	f00b fb78 	bl	e0d8 <String::equals(char const*) const>
    29e8:	f105 0334 	add.w	r3, r5, #52	; 0x34
    29ec:	b920      	cbnz	r0, 29f8 <parseSerialIn(String)+0x8fc>
 * OUT:	- none
 */
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
    29ee:	3401      	adds	r4, #1
    29f0:	2c06      	cmp	r4, #6
    29f2:	d1ed      	bne.n	29d0 <parseSerialIn(String)+0x8d4>
    29f4:	4d8a      	ldr	r5, [pc, #552]	; (2c20 <parseSerialIn(String)+0xb24>)
 *			- absolute signal stregth value (unsigned int)
 * OUT:	- none
 */
void populateDevlist(String addr, String name, String caps, unsigned int stren) {
  bool found = false;
  int lastPos = 0;
    29f6:	4604      	mov	r4, r0
    }
  }

	// If not matching device has been found, fill the next emplacement.
  if(!found) {
    dev_list[lastPos].address = addr;
    29f8:	a946      	add	r1, sp, #280	; 0x118
    29fa:	4628      	mov	r0, r5
    29fc:	f00b f8e8 	bl	dbd0 <String::operator=(String const&)>
		dev_list[lastPos].name = name;
    2a00:	2334      	movs	r3, #52	; 0x34
    2a02:	fb03 f404 	mul.w	r4, r3, r4
    2a06:	f104 0010 	add.w	r0, r4, #16
    2a0a:	a94a      	add	r1, sp, #296	; 0x128
    2a0c:	4438      	add	r0, r7
    2a0e:	f00b f8df 	bl	dbd0 <String::operator=(String const&)>
    dev_list[lastPos].capabilities = caps;
    2a12:	f104 0020 	add.w	r0, r4, #32
    2a16:	4438      	add	r0, r7
    2a18:	a94e      	add	r1, sp, #312	; 0x138
    2a1a:	f00b f8d9 	bl	dbd0 <String::operator=(String const&)>
    dev_list[lastPos].strength = stren;
    found_dev += 1;
    2a1e:	4a82      	ldr	r2, [pc, #520]	; (2c28 <parseSerialIn(String)+0xb2c>)
    2a20:	6813      	ldr	r3, [r2, #0]
	// If not matching device has been found, fill the next emplacement.
  if(!found) {
    dev_list[lastPos].address = addr;
		dev_list[lastPos].name = name;
    dev_list[lastPos].capabilities = caps;
    dev_list[lastPos].strength = stren;
    2a22:	443c      	add	r4, r7
    found_dev += 1;
    2a24:	3301      	adds	r3, #1
	// If not matching device has been found, fill the next emplacement.
  if(!found) {
    dev_list[lastPos].address = addr;
		dev_list[lastPos].name = name;
    dev_list[lastPos].capabilities = caps;
    dev_list[lastPos].strength = stren;
    2a26:	6326      	str	r6, [r4, #48]	; 0x30
    found_dev += 1;
    2a28:	6013      	str	r3, [r2, #0]
			if(notif.equalsIgnoreCase("INQUIRY")) {
				String addr = param1;
				String name = param2 + " " + param3;
				String caps = param4;
				unsigned int stren = param5.substring(1, 3).toInt();
				populateDevlist(addr, name, caps, stren);
    2a2a:	a84e      	add	r0, sp, #312	; 0x138
    2a2c:	f00b f8c8 	bl	dbc0 <String::~String()>
    2a30:	a84a      	add	r0, sp, #296	; 0x128
    2a32:	f00b f8c5 	bl	dbc0 <String::~String()>
    2a36:	a846      	add	r0, sp, #280	; 0x118
    2a38:	f00b f8c2 	bl	dbc0 <String::~String()>
		// RECV [link_ID] (size) (report data) <-- (report data) with 3 parameters
		case 5: {
			if(notif.equalsIgnoreCase("INQUIRY")) {
				String addr = param1;
				String name = param2 + " " + param3;
				String caps = param4;
    2a3c:	a842      	add	r0, sp, #264	; 0x108
    2a3e:	f00b f8bf 	bl	dbc0 <String::~String()>
		// LINK [link_ID] (STATE) (PROFILE) (BTADDR) (INFO)
		// RECV [link_ID] (size) (report data) <-- (report data) with 3 parameters
		case 5: {
			if(notif.equalsIgnoreCase("INQUIRY")) {
				String addr = param1;
				String name = param2 + " " + param3;
    2a42:	a83e      	add	r0, sp, #248	; 0xf8
    2a44:	f00b f8bc 	bl	dbc0 <String::~String()>
		// INQUIRY(BTADDR) ("NAME SURNAME") (COD) (RSSI)
		// LINK [link_ID] (STATE) (PROFILE) (BTADDR) (INFO)
		// RECV [link_ID] (size) (report data) <-- (report data) with 3 parameters
		case 5: {
			if(notif.equalsIgnoreCase("INQUIRY")) {
				String addr = param1;
    2a48:	a83a      	add	r0, sp, #232	; 0xe8
    2a4a:	f00b f8b9 	bl	dbc0 <String::~String()>
				String name = param2 + " " + param3;
				String caps = param4;
				unsigned int stren = param5.substring(1, 3).toInt();
				populateDevlist(addr, name, caps, stren);
				return BCNOT_INQ_STATE;
    2a4e:	2418      	movs	r4, #24
    2a50:	e4f2      	b.n	2438 <parseSerialIn(String)+0x33c>
		// READY
		case 0: {
			if(notif.equalsIgnoreCase("PENDING")) {
				// return BCNOT_INQ_START;
			}
			else if(notif.equalsIgnoreCase("INQU_OK")) {
    2a52:	4976      	ldr	r1, [pc, #472]	; (2c2c <parseSerialIn(String)+0xb30>)
    2a54:	a84e      	add	r0, sp, #312	; 0x138
    2a56:	f00a ffa1 	bl	d99c <String::String(char const*)>
    2a5a:	a94e      	add	r1, sp, #312	; 0x138
    2a5c:	a80e      	add	r0, sp, #56	; 0x38
    2a5e:	f00b fb51 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2a62:	4604      	mov	r4, r0
    2a64:	a84e      	add	r0, sp, #312	; 0x138
    2a66:	f00b f8ab 	bl	dbc0 <String::~String()>
    2a6a:	2c00      	cmp	r4, #0
    2a6c:	f000 80fc 	beq.w	2c68 <parseSerialIn(String)+0xb6c>
				return BCNOT_INQ_DONE;
    2a70:	2416      	movs	r4, #22
    2a72:	e4e1      	b.n	2438 <parseSerialIn(String)+0x33c>
		// RECV [link_ID] (size) (report data) <-- (report data) with 4 parameters
		case 6: {
			if(notif.equalsIgnoreCase("RECV")) {
				// BLE commands:
				// - "rwin {duration} {period} {occurences}"
				if(param1.toInt() == BLE_conn_id) {
    2a74:	a812      	add	r0, sp, #72	; 0x48
    2a76:	f00b fc63 	bl	e340 <String::toInt() const>
    2a7a:	4b6d      	ldr	r3, [pc, #436]	; (2c30 <parseSerialIn(String)+0xb34>)
    2a7c:	681b      	ldr	r3, [r3, #0]
    2a7e:	4298      	cmp	r0, r3
    2a80:	f47f acd9 	bne.w	2436 <parseSerialIn(String)+0x33a>
					if(param3.equalsIgnoreCase("rwin")) {
    2a84:	496b      	ldr	r1, [pc, #428]	; (2c34 <parseSerialIn(String)+0xb38>)
    2a86:	a84e      	add	r0, sp, #312	; 0x138
    2a88:	f00a ff88 	bl	d99c <String::String(char const*)>
    2a8c:	a94e      	add	r1, sp, #312	; 0x138
    2a8e:	a81a      	add	r0, sp, #104	; 0x68
    2a90:	f00b fb38 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2a94:	4604      	mov	r4, r0
    2a96:	a84e      	add	r0, sp, #312	; 0x138
    2a98:	f00b f892 	bl	dbc0 <String::~String()>
    2a9c:	2c00      	cmp	r4, #0
    2a9e:	f43f acca 	beq.w	2436 <parseSerialIn(String)+0x33a>
						unsigned int d, p;
						d = param4.toInt();
    2aa2:	a81e      	add	r0, sp, #120	; 0x78
    2aa4:	f00b fc4c 	bl	e340 <String::toInt() const>
    2aa8:	4605      	mov	r5, r0
						p = param5.toInt();
    2aaa:	a822      	add	r0, sp, #136	; 0x88
    2aac:	f00b fc48 	bl	e340 <String::toInt() const>
						if(d < p) {
    2ab0:	4285      	cmp	r5, r0
				// - "rwin {duration} {period} {occurences}"
				if(param1.toInt() == BLE_conn_id) {
					if(param3.equalsIgnoreCase("rwin")) {
						unsigned int d, p;
						d = param4.toInt();
						p = param5.toInt();
    2ab2:	4604      	mov	r4, r0
						if(d < p) {
    2ab4:	f0c0 817f 	bcc.w	2db6 <parseSerialIn(String)+0xcba>
							breakTime(p, rec_window.period);
							rec_window.occurences = param6.toInt();
							return BCNOT_RWIN_OK;
						}
						else {
							return BCERR_RWIN_WRONG_PARAMS;
    2ab8:	241f      	movs	r4, #31
    2aba:	e4bd      	b.n	2438 <parseSerialIn(String)+0x33c>
			// MONPORT.printf("- param2 = %s\n", param2.c_str());
			if(notif.equalsIgnoreCase("ABS_VOL")) {
				vol_value = (float)param2.toInt()/ABS_VOL_MAX_VAL;
				if(working_state.ble_state == BLESTATE_CONNECTED) return BCNOT_VOL_LEVEL;
			}
			else if(notif.equalsIgnoreCase("BLE_READ")) {
    2abc:	495e      	ldr	r1, [pc, #376]	; (2c38 <parseSerialIn(String)+0xb3c>)
    2abe:	a84e      	add	r0, sp, #312	; 0x138
    2ac0:	f00a ff6c 	bl	d99c <String::String(char const*)>
    2ac4:	a94e      	add	r1, sp, #312	; 0x138
    2ac6:	a80e      	add	r0, sp, #56	; 0x38
    2ac8:	f00b fb1c 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2acc:	4604      	mov	r4, r0
    2ace:	a84e      	add	r0, sp, #312	; 0x138
    2ad0:	f00b f876 	bl	dbc0 <String::~String()>
    2ad4:	2c00      	cmp	r4, #0
    2ad6:	f47f acae 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("CLOSE_ERROR")) {
    2ada:	4958      	ldr	r1, [pc, #352]	; (2c3c <parseSerialIn(String)+0xb40>)
    2adc:	a84e      	add	r0, sp, #312	; 0x138
    2ade:	f00a ff5d 	bl	d99c <String::String(char const*)>
    2ae2:	a94e      	add	r1, sp, #312	; 0x138
    2ae4:	a80e      	add	r0, sp, #56	; 0x38
    2ae6:	f00b fb0d 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2aea:	4604      	mov	r4, r0
    2aec:	a84e      	add	r0, sp, #312	; 0x138
    2aee:	f00b f867 	bl	dbc0 <String::~String()>
    2af2:	2c00      	cmp	r4, #0
    2af4:	f47f ac9f 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("LINK_LOSS")) {
    2af8:	4951      	ldr	r1, [pc, #324]	; (2c40 <parseSerialIn(String)+0xb44>)
    2afa:	a84e      	add	r0, sp, #312	; 0x138
    2afc:	f00a ff4e 	bl	d99c <String::String(char const*)>
    2b00:	a94e      	add	r1, sp, #312	; 0x138
    2b02:	a80e      	add	r0, sp, #56	; 0x38
    2b04:	f00b fafe 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2b08:	4604      	mov	r4, r0
    2b0a:	a84e      	add	r0, sp, #312	; 0x138
    2b0c:	f00b f858 	bl	dbc0 <String::~String()>
    2b10:	2c00      	cmp	r4, #0
    2b12:	f47f ac90 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("NAME")) {
    2b16:	494b      	ldr	r1, [pc, #300]	; (2c44 <parseSerialIn(String)+0xb48>)
    2b18:	a84e      	add	r0, sp, #312	; 0x138
    2b1a:	f00a ff3f 	bl	d99c <String::String(char const*)>
    2b1e:	a94e      	add	r1, sp, #312	; 0x138
    2b20:	a80e      	add	r0, sp, #56	; 0x38
    2b22:	f00b faef 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2b26:	4604      	mov	r4, r0
    2b28:	a84e      	add	r0, sp, #312	; 0x138
    2b2a:	f00b f849 	bl	dbc0 <String::~String()>
    2b2e:	2c00      	cmp	r4, #0
    2b30:	f000 8151 	beq.w	2dd6 <parseSerialIn(String)+0xcda>
				BT_peer_name = param2;
    2b34:	a916      	add	r1, sp, #88	; 0x58
    2b36:	4844      	ldr	r0, [pc, #272]	; (2c48 <parseSerialIn(String)+0xb4c>)
    2b38:	f00b f84a 	bl	dbd0 <String::operator=(String const&)>
				return BCNOT_BT_STATE;
    2b3c:	2414      	movs	r4, #20
    2b3e:	e47b      	b.n	2438 <parseSerialIn(String)+0x33c>
				String caps = param4;
				unsigned int stren = param5.substring(1, 3).toInt();
				populateDevlist(addr, name, caps, stren);
				return BCNOT_INQ_STATE;
			}
			else if(notif.equalsIgnoreCase("LINK")) {
    2b40:	4942      	ldr	r1, [pc, #264]	; (2c4c <parseSerialIn(String)+0xb50>)
    2b42:	a84e      	add	r0, sp, #312	; 0x138
    2b44:	f00a ff2a 	bl	d99c <String::String(char const*)>
    2b48:	a94e      	add	r1, sp, #312	; 0x138
    2b4a:	a80e      	add	r0, sp, #56	; 0x38
    2b4c:	f00b fada 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2b50:	4604      	mov	r4, r0
    2b52:	a84e      	add	r0, sp, #312	; 0x138
    2b54:	f00b f834 	bl	dbc0 <String::~String()>
    2b58:	2c00      	cmp	r4, #0
    2b5a:	f43f ac6c 	beq.w	2436 <parseSerialIn(String)+0x33a>
    2b5e:	e6a4      	b.n	28aa <parseSerialIn(String)+0x7ae>
					MONPORT.printf("A2DP address: %s, ID: %d\n", BT_peer_address.c_str(), BT_conn_id1);
					working_state.bt_state = BTSTATE_CONNECTED;
					// return BCNOT_BT_STATE;
					return BCCMD_BT_NAME;
				}
				else if(param3.equalsIgnoreCase("AVRCP")) {
    2b60:	493b      	ldr	r1, [pc, #236]	; (2c50 <parseSerialIn(String)+0xb54>)
    2b62:	a84e      	add	r0, sp, #312	; 0x138
    2b64:	f00a ff1a 	bl	d99c <String::String(char const*)>
    2b68:	a94e      	add	r1, sp, #312	; 0x138
    2b6a:	a81a      	add	r0, sp, #104	; 0x68
    2b6c:	f00b faca 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2b70:	4604      	mov	r4, r0
    2b72:	a84e      	add	r0, sp, #312	; 0x138
    2b74:	f00b f824 	bl	dbc0 <String::~String()>
    2b78:	2c00      	cmp	r4, #0
    2b7a:	f43f ac5c 	beq.w	2436 <parseSerialIn(String)+0x33a>
					BT_conn_id2 = param1.toInt();
    2b7e:	a812      	add	r0, sp, #72	; 0x48
    2b80:	f00b fbde 	bl	e340 <String::toInt() const>
					BT_peer_address = param4;
    2b84:	4c33      	ldr	r4, [pc, #204]	; (2c54 <parseSerialIn(String)+0xb58>)
					working_state.bt_state = BTSTATE_CONNECTED;
					// return BCNOT_BT_STATE;
					return BCCMD_BT_NAME;
				}
				else if(param3.equalsIgnoreCase("AVRCP")) {
					BT_conn_id2 = param1.toInt();
    2b86:	4d34      	ldr	r5, [pc, #208]	; (2c58 <parseSerialIn(String)+0xb5c>)
					BT_peer_address = param4;
    2b88:	a91e      	add	r1, sp, #120	; 0x78
					working_state.bt_state = BTSTATE_CONNECTED;
					// return BCNOT_BT_STATE;
					return BCCMD_BT_NAME;
				}
				else if(param3.equalsIgnoreCase("AVRCP")) {
					BT_conn_id2 = param1.toInt();
    2b8a:	6028      	str	r0, [r5, #0]
					BT_peer_address = param4;
    2b8c:	4620      	mov	r0, r4
    2b8e:	f00b f81f 	bl	dbd0 <String::operator=(String const&)>
					MONPORT.printf("AVRCP address: %s, ID: %d\n", BT_peer_address.c_str(), BT_conn_id2);
    2b92:	6822      	ldr	r2, [r4, #0]
    2b94:	682b      	ldr	r3, [r5, #0]
    2b96:	4931      	ldr	r1, [pc, #196]	; (2c5c <parseSerialIn(String)+0xb60>)
    2b98:	4831      	ldr	r0, [pc, #196]	; (2c60 <parseSerialIn(String)+0xb64>)
    2b9a:	f00a feb9 	bl	d910 <Print::printf(char const*, ...)>
					working_state.bt_state = BTSTATE_CONNECTED;
    2b9e:	4b31      	ldr	r3, [pc, #196]	; (2c64 <parseSerialIn(String)+0xb68>)
    2ba0:	2204      	movs	r2, #4
    2ba2:	709a      	strb	r2, [r3, #2]
		default:
			// MONPORT.println(input.c_str());
			break;
	}
	
  return BCCMD__NOTHING;
    2ba4:	2400      	movs	r4, #0
    2ba6:	e447      	b.n	2438 <parseSerialIn(String)+0x33c>
				}
				else if(param1.toInt() == BLE_conn_id) {
					if(working_state.ble_state != BLESTATE_OFF) working_state.ble_state = BLESTATE_REQ_DIS;
				}
			}
			else if(notif.equalsIgnoreCase("NAME")) {
    2ba8:	4926      	ldr	r1, [pc, #152]	; (2c44 <parseSerialIn(String)+0xb48>)
    2baa:	a84e      	add	r0, sp, #312	; 0x138
    2bac:	f00a fef6 	bl	d99c <String::String(char const*)>
    2bb0:	a94e      	add	r1, sp, #312	; 0x138
    2bb2:	a80e      	add	r0, sp, #56	; 0x38
    2bb4:	f00b faa6 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2bb8:	4604      	mov	r4, r0
    2bba:	a84e      	add	r0, sp, #312	; 0x138
    2bbc:	f00b f800 	bl	dbc0 <String::~String()>
    2bc0:	2c00      	cmp	r4, #0
    2bc2:	d06d      	beq.n	2ca0 <parseSerialIn(String)+0xba4>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2bc4:	a916      	add	r1, sp, #88	; 0x58
    2bc6:	a84e      	add	r0, sp, #312	; 0x138
    2bc8:	f00a ff14 	bl	d9f4 <String::String(String const&)>
				BT_peer_name = param2 + " " + param3;
    2bcc:	4913      	ldr	r1, [pc, #76]	; (2c1c <parseSerialIn(String)+0xb20>)
    2bce:	a84e      	add	r0, sp, #312	; 0x138
    2bd0:	f00b f9da 	bl	df88 <operator+(StringSumHelper const&, char const*)>
    2bd4:	a91a      	add	r1, sp, #104	; 0x68
    2bd6:	f00b f997 	bl	df08 <operator+(StringSumHelper const&, String const&)>
    2bda:	4601      	mov	r1, r0
    2bdc:	481a      	ldr	r0, [pc, #104]	; (2c48 <parseSerialIn(String)+0xb4c>)
    2bde:	f00a fff7 	bl	dbd0 <String::operator=(String const&)>
	void StringIfHelper() const {}
public:
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
};

class StringSumHelper : public String
    2be2:	a84e      	add	r0, sp, #312	; 0x138
    2be4:	f00a ffec 	bl	dbc0 <String::~String()>
				return BCNOT_BT_STATE;
    2be8:	2414      	movs	r4, #20
    2bea:	e425      	b.n	2438 <parseSerialIn(String)+0x33c>
			}
			else if(notif.equalsIgnoreCase("CLOSE_OK")) {
				if(param1.toInt() == BT_conn_id1) {	
					if(working_state.bt_state != BTSTATE_OFF) working_state.bt_state = BTSTATE_REQ_DISC;
				}
				else if(param1.toInt() == BLE_conn_id) {
    2bec:	a812      	add	r0, sp, #72	; 0x48
    2bee:	f00b fba7 	bl	e340 <String::toInt() const>
    2bf2:	4b0f      	ldr	r3, [pc, #60]	; (2c30 <parseSerialIn(String)+0xb34>)
    2bf4:	681b      	ldr	r3, [r3, #0]
    2bf6:	4298      	cmp	r0, r3
    2bf8:	f47f ac1d 	bne.w	2436 <parseSerialIn(String)+0x33a>
					if(working_state.ble_state != BLESTATE_OFF) working_state.ble_state = BLESTATE_REQ_DIS;
    2bfc:	4b19      	ldr	r3, [pc, #100]	; (2c64 <parseSerialIn(String)+0xb68>)
    2bfe:	78da      	ldrb	r2, [r3, #3]
    2c00:	2a00      	cmp	r2, #0
    2c02:	f43f ac18 	beq.w	2436 <parseSerialIn(String)+0x33a>
    2c06:	2206      	movs	r2, #6
    2c08:	70da      	strb	r2, [r3, #3]
    2c0a:	e415      	b.n	2438 <parseSerialIn(String)+0x33c>
  bool found = false;
  int lastPos = 0;
  for(int i = 0; i < DEVLIST_MAXLEN; i++) {
		// Received address matches to an already existing one.
    if(addr.equals(dev_list[i].address)) {
      dev_list[i].strength = stren;
    2c0c:	2334      	movs	r3, #52	; 0x34
    2c0e:	fb03 7404 	mla	r4, r3, r4, r7
    2c12:	6326      	str	r6, [r4, #48]	; 0x30
    2c14:	e709      	b.n	2a2a <parseSerialIn(String)+0x92e>
    2c16:	bf00      	nop
    2c18:	00016f14 	.word	0x00016f14
    2c1c:	00016d54 	.word	0x00016d54
    2c20:	1fff5834 	.word	0x1fff5834
    2c24:	00017130 	.word	0x00017130
    2c28:	1fff5980 	.word	0x1fff5980
    2c2c:	00016f2c 	.word	0x00016f2c
    2c30:	1fff596c 	.word	0x1fff596c
    2c34:	0001717c 	.word	0x0001717c
    2c38:	00016fc0 	.word	0x00016fc0
    2c3c:	00016fcc 	.word	0x00016fcc
    2c40:	00016fd8 	.word	0x00016fd8
    2c44:	00016fe4 	.word	0x00016fe4
    2c48:	1fff5824 	.word	0x1fff5824
    2c4c:	00016f24 	.word	0x00016f24
    2c50:	0001704c 	.word	0x0001704c
    2c54:	1fff5970 	.word	0x1fff5970
    2c58:	1fff5988 	.word	0x1fff5988
    2c5c:	000171ac 	.word	0x000171ac
    2c60:	1fff4b00 	.word	0x1fff4b00
    2c64:	1fff5820 	.word	0x1fff5820
				// return BCNOT_INQ_START;
			}
			else if(notif.equalsIgnoreCase("INQU_OK")) {
				return BCNOT_INQ_DONE;
			}
			else if(notif.equalsIgnoreCase("PAIR_PENDING")) {
    2c68:	49ab      	ldr	r1, [pc, #684]	; (2f18 <parseSerialIn(String)+0xe1c>)
    2c6a:	a84e      	add	r0, sp, #312	; 0x138
    2c6c:	f00a fe96 	bl	d99c <String::String(char const*)>
    2c70:	a94e      	add	r1, sp, #312	; 0x138
    2c72:	a80e      	add	r0, sp, #56	; 0x38
    2c74:	f00b fa46 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2c78:	4604      	mov	r4, r0
    2c7a:	a84e      	add	r0, sp, #312	; 0x138
    2c7c:	f00a ffa0 	bl	dbc0 <String::~String()>
    2c80:	2c00      	cmp	r4, #0
    2c82:	f47f abd8 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("READY")) {
    2c86:	49a5      	ldr	r1, [pc, #660]	; (2f1c <parseSerialIn(String)+0xe20>)
			}
			else if(notif.equalsIgnoreCase("ERROR")) {
			}
			else if(notif.equalsIgnoreCase("PAIR_ERROR")) {
			}
			else if(notif.equalsIgnoreCase("PAIR_OK")) {
    2c88:	a84e      	add	r0, sp, #312	; 0x138
    2c8a:	f00a fe87 	bl	d99c <String::String(char const*)>
    2c8e:	a94e      	add	r1, sp, #312	; 0x138
    2c90:	a80e      	add	r0, sp, #56	; 0x38
    2c92:	f00b fa37 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2c96:	a84e      	add	r0, sp, #312	; 0x138
    2c98:	f00a ff92 	bl	dbc0 <String::~String()>
    2c9c:	f7ff bbcc 	b.w	2438 <parseSerialIn(String)+0x33c>
			}
			else if(notif.equalsIgnoreCase("NAME")) {
				BT_peer_name = param2 + " " + param3;
				return BCNOT_BT_STATE;
			}
			else if(notif.equalsIgnoreCase("OPEN_OK")) {
    2ca0:	499f      	ldr	r1, [pc, #636]	; (2f20 <parseSerialIn(String)+0xe24>)
    2ca2:	a84e      	add	r0, sp, #312	; 0x138
    2ca4:	f00a fe7a 	bl	d99c <String::String(char const*)>
    2ca8:	a94e      	add	r1, sp, #312	; 0x138
    2caa:	a80e      	add	r0, sp, #56	; 0x38
    2cac:	f00b fa2a 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2cb0:	4605      	mov	r5, r0
    2cb2:	a84e      	add	r0, sp, #312	; 0x138
    2cb4:	f00a ff84 	bl	dbc0 <String::~String()>
    2cb8:	2d00      	cmp	r5, #0
    2cba:	d035      	beq.n	2d28 <parseSerialIn(String)+0xc2c>
				if(param2.equalsIgnoreCase("A2DP")) {
    2cbc:	4999      	ldr	r1, [pc, #612]	; (2f24 <parseSerialIn(String)+0xe28>)
    2cbe:	a84e      	add	r0, sp, #312	; 0x138
    2cc0:	f00a fe6c 	bl	d99c <String::String(char const*)>
    2cc4:	a94e      	add	r1, sp, #312	; 0x138
    2cc6:	a816      	add	r0, sp, #88	; 0x58
    2cc8:	f00b fa1c 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2ccc:	4605      	mov	r5, r0
    2cce:	a84e      	add	r0, sp, #312	; 0x138
    2cd0:	f00a ff76 	bl	dbc0 <String::~String()>
    2cd4:	2d00      	cmp	r5, #0
    2cd6:	d14f      	bne.n	2d78 <parseSerialIn(String)+0xc7c>
					BT_peer_address = param3;
					MONPORT.printf("A2DP connection opened. Conn ID: %d, peer address = %s\n",
						BT_conn_id1, BT_peer_address.c_str());
					working_state.bt_state = BTSTATE_REQ_CONN;
				}
				else if(param2.equalsIgnoreCase("AVRCP")) {
    2cd8:	4993      	ldr	r1, [pc, #588]	; (2f28 <parseSerialIn(String)+0xe2c>)
    2cda:	a84e      	add	r0, sp, #312	; 0x138
    2cdc:	f00a fe5e 	bl	d99c <String::String(char const*)>
    2ce0:	a94e      	add	r1, sp, #312	; 0x138
    2ce2:	a816      	add	r0, sp, #88	; 0x58
    2ce4:	f00b fa0e 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2ce8:	4604      	mov	r4, r0
    2cea:	a84e      	add	r0, sp, #312	; 0x138
    2cec:	f00a ff68 	bl	dbc0 <String::~String()>
    2cf0:	2c00      	cmp	r4, #0
    2cf2:	d172      	bne.n	2dda <parseSerialIn(String)+0xcde>
					BT_conn_id2 = param1.toInt();
					BT_peer_address = param3;
					MONPORT.printf("AVRCP connection opened. Conn ID: %d, peer address (check) = %s\n", BT_conn_id2, BT_peer_address.c_str());
				}
				else if(param2.equalsIgnoreCase("BLE")) {
    2cf4:	498d      	ldr	r1, [pc, #564]	; (2f2c <parseSerialIn(String)+0xe30>)
    2cf6:	a84e      	add	r0, sp, #312	; 0x138
    2cf8:	f00a fe50 	bl	d99c <String::String(char const*)>
    2cfc:	a94e      	add	r1, sp, #312	; 0x138
    2cfe:	a816      	add	r0, sp, #88	; 0x58
    2d00:	f00b fa00 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2d04:	4604      	mov	r4, r0
    2d06:	a84e      	add	r0, sp, #312	; 0x138
    2d08:	f00a ff5a 	bl	dbc0 <String::~String()>
    2d0c:	2c00      	cmp	r4, #0
    2d0e:	f43f ab92 	beq.w	2436 <parseSerialIn(String)+0x33a>
					BLE_conn_id = param1.toInt();
    2d12:	a812      	add	r0, sp, #72	; 0x48
    2d14:	f00b fb14 	bl	e340 <String::toInt() const>
    2d18:	4a85      	ldr	r2, [pc, #532]	; (2f30 <parseSerialIn(String)+0xe34>)
					// MONPORT.printf("BLE connection opened. Conn ID: %d\n", BLE_conn_id);
					working_state.ble_state = BLESTATE_REQ_CONN;
    2d1a:	4b86      	ldr	r3, [pc, #536]	; (2f34 <parseSerialIn(String)+0xe38>)
					BT_conn_id2 = param1.toInt();
					BT_peer_address = param3;
					MONPORT.printf("AVRCP connection opened. Conn ID: %d, peer address (check) = %s\n", BT_conn_id2, BT_peer_address.c_str());
				}
				else if(param2.equalsIgnoreCase("BLE")) {
					BLE_conn_id = param1.toInt();
    2d1c:	6010      	str	r0, [r2, #0]
					// MONPORT.printf("BLE connection opened. Conn ID: %d\n", BLE_conn_id);
					working_state.ble_state = BLESTATE_REQ_CONN;
    2d1e:	2204      	movs	r2, #4
    2d20:	70da      	strb	r2, [r3, #3]
		default:
			// MONPORT.println(input.c_str());
			break;
	}
	
  return BCCMD__NOTHING;
    2d22:	2400      	movs	r4, #0
    2d24:	f7ff bb88 	b.w	2438 <parseSerialIn(String)+0x33c>
					BLE_conn_id = param1.toInt();
					// MONPORT.printf("BLE connection opened. Conn ID: %d\n", BLE_conn_id);
					working_state.ble_state = BLESTATE_REQ_CONN;
				}
			}
			else if(notif.equalsIgnoreCase("RECV")) {
    2d28:	4983      	ldr	r1, [pc, #524]	; (2f38 <parseSerialIn(String)+0xe3c>)
    2d2a:	a84e      	add	r0, sp, #312	; 0x138
    2d2c:	f00a fe36 	bl	d99c <String::String(char const*)>
    2d30:	a94e      	add	r1, sp, #312	; 0x138
    2d32:	a80e      	add	r0, sp, #56	; 0x38
    2d34:	f00b f9e6 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2d38:	4604      	mov	r4, r0
    2d3a:	a84e      	add	r0, sp, #312	; 0x138
    2d3c:	f00a ff40 	bl	dbc0 <String::~String()>
    2d40:	2c00      	cmp	r4, #0
    2d42:	d02e      	beq.n	2da2 <parseSerialIn(String)+0xca6>
				// BLE commands:
				// - "inq"
				// - "disc"
				if(param1.toInt() == BLE_conn_id) {
    2d44:	a812      	add	r0, sp, #72	; 0x48
    2d46:	f00b fafb 	bl	e340 <String::toInt() const>
    2d4a:	4b79      	ldr	r3, [pc, #484]	; (2f30 <parseSerialIn(String)+0xe34>)
    2d4c:	681b      	ldr	r3, [r3, #0]
    2d4e:	4298      	cmp	r0, r3
    2d50:	f47f ab71 	bne.w	2436 <parseSerialIn(String)+0x33a>
					// MONPORT.println("Receiving 1-param BLE command");
					if(param3.equalsIgnoreCase("inq")) {
    2d54:	4979      	ldr	r1, [pc, #484]	; (2f3c <parseSerialIn(String)+0xe40>)
    2d56:	a84e      	add	r0, sp, #312	; 0x138
    2d58:	f00a fe20 	bl	d99c <String::String(char const*)>
    2d5c:	a94e      	add	r1, sp, #312	; 0x138
    2d5e:	a81a      	add	r0, sp, #104	; 0x68
    2d60:	f00b f9d0 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2d64:	4604      	mov	r4, r0
    2d66:	a84e      	add	r0, sp, #312	; 0x138
    2d68:	f00a ff2a 	bl	dbc0 <String::~String()>
    2d6c:	2c00      	cmp	r4, #0
    2d6e:	f000 8084 	beq.w	2e7a <parseSerialIn(String)+0xd7e>
					  // MONPORT.println("Received BT inquiry command");
						return BCCMD_INQUIRY;
    2d72:	2409      	movs	r4, #9
    2d74:	f7ff bb60 	b.w	2438 <parseSerialIn(String)+0x33c>
				BT_peer_name = param2 + " " + param3;
				return BCNOT_BT_STATE;
			}
			else if(notif.equalsIgnoreCase("OPEN_OK")) {
				if(param2.equalsIgnoreCase("A2DP")) {
					BT_conn_id1 = param1.toInt();
    2d78:	a812      	add	r0, sp, #72	; 0x48
    2d7a:	f00b fae1 	bl	e340 <String::toInt() const>
    2d7e:	4d70      	ldr	r5, [pc, #448]	; (2f40 <parseSerialIn(String)+0xe44>)
					BT_peer_address = param3;
    2d80:	4e70      	ldr	r6, [pc, #448]	; (2f44 <parseSerialIn(String)+0xe48>)
				BT_peer_name = param2 + " " + param3;
				return BCNOT_BT_STATE;
			}
			else if(notif.equalsIgnoreCase("OPEN_OK")) {
				if(param2.equalsIgnoreCase("A2DP")) {
					BT_conn_id1 = param1.toInt();
    2d82:	6028      	str	r0, [r5, #0]
					BT_peer_address = param3;
    2d84:	a91a      	add	r1, sp, #104	; 0x68
    2d86:	4630      	mov	r0, r6
    2d88:	f00a ff22 	bl	dbd0 <String::operator=(String const&)>
					MONPORT.printf("A2DP connection opened. Conn ID: %d, peer address = %s\n",
						BT_conn_id1, BT_peer_address.c_str());
    2d8c:	6833      	ldr	r3, [r6, #0]
    2d8e:	682a      	ldr	r2, [r5, #0]
    2d90:	496d      	ldr	r1, [pc, #436]	; (2f48 <parseSerialIn(String)+0xe4c>)
    2d92:	486e      	ldr	r0, [pc, #440]	; (2f4c <parseSerialIn(String)+0xe50>)
    2d94:	f00a fdbc 	bl	d910 <Print::printf(char const*, ...)>
					working_state.bt_state = BTSTATE_REQ_CONN;
    2d98:	4b66      	ldr	r3, [pc, #408]	; (2f34 <parseSerialIn(String)+0xe38>)
    2d9a:	2203      	movs	r2, #3
    2d9c:	709a      	strb	r2, [r3, #2]
    2d9e:	f7ff bb4b 	b.w	2438 <parseSerialIn(String)+0x33c>
						working_state.bt_state = BTSTATE_REQ_DISC;
					}
				}
			}
			else {
				MONPORT.printf("%s %s %s\n", notif, param1, param2);
    2da2:	ab16      	add	r3, sp, #88	; 0x58
    2da4:	9300      	str	r3, [sp, #0]
    2da6:	aa0e      	add	r2, sp, #56	; 0x38
    2da8:	ab12      	add	r3, sp, #72	; 0x48
    2daa:	4969      	ldr	r1, [pc, #420]	; (2f50 <parseSerialIn(String)+0xe54>)
    2dac:	4867      	ldr	r0, [pc, #412]	; (2f4c <parseSerialIn(String)+0xe50>)
    2dae:	f00a fdaf 	bl	d910 <Print::printf(char const*, ...)>
    2db2:	f7ff bb41 	b.w	2438 <parseSerialIn(String)+0x33c>
					if(param3.equalsIgnoreCase("rwin")) {
						unsigned int d, p;
						d = param4.toInt();
						p = param5.toInt();
						if(d < p) {
							breakTime(d, rec_window.length);
    2db6:	4e67      	ldr	r6, [pc, #412]	; (2f54 <parseSerialIn(String)+0xe58>)
    2db8:	4628      	mov	r0, r5
    2dba:	4631      	mov	r1, r6
    2dbc:	f007 fd9a 	bl	a8f4 <breakTime(long, tmElements_t&)>
							breakTime(p, rec_window.period);
    2dc0:	4620      	mov	r0, r4
    2dc2:	1df1      	adds	r1, r6, #7
    2dc4:	f007 fd96 	bl	a8f4 <breakTime(long, tmElements_t&)>
							rec_window.occurences = param6.toInt();
    2dc8:	a826      	add	r0, sp, #152	; 0x98
    2dca:	f00b fab9 	bl	e340 <String::toInt() const>
							return BCNOT_RWIN_OK;
    2dce:	241b      	movs	r4, #27
						d = param4.toInt();
						p = param5.toInt();
						if(d < p) {
							breakTime(d, rec_window.length);
							breakTime(p, rec_window.period);
							rec_window.occurences = param6.toInt();
    2dd0:	6130      	str	r0, [r6, #16]
							return BCNOT_RWIN_OK;
    2dd2:	f7ff bb31 	b.w	2438 <parseSerialIn(String)+0x33c>
			}
			else if(notif.equalsIgnoreCase("NAME")) {
				BT_peer_name = param2;
				return BCNOT_BT_STATE;
			}
			else if(notif.equalsIgnoreCase("OPEN_ERROR")) {
    2dd6:	4960      	ldr	r1, [pc, #384]	; (2f58 <parseSerialIn(String)+0xe5c>)
    2dd8:	e756      	b.n	2c88 <parseSerialIn(String)+0xb8c>
					MONPORT.printf("A2DP connection opened. Conn ID: %d, peer address = %s\n",
						BT_conn_id1, BT_peer_address.c_str());
					working_state.bt_state = BTSTATE_REQ_CONN;
				}
				else if(param2.equalsIgnoreCase("AVRCP")) {
					BT_conn_id2 = param1.toInt();
    2dda:	a812      	add	r0, sp, #72	; 0x48
    2ddc:	f00b fab0 	bl	e340 <String::toInt() const>
    2de0:	4c5e      	ldr	r4, [pc, #376]	; (2f5c <parseSerialIn(String)+0xe60>)
					BT_peer_address = param3;
    2de2:	4d58      	ldr	r5, [pc, #352]	; (2f44 <parseSerialIn(String)+0xe48>)
					MONPORT.printf("A2DP connection opened. Conn ID: %d, peer address = %s\n",
						BT_conn_id1, BT_peer_address.c_str());
					working_state.bt_state = BTSTATE_REQ_CONN;
				}
				else if(param2.equalsIgnoreCase("AVRCP")) {
					BT_conn_id2 = param1.toInt();
    2de4:	6020      	str	r0, [r4, #0]
					BT_peer_address = param3;
    2de6:	a91a      	add	r1, sp, #104	; 0x68
    2de8:	4628      	mov	r0, r5
    2dea:	f00a fef1 	bl	dbd0 <String::operator=(String const&)>
					MONPORT.printf("AVRCP connection opened. Conn ID: %d, peer address (check) = %s\n", BT_conn_id2, BT_peer_address.c_str());
    2dee:	6822      	ldr	r2, [r4, #0]
    2df0:	682b      	ldr	r3, [r5, #0]
    2df2:	495b      	ldr	r1, [pc, #364]	; (2f60 <parseSerialIn(String)+0xe64>)
    2df4:	4855      	ldr	r0, [pc, #340]	; (2f4c <parseSerialIn(String)+0xe50>)
    2df6:	f00a fd8b 	bl	d910 <Print::printf(char const*, ...)>
		default:
			// MONPORT.println(input.c_str());
			break;
	}
	
  return BCCMD__NOTHING;
    2dfa:	2400      	movs	r4, #0
    2dfc:	f7ff bb1c 	b.w	2438 <parseSerialIn(String)+0x33c>
			else if(notif.equalsIgnoreCase("STATE")) {
				if(!param1.substring(param1.length()-2, param1.length()-1).toInt()) {
					return BCNOT_BT_STATE;
				}
			}
			else if(notif.equalsIgnoreCase("INQUIRY")) {
    2e00:	4958      	ldr	r1, [pc, #352]	; (2f64 <parseSerialIn(String)+0xe68>)
    2e02:	a84e      	add	r0, sp, #312	; 0x138
    2e04:	f00a fdca 	bl	d99c <String::String(char const*)>
    2e08:	a94e      	add	r1, sp, #312	; 0x138
    2e0a:	a80e      	add	r0, sp, #56	; 0x38
    2e0c:	f00b f97a 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2e10:	4604      	mov	r4, r0
    2e12:	a84e      	add	r0, sp, #312	; 0x138
    2e14:	f00a fed4 	bl	dbc0 <String::~String()>
    2e18:	2c00      	cmp	r4, #0
    2e1a:	d050      	beq.n	2ebe <parseSerialIn(String)+0xdc2>
				String addr = param1;
    2e1c:	a912      	add	r1, sp, #72	; 0x48
    2e1e:	a83a      	add	r0, sp, #232	; 0xe8
    2e20:	f00a fde8 	bl	d9f4 <String::String(String const&)>
				String name = param2.substring(1, (param2.length()-1));
    2e24:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2e26:	a83e      	add	r0, sp, #248	; 0xf8
    2e28:	3b01      	subs	r3, #1
    2e2a:	2201      	movs	r2, #1
    2e2c:	a916      	add	r1, sp, #88	; 0x58
    2e2e:	f00b fa25 	bl	e27c <String::substring(unsigned int, unsigned int) const>
				String caps = param3;
    2e32:	a91a      	add	r1, sp, #104	; 0x68
    2e34:	a842      	add	r0, sp, #264	; 0x108
    2e36:	f00a fddd 	bl	d9f4 <String::String(String const&)>
				unsigned int stren = param4.substring(1, 3).toInt();
    2e3a:	2303      	movs	r3, #3
    2e3c:	2201      	movs	r2, #1
    2e3e:	a91e      	add	r1, sp, #120	; 0x78
    2e40:	a84e      	add	r0, sp, #312	; 0x138
    2e42:	f00b fa1b 	bl	e27c <String::substring(unsigned int, unsigned int) const>
    2e46:	a84e      	add	r0, sp, #312	; 0x138
    2e48:	f00b fa7a 	bl	e340 <String::toInt() const>
    2e4c:	4604      	mov	r4, r0
    2e4e:	a84e      	add	r0, sp, #312	; 0x138
    2e50:	f00a feb6 	bl	dbc0 <String::~String()>
				populateDevlist(addr, name, caps, stren);
    2e54:	a93a      	add	r1, sp, #232	; 0xe8
    2e56:	a846      	add	r0, sp, #280	; 0x118
    2e58:	f00a fdcc 	bl	d9f4 <String::String(String const&)>
    2e5c:	a93e      	add	r1, sp, #248	; 0xf8
    2e5e:	a84a      	add	r0, sp, #296	; 0x128
    2e60:	f00a fdc8 	bl	d9f4 <String::String(String const&)>
    2e64:	a942      	add	r1, sp, #264	; 0x108
    2e66:	a84e      	add	r0, sp, #312	; 0x138
    2e68:	f00a fdc4 	bl	d9f4 <String::String(String const&)>
    2e6c:	4623      	mov	r3, r4
    2e6e:	aa4e      	add	r2, sp, #312	; 0x138
    2e70:	a94a      	add	r1, sp, #296	; 0x128
    2e72:	a846      	add	r0, sp, #280	; 0x118
    2e74:	f7ff f8fe 	bl	2074 <populateDevlist(String, String, String, unsigned int)>
    2e78:	e5d7      	b.n	2a2a <parseSerialIn(String)+0x92e>
					// MONPORT.println("Receiving 1-param BLE command");
					if(param3.equalsIgnoreCase("inq")) {
					  // MONPORT.println("Received BT inquiry command");
						return BCCMD_INQUIRY;
					}
					if(param3.equalsIgnoreCase("disc")) {
    2e7a:	493b      	ldr	r1, [pc, #236]	; (2f68 <parseSerialIn(String)+0xe6c>)
    2e7c:	a84e      	add	r0, sp, #312	; 0x138
    2e7e:	f00a fd8d 	bl	d99c <String::String(char const*)>
    2e82:	a94e      	add	r1, sp, #312	; 0x138
    2e84:	a81a      	add	r0, sp, #104	; 0x68
    2e86:	f00b f93d 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2e8a:	4605      	mov	r5, r0
    2e8c:	a84e      	add	r0, sp, #312	; 0x138
    2e8e:	f00a fe97 	bl	dbc0 <String::~String()>
    2e92:	2d00      	cmp	r5, #0
    2e94:	f43f aacf 	beq.w	2436 <parseSerialIn(String)+0x33a>
						working_state.bt_state = BTSTATE_REQ_DISC;
    2e98:	4b26      	ldr	r3, [pc, #152]	; (2f34 <parseSerialIn(String)+0xe38>)
    2e9a:	e468      	b.n	276e <parseSerialIn(String)+0x672>
				// working_state.mon_state = MONSTATE_REQ_OFF;
			}
			else if(notif.equalsIgnoreCase("AVRCP_FORWARD")) {
				return BCCMD_REC_START;
			}
			else if(notif.equalsIgnoreCase("AVRCP_BACKWARD")) {
    2e9c:	4933      	ldr	r1, [pc, #204]	; (2f6c <parseSerialIn(String)+0xe70>)
    2e9e:	a84e      	add	r0, sp, #312	; 0x138
    2ea0:	f00a fd7c 	bl	d99c <String::String(char const*)>
    2ea4:	a94e      	add	r1, sp, #312	; 0x138
    2ea6:	a80e      	add	r0, sp, #56	; 0x38
    2ea8:	f00b f92c 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2eac:	4604      	mov	r4, r0
    2eae:	a84e      	add	r0, sp, #312	; 0x138
    2eb0:	f00a fe86 	bl	dbc0 <String::~String()>
    2eb4:	2c00      	cmp	r4, #0
    2eb6:	d05d      	beq.n	2f74 <parseSerialIn(String)+0xe78>
							MONPORT.println("Received time not correct!");
						}
					}
					else if(param3.equalsIgnoreCase("rec")) {
						if(param4.equalsIgnoreCase("start")) return BCCMD_REC_START;
						else if(param4.equalsIgnoreCase("stop")) return BCCMD_REC_STOP;
    2eb8:	240e      	movs	r4, #14
    2eba:	f7ff babd 	b.w	2438 <parseSerialIn(String)+0x33c>
				String caps = param3;
				unsigned int stren = param4.substring(1, 3).toInt();
				populateDevlist(addr, name, caps, stren);
				return BCNOT_INQ_STATE;
			}
			else if(notif.equalsIgnoreCase("RECV")) {
    2ebe:	491e      	ldr	r1, [pc, #120]	; (2f38 <parseSerialIn(String)+0xe3c>)
    2ec0:	a84e      	add	r0, sp, #312	; 0x138
    2ec2:	f00a fd6b 	bl	d99c <String::String(char const*)>
    2ec6:	a94e      	add	r1, sp, #312	; 0x138
    2ec8:	a80e      	add	r0, sp, #56	; 0x38
    2eca:	f00b f91b 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2ece:	4604      	mov	r4, r0
    2ed0:	a84e      	add	r0, sp, #312	; 0x138
    2ed2:	f00a fe75 	bl	dbc0 <String::~String()>
    2ed6:	2c00      	cmp	r4, #0
    2ed8:	f43f aaad 	beq.w	2436 <parseSerialIn(String)+0x33a>
				// - "mon {start/stop/?}"
				// - "vol {+/-/?}"
				// - "bt {?}"
				// - "rwin {?}"
				// - "filepath {?}"
				if(param1.toInt() == BLE_conn_id) {
    2edc:	a812      	add	r0, sp, #72	; 0x48
    2ede:	f00b fa2f 	bl	e340 <String::toInt() const>
    2ee2:	4b13      	ldr	r3, [pc, #76]	; (2f30 <parseSerialIn(String)+0xe34>)
    2ee4:	681b      	ldr	r3, [r3, #0]
    2ee6:	4298      	cmp	r0, r3
    2ee8:	f47f aaa5 	bne.w	2436 <parseSerialIn(String)+0x33a>
					// MONPORT.println("Receiving 2-params BLE command");
					if(param3.equalsIgnoreCase("conn")) {
    2eec:	4920      	ldr	r1, [pc, #128]	; (2f70 <parseSerialIn(String)+0xe74>)
    2eee:	a84e      	add	r0, sp, #312	; 0x138
    2ef0:	f00a fd54 	bl	d99c <String::String(char const*)>
    2ef4:	a94e      	add	r1, sp, #312	; 0x138
    2ef6:	a81a      	add	r0, sp, #104	; 0x68
    2ef8:	f00b f904 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2efc:	4604      	mov	r4, r0
    2efe:	a84e      	add	r0, sp, #312	; 0x138
    2f00:	f00a fe5e 	bl	dbc0 <String::~String()>
    2f04:	2c00      	cmp	r4, #0
    2f06:	d055      	beq.n	2fb4 <parseSerialIn(String)+0xeb8>
						BT_peer_address = param4;
    2f08:	a91e      	add	r1, sp, #120	; 0x78
    2f0a:	480e      	ldr	r0, [pc, #56]	; (2f44 <parseSerialIn(String)+0xe48>)
    2f0c:	f00a fe60 	bl	dbd0 <String::operator=(String const&)>
						return BCCMD_DEV_CONNECT;
    2f10:	2406      	movs	r4, #6
    2f12:	f7ff ba91 	b.w	2438 <parseSerialIn(String)+0x33c>
    2f16:	bf00      	nop
    2f18:	00016f34 	.word	0x00016f34
    2f1c:	00016f44 	.word	0x00016f44
    2f20:	00017004 	.word	0x00017004
    2f24:	0001700c 	.word	0x0001700c
    2f28:	0001704c 	.word	0x0001704c
    2f2c:	00017098 	.word	0x00017098
    2f30:	1fff596c 	.word	0x1fff596c
    2f34:	1fff5820 	.word	0x1fff5820
    2f38:	00016f1c 	.word	0x00016f1c
    2f3c:	0001709c 	.word	0x0001709c
    2f40:	1fff5984 	.word	0x1fff5984
    2f44:	1fff5970 	.word	0x1fff5970
    2f48:	00017014 	.word	0x00017014
    2f4c:	1fff4b00 	.word	0x1fff4b00
    2f50:	000170a8 	.word	0x000170a8
    2f54:	1fff57e0 	.word	0x1fff57e0
    2f58:	00016fec 	.word	0x00016fec
    2f5c:	1fff5988 	.word	0x1fff5988
    2f60:	00017054 	.word	0x00017054
    2f64:	00016f14 	.word	0x00016f14
    2f68:	000170a0 	.word	0x000170a0
    2f6c:	00016f94 	.word	0x00016f94
    2f70:	00017108 	.word	0x00017108
				return BCCMD_REC_START;
			}
			else if(notif.equalsIgnoreCase("AVRCP_BACKWARD")) {
				return BCCMD_REC_STOP;
			}
			else if(notif.equalsIgnoreCase("ERROR")) {
    2f74:	49a8      	ldr	r1, [pc, #672]	; (3218 <parseSerialIn(String)+0x111c>)
    2f76:	a84e      	add	r0, sp, #312	; 0x138
    2f78:	f00a fd10 	bl	d99c <String::String(char const*)>
    2f7c:	a94e      	add	r1, sp, #312	; 0x138
    2f7e:	a80e      	add	r0, sp, #56	; 0x38
    2f80:	f00b f8c0 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2f84:	4604      	mov	r4, r0
    2f86:	a84e      	add	r0, sp, #312	; 0x138
    2f88:	f00a fe1a 	bl	dbc0 <String::~String()>
    2f8c:	2c00      	cmp	r4, #0
    2f8e:	f47f aa52 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("PAIR_ERROR")) {
    2f92:	49a2      	ldr	r1, [pc, #648]	; (321c <parseSerialIn(String)+0x1120>)
    2f94:	a84e      	add	r0, sp, #312	; 0x138
    2f96:	f00a fd01 	bl	d99c <String::String(char const*)>
    2f9a:	a94e      	add	r1, sp, #312	; 0x138
    2f9c:	a80e      	add	r0, sp, #56	; 0x38
    2f9e:	f00b f8b1 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2fa2:	4604      	mov	r4, r0
    2fa4:	a84e      	add	r0, sp, #312	; 0x138
    2fa6:	f00a fe0b 	bl	dbc0 <String::~String()>
    2faa:	2c00      	cmp	r4, #0
    2fac:	f47f aa43 	bne.w	2436 <parseSerialIn(String)+0x33a>
			}
			else if(notif.equalsIgnoreCase("PAIR_OK")) {
    2fb0:	499b      	ldr	r1, [pc, #620]	; (3220 <parseSerialIn(String)+0x1124>)
    2fb2:	e669      	b.n	2c88 <parseSerialIn(String)+0xb8c>
					// MONPORT.println("Receiving 2-params BLE command");
					if(param3.equalsIgnoreCase("conn")) {
						BT_peer_address = param4;
						return BCCMD_DEV_CONNECT;
					}
					else if(param3.equalsIgnoreCase("time")) {
    2fb4:	499b      	ldr	r1, [pc, #620]	; (3224 <parseSerialIn(String)+0x1128>)
    2fb6:	a84e      	add	r0, sp, #312	; 0x138
    2fb8:	f00a fcf0 	bl	d99c <String::String(char const*)>
    2fbc:	a94e      	add	r1, sp, #312	; 0x138
    2fbe:	a81a      	add	r0, sp, #104	; 0x68
    2fc0:	f00b f8a0 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    2fc4:	4605      	mov	r5, r0
    2fc6:	a84e      	add	r0, sp, #312	; 0x138
    2fc8:	f00a fdfa 	bl	dbc0 <String::~String()>
    2fcc:	b185      	cbz	r5, 2ff0 <parseSerialIn(String)+0xef4>
						unsigned long rec_time = param4.toInt();
    2fce:	a81e      	add	r0, sp, #120	; 0x78
    2fd0:	f00b f9b6 	bl	e340 <String::toInt() const>
						if(rec_time > MIN_TIME_DEC) {
    2fd4:	4b94      	ldr	r3, [pc, #592]	; (3228 <parseSerialIn(String)+0x112c>)
    2fd6:	4298      	cmp	r0, r3
					if(param3.equalsIgnoreCase("conn")) {
						BT_peer_address = param4;
						return BCCMD_DEV_CONNECT;
					}
					else if(param3.equalsIgnoreCase("time")) {
						unsigned long rec_time = param4.toInt();
    2fd8:	4605      	mov	r5, r0
						if(rec_time > MIN_TIME_DEC) {
    2fda:	d947      	bls.n	306c <parseSerialIn(String)+0xf70>
							setCurTime(rec_time, TSOURCE_BLE);
    2fdc:	2103      	movs	r1, #3
    2fde:	f001 fd17 	bl	4a10 <setCurTime(long, tSources)>
							MONPORT.printf("Timestamp received: %ld\n", rec_time);
    2fe2:	462a      	mov	r2, r5
    2fe4:	4991      	ldr	r1, [pc, #580]	; (322c <parseSerialIn(String)+0x1130>)
    2fe6:	4892      	ldr	r0, [pc, #584]	; (3230 <parseSerialIn(String)+0x1134>)
    2fe8:	f00a fc92 	bl	d910 <Print::printf(char const*, ...)>
    2fec:	f7ff ba24 	b.w	2438 <parseSerialIn(String)+0x33c>
						}
						else {
							MONPORT.println("Received time not correct!");
						}
					}
					else if(param3.equalsIgnoreCase("rec")) {
    2ff0:	4990      	ldr	r1, [pc, #576]	; (3234 <parseSerialIn(String)+0x1138>)
    2ff2:	a84e      	add	r0, sp, #312	; 0x138
    2ff4:	f00a fcd2 	bl	d99c <String::String(char const*)>
    2ff8:	a94e      	add	r1, sp, #312	; 0x138
    2ffa:	a81a      	add	r0, sp, #104	; 0x68
    2ffc:	f00b f882 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    3000:	4604      	mov	r4, r0
    3002:	a84e      	add	r0, sp, #312	; 0x138
    3004:	f00a fddc 	bl	dbc0 <String::~String()>
    3008:	2c00      	cmp	r4, #0
    300a:	d038      	beq.n	307e <parseSerialIn(String)+0xf82>
						if(param4.equalsIgnoreCase("start")) return BCCMD_REC_START;
    300c:	498a      	ldr	r1, [pc, #552]	; (3238 <parseSerialIn(String)+0x113c>)
    300e:	a84e      	add	r0, sp, #312	; 0x138
    3010:	f00a fcc4 	bl	d99c <String::String(char const*)>
    3014:	a94e      	add	r1, sp, #312	; 0x138
    3016:	a81e      	add	r0, sp, #120	; 0x78
    3018:	f00b f874 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    301c:	4604      	mov	r4, r0
    301e:	a84e      	add	r0, sp, #312	; 0x138
    3020:	f00a fdce 	bl	dbc0 <String::~String()>
    3024:	2c00      	cmp	r4, #0
    3026:	f47f aa8d 	bne.w	2544 <parseSerialIn(String)+0x448>
						else if(param4.equalsIgnoreCase("stop")) return BCCMD_REC_STOP;
    302a:	4984      	ldr	r1, [pc, #528]	; (323c <parseSerialIn(String)+0x1140>)
    302c:	a84e      	add	r0, sp, #312	; 0x138
    302e:	f00a fcb5 	bl	d99c <String::String(char const*)>
    3032:	a94e      	add	r1, sp, #312	; 0x138
    3034:	a81e      	add	r0, sp, #120	; 0x78
    3036:	f00b f865 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    303a:	4604      	mov	r4, r0
    303c:	a84e      	add	r0, sp, #312	; 0x138
    303e:	f00a fdbf 	bl	dbc0 <String::~String()>
    3042:	2c00      	cmp	r4, #0
    3044:	f47f af38 	bne.w	2eb8 <parseSerialIn(String)+0xdbc>
						else if(param4.equalsIgnoreCase("?")) return BCNOT_REC_STATE;
    3048:	497d      	ldr	r1, [pc, #500]	; (3240 <parseSerialIn(String)+0x1144>)
    304a:	a84e      	add	r0, sp, #312	; 0x138
    304c:	f00a fca6 	bl	d99c <String::String(char const*)>
    3050:	a94e      	add	r1, sp, #312	; 0x138
    3052:	a81e      	add	r0, sp, #120	; 0x78
    3054:	f00b f856 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    3058:	4604      	mov	r4, r0
    305a:	a84e      	add	r0, sp, #312	; 0x138
    305c:	f00a fdb0 	bl	dbc0 <String::~String()>
    3060:	2c00      	cmp	r4, #0
    3062:	f43f a9e8 	beq.w	2436 <parseSerialIn(String)+0x33a>
    3066:	241a      	movs	r4, #26
    3068:	f7ff b9e6 	b.w	2438 <parseSerialIn(String)+0x33c>
    306c:	211a      	movs	r1, #26
    306e:	4875      	ldr	r0, [pc, #468]	; (3244 <parseSerialIn(String)+0x1148>)
    3070:	f00d fc08 	bl	10884 <usb_serial_write>
    3074:	486e      	ldr	r0, [pc, #440]	; (3230 <parseSerialIn(String)+0x1134>)
    3076:	f00a fc33 	bl	d8e0 <Print::println()>
    307a:	f7ff b9dd 	b.w	2438 <parseSerialIn(String)+0x33c>
						else {
							// MONPORT.println("BLE rec command not listed");
						}
					}
					else if(param3.equalsIgnoreCase("mon")) {
    307e:	4972      	ldr	r1, [pc, #456]	; (3248 <parseSerialIn(String)+0x114c>)
    3080:	a84e      	add	r0, sp, #312	; 0x138
    3082:	f00a fc8b 	bl	d99c <String::String(char const*)>
    3086:	a94e      	add	r1, sp, #312	; 0x138
    3088:	a81a      	add	r0, sp, #104	; 0x68
    308a:	f00b f83b 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    308e:	4604      	mov	r4, r0
    3090:	a84e      	add	r0, sp, #312	; 0x138
    3092:	f00a fd95 	bl	dbc0 <String::~String()>
    3096:	b194      	cbz	r4, 30be <parseSerialIn(String)+0xfc2>
						if(param4.equalsIgnoreCase("start")) working_state.mon_state = MONSTATE_REQ_ON;
    3098:	4967      	ldr	r1, [pc, #412]	; (3238 <parseSerialIn(String)+0x113c>)
    309a:	a84e      	add	r0, sp, #312	; 0x138
    309c:	f00a fc7e 	bl	d99c <String::String(char const*)>
    30a0:	a94e      	add	r1, sp, #312	; 0x138
    30a2:	a81e      	add	r0, sp, #120	; 0x78
    30a4:	f00b f82e 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    30a8:	4604      	mov	r4, r0
    30aa:	a84e      	add	r0, sp, #312	; 0x138
    30ac:	f00a fd88 	bl	dbc0 <String::~String()>
    30b0:	b354      	cbz	r4, 3108 <parseSerialIn(String)+0x100c>
    30b2:	4b66      	ldr	r3, [pc, #408]	; (324c <parseSerialIn(String)+0x1150>)
    30b4:	2201      	movs	r2, #1
    30b6:	705a      	strb	r2, [r3, #1]
		default:
			// MONPORT.println(input.c_str());
			break;
	}
	
  return BCCMD__NOTHING;
    30b8:	2400      	movs	r4, #0
    30ba:	f7ff b9bd 	b.w	2438 <parseSerialIn(String)+0x33c>
						else if(param4.equalsIgnoreCase("?")) return BCNOT_MON_STATE;
						else {
							// MONPORT.println("BLE mon command not listed");
						}
					}
					else if(param3.equalsIgnoreCase("vol")) {
    30be:	4964      	ldr	r1, [pc, #400]	; (3250 <parseSerialIn(String)+0x1154>)
    30c0:	a84e      	add	r0, sp, #312	; 0x138
    30c2:	f00a fc6b 	bl	d99c <String::String(char const*)>
    30c6:	a94e      	add	r1, sp, #312	; 0x138
    30c8:	a81a      	add	r0, sp, #104	; 0x68
    30ca:	f00b f81b 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    30ce:	4604      	mov	r4, r0
    30d0:	a84e      	add	r0, sp, #312	; 0x138
    30d2:	f00a fd75 	bl	dbc0 <String::~String()>
    30d6:	2c00      	cmp	r4, #0
    30d8:	d03a      	beq.n	3150 <parseSerialIn(String)+0x1054>
						if(working_state.bt_state == BTSTATE_CONNECTED) {
    30da:	4b5c      	ldr	r3, [pc, #368]	; (324c <parseSerialIn(String)+0x1150>)
    30dc:	789b      	ldrb	r3, [r3, #2]
    30de:	2b04      	cmp	r3, #4
							else {
								// MONPORT.println("BLE vol command not listed");
							}
						}
						else {
							return BCERR_VOL_BT_DIS;
    30e0:	bf18      	it	ne
    30e2:	2420      	movne	r4, #32
						else {
							// MONPORT.println("BLE mon command not listed");
						}
					}
					else if(param3.equalsIgnoreCase("vol")) {
						if(working_state.bt_state == BTSTATE_CONNECTED) {
    30e4:	f47f a9a8 	bne.w	2438 <parseSerialIn(String)+0x33c>
							if(param4.equalsIgnoreCase("+")) {
    30e8:	495a      	ldr	r1, [pc, #360]	; (3254 <parseSerialIn(String)+0x1158>)
    30ea:	a84e      	add	r0, sp, #312	; 0x138
    30ec:	f00a fc56 	bl	d99c <String::String(char const*)>
    30f0:	a94e      	add	r1, sp, #312	; 0x138
    30f2:	a81e      	add	r0, sp, #120	; 0x78
    30f4:	f00b f806 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    30f8:	4604      	mov	r4, r0
    30fa:	a84e      	add	r0, sp, #312	; 0x138
    30fc:	f00a fd60 	bl	dbc0 <String::~String()>
    3100:	b1ac      	cbz	r4, 312e <parseSerialIn(String)+0x1032>
								return BCCMD_VOL_UP;
    3102:	2413      	movs	r4, #19
    3104:	f7ff b998 	b.w	2438 <parseSerialIn(String)+0x33c>
							// MONPORT.println("BLE rec command not listed");
						}
					}
					else if(param3.equalsIgnoreCase("mon")) {
						if(param4.equalsIgnoreCase("start")) working_state.mon_state = MONSTATE_REQ_ON;
						else if(param4.equalsIgnoreCase("stop")) working_state.mon_state = MONSTATE_REQ_OFF;
    3108:	494c      	ldr	r1, [pc, #304]	; (323c <parseSerialIn(String)+0x1140>)
    310a:	a84e      	add	r0, sp, #312	; 0x138
    310c:	f00a fc46 	bl	d99c <String::String(char const*)>
    3110:	a94e      	add	r1, sp, #312	; 0x138
    3112:	a81e      	add	r0, sp, #120	; 0x78
    3114:	f00a fff6 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    3118:	4604      	mov	r4, r0
    311a:	a84e      	add	r0, sp, #312	; 0x138
    311c:	f00a fd50 	bl	dbc0 <String::~String()>
    3120:	2c00      	cmp	r4, #0
    3122:	d035      	beq.n	3190 <parseSerialIn(String)+0x1094>
    3124:	4b49      	ldr	r3, [pc, #292]	; (324c <parseSerialIn(String)+0x1150>)
    3126:	2202      	movs	r2, #2
    3128:	705a      	strb	r2, [r3, #1]
    312a:	f7ff b984 	b.w	2436 <parseSerialIn(String)+0x33a>
					else if(param3.equalsIgnoreCase("vol")) {
						if(working_state.bt_state == BTSTATE_CONNECTED) {
							if(param4.equalsIgnoreCase("+")) {
								return BCCMD_VOL_UP;
							}
							else if(param4.equalsIgnoreCase("-")) {
    312e:	494a      	ldr	r1, [pc, #296]	; (3258 <parseSerialIn(String)+0x115c>)
    3130:	a84e      	add	r0, sp, #312	; 0x138
    3132:	f00a fc33 	bl	d99c <String::String(char const*)>
    3136:	a94e      	add	r1, sp, #312	; 0x138
    3138:	a81e      	add	r0, sp, #120	; 0x78
    313a:	f00a ffe3 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    313e:	4604      	mov	r4, r0
    3140:	a84e      	add	r0, sp, #312	; 0x138
    3142:	f00a fd3d 	bl	dbc0 <String::~String()>
    3146:	2c00      	cmp	r4, #0
    3148:	d034      	beq.n	31b4 <parseSerialIn(String)+0x10b8>
								return BCCMD_VOL_DOWN;
    314a:	2412      	movs	r4, #18
    314c:	f7ff b974 	b.w	2438 <parseSerialIn(String)+0x33c>
						}
						else {
							return BCERR_VOL_BT_DIS;
						}
					}
					else if(param3.equalsIgnoreCase("bt")) {
    3150:	4942      	ldr	r1, [pc, #264]	; (325c <parseSerialIn(String)+0x1160>)
    3152:	a84e      	add	r0, sp, #312	; 0x138
    3154:	f00a fc22 	bl	d99c <String::String(char const*)>
    3158:	a94e      	add	r1, sp, #312	; 0x138
    315a:	a81a      	add	r0, sp, #104	; 0x68
    315c:	f00a ffd2 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    3160:	4604      	mov	r4, r0
    3162:	a84e      	add	r0, sp, #312	; 0x138
    3164:	f00a fd2c 	bl	dbc0 <String::~String()>
    3168:	2c00      	cmp	r4, #0
    316a:	d034      	beq.n	31d6 <parseSerialIn(String)+0x10da>
						if(param4.equalsIgnoreCase("?")) {
    316c:	4934      	ldr	r1, [pc, #208]	; (3240 <parseSerialIn(String)+0x1144>)
    316e:	a84e      	add	r0, sp, #312	; 0x138
    3170:	f00a fc14 	bl	d99c <String::String(char const*)>
    3174:	a94e      	add	r1, sp, #312	; 0x138
    3176:	a81e      	add	r0, sp, #120	; 0x78
    3178:	f00a ffc4 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    317c:	4604      	mov	r4, r0
    317e:	a84e      	add	r0, sp, #312	; 0x138
    3180:	f00a fd1e 	bl	dbc0 <String::~String()>
    3184:	2c00      	cmp	r4, #0
    3186:	f43f a956 	beq.w	2436 <parseSerialIn(String)+0x33a>
							// return BCNOT_BT_STATE;
							return BCCMD_STATUS;
    318a:	2410      	movs	r4, #16
    318c:	f7ff b954 	b.w	2438 <parseSerialIn(String)+0x33c>
						}
					}
					else if(param3.equalsIgnoreCase("mon")) {
						if(param4.equalsIgnoreCase("start")) working_state.mon_state = MONSTATE_REQ_ON;
						else if(param4.equalsIgnoreCase("stop")) working_state.mon_state = MONSTATE_REQ_OFF;
						else if(param4.equalsIgnoreCase("?")) return BCNOT_MON_STATE;
    3190:	492b      	ldr	r1, [pc, #172]	; (3240 <parseSerialIn(String)+0x1144>)
    3192:	a84e      	add	r0, sp, #312	; 0x138
    3194:	f00a fc02 	bl	d99c <String::String(char const*)>
    3198:	a94e      	add	r1, sp, #312	; 0x138
    319a:	a81e      	add	r0, sp, #120	; 0x78
    319c:	f00a ffb2 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    31a0:	4604      	mov	r4, r0
    31a2:	a84e      	add	r0, sp, #312	; 0x138
    31a4:	f00a fd0c 	bl	dbc0 <String::~String()>
    31a8:	2c00      	cmp	r4, #0
    31aa:	f43f a944 	beq.w	2436 <parseSerialIn(String)+0x33a>
    31ae:	2419      	movs	r4, #25
    31b0:	f7ff b942 	b.w	2438 <parseSerialIn(String)+0x33c>
								return BCCMD_VOL_UP;
							}
							else if(param4.equalsIgnoreCase("-")) {
								return BCCMD_VOL_DOWN;
							}
							else if(param4.equalsIgnoreCase("?")) {
    31b4:	4922      	ldr	r1, [pc, #136]	; (3240 <parseSerialIn(String)+0x1144>)
    31b6:	a84e      	add	r0, sp, #312	; 0x138
    31b8:	f00a fbf0 	bl	d99c <String::String(char const*)>
    31bc:	a94e      	add	r1, sp, #312	; 0x138
    31be:	a81e      	add	r0, sp, #120	; 0x78
    31c0:	f00a ffa0 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    31c4:	4604      	mov	r4, r0
    31c6:	a84e      	add	r0, sp, #312	; 0x138
    31c8:	f00a fcfa 	bl	dbc0 <String::~String()>
    31cc:	2c00      	cmp	r4, #0
    31ce:	f47f a9e9 	bne.w	25a4 <parseSerialIn(String)+0x4a8>
    31d2:	f7ff b930 	b.w	2436 <parseSerialIn(String)+0x33a>
						if(param4.equalsIgnoreCase("?")) {
							// return BCNOT_BT_STATE;
							return BCCMD_STATUS;
						}
					}
					else if(param3.equalsIgnoreCase("rwin")) {
    31d6:	4922      	ldr	r1, [pc, #136]	; (3260 <parseSerialIn(String)+0x1164>)
    31d8:	a84e      	add	r0, sp, #312	; 0x138
    31da:	f00a fbdf 	bl	d99c <String::String(char const*)>
    31de:	a94e      	add	r1, sp, #312	; 0x138
    31e0:	a81a      	add	r0, sp, #104	; 0x68
    31e2:	f00a ff8f 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    31e6:	4604      	mov	r4, r0
    31e8:	a84e      	add	r0, sp, #312	; 0x138
    31ea:	f00a fce9 	bl	dbc0 <String::~String()>
    31ee:	2c00      	cmp	r4, #0
    31f0:	d038      	beq.n	3264 <parseSerialIn(String)+0x1168>
						if(param4.equalsIgnoreCase("?")) {
    31f2:	4913      	ldr	r1, [pc, #76]	; (3240 <parseSerialIn(String)+0x1144>)
    31f4:	a84e      	add	r0, sp, #312	; 0x138
    31f6:	f00a fbd1 	bl	d99c <String::String(char const*)>
    31fa:	a94e      	add	r1, sp, #312	; 0x138
    31fc:	a81e      	add	r0, sp, #120	; 0x78
    31fe:	f00a ff81 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    3202:	4604      	mov	r4, r0
    3204:	a84e      	add	r0, sp, #312	; 0x138
    3206:	f00a fcdb 	bl	dbc0 <String::~String()>
							return BCNOT_RWIN_VALS;
    320a:	2c00      	cmp	r4, #0
    320c:	bf0c      	ite	eq
    320e:	241e      	moveq	r4, #30
    3210:	241c      	movne	r4, #28
    3212:	f7ff b911 	b.w	2438 <parseSerialIn(String)+0x33c>
    3216:	bf00      	nop
    3218:	00016fa4 	.word	0x00016fa4
    321c:	00016fac 	.word	0x00016fac
    3220:	00016fb8 	.word	0x00016fb8
    3224:	00017110 	.word	0x00017110
    3228:	5c541765 	.word	0x5c541765
    322c:	00017118 	.word	0x00017118
    3230:	1fff4b00 	.word	0x1fff4b00
    3234:	00017150 	.word	0x00017150
    3238:	00017154 	.word	0x00017154
    323c:	0001715c 	.word	0x0001715c
    3240:	00017164 	.word	0x00017164
    3244:	00017134 	.word	0x00017134
    3248:	00017168 	.word	0x00017168
    324c:	1fff5820 	.word	0x1fff5820
    3250:	0001716c 	.word	0x0001716c
    3254:	00017170 	.word	0x00017170
    3258:	00017174 	.word	0x00017174
    325c:	00017178 	.word	0x00017178
    3260:	0001717c 	.word	0x0001717c
						else {
							return BCERR_RWIN_BAD_REQ;
							// MONPORT.println("RWIN request not listed");
						}
					}
					else if(param3.equalsIgnoreCase("filepath")) {
    3264:	4910      	ldr	r1, [pc, #64]	; (32a8 <parseSerialIn(String)+0x11ac>)
    3266:	a84e      	add	r0, sp, #312	; 0x138
    3268:	f00a fb98 	bl	d99c <String::String(char const*)>
    326c:	a94e      	add	r1, sp, #312	; 0x138
    326e:	a81a      	add	r0, sp, #104	; 0x68
    3270:	f00a ff48 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    3274:	4604      	mov	r4, r0
    3276:	a84e      	add	r0, sp, #312	; 0x138
    3278:	f00a fca2 	bl	dbc0 <String::~String()>
    327c:	2c00      	cmp	r4, #0
    327e:	f43f a8da 	beq.w	2436 <parseSerialIn(String)+0x33a>
						if(param4.equalsIgnoreCase("?")) {
    3282:	490a      	ldr	r1, [pc, #40]	; (32ac <parseSerialIn(String)+0x11b0>)
    3284:	a84e      	add	r0, sp, #312	; 0x138
    3286:	f00a fb89 	bl	d99c <String::String(char const*)>
    328a:	a94e      	add	r1, sp, #312	; 0x138
    328c:	a81e      	add	r0, sp, #120	; 0x78
    328e:	f00a ff39 	bl	e104 <String::equalsIgnoreCase(String const&) const>
    3292:	4604      	mov	r4, r0
    3294:	a84e      	add	r0, sp, #312	; 0x138
    3296:	f00a fc93 	bl	dbc0 <String::~String()>
    329a:	2c00      	cmp	r4, #0
    329c:	f43f a8cb 	beq.w	2436 <parseSerialIn(String)+0x33a>
							return BCNOT_FILEPATH;
    32a0:	2415      	movs	r4, #21
    32a2:	f7ff b8c9 	b.w	2438 <parseSerialIn(String)+0x33c>
    32a6:	bf00      	nop
    32a8:	00017184 	.word	0x00017184
    32ac:	00017164 	.word	0x00017164

000032b0 <_GLOBAL__sub_I_dev_list>:
			return true;
		}
	}
	MONPORT.println("Nothing found in list");
	return false;
    32b0:	b538      	push	{r3, r4, r5, lr}
    32b2:	4c16      	ldr	r4, [pc, #88]	; (330c <_GLOBAL__sub_I_dev_list+0x5c>)
    32b4:	f504 759c 	add.w	r5, r4, #312	; 0x138
 */

#include "BC127.h"

// BT device informations for connection
struct btDev {
    32b8:	2100      	movs	r1, #0
    32ba:	4620      	mov	r0, r4
    32bc:	f00a fb6e 	bl	d99c <String::String(char const*)>
    32c0:	2100      	movs	r1, #0
    32c2:	f104 0010 	add.w	r0, r4, #16
    32c6:	f00a fb69 	bl	d99c <String::String(char const*)>
    32ca:	f104 0020 	add.w	r0, r4, #32
    32ce:	2100      	movs	r1, #0
    32d0:	3434      	adds	r4, #52	; 0x34
    32d2:	f00a fb63 	bl	d99c <String::String(char const*)>
  String address;
	String name;
  String capabilities;
  unsigned int strength;
};
struct btDev dev_list[DEVLIST_MAXLEN];
    32d6:	42ac      	cmp	r4, r5
    32d8:	d1ee      	bne.n	32b8 <_GLOBAL__sub_I_dev_list+0x8>
    32da:	4a0d      	ldr	r2, [pc, #52]	; (3310 <_GLOBAL__sub_I_dev_list+0x60>)
    32dc:	490d      	ldr	r1, [pc, #52]	; (3314 <_GLOBAL__sub_I_dev_list+0x64>)
    32de:	2000      	movs	r0, #0
    32e0:	f00e fd3c 	bl	11d5c <__aeabi_atexit>

// Amount of found BT devices on inquiry
unsigned int									found_dev;
// Address of the connected BT device
String 												BT_peer_address;
    32e4:	2100      	movs	r1, #0
    32e6:	480c      	ldr	r0, [pc, #48]	; (3318 <_GLOBAL__sub_I_dev_list+0x68>)
    32e8:	f00a fb58 	bl	d99c <String::String(char const*)>
    32ec:	4a08      	ldr	r2, [pc, #32]	; (3310 <_GLOBAL__sub_I_dev_list+0x60>)
    32ee:	490b      	ldr	r1, [pc, #44]	; (331c <_GLOBAL__sub_I_dev_list+0x6c>)
    32f0:	4809      	ldr	r0, [pc, #36]	; (3318 <_GLOBAL__sub_I_dev_list+0x68>)
    32f2:	f00e fd33 	bl	11d5c <__aeabi_atexit>
// Name of the connected BT device
String												BT_peer_name;
    32f6:	2100      	movs	r1, #0
    32f8:	4809      	ldr	r0, [pc, #36]	; (3320 <_GLOBAL__sub_I_dev_list+0x70>)
    32fa:	f00a fb4f 	bl	d99c <String::String(char const*)>
    32fe:	4a04      	ldr	r2, [pc, #16]	; (3310 <_GLOBAL__sub_I_dev_list+0x60>)
    3300:	4906      	ldr	r1, [pc, #24]	; (331c <_GLOBAL__sub_I_dev_list+0x6c>)
    3302:	4807      	ldr	r0, [pc, #28]	; (3320 <_GLOBAL__sub_I_dev_list+0x70>)
			return true;
		}
	}
	MONPORT.println("Nothing found in list");
	return false;
    3304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
// Amount of found BT devices on inquiry
unsigned int									found_dev;
// Address of the connected BT device
String 												BT_peer_address;
// Name of the connected BT device
String												BT_peer_name;
    3308:	f00e bd28 	b.w	11d5c <__aeabi_atexit>
    330c:	1fff5834 	.word	0x1fff5834
    3310:	1fff4930 	.word	0x1fff4930
    3314:	00001631 	.word	0x00001631
    3318:	1fff5970 	.word	0x1fff5970
    331c:	0000dbc1 	.word	0x0000dbc1
    3320:	1fff5824 	.word	0x1fff5824

00003324 <__tcf_0>:
Bounce 													but_mon = Bounce(BUTTON_MONITOR_PIN, BUTTON_BOUNCE_TIME_MS);
Bounce 													but_blue = Bounce(BUTTON_BLUETOOTH_PIN, BUTTON_BOUNCE_TIME_MS);

enum bCalls											button_call;

IntervalTimer										led_timers[LED_MAX_NUMBER];
    3324:	b510      	push	{r4, lr}
	IntervalTimer() {
		channel = NULL;
		nvic_priority = 128;
	}
	~IntervalTimer() {
		end();
    3326:	4c09      	ldr	r4, [pc, #36]	; (334c <__tcf_0+0x28>)
    3328:	f104 0018 	add.w	r0, r4, #24
    332c:	f00a f9fc 	bl	d728 <IntervalTimer::end()>
    3330:	f104 0010 	add.w	r0, r4, #16
    3334:	f00a f9f8 	bl	d728 <IntervalTimer::end()>
    3338:	f104 0008 	add.w	r0, r4, #8
    333c:	f00a f9f4 	bl	d728 <IntervalTimer::end()>
    3340:	4620      	mov	r0, r4
    3342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3346:	f00a b9ef 	b.w	d728 <IntervalTimer::end()>
    334a:	bf00      	nop
    334c:	1fff598c 	.word	0x1fff598c

00003350 <__tcf_1>:
byte 														led_pins[LED_MAX_NUMBER] = { LED_RECORD_PIN, LED_MONITOR_PIN, LED_BLUETOOTH_PIN, LED_PEAK_PIN };
struct leds_s 									leds[LED_MAX_NUMBER];
    3350:	b510      	push	{r4, lr}
    3352:	4c09      	ldr	r4, [pc, #36]	; (3378 <__tcf_1+0x28>)
    3354:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3358:	f00a f9e6 	bl	d728 <IntervalTimer::end()>
    335c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    3360:	f00a f9e2 	bl	d728 <IntervalTimer::end()>
    3364:	f104 0020 	add.w	r0, r4, #32
    3368:	f00a f9de 	bl	d728 <IntervalTimer::end()>
    336c:	f104 0008 	add.w	r0, r4, #8
    3370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3374:	f00a b9d8 	b.w	d728 <IntervalTimer::end()>
    3378:	1fff59cc 	.word	0x1fff59cc

0000337c <toggleMonLED()>:
 * OUT:	- none
 */
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
void toggleMonLED(void) {
    337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * OUT:	- none
 */
void toggleCb(struct leds_s *ld) {
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
    337e:	4c42      	ldr	r4, [pc, #264]	; (3488 <toggleMonLED()+0x10c>)
    3380:	7f63      	ldrb	r3, [r4, #29]
    3382:	2b07      	cmp	r3, #7
    3384:	d81b      	bhi.n	33be <toggleMonLED()+0x42>
    3386:	e8df f003 	tbb	[pc, r3]
    338a:	3f0d      	.short	0x3f0d
    338c:	04204f04 	.word	0x04204f04
    3390:	462f      	.short	0x462f
		}
		break;
		
		case LED_MODE_ERROR:
		// MONPORT.println("Error mode: regular fast toggle");
		ld->status = !ld->status;
    3392:	7f21      	ldrb	r1, [r4, #28]
    3394:	f081 0101 	eor.w	r1, r1, #1
    3398:	7721      	strb	r1, [r4, #28]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    339a:	7e20      	ldrb	r0, [r4, #24]
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
    339c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    33a0:	f00b bdbc 	b.w	ef1c <digitalWrite>
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    33a4:	2501      	movs	r5, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    33a6:	4839      	ldr	r0, [pc, #228]	; (348c <toggleMonLED()+0x110>)
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    33a8:	7725      	strb	r5, [r4, #28]
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    33aa:	f00a f9bd 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
    33ae:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    33b0:	4629      	mov	r1, r5
    33b2:	7e20      	ldrb	r0, [r4, #24]
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    33b4:	7725      	strb	r5, [r4, #28]
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    33b6:	7763      	strb	r3, [r4, #29]
	ld->cnt = 0;
    33b8:	62e3      	str	r3, [r4, #44]	; 0x2c
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    33ba:	f00b fdaf 	bl	ef1c <digitalWrite>
    33be:	7f21      	ldrb	r1, [r4, #28]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    33c0:	7e20      	ldrb	r0, [r4, #24]
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
    33c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    33c6:	f00b bda9 	b.w	ef1c <digitalWrite>
		}
		break;
		
		case LED_MODE_WARNING_LONG:
		// MONPORT.print("Warning mode: "); MONPORT.print(ld->cnt); MONPORT.println(" toggles");
		if(ld->cnt++ > 12) {
    33ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    33cc:	4d2e      	ldr	r5, [pc, #184]	; (3488 <toggleMonLED()+0x10c>)
    33ce:	1c5a      	adds	r2, r3, #1
    33d0:	2b0c      	cmp	r3, #12
    33d2:	62e2      	str	r2, [r4, #44]	; 0x2c
    33d4:	d842      	bhi.n	345c <toggleMonLED()+0xe0>
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    33d6:	7f29      	ldrb	r1, [r5, #28]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    33d8:	7e20      	ldrb	r0, [r4, #24]
		if(ld->cnt++ > 12) {
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    33da:	f081 0101 	eor.w	r1, r1, #1
    33de:	7729      	strb	r1, [r5, #28]
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
    33e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    33e4:	f00b bd9a 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_FAST:
		// MONPORT.println("Fast flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    33e8:	4b27      	ldr	r3, [pc, #156]	; (3488 <toggleMonLED()+0x10c>)
    33ea:	7f21      	ldrb	r1, [r4, #28]
	}
	void update(unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return;
		uint32_t cycles = (F_BUS / 1000000) * microseconds - 1;
		if (cycles < 36) return;
		if (channel) channel->LDVAL = cycles;
    33ec:	6a1b      	ldr	r3, [r3, #32]
    33ee:	2900      	cmp	r1, #0
    33f0:	d02f      	beq.n	3452 <toggleMonLED()+0xd6>
    33f2:	b10b      	cbz	r3, 33f8 <toggleMonLED()+0x7c>
    33f4:	4a26      	ldr	r2, [pc, #152]	; (3490 <toggleMonLED()+0x114>)
    33f6:	601a      	str	r2, [r3, #0]
			ld->timer.update(LED_BLINK_FAST_MS);
		}
		else {
			ld->timer.update(LED_BLINK_SLOW_MS);
		}
		ld->status = !ld->status;
    33f8:	f081 0101 	eor.w	r1, r1, #1
    33fc:	7721      	strb	r1, [r4, #28]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    33fe:	7e20      	ldrb	r0, [r4, #24]
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
    3400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3404:	f00b bd8a 	b.w	ef1c <digitalWrite>
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		// MONPORT.println("LED on: no toggle!");
		ld->status = LED_ON;
    3408:	2100      	movs	r1, #0
    340a:	7721      	strb	r1, [r4, #28]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    340c:	7e20      	ldrb	r0, [r4, #24]
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
    340e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3412:	f00b bd83 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_SLOW:
		// MONPORT.println("Slow flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    3416:	4b1c      	ldr	r3, [pc, #112]	; (3488 <toggleMonLED()+0x10c>)
    3418:	7f21      	ldrb	r1, [r4, #28]
    341a:	6a1b      	ldr	r3, [r3, #32]
    341c:	b1c9      	cbz	r1, 3452 <toggleMonLED()+0xd6>
    341e:	2b00      	cmp	r3, #0
    3420:	d0ea      	beq.n	33f8 <toggleMonLED()+0x7c>
    3422:	4a1c      	ldr	r2, [pc, #112]	; (3494 <toggleMonLED()+0x118>)
    3424:	601a      	str	r2, [r3, #0]
    3426:	e7e7      	b.n	33f8 <toggleMonLED()+0x7c>
		// MONPORT.println("Waiting mode: regular medium toggle");
		ld->status = !ld->status;
		break;
		
		case LED_MODE_WARNING_SHORT:
		if(ld->cnt++ > 2) {
    3428:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    342a:	4d17      	ldr	r5, [pc, #92]	; (3488 <toggleMonLED()+0x10c>)
    342c:	1c5a      	adds	r2, r3, #1
    342e:	2b02      	cmp	r3, #2
    3430:	62e2      	str	r2, [r4, #44]	; 0x2c
    3432:	d9d0      	bls.n	33d6 <toggleMonLED()+0x5a>
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3434:	f105 0020 	add.w	r0, r5, #32
    3438:	f00a f976 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    343c:	2201      	movs	r2, #1
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    343e:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3440:	4611      	mov	r1, r2
    3442:	7e28      	ldrb	r0, [r5, #24]
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    3444:	772a      	strb	r2, [r5, #28]
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3446:	776b      	strb	r3, [r5, #29]
	ld->cnt = 0;
    3448:	62eb      	str	r3, [r5, #44]	; 0x2c
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    344a:	f00b fd67 	bl	ef1c <digitalWrite>
    344e:	7f29      	ldrb	r1, [r5, #28]
    3450:	e7a3      	b.n	339a <toggleMonLED()+0x1e>
    3452:	2b00      	cmp	r3, #0
    3454:	d0d0      	beq.n	33f8 <toggleMonLED()+0x7c>
    3456:	4a10      	ldr	r2, [pc, #64]	; (3498 <toggleMonLED()+0x11c>)
    3458:	601a      	str	r2, [r3, #0]
    345a:	e7cd      	b.n	33f8 <toggleMonLED()+0x7c>
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    345c:	2600      	movs	r6, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
    345e:	2701      	movs	r7, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3460:	f105 0020 	add.w	r0, r5, #32
    3464:	f00a f960 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3468:	4639      	mov	r1, r7
    346a:	7e28      	ldrb	r0, [r5, #24]
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    346c:	772f      	strb	r7, [r5, #28]
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    346e:	776e      	strb	r6, [r5, #29]
	ld->cnt = 0;
    3470:	62ee      	str	r6, [r5, #44]	; 0x2c
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3472:	f00b fd53 	bl	ef1c <digitalWrite>
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3476:	4631      	mov	r1, r6
    3478:	7e28      	ldrb	r0, [r5, #24]
void startLED(struct leds_s *ld, enum lMode mode) {
	// MONPORT.print("startLED: LED#"); MONPORT.print(ld->pin);
	// MONPORT.print(", mode = "); MONPORT.println(mode);
	// First stop any remaining LED state
	stopLED(ld);
	ld->mode = mode;
    347a:	776f      	strb	r7, [r5, #29]
		case LED_MODE_OFF:
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		ld->status = LED_ON;
    347c:	772e      	strb	r6, [r5, #28]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    347e:	f00b fd4d 	bl	ef1c <digitalWrite>
    3482:	7f29      	ldrb	r1, [r5, #28]
    3484:	e789      	b.n	339a <toggleMonLED()+0x1e>
    3486:	bf00      	nop
    3488:	1fff59cc 	.word	0x1fff59cc
    348c:	1fff59ec 	.word	0x1fff59ec
    3490:	01c9c37f 	.word	0x01c9c37f
    3494:	11e1a2ff 	.word	0x11e1a2ff
    3498:	005b8d7f 	.word	0x005b8d7f

0000349c <toggleBtLED()>:
	toggleCb(&leds[LED_RECORD]);
}
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
void toggleBtLED(void) {
    349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * OUT:	- none
 */
void toggleCb(struct leds_s *ld) {
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
    349e:	4c51      	ldr	r4, [pc, #324]	; (35e4 <toggleBtLED()+0x148>)
    34a0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    34a4:	2b07      	cmp	r3, #7
    34a6:	d822      	bhi.n	34ee <toggleBtLED()+0x52>
    34a8:	e8df f003 	tbb	[pc, r3]
    34ac:	61044e10 	.word	0x61044e10
    34b0:	573b0429 	.word	0x573b0429
		}
		break;
		
		case LED_MODE_ERROR:
		// MONPORT.println("Error mode: regular fast toggle");
		ld->status = !ld->status;
    34b4:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    34b8:	f081 0101 	eor.w	r1, r1, #1
    34bc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    34c0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
    34c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    34c8:	f00b bd28 	b.w	ef1c <digitalWrite>
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    34cc:	2501      	movs	r5, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    34ce:	4846      	ldr	r0, [pc, #280]	; (35e8 <toggleBtLED()+0x14c>)
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    34d0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    34d4:	f00a f928 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
    34d8:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    34da:	4629      	mov	r1, r5
    34dc:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    34e0:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    34e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	ld->cnt = 0;
    34e8:	6463      	str	r3, [r4, #68]	; 0x44
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    34ea:	f00b fd17 	bl	ef1c <digitalWrite>
    34ee:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    34f2:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
    34f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    34fa:	f00b bd0f 	b.w	ef1c <digitalWrite>
		}
		break;
		
		case LED_MODE_WARNING_LONG:
		// MONPORT.print("Warning mode: "); MONPORT.print(ld->cnt); MONPORT.println(" toggles");
		if(ld->cnt++ > 12) {
    34fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3500:	4d38      	ldr	r5, [pc, #224]	; (35e4 <toggleBtLED()+0x148>)
    3502:	1c5a      	adds	r2, r3, #1
    3504:	2b0c      	cmp	r3, #12
    3506:	6462      	str	r2, [r4, #68]	; 0x44
    3508:	d84f      	bhi.n	35aa <toggleBtLED()+0x10e>
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    350a:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    350e:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
		if(ld->cnt++ > 12) {
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    3512:	f081 0101 	eor.w	r1, r1, #1
    3516:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
    351a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    351e:	f00b bcfd 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_FAST:
		// MONPORT.println("Fast flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    3522:	4b30      	ldr	r3, [pc, #192]	; (35e4 <toggleBtLED()+0x148>)
    3524:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    3528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    352a:	2900      	cmp	r1, #0
    352c:	d038      	beq.n	35a0 <toggleBtLED()+0x104>
    352e:	b10b      	cbz	r3, 3534 <toggleBtLED()+0x98>
    3530:	4a2e      	ldr	r2, [pc, #184]	; (35ec <toggleBtLED()+0x150>)
    3532:	601a      	str	r2, [r3, #0]
			ld->timer.update(LED_BLINK_FAST_MS);
		}
		else {
			ld->timer.update(LED_BLINK_SLOW_MS);
		}
		ld->status = !ld->status;
    3534:	f081 0101 	eor.w	r1, r1, #1
    3538:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    353c:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
    3540:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3544:	f00b bcea 	b.w	ef1c <digitalWrite>
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		// MONPORT.println("LED on: no toggle!");
		ld->status = LED_ON;
    3548:	2100      	movs	r1, #0
    354a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    354e:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
void toggleMonLED(void) {
	toggleCb(&leds[LED_MONITOR]);
}
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
    3552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3556:	f00b bce1 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_SLOW:
		// MONPORT.println("Slow flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    355a:	4b22      	ldr	r3, [pc, #136]	; (35e4 <toggleBtLED()+0x148>)
    355c:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    3560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3562:	b1e9      	cbz	r1, 35a0 <toggleBtLED()+0x104>
    3564:	2b00      	cmp	r3, #0
    3566:	d0e5      	beq.n	3534 <toggleBtLED()+0x98>
    3568:	4a21      	ldr	r2, [pc, #132]	; (35f0 <toggleBtLED()+0x154>)
    356a:	601a      	str	r2, [r3, #0]
    356c:	e7e2      	b.n	3534 <toggleBtLED()+0x98>
		// MONPORT.println("Waiting mode: regular medium toggle");
		ld->status = !ld->status;
		break;
		
		case LED_MODE_WARNING_SHORT:
		if(ld->cnt++ > 2) {
    356e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3570:	4d1c      	ldr	r5, [pc, #112]	; (35e4 <toggleBtLED()+0x148>)
    3572:	1c5a      	adds	r2, r3, #1
    3574:	2b02      	cmp	r3, #2
    3576:	6462      	str	r2, [r4, #68]	; 0x44
    3578:	d9c7      	bls.n	350a <toggleBtLED()+0x6e>
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    357a:	f105 0038 	add.w	r0, r5, #56	; 0x38
    357e:	f00a f8d3 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    3582:	2201      	movs	r2, #1
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3584:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3586:	4611      	mov	r1, r2
    3588:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    358c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3590:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
	ld->cnt = 0;
    3594:	646b      	str	r3, [r5, #68]	; 0x44
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3596:	f00b fcc1 	bl	ef1c <digitalWrite>
    359a:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
    359e:	e78f      	b.n	34c0 <toggleBtLED()+0x24>
    35a0:	2b00      	cmp	r3, #0
    35a2:	d0c7      	beq.n	3534 <toggleBtLED()+0x98>
    35a4:	4a13      	ldr	r2, [pc, #76]	; (35f4 <toggleBtLED()+0x158>)
    35a6:	601a      	str	r2, [r3, #0]
    35a8:	e7c4      	b.n	3534 <toggleBtLED()+0x98>
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    35aa:	2600      	movs	r6, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
    35ac:	2701      	movs	r7, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    35ae:	f105 0038 	add.w	r0, r5, #56	; 0x38
    35b2:	f00a f8b9 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    35b6:	4639      	mov	r1, r7
    35b8:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    35bc:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    35c0:	f885 6035 	strb.w	r6, [r5, #53]	; 0x35
	ld->cnt = 0;
    35c4:	646e      	str	r6, [r5, #68]	; 0x44
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    35c6:	f00b fca9 	bl	ef1c <digitalWrite>
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    35ca:	4631      	mov	r1, r6
    35cc:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
void startLED(struct leds_s *ld, enum lMode mode) {
	// MONPORT.print("startLED: LED#"); MONPORT.print(ld->pin);
	// MONPORT.print(", mode = "); MONPORT.println(mode);
	// First stop any remaining LED state
	stopLED(ld);
	ld->mode = mode;
    35d0:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
		case LED_MODE_OFF:
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		ld->status = LED_ON;
    35d4:	f885 6034 	strb.w	r6, [r5, #52]	; 0x34
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    35d8:	f00b fca0 	bl	ef1c <digitalWrite>
    35dc:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
    35e0:	e76e      	b.n	34c0 <toggleBtLED()+0x24>
    35e2:	bf00      	nop
    35e4:	1fff59cc 	.word	0x1fff59cc
    35e8:	1fff5a04 	.word	0x1fff5a04
    35ec:	01c9c37f 	.word	0x01c9c37f
    35f0:	11e1a2ff 	.word	0x11e1a2ff
    35f4:	005b8d7f 	.word	0x005b8d7f

000035f8 <togglePeakLED()>:
	toggleCb(&leds[LED_MONITOR]);
}
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
void togglePeakLED(void) {
    35f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * OUT:	- none
 */
void toggleCb(struct leds_s *ld) {
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
    35fa:	4c51      	ldr	r4, [pc, #324]	; (3740 <togglePeakLED()+0x148>)
    35fc:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
    3600:	2b07      	cmp	r3, #7
    3602:	d822      	bhi.n	364a <togglePeakLED()+0x52>
    3604:	e8df f003 	tbb	[pc, r3]
    3608:	61044e10 	.word	0x61044e10
    360c:	573b0429 	.word	0x573b0429
		}
		break;
		
		case LED_MODE_ERROR:
		// MONPORT.println("Error mode: regular fast toggle");
		ld->status = !ld->status;
    3610:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
    3614:	f081 0101 	eor.w	r1, r1, #1
    3618:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    361c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
void togglePeakLED(void) {
	toggleCb(&leds[LED_PEAK]);
}
    3620:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3624:	f00b bc7a 	b.w	ef1c <digitalWrite>
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    3628:	2501      	movs	r5, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    362a:	4846      	ldr	r0, [pc, #280]	; (3744 <togglePeakLED()+0x14c>)
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    362c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3630:	f00a f87a 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
    3634:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3636:	4629      	mov	r1, r5
    3638:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    363c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3640:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
	ld->cnt = 0;
    3644:	65e3      	str	r3, [r4, #92]	; 0x5c
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3646:	f00b fc69 	bl	ef1c <digitalWrite>
    364a:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    364e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
void togglePeakLED(void) {
	toggleCb(&leds[LED_PEAK]);
}
    3652:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3656:	f00b bc61 	b.w	ef1c <digitalWrite>
		}
		break;
		
		case LED_MODE_WARNING_LONG:
		// MONPORT.print("Warning mode: "); MONPORT.print(ld->cnt); MONPORT.println(" toggles");
		if(ld->cnt++ > 12) {
    365a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    365c:	4d38      	ldr	r5, [pc, #224]	; (3740 <togglePeakLED()+0x148>)
    365e:	1c5a      	adds	r2, r3, #1
    3660:	2b0c      	cmp	r3, #12
    3662:	65e2      	str	r2, [r4, #92]	; 0x5c
    3664:	d84f      	bhi.n	3706 <togglePeakLED()+0x10e>
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    3666:	f895 104c 	ldrb.w	r1, [r5, #76]	; 0x4c
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    366a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
		if(ld->cnt++ > 12) {
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    366e:	f081 0101 	eor.w	r1, r1, #1
    3672:	f885 104c 	strb.w	r1, [r5, #76]	; 0x4c
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
void togglePeakLED(void) {
	toggleCb(&leds[LED_PEAK]);
}
    3676:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    367a:	f00b bc4f 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_FAST:
		// MONPORT.println("Fast flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    367e:	4b30      	ldr	r3, [pc, #192]	; (3740 <togglePeakLED()+0x148>)
    3680:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
    3684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    3686:	2900      	cmp	r1, #0
    3688:	d038      	beq.n	36fc <togglePeakLED()+0x104>
    368a:	b10b      	cbz	r3, 3690 <togglePeakLED()+0x98>
    368c:	4a2e      	ldr	r2, [pc, #184]	; (3748 <togglePeakLED()+0x150>)
    368e:	601a      	str	r2, [r3, #0]
			ld->timer.update(LED_BLINK_FAST_MS);
		}
		else {
			ld->timer.update(LED_BLINK_SLOW_MS);
		}
		ld->status = !ld->status;
    3690:	f081 0101 	eor.w	r1, r1, #1
    3694:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3698:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
void togglePeakLED(void) {
	toggleCb(&leds[LED_PEAK]);
}
    369c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    36a0:	f00b bc3c 	b.w	ef1c <digitalWrite>
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		// MONPORT.println("LED on: no toggle!");
		ld->status = LED_ON;
    36a4:	2100      	movs	r1, #0
    36a6:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    36aa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
void toggleBtLED(void) {
	toggleCb(&leds[LED_BLUETOOTH]);
}
void togglePeakLED(void) {
	toggleCb(&leds[LED_PEAK]);
}
    36ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    36b2:	f00b bc33 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_SLOW:
		// MONPORT.println("Slow flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    36b6:	4b22      	ldr	r3, [pc, #136]	; (3740 <togglePeakLED()+0x148>)
    36b8:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
    36bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    36be:	b1e9      	cbz	r1, 36fc <togglePeakLED()+0x104>
    36c0:	2b00      	cmp	r3, #0
    36c2:	d0e5      	beq.n	3690 <togglePeakLED()+0x98>
    36c4:	4a21      	ldr	r2, [pc, #132]	; (374c <togglePeakLED()+0x154>)
    36c6:	601a      	str	r2, [r3, #0]
    36c8:	e7e2      	b.n	3690 <togglePeakLED()+0x98>
		// MONPORT.println("Waiting mode: regular medium toggle");
		ld->status = !ld->status;
		break;
		
		case LED_MODE_WARNING_SHORT:
		if(ld->cnt++ > 2) {
    36ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    36cc:	4d1c      	ldr	r5, [pc, #112]	; (3740 <togglePeakLED()+0x148>)
    36ce:	1c5a      	adds	r2, r3, #1
    36d0:	2b02      	cmp	r3, #2
    36d2:	65e2      	str	r2, [r4, #92]	; 0x5c
    36d4:	d9c7      	bls.n	3666 <togglePeakLED()+0x6e>
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    36d6:	f105 0050 	add.w	r0, r5, #80	; 0x50
    36da:	f00a f825 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    36de:	2201      	movs	r2, #1
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    36e0:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    36e2:	4611      	mov	r1, r2
    36e4:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    36e8:	f885 204c 	strb.w	r2, [r5, #76]	; 0x4c
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    36ec:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
	ld->cnt = 0;
    36f0:	65eb      	str	r3, [r5, #92]	; 0x5c
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    36f2:	f00b fc13 	bl	ef1c <digitalWrite>
    36f6:	f895 104c 	ldrb.w	r1, [r5, #76]	; 0x4c
    36fa:	e78f      	b.n	361c <togglePeakLED()+0x24>
    36fc:	2b00      	cmp	r3, #0
    36fe:	d0c7      	beq.n	3690 <togglePeakLED()+0x98>
    3700:	4a13      	ldr	r2, [pc, #76]	; (3750 <togglePeakLED()+0x158>)
    3702:	601a      	str	r2, [r3, #0]
    3704:	e7c4      	b.n	3690 <togglePeakLED()+0x98>
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3706:	2600      	movs	r6, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
    3708:	2701      	movs	r7, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    370a:	f105 0050 	add.w	r0, r5, #80	; 0x50
    370e:	f00a f80b 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3712:	4639      	mov	r1, r7
    3714:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    3718:	f885 704c 	strb.w	r7, [r5, #76]	; 0x4c
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    371c:	f885 604d 	strb.w	r6, [r5, #77]	; 0x4d
	ld->cnt = 0;
    3720:	65ee      	str	r6, [r5, #92]	; 0x5c
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3722:	f00b fbfb 	bl	ef1c <digitalWrite>
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3726:	4631      	mov	r1, r6
    3728:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
void startLED(struct leds_s *ld, enum lMode mode) {
	// MONPORT.print("startLED: LED#"); MONPORT.print(ld->pin);
	// MONPORT.print(", mode = "); MONPORT.println(mode);
	// First stop any remaining LED state
	stopLED(ld);
	ld->mode = mode;
    372c:	f885 704d 	strb.w	r7, [r5, #77]	; 0x4d
		case LED_MODE_OFF:
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		ld->status = LED_ON;
    3730:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3734:	f00b fbf2 	bl	ef1c <digitalWrite>
    3738:	f895 104c 	ldrb.w	r1, [r5, #76]	; 0x4c
    373c:	e76e      	b.n	361c <togglePeakLED()+0x24>
    373e:	bf00      	nop
    3740:	1fff59cc 	.word	0x1fff59cc
    3744:	1fff5a1c 	.word	0x1fff5a1c
    3748:	01c9c37f 	.word	0x01c9c37f
    374c:	11e1a2ff 	.word	0x11e1a2ff
    3750:	005b8d7f 	.word	0x005b8d7f

00003754 <toggleRecLED()>:
 * Redirect the callback function of each LED to
 * a generic one with assignment by reference
 * IN:	- none
 * OUT:	- none
 */
void toggleRecLED(void) {
    3754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * OUT:	- none
 */
void toggleCb(struct leds_s *ld) {
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
    3756:	4c42      	ldr	r4, [pc, #264]	; (3860 <toggleRecLED()+0x10c>)
    3758:	7963      	ldrb	r3, [r4, #5]
    375a:	2b07      	cmp	r3, #7
    375c:	d81b      	bhi.n	3796 <toggleRecLED()+0x42>
    375e:	e8df f003 	tbb	[pc, r3]
    3762:	3f0d      	.short	0x3f0d
    3764:	04204f04 	.word	0x04204f04
    3768:	462f      	.short	0x462f
		}
		break;
		
		case LED_MODE_ERROR:
		// MONPORT.println("Error mode: regular fast toggle");
		ld->status = !ld->status;
    376a:	7921      	ldrb	r1, [r4, #4]
    376c:	f081 0101 	eor.w	r1, r1, #1
    3770:	7121      	strb	r1, [r4, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3772:	7820      	ldrb	r0, [r4, #0]
 * IN:	- none
 * OUT:	- none
 */
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
    3774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3778:	f00b bbd0 	b.w	ef1c <digitalWrite>
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    377c:	2501      	movs	r5, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    377e:	4839      	ldr	r0, [pc, #228]	; (3864 <toggleRecLED()+0x110>)
	// MONPORT.print("toggleCb called with led#"); MONPORT.println(ld->pin);
	// MONPORT.print("address: 0x"); MONPORT.println((unsigned long)toggleCb, HEX);
	switch(ld->mode) {
		case LED_MODE_OFF:
		// MONPORT.println("LED off: stopping timer");
		ld->status = LED_OFF;
    3780:	7125      	strb	r5, [r4, #4]
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3782:	f009 ffd1 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
    3786:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3788:	4629      	mov	r1, r5
    378a:	7820      	ldrb	r0, [r4, #0]
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    378c:	7125      	strb	r5, [r4, #4]
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    378e:	7163      	strb	r3, [r4, #5]
	ld->cnt = 0;
    3790:	6163      	str	r3, [r4, #20]
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3792:	f00b fbc3 	bl	ef1c <digitalWrite>
    3796:	7921      	ldrb	r1, [r4, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3798:	7820      	ldrb	r0, [r4, #0]
 * IN:	- none
 * OUT:	- none
 */
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
    379a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    379e:	f00b bbbd 	b.w	ef1c <digitalWrite>
		}
		break;
		
		case LED_MODE_WARNING_LONG:
		// MONPORT.print("Warning mode: "); MONPORT.print(ld->cnt); MONPORT.println(" toggles");
		if(ld->cnt++ > 12) {
    37a2:	6963      	ldr	r3, [r4, #20]
    37a4:	4d2e      	ldr	r5, [pc, #184]	; (3860 <toggleRecLED()+0x10c>)
    37a6:	1c5a      	adds	r2, r3, #1
    37a8:	2b0c      	cmp	r3, #12
    37aa:	6162      	str	r2, [r4, #20]
    37ac:	d842      	bhi.n	3834 <toggleRecLED()+0xe0>
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    37ae:	7929      	ldrb	r1, [r5, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    37b0:	7820      	ldrb	r0, [r4, #0]
		if(ld->cnt++ > 12) {
			// stopLED(ld);
			startLED(ld, LED_MODE_ON);
		}
		else {
			ld->status = !ld->status;
    37b2:	f081 0101 	eor.w	r1, r1, #1
    37b6:	7129      	strb	r1, [r5, #4]
 * IN:	- none
 * OUT:	- none
 */
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
    37b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    37bc:	f00b bbae 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_FAST:
		// MONPORT.println("Fast flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    37c0:	4b27      	ldr	r3, [pc, #156]	; (3860 <toggleRecLED()+0x10c>)
    37c2:	7921      	ldrb	r1, [r4, #4]
    37c4:	689b      	ldr	r3, [r3, #8]
    37c6:	2900      	cmp	r1, #0
    37c8:	d02f      	beq.n	382a <toggleRecLED()+0xd6>
    37ca:	b10b      	cbz	r3, 37d0 <toggleRecLED()+0x7c>
    37cc:	4a26      	ldr	r2, [pc, #152]	; (3868 <toggleRecLED()+0x114>)
    37ce:	601a      	str	r2, [r3, #0]
			ld->timer.update(LED_BLINK_FAST_MS);
		}
		else {
			ld->timer.update(LED_BLINK_SLOW_MS);
		}
		ld->status = !ld->status;
    37d0:	f081 0101 	eor.w	r1, r1, #1
    37d4:	7121      	strb	r1, [r4, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    37d6:	7820      	ldrb	r0, [r4, #0]
 * IN:	- none
 * OUT:	- none
 */
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
    37d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    37dc:	f00b bb9e 	b.w	ef1c <digitalWrite>
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		// MONPORT.println("LED on: no toggle!");
		ld->status = LED_ON;
    37e0:	2100      	movs	r1, #0
    37e2:	7121      	strb	r1, [r4, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    37e4:	7820      	ldrb	r0, [r4, #0]
 * IN:	- none
 * OUT:	- none
 */
void toggleRecLED(void) {
	toggleCb(&leds[LED_RECORD]);
}
    37e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    37ea:	f00b bb97 	b.w	ef1c <digitalWrite>
		ld->status = !ld->status;
		break;
		
		case LED_MODE_IDLE_SLOW:
		// MONPORT.println("Slow flashing mode: irregular flash toggle");
		if(ld->status == LED_ON) {
    37ee:	4b1c      	ldr	r3, [pc, #112]	; (3860 <toggleRecLED()+0x10c>)
    37f0:	7921      	ldrb	r1, [r4, #4]
    37f2:	689b      	ldr	r3, [r3, #8]
    37f4:	b1c9      	cbz	r1, 382a <toggleRecLED()+0xd6>
    37f6:	2b00      	cmp	r3, #0
    37f8:	d0ea      	beq.n	37d0 <toggleRecLED()+0x7c>
    37fa:	4a1c      	ldr	r2, [pc, #112]	; (386c <toggleRecLED()+0x118>)
    37fc:	601a      	str	r2, [r3, #0]
    37fe:	e7e7      	b.n	37d0 <toggleRecLED()+0x7c>
		// MONPORT.println("Waiting mode: regular medium toggle");
		ld->status = !ld->status;
		break;
		
		case LED_MODE_WARNING_SHORT:
		if(ld->cnt++ > 2) {
    3800:	6963      	ldr	r3, [r4, #20]
    3802:	4d17      	ldr	r5, [pc, #92]	; (3860 <toggleRecLED()+0x10c>)
    3804:	1c5a      	adds	r2, r3, #1
    3806:	2b02      	cmp	r3, #2
    3808:	6162      	str	r2, [r4, #20]
    380a:	d9d0      	bls.n	37ae <toggleRecLED()+0x5a>
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    380c:	f105 0008 	add.w	r0, r5, #8
    3810:	f009 ff8a 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    3814:	2201      	movs	r2, #1
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3816:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3818:	4611      	mov	r1, r2
    381a:	7828      	ldrb	r0, [r5, #0]
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    381c:	712a      	strb	r2, [r5, #4]
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    381e:	716b      	strb	r3, [r5, #5]
	ld->cnt = 0;
    3820:	616b      	str	r3, [r5, #20]
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3822:	f00b fb7b 	bl	ef1c <digitalWrite>
    3826:	7929      	ldrb	r1, [r5, #4]
    3828:	e7a3      	b.n	3772 <toggleRecLED()+0x1e>
    382a:	2b00      	cmp	r3, #0
    382c:	d0d0      	beq.n	37d0 <toggleRecLED()+0x7c>
    382e:	4a10      	ldr	r2, [pc, #64]	; (3870 <toggleRecLED()+0x11c>)
    3830:	601a      	str	r2, [r3, #0]
    3832:	e7cd      	b.n	37d0 <toggleRecLED()+0x7c>
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3834:	2600      	movs	r6, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
    3836:	2701      	movs	r7, #1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3838:	f105 0008 	add.w	r0, r5, #8
    383c:	f009 ff74 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3840:	4639      	mov	r1, r7
    3842:	7828      	ldrb	r0, [r5, #0]
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
    3844:	712f      	strb	r7, [r5, #4]
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3846:	716e      	strb	r6, [r5, #5]
	ld->cnt = 0;
    3848:	616e      	str	r6, [r5, #20]
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    384a:	f00b fb67 	bl	ef1c <digitalWrite>
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    384e:	4631      	mov	r1, r6
    3850:	7828      	ldrb	r0, [r5, #0]
void startLED(struct leds_s *ld, enum lMode mode) {
	// MONPORT.print("startLED: LED#"); MONPORT.print(ld->pin);
	// MONPORT.print(", mode = "); MONPORT.println(mode);
	// First stop any remaining LED state
	stopLED(ld);
	ld->mode = mode;
    3852:	716f      	strb	r7, [r5, #5]
		case LED_MODE_OFF:
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		ld->status = LED_ON;
    3854:	712e      	strb	r6, [r5, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    3856:	f00b fb61 	bl	ef1c <digitalWrite>
    385a:	7929      	ldrb	r1, [r5, #4]
    385c:	e789      	b.n	3772 <toggleRecLED()+0x1e>
    385e:	bf00      	nop
    3860:	1fff59cc 	.word	0x1fff59cc
    3864:	1fff59d4 	.word	0x1fff59d4
    3868:	01c9c37f 	.word	0x01c9c37f
    386c:	11e1a2ff 	.word	0x11e1a2ff
    3870:	005b8d7f 	.word	0x005b8d7f

00003874 <initLEDButtons()>:
 * IN:	- none
 * OUT:	- none
 */
void initLEDButtons(void) {
	// Configure the pushbutton pins
	pinMode(BUTTON_RECORD_PIN, INPUT_PULLUP);
    3874:	2102      	movs	r1, #2
 * (pin#, status, mode, cnt, timer, callback_fn)
 * ...and initialize the button inputs
 * IN:	- none
 * OUT:	- none
 */
void initLEDButtons(void) {
    3876:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Configure the pushbutton pins
	pinMode(BUTTON_RECORD_PIN, INPUT_PULLUP);
    387a:	4608      	mov	r0, r1
    387c:	f00b fb80 	bl	ef80 <pinMode>
	pinMode(BUTTON_MONITOR_PIN, INPUT_PULLUP);
    3880:	2102      	movs	r1, #2
    3882:	2010      	movs	r0, #16
    3884:	f00b fb7c 	bl	ef80 <pinMode>
	pinMode(BUTTON_BLUETOOTH_PIN, INPUT_PULLUP);
    3888:	2102      	movs	r1, #2
    388a:	2015      	movs	r0, #21
    388c:	4c2e      	ldr	r4, [pc, #184]	; (3948 <initLEDButtons()+0xd4>)
    388e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 3958 <initLEDButtons()+0xe4>
    3892:	4f2e      	ldr	r7, [pc, #184]	; (394c <initLEDButtons()+0xd8>)
				break;
			case LED_MONITOR:
				leds[i].toggle = toggleMonLED;
				break;
			case LED_BLUETOOTH:
				leds[i].toggle = toggleBtLED;
    3894:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 395c <initLEDButtons()+0xe8>
		leds[i].mode = LED_MODE_OFF;
		leds[i].timer = led_timers[i];
		leds[i].cnt = 0;
		switch(i) {
			case LED_RECORD:
				leds[i].toggle = toggleRecLED;
    3898:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3960 <initLEDButtons()+0xec>
 */
void initLEDButtons(void) {
	// Configure the pushbutton pins
	pinMode(BUTTON_RECORD_PIN, INPUT_PULLUP);
	pinMode(BUTTON_MONITOR_PIN, INPUT_PULLUP);
	pinMode(BUTTON_BLUETOOTH_PIN, INPUT_PULLUP);
    389c:	f00b fb70 	bl	ef80 <pinMode>
    38a0:	f04f 0a00 	mov.w	sl, #0
    38a4:	1f66      	subs	r6, r4, #5
    38a6:	4655      	mov	r5, sl

	for(int i = 0; i < LED_MAX_NUMBER; i++) {
		leds[i].pin = led_pins[i];
		leds[i].status = LED_OFF;
		leds[i].mode = LED_MODE_OFF;
    38a8:	4621      	mov	r1, r4
	pinMode(BUTTON_MONITOR_PIN, INPUT_PULLUP);
	pinMode(BUTTON_BLUETOOTH_PIN, INPUT_PULLUP);

	for(int i = 0; i < LED_MAX_NUMBER; i++) {
		leds[i].pin = led_pins[i];
		leds[i].status = LED_OFF;
    38aa:	f04f 0c01 	mov.w	ip, #1
		leds[i].mode = LED_MODE_OFF;
    38ae:	2000      	movs	r0, #0
		leds[i].timer = led_timers[i];
    38b0:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
	pinMode(BUTTON_RECORD_PIN, INPUT_PULLUP);
	pinMode(BUTTON_MONITOR_PIN, INPUT_PULLUP);
	pinMode(BUTTON_BLUETOOTH_PIN, INPUT_PULLUP);

	for(int i = 0; i < LED_MAX_NUMBER; i++) {
		leds[i].pin = led_pins[i];
    38b4:	f81b 2b01 	ldrb.w	r2, [fp], #1
    38b8:	f844 2c05 	str.w	r2, [r4, #-5]
		leds[i].status = LED_OFF;
    38bc:	f804 cc01 	strb.w	ip, [r4, #-1]
		leds[i].mode = LED_MODE_OFF;
    38c0:	f801 0b03 	strb.w	r0, [r1], #3
		leds[i].timer = led_timers[i];
    38c4:	f8d3 e000 	ldr.w	lr, [r3]
    38c8:	791b      	ldrb	r3, [r3, #4]
    38ca:	f8c4 e003 	str.w	lr, [r4, #3]
		leds[i].cnt = 0;
		switch(i) {
    38ce:	2d02      	cmp	r5, #2

	for(int i = 0; i < LED_MAX_NUMBER; i++) {
		leds[i].pin = led_pins[i];
		leds[i].status = LED_OFF;
		leds[i].mode = LED_MODE_OFF;
		leds[i].timer = led_timers[i];
    38d0:	710b      	strb	r3, [r1, #4]
    38d2:	44e2      	add	sl, ip
		leds[i].cnt = 0;
    38d4:	f8c4 000f 	str.w	r0, [r4, #15]
		switch(i) {
    38d8:	d015      	beq.n	3906 <initLEDButtons()+0x92>
    38da:	2d03      	cmp	r5, #3
				leds[i].toggle = togglePeakLED;
				break;
			default:
				break;
		}
		pinMode(leds[i].pin, OUTPUT);
    38dc:	4661      	mov	r1, ip
    38de:	4610      	mov	r0, r2
		leds[i].pin = led_pins[i];
		leds[i].status = LED_OFF;
		leds[i].mode = LED_MODE_OFF;
		leds[i].timer = led_timers[i];
		leds[i].cnt = 0;
		switch(i) {
    38e0:	d021      	beq.n	3926 <initLEDButtons()+0xb2>
    38e2:	4565      	cmp	r5, ip
    38e4:	d01c      	beq.n	3920 <initLEDButtons()+0xac>
			case LED_RECORD:
				leds[i].toggle = toggleRecLED;
    38e6:	f8c6 8010 	str.w	r8, [r6, #16]
				leds[i].toggle = togglePeakLED;
				break;
			default:
				break;
		}
		pinMode(leds[i].pin, OUTPUT);
    38ea:	f00b fb49 	bl	ef80 <pinMode>
		digitalWrite(leds[i].pin, leds[i].status);
    38ee:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    38f2:	f814 0c05 	ldrb.w	r0, [r4, #-5]
    38f6:	f00b fb11 	bl	ef1c <digitalWrite>
	// Configure the pushbutton pins
	pinMode(BUTTON_RECORD_PIN, INPUT_PULLUP);
	pinMode(BUTTON_MONITOR_PIN, INPUT_PULLUP);
	pinMode(BUTTON_BLUETOOTH_PIN, INPUT_PULLUP);

	for(int i = 0; i < LED_MAX_NUMBER; i++) {
    38fa:	f1ba 0f04 	cmp.w	sl, #4
    38fe:	d021      	beq.n	3944 <initLEDButtons()+0xd0>
    3900:	3501      	adds	r5, #1
    3902:	3418      	adds	r4, #24
    3904:	e7d0      	b.n	38a8 <initLEDButtons()+0x34>
				break;
			case LED_MONITOR:
				leds[i].toggle = toggleMonLED;
				break;
			case LED_BLUETOOTH:
				leds[i].toggle = toggleBtLED;
    3906:	f8c6 9040 	str.w	r9, [r6, #64]	; 0x40
				leds[i].toggle = togglePeakLED;
				break;
			default:
				break;
		}
		pinMode(leds[i].pin, OUTPUT);
    390a:	4610      	mov	r0, r2
    390c:	2101      	movs	r1, #1
    390e:	f00b fb37 	bl	ef80 <pinMode>
		digitalWrite(leds[i].pin, leds[i].status);
    3912:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    3916:	f814 0c05 	ldrb.w	r0, [r4, #-5]
    391a:	f00b faff 	bl	ef1c <digitalWrite>
    391e:	e7ef      	b.n	3900 <initLEDButtons()+0x8c>
		switch(i) {
			case LED_RECORD:
				leds[i].toggle = toggleRecLED;
				break;
			case LED_MONITOR:
				leds[i].toggle = toggleMonLED;
    3920:	4b0b      	ldr	r3, [pc, #44]	; (3950 <initLEDButtons()+0xdc>)
    3922:	62b3      	str	r3, [r6, #40]	; 0x28
				break;
    3924:	e7f1      	b.n	390a <initLEDButtons()+0x96>
			case LED_BLUETOOTH:
				leds[i].toggle = toggleBtLED;
				break;
			case LED_PEAK:
				leds[i].toggle = togglePeakLED;
    3926:	4b0b      	ldr	r3, [pc, #44]	; (3954 <initLEDButtons()+0xe0>)
				break;
			default:
				break;
		}
		pinMode(leds[i].pin, OUTPUT);
    3928:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
				break;
			case LED_BLUETOOTH:
				leds[i].toggle = toggleBtLED;
				break;
			case LED_PEAK:
				leds[i].toggle = togglePeakLED;
    392c:	65b3      	str	r3, [r6, #88]	; 0x58
				break;
			default:
				break;
		}
		pinMode(leds[i].pin, OUTPUT);
    392e:	4661      	mov	r1, ip
    3930:	f00b fb26 	bl	ef80 <pinMode>
		digitalWrite(leds[i].pin, leds[i].status);
    3934:	f896 104c 	ldrb.w	r1, [r6, #76]	; 0x4c
    3938:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
	// MONPORT.print("toggleRecLED address: 0x"); MONPORT.println(a, HEX);
	// a = (unsigned long)&toggleMonLED;
	// MONPORT.print("toggleMonLED address: 0x"); MONPORT.println(a, HEX);
	// a = (unsigned long)&toggleBtLED;
	// MONPORT.print("toggleBtLED address: 0x"); MONPORT.println(a, HEX);
}
    393c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				break;
			default:
				break;
		}
		pinMode(leds[i].pin, OUTPUT);
		digitalWrite(leds[i].pin, leds[i].status);
    3940:	f00b baec 	b.w	ef1c <digitalWrite>
    3944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3948:	1fff59d1 	.word	0x1fff59d1
    394c:	1fff598c 	.word	0x1fff598c
    3950:	0000337d 	.word	0x0000337d
    3954:	000035f9 	.word	0x000035f9
    3958:	1fff4934 	.word	0x1fff4934
    395c:	0000349d 	.word	0x0000349d
    3960:	00003755 	.word	0x00003755

00003964 <startLED(leds_s*, lMode)>:
 * set the wanted LED-mode and start the corresponding timer.
 * IN:	- pointer to LED (struct leds_s *)
 *			- LED-mode (enum lMode)
 * OUT:	- none
 */
void startLED(struct leds_s *ld, enum lMode mode) {
    3964:	b570      	push	{r4, r5, r6, lr}
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3966:	f100 0608 	add.w	r6, r0, #8
 * set the wanted LED-mode and start the corresponding timer.
 * IN:	- pointer to LED (struct leds_s *)
 *			- LED-mode (enum lMode)
 * OUT:	- none
 */
void startLED(struct leds_s *ld, enum lMode mode) {
    396a:	4604      	mov	r4, r0
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    396c:	4630      	mov	r0, r6
 * set the wanted LED-mode and start the corresponding timer.
 * IN:	- pointer to LED (struct leds_s *)
 *			- LED-mode (enum lMode)
 * OUT:	- none
 */
void startLED(struct leds_s *ld, enum lMode mode) {
    396e:	460d      	mov	r5, r1
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3970:	f009 feda 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
    3974:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
    3976:	2101      	movs	r1, #1
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3978:	7163      	strb	r3, [r4, #5]
	ld->cnt = 0;
    397a:	6163      	str	r3, [r4, #20]
	ld->status = LED_OFF;
    397c:	7121      	strb	r1, [r4, #4]
	digitalWrite(ld->pin, ld->status);
    397e:	7820      	ldrb	r0, [r4, #0]
    3980:	f00b facc 	bl	ef1c <digitalWrite>
void startLED(struct leds_s *ld, enum lMode mode) {
	// MONPORT.print("startLED: LED#"); MONPORT.print(ld->pin);
	// MONPORT.print(", mode = "); MONPORT.println(mode);
	// First stop any remaining LED state
	stopLED(ld);
	ld->mode = mode;
    3984:	7165      	strb	r5, [r4, #5]
	switch(mode) {
    3986:	2d07      	cmp	r5, #7
    3988:	d80a      	bhi.n	39a0 <startLED(leds_s*, lMode)+0x3c>
    398a:	e8df f005 	tbb	[pc, r5]
    398e:	2b1a      	.short	0x2b1a
    3990:	0904040f 	.word	0x0904040f
    3994:	0404      	.short	0x0404
	}
	bool begin(void (*funct)(), unsigned int microseconds) {
		if (microseconds == 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (F_BUS / 1000000) * microseconds - 1;
		if (cycles < 36) return false;
		return beginCycles(funct, cycles);
    3996:	4630      	mov	r0, r6
    3998:	4a16      	ldr	r2, [pc, #88]	; (39f4 <startLED(leds_s*, lMode)+0x90>)
    399a:	6921      	ldr	r1, [r4, #16]
    399c:	f009 fe76 	bl	d68c <IntervalTimer::beginCycles(void (*)(), unsigned long)>
    39a0:	7921      	ldrb	r1, [r4, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    39a2:	7820      	ldrb	r0, [r4, #0]
}
    39a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    39a8:	f00b bab8 	b.w	ef1c <digitalWrite>
    39ac:	6921      	ldr	r1, [r4, #16]
    39ae:	4a12      	ldr	r2, [pc, #72]	; (39f8 <startLED(leds_s*, lMode)+0x94>)
    39b0:	4630      	mov	r0, r6
    39b2:	f009 fe6b 	bl	d68c <IntervalTimer::beginCycles(void (*)(), unsigned long)>
    39b6:	7921      	ldrb	r1, [r4, #4]
    39b8:	7820      	ldrb	r0, [r4, #0]
}
    39ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    39be:	f00b baad 	b.w	ef1c <digitalWrite>
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    39c2:	4630      	mov	r0, r6
    39c4:	f009 feb0 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
    39c8:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
    39ca:	2101      	movs	r1, #1
    39cc:	7121      	strb	r1, [r4, #4]
	digitalWrite(ld->pin, ld->status);
    39ce:	7820      	ldrb	r0, [r4, #0]
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    39d0:	7163      	strb	r3, [r4, #5]
	ld->cnt = 0;
    39d2:	6163      	str	r3, [r4, #20]
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    39d4:	f00b faa2 	bl	ef1c <digitalWrite>
    39d8:	7921      	ldrb	r1, [r4, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    39da:	7820      	ldrb	r0, [r4, #0]
}
    39dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    39e0:	f00b ba9c 	b.w	ef1c <digitalWrite>
		case LED_MODE_OFF:
		stopLED(ld);
		break;
		
		case LED_MODE_ON:
		ld->status = LED_ON;
    39e4:	2100      	movs	r1, #0
    39e6:	7121      	strb	r1, [r4, #4]
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    39e8:	7820      	ldrb	r0, [r4, #0]
}
    39ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		break;
		
		default:
		break;
	}
	digitalWrite(ld->pin, ld->status);
    39ee:	f00b ba95 	b.w	ef1c <digitalWrite>
    39f2:	bf00      	nop
    39f4:	005b8d7f 	.word	0x005b8d7f
    39f8:	01c9c37f 	.word	0x01c9c37f

000039fc <stopLED(leds_s*)>:
 * ------------------------
 * Stop a specific LED and reset all corresponding parameters.
 * IN:	- pointer to LED (struct leds_s *)
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
    39fc:	b510      	push	{r4, lr}
    39fe:	4604      	mov	r4, r0
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
    3a00:	3008      	adds	r0, #8
    3a02:	f009 fe91 	bl	d728 <IntervalTimer::end()>
	ld->mode = LED_MODE_OFF;
    3a06:	2300      	movs	r3, #0
	ld->cnt = 0;
	ld->status = LED_OFF;
    3a08:	2101      	movs	r1, #1
 * OUT:	- none
 */
void stopLED(struct leds_s *ld) {
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
    3a0a:	7163      	strb	r3, [r4, #5]
	ld->cnt = 0;
    3a0c:	6163      	str	r3, [r4, #20]
	ld->status = LED_OFF;
    3a0e:	7121      	strb	r1, [r4, #4]
	digitalWrite(ld->pin, ld->status);
    3a10:	7820      	ldrb	r0, [r4, #0]
    3a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// MONPORT.print("StopLED: LED#"); MONPORT.println(ld->pin);
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3a16:	f00b ba81 	b.w	ef1c <digitalWrite>
    3a1a:	bf00      	nop

00003a1c <_GLOBAL__sub_I_but_rec>:
    3a1c:	b570      	push	{r4, r5, r6, lr}
 * Miscellaneous IO utilities...
 * 
 */
#include "IOutils.h"

Bounce													but_rec = Bounce(BUTTON_RECORD_PIN, BUTTON_BOUNCE_TIME_MS);
    3a1e:	2214      	movs	r2, #20
    3a20:	2102      	movs	r1, #2
    3a22:	4818      	ldr	r0, [pc, #96]	; (3a84 <_GLOBAL__sub_I_but_rec+0x68>)
Bounce 													but_mon = Bounce(BUTTON_MONITOR_PIN, BUTTON_BOUNCE_TIME_MS);
Bounce 													but_blue = Bounce(BUTTON_BLUETOOTH_PIN, BUTTON_BOUNCE_TIME_MS);

enum bCalls											button_call;

IntervalTimer										led_timers[LED_MAX_NUMBER];
    3a24:	4e18      	ldr	r6, [pc, #96]	; (3a88 <_GLOBAL__sub_I_but_rec+0x6c>)
 * Miscellaneous IO utilities...
 * 
 */
#include "IOutils.h"

Bounce													but_rec = Bounce(BUTTON_RECORD_PIN, BUTTON_BOUNCE_TIME_MS);
    3a26:	f006 f973 	bl	9d10 <Bounce::Bounce(unsigned char, unsigned long)>
Bounce 													but_mon = Bounce(BUTTON_MONITOR_PIN, BUTTON_BOUNCE_TIME_MS);
    3a2a:	2214      	movs	r2, #20
    3a2c:	2110      	movs	r1, #16
    3a2e:	4817      	ldr	r0, [pc, #92]	; (3a8c <_GLOBAL__sub_I_but_rec+0x70>)
    3a30:	f006 f96e 	bl	9d10 <Bounce::Bounce(unsigned char, unsigned long)>
Bounce 													but_blue = Bounce(BUTTON_BLUETOOTH_PIN, BUTTON_BOUNCE_TIME_MS);
    3a34:	2214      	movs	r2, #20
    3a36:	2115      	movs	r1, #21
    3a38:	4815      	ldr	r0, [pc, #84]	; (3a90 <_GLOBAL__sub_I_but_rec+0x74>)
    3a3a:	f006 f969 	bl	9d10 <Bounce::Bounce(unsigned char, unsigned long)>
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (F_BUS / 1000000.0);
public:
	IntervalTimer() {
		channel = NULL;
    3a3e:	4b15      	ldr	r3, [pc, #84]	; (3a94 <_GLOBAL__sub_I_but_rec+0x78>)

enum bCalls											button_call;

IntervalTimer										led_timers[LED_MAX_NUMBER];
    3a40:	4915      	ldr	r1, [pc, #84]	; (3a98 <_GLOBAL__sub_I_but_rec+0x7c>)
    3a42:	2400      	movs	r4, #0
		nvic_priority = 128;
    3a44:	2580      	movs	r5, #128	; 0x80
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (F_BUS / 1000000.0);
public:
	IntervalTimer() {
		channel = NULL;
    3a46:	601c      	str	r4, [r3, #0]
    3a48:	4632      	mov	r2, r6
    3a4a:	609c      	str	r4, [r3, #8]
    3a4c:	611c      	str	r4, [r3, #16]
    3a4e:	619c      	str	r4, [r3, #24]
		nvic_priority = 128;
    3a50:	711d      	strb	r5, [r3, #4]
    3a52:	731d      	strb	r5, [r3, #12]
    3a54:	751d      	strb	r5, [r3, #20]
    3a56:	771d      	strb	r5, [r3, #28]
    3a58:	4620      	mov	r0, r4
    3a5a:	f00e f97f 	bl	11d5c <__aeabi_atexit>
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (F_BUS / 1000000.0);
public:
	IntervalTimer() {
		channel = NULL;
    3a5e:	4b0f      	ldr	r3, [pc, #60]	; (3a9c <_GLOBAL__sub_I_but_rec+0x80>)
byte 														led_pins[LED_MAX_NUMBER] = { LED_RECORD_PIN, LED_MONITOR_PIN, LED_BLUETOOTH_PIN, LED_PEAK_PIN };
struct leds_s 									leds[LED_MAX_NUMBER];
    3a60:	490f      	ldr	r1, [pc, #60]	; (3aa0 <_GLOBAL__sub_I_but_rec+0x84>)
		nvic_priority = 128;
    3a62:	731d      	strb	r5, [r3, #12]
    3a64:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
    3a68:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
    3a6c:	f883 5054 	strb.w	r5, [r3, #84]	; 0x54
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (F_BUS / 1000000.0);
public:
	IntervalTimer() {
		channel = NULL;
    3a70:	609c      	str	r4, [r3, #8]
    3a72:	4632      	mov	r2, r6
    3a74:	4620      	mov	r0, r4
    3a76:	621c      	str	r4, [r3, #32]
    3a78:	639c      	str	r4, [r3, #56]	; 0x38
    3a7a:	651c      	str	r4, [r3, #80]	; 0x50
	ld->timer.end();
	ld->mode = LED_MODE_OFF;
	ld->cnt = 0;
	ld->status = LED_OFF;
	digitalWrite(ld->pin, ld->status);
    3a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

enum bCalls											button_call;

IntervalTimer										led_timers[LED_MAX_NUMBER];
byte 														led_pins[LED_MAX_NUMBER] = { LED_RECORD_PIN, LED_MONITOR_PIN, LED_BLUETOOTH_PIN, LED_PEAK_PIN };
struct leds_s 									leds[LED_MAX_NUMBER];
    3a80:	f00e b96c 	b.w	11d5c <__aeabi_atexit>
    3a84:	1fff59bc 	.word	0x1fff59bc
    3a88:	1fff4930 	.word	0x1fff4930
    3a8c:	1fff59ac 	.word	0x1fff59ac
    3a90:	1fff5a2c 	.word	0x1fff5a2c
    3a94:	1fff598c 	.word	0x1fff598c
    3a98:	00003325 	.word	0x00003325
    3a9c:	1fff59cc 	.word	0x1fff59cc
    3aa0:	00003351 	.word	0x00003351

00003aa4 <initSDcard()>:
 * ----------------
 * Initialize SPI port and mount SD card
 * IN:	- none
 * OUT:	- none
 */
void initSDcard(void) {
    3aa4:	b508      	push	{r3, lr}
  SPI.setMOSI(SDCARD_MOSI_PIN);
    3aa6:	2107      	movs	r1, #7
    3aa8:	4818      	ldr	r0, [pc, #96]	; (3b0c <initSDcard()+0x68>)
    3aaa:	f003 f961 	bl	6d70 <SPIClass::setMOSI(unsigned char)>
  SPI.setSCK(SDCARD_SCK_PIN);
    3aae:	210e      	movs	r1, #14
    3ab0:	4816      	ldr	r0, [pc, #88]	; (3b0c <initSDcard()+0x68>)
    3ab2:	f003 f9bd 	bl	6e30 <SPIClass::setSCK(unsigned char)>
  if(!(SD.begin(SDCARD_CS_PIN))) {
    3ab6:	210a      	movs	r1, #10
    3ab8:	4815      	ldr	r0, [pc, #84]	; (3b10 <initSDcard()+0x6c>)
    3aba:	f003 faf5 	bl	70a8 <SDLib::SDClass::begin(unsigned char)>
    3abe:	bb20      	cbnz	r0, 3b0a <initSDcard()+0x66>
    3ac0:	211c      	movs	r1, #28
    3ac2:	4814      	ldr	r0, [pc, #80]	; (3b14 <initSDcard()+0x70>)
    3ac4:	f00c fede 	bl	10884 <usb_serial_write>
    3ac8:	4813      	ldr	r0, [pc, #76]	; (3b18 <initSDcard()+0x74>)
    3aca:	f009 ff09 	bl	d8e0 <Print::println()>
    while(1) {
      MONPORT.println("Unable to access the SD card");
			startLED(&leds[LED_RECORD], LED_MODE_ON);
    3ace:	2101      	movs	r1, #1
    3ad0:	4812      	ldr	r0, [pc, #72]	; (3b1c <initSDcard()+0x78>)
    3ad2:	f7ff ff47 	bl	3964 <startLED(leds_s*, lMode)>
			startLED(&leds[LED_MONITOR], LED_MODE_ON);
    3ad6:	2101      	movs	r1, #1
    3ad8:	4811      	ldr	r0, [pc, #68]	; (3b20 <initSDcard()+0x7c>)
    3ada:	f7ff ff43 	bl	3964 <startLED(leds_s*, lMode)>
			startLED(&leds[LED_BLUETOOTH], LED_MODE_ON);
    3ade:	2101      	movs	r1, #1
    3ae0:	4810      	ldr	r0, [pc, #64]	; (3b24 <initSDcard()+0x80>)
    3ae2:	f7ff ff3f 	bl	3964 <startLED(leds_s*, lMode)>
      Alarm.delay(250);
    3ae6:	21fa      	movs	r1, #250	; 0xfa
    3ae8:	480f      	ldr	r0, [pc, #60]	; (3b28 <initSDcard()+0x84>)
    3aea:	f007 fced 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
			stopLED(&leds[LED_RECORD]);
    3aee:	480b      	ldr	r0, [pc, #44]	; (3b1c <initSDcard()+0x78>)
    3af0:	f7ff ff84 	bl	39fc <stopLED(leds_s*)>
			stopLED(&leds[LED_MONITOR]);
    3af4:	480a      	ldr	r0, [pc, #40]	; (3b20 <initSDcard()+0x7c>)
    3af6:	f7ff ff81 	bl	39fc <stopLED(leds_s*)>
			stopLED(&leds[LED_BLUETOOTH]);
    3afa:	480a      	ldr	r0, [pc, #40]	; (3b24 <initSDcard()+0x80>)
    3afc:	f7ff ff7e 	bl	39fc <stopLED(leds_s*)>
			Alarm.delay(250);
    3b00:	21fa      	movs	r1, #250	; 0xfa
    3b02:	4809      	ldr	r0, [pc, #36]	; (3b28 <initSDcard()+0x84>)
    3b04:	f007 fce0 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
    3b08:	e7da      	b.n	3ac0 <initSDcard()+0x1c>
    3b0a:	bd08      	pop	{r3, pc}
    3b0c:	1fff4948 	.word	0x1fff4948
    3b10:	1fff63a4 	.word	0x1fff63a4
    3b14:	00017200 	.word	0x00017200
    3b18:	1fff4b00 	.word	0x1fff4b00
    3b1c:	1fff59cc 	.word	0x1fff59cc
    3b20:	1fff59e4 	.word	0x1fff59e4
    3b24:	1fff59fc 	.word	0x1fff59fc
    3b28:	1fff668c 	.word	0x1fff668c

00003b2c <createSDpath()>:
 * Create the folder/file path of the new recording
 * out of retrieved GPS or sent remote values.
 * IN:	- time set (bool)
 * OUT:	- complete recording path (String)
 */
String createSDpath(void) {
    3b2c:	b530      	push	{r4, r5, lr}
    3b2e:	b093      	sub	sp, #76	; 0x4c
    3b30:	4605      	mov	r5, r0
	String dir_name = "";
    3b32:	4941      	ldr	r1, [pc, #260]	; (3c38 <createSDpath()+0x10c>)
    3b34:	a804      	add	r0, sp, #16
    3b36:	f009 ff31 	bl	d99c <String::String(char const*)>
	String file_name = "";
    3b3a:	493f      	ldr	r1, [pc, #252]	; (3c38 <createSDpath()+0x10c>)
    3b3c:	a808      	add	r0, sp, #32
    3b3e:	f009 ff2d 	bl	d99c <String::String(char const*)>
	String path = "";
    3b42:	4628      	mov	r0, r5
    3b44:	493c      	ldr	r1, [pc, #240]	; (3c38 <createSDpath()+0x10c>)
    3b46:	f009 ff29 	bl	d99c <String::String(char const*)>
	tmElements_t tm;
	char buf[24];
	
	if(time_source != TSOURCE_NONE) {
    3b4a:	4b3c      	ldr	r3, [pc, #240]	; (3c3c <createSDpath()+0x110>)
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	2b00      	cmp	r3, #0
    3b50:	d047      	beq.n	3be2 <createSDpath()+0xb6>
		breakTime(now(), tm);
    3b52:	f007 f8f1 	bl	ad38 <now()>
    3b56:	a902      	add	r1, sp, #8
    3b58:	f006 fecc 	bl	a8f4 <breakTime(long, tmElements_t&)>
		sprintf(buf, "%02d%02d%02d", (tm.Year-30), tm.Month, tm.Day);
    3b5c:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3b60:	f89d 100c 	ldrb.w	r1, [sp, #12]
    3b64:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3b68:	9100      	str	r1, [sp, #0]
    3b6a:	ac0c      	add	r4, sp, #48	; 0x30
    3b6c:	3a1e      	subs	r2, #30
    3b6e:	4934      	ldr	r1, [pc, #208]	; (3c40 <createSDpath()+0x114>)
    3b70:	4620      	mov	r0, r4
    3b72:	f00e ff9f 	bl	12ab4 <sprintf>
	friend StringSumHelper & operator + (const StringSumHelper &lhs, long num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, float num);
	friend StringSumHelper & operator + (const StringSumHelper &lhs, double num);
	String & concat(const String &str)		{return append(str);}
	String & concat(const char *cstr)		{return append(cstr);}
    3b76:	4621      	mov	r1, r4
    3b78:	a804      	add	r0, sp, #16
    3b7a:	f00a f8ed 	bl	dd58 <String::append(char const*)>
		dir_name.concat(buf);
		sprintf(buf, "%02d%02d%02d.wav", tm.Hour, tm.Minute, tm.Second);
    3b7e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    3b82:	9100      	str	r1, [sp, #0]
    3b84:	f89d 3009 	ldrb.w	r3, [sp, #9]
    3b88:	492e      	ldr	r1, [pc, #184]	; (3c44 <createSDpath()+0x118>)
    3b8a:	f89d 200a 	ldrb.w	r2, [sp, #10]
    3b8e:	4620      	mov	r0, r4
    3b90:	f00e ff90 	bl	12ab4 <sprintf>
    3b94:	4621      	mov	r1, r4
    3b96:	a808      	add	r0, sp, #32
    3b98:	f00a f8de 	bl	dd58 <String::append(char const*)>
		sprintf(buf, "u%02d%02d%02d", (tm.Year-30), tm.Month, tm.Day);
		dir_name.concat(buf);
		sprintf(buf, "u%02d%02d%02d.wav", tm.Hour, tm.Minute, tm.Second);
		file_name.concat(buf);
	}
	sprintf(buf, "/%s/%s", dir_name.c_str(), file_name.c_str());
    3b9c:	9b08      	ldr	r3, [sp, #32]
    3b9e:	9a04      	ldr	r2, [sp, #16]
    3ba0:	4929      	ldr	r1, [pc, #164]	; (3c48 <createSDpath()+0x11c>)
    3ba2:	4620      	mov	r0, r4
    3ba4:	f00e ff86 	bl	12ab4 <sprintf>
    3ba8:	4621      	mov	r1, r4
    3baa:	4628      	mov	r0, r5
    3bac:	f00a f8d4 	bl	dd58 <String::append(char const*)>
  File open(const char *filename, uint8_t mode = FILE_READ);
  File open(const String &filename, uint8_t mode = FILE_READ) { return open( filename.c_str(), mode ); }

  // Methods to determine if the requested file path exists.
  boolean exists(const char *filepath);
  boolean exists(const String &filepath) { return exists(filepath.c_str()); }
    3bb0:	9904      	ldr	r1, [sp, #16]
    3bb2:	4826      	ldr	r0, [pc, #152]	; (3c4c <createSDpath()+0x120>)
    3bb4:	f003 fb94 	bl	72e0 <SDLib::SDClass::exists(char const*)>
	path.concat(buf);	
	if(SD.exists(dir_name)) {
    3bb8:	b170      	cbz	r0, 3bd8 <createSDpath()+0xac>
    3bba:	6829      	ldr	r1, [r5, #0]
    3bbc:	4823      	ldr	r0, [pc, #140]	; (3c4c <createSDpath()+0x120>)
    3bbe:	f003 fb8f 	bl	72e0 <SDLib::SDClass::exists(char const*)>
		if(SD.exists(path)) {
    3bc2:	2800      	cmp	r0, #0
    3bc4:	d133      	bne.n	3c2e <createSDpath()+0x102>
 * IN:	- time set (bool)
 * OUT:	- complete recording path (String)
 */
String createSDpath(void) {
	String dir_name = "";
	String file_name = "";
    3bc6:	a808      	add	r0, sp, #32
    3bc8:	f009 fffa 	bl	dbc0 <String::~String()>
 * out of retrieved GPS or sent remote values.
 * IN:	- time set (bool)
 * OUT:	- complete recording path (String)
 */
String createSDpath(void) {
	String dir_name = "";
    3bcc:	a804      	add	r0, sp, #16
    3bce:	f009 fff7 	bl	dbc0 <String::~String()>
	}
	
	// String temppath = "il etait une fois un petit canard vert...";
	// return temppath;
	return path;
}
    3bd2:	4628      	mov	r0, r5
    3bd4:	b013      	add	sp, #76	; 0x4c
    3bd6:	bd30      	pop	{r4, r5, pc}

  // Create the requested directory heirarchy--if intermediate directories
  // do not exist they will be created.
  boolean mkdir(const char *filepath);
  boolean mkdir(const String &filepath) { return mkdir(filepath.c_str()); }
    3bd8:	9904      	ldr	r1, [sp, #16]
    3bda:	481c      	ldr	r0, [pc, #112]	; (3c4c <createSDpath()+0x120>)
    3bdc:	f003 fcce 	bl	757c <SDLib::SDClass::mkdir(char const*)>
    3be0:	e7f1      	b.n	3bc6 <createSDpath()+0x9a>
		dir_name.concat(buf);
		sprintf(buf, "%02d%02d%02d.wav", tm.Hour, tm.Minute, tm.Second);
		file_name.concat(buf);
	}
	else {
		breakTime(next_record.ts, tm);
    3be2:	4b1b      	ldr	r3, [pc, #108]	; (3c50 <createSDpath()+0x124>)
    3be4:	a902      	add	r1, sp, #8
    3be6:	6818      	ldr	r0, [r3, #0]
    3be8:	f006 fe84 	bl	a8f4 <breakTime(long, tmElements_t&)>
		sprintf(buf, "u%02d%02d%02d", (tm.Year-30), tm.Month, tm.Day);
    3bec:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3bf0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    3bf4:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3bf8:	9100      	str	r1, [sp, #0]
    3bfa:	ac0c      	add	r4, sp, #48	; 0x30
    3bfc:	3a1e      	subs	r2, #30
    3bfe:	4620      	mov	r0, r4
    3c00:	4914      	ldr	r1, [pc, #80]	; (3c54 <createSDpath()+0x128>)
    3c02:	f00e ff57 	bl	12ab4 <sprintf>
    3c06:	4621      	mov	r1, r4
    3c08:	a804      	add	r0, sp, #16
    3c0a:	f00a f8a5 	bl	dd58 <String::append(char const*)>
		dir_name.concat(buf);
		sprintf(buf, "u%02d%02d%02d.wav", tm.Hour, tm.Minute, tm.Second);
    3c0e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    3c12:	9100      	str	r1, [sp, #0]
    3c14:	f89d 3009 	ldrb.w	r3, [sp, #9]
    3c18:	f89d 200a 	ldrb.w	r2, [sp, #10]
    3c1c:	490e      	ldr	r1, [pc, #56]	; (3c58 <createSDpath()+0x12c>)
    3c1e:	4620      	mov	r0, r4
    3c20:	f00e ff48 	bl	12ab4 <sprintf>
    3c24:	4621      	mov	r1, r4
    3c26:	a808      	add	r0, sp, #32
    3c28:	f00a f896 	bl	dd58 <String::append(char const*)>
    3c2c:	e7b6      	b.n	3b9c <createSDpath()+0x70>
  
  // Delete the file.
  boolean remove(const char *filepath);
  boolean remove(const String &filepath) { return remove(filepath.c_str()); }
    3c2e:	6829      	ldr	r1, [r5, #0]
    3c30:	4806      	ldr	r0, [pc, #24]	; (3c4c <createSDpath()+0x120>)
    3c32:	f003 fde5 	bl	7800 <SDLib::SDClass::remove(char const*)>
    3c36:	e7c6      	b.n	3bc6 <createSDpath()+0x9a>
    3c38:	00017130 	.word	0x00017130
    3c3c:	1fff62f4 	.word	0x1fff62f4
    3c40:	00017220 	.word	0x00017220
    3c44:	00017230 	.word	0x00017230
    3c48:	00017268 	.word	0x00017268
    3c4c:	1fff63a4 	.word	0x1fff63a4
    3c50:	1fff5740 	.word	0x1fff5740
    3c54:	00017244 	.word	0x00017244
    3c58:	00017254 	.word	0x00017254

00003c5c <initWaveHeader()>:
 * Write all default values, that won't be changed
 * between different recordings.
 * IN:	- none
 * OUT:	- none
 */
void initWaveHeader(void) {
    3c5c:	b4f0      	push	{r4, r5, r6, r7}
	// Initialize the wave header
	strncpy(wave_header.riff,"RIFF",4);
    3c5e:	4b0c      	ldr	r3, [pc, #48]	; (3c90 <initWaveHeader()+0x34>)
    3c60:	490c      	ldr	r1, [pc, #48]	; (3c94 <initWaveHeader()+0x38>)
	strncpy(wave_header.wave,"WAVE",4);
    3c62:	4a0d      	ldr	r2, [pc, #52]	; (3c98 <initWaveHeader()+0x3c>)
	strncpy(wave_header.fmt,"fmt ",4);
    3c64:	4f0d      	ldr	r7, [pc, #52]	; (3c9c <initWaveHeader()+0x40>)
	wave_header.num_chans = WAVE_NUM_CHANNELS;
	wave_header.srate = WAVE_SAMPLING_RATE;
	wave_header.bytes_per_sec = WAVE_BYTES_PER_SEC;
	wave_header.bytes_per_samp = WAVE_BYTES_PER_SAMP;
	wave_header.bits_per_samp = WAVE_BITS_PER_SAMP;
	strncpy(wave_header.data,"data",4);
    3c66:	480e      	ldr	r0, [pc, #56]	; (3ca0 <initWaveHeader()+0x44>)
	// <- missing here the filesize
	wave_header.chunk_size = WAVE_FMT_CHUNK_SIZE;
	wave_header.format_tag = WAVE_FORMAT_PCM;
	wave_header.num_chans = WAVE_NUM_CHANNELS;
	wave_header.srate = WAVE_SAMPLING_RATE;
	wave_header.bytes_per_sec = WAVE_BYTES_PER_SEC;
    3c68:	4d0e      	ldr	r5, [pc, #56]	; (3ca4 <initWaveHeader()+0x48>)
 * IN:	- none
 * OUT:	- none
 */
void initWaveHeader(void) {
	// Initialize the wave header
	strncpy(wave_header.riff,"RIFF",4);
    3c6a:	6019      	str	r1, [r3, #0]
	strncpy(wave_header.fmt,"fmt ",4);
	// <- missing here the filesize
	wave_header.chunk_size = WAVE_FMT_CHUNK_SIZE;
	wave_header.format_tag = WAVE_FORMAT_PCM;
	wave_header.num_chans = WAVE_NUM_CHANNELS;
	wave_header.srate = WAVE_SAMPLING_RATE;
    3c6c:	f64a 4644 	movw	r6, #44100	; 0xac44
	wave_header.bytes_per_sec = WAVE_BYTES_PER_SEC;
	wave_header.bytes_per_samp = WAVE_BYTES_PER_SAMP;
    3c70:	2402      	movs	r4, #2
	// Initialize the wave header
	strncpy(wave_header.riff,"RIFF",4);
	strncpy(wave_header.wave,"WAVE",4);
	strncpy(wave_header.fmt,"fmt ",4);
	// <- missing here the filesize
	wave_header.chunk_size = WAVE_FMT_CHUNK_SIZE;
    3c72:	2110      	movs	r1, #16
 * OUT:	- none
 */
void initWaveHeader(void) {
	// Initialize the wave header
	strncpy(wave_header.riff,"RIFF",4);
	strncpy(wave_header.wave,"WAVE",4);
    3c74:	609a      	str	r2, [r3, #8]
	strncpy(wave_header.fmt,"fmt ",4);
    3c76:	60df      	str	r7, [r3, #12]
	// <- missing here the filesize
	wave_header.chunk_size = WAVE_FMT_CHUNK_SIZE;
	wave_header.format_tag = WAVE_FORMAT_PCM;
    3c78:	2201      	movs	r2, #1
	wave_header.num_chans = WAVE_NUM_CHANNELS;
	wave_header.srate = WAVE_SAMPLING_RATE;
	wave_header.bytes_per_sec = WAVE_BYTES_PER_SEC;
	wave_header.bytes_per_samp = WAVE_BYTES_PER_SAMP;
	wave_header.bits_per_samp = WAVE_BITS_PER_SAMP;
	strncpy(wave_header.data,"data",4);
    3c7a:	6258      	str	r0, [r3, #36]	; 0x24
	strncpy(wave_header.fmt,"fmt ",4);
	// <- missing here the filesize
	wave_header.chunk_size = WAVE_FMT_CHUNK_SIZE;
	wave_header.format_tag = WAVE_FORMAT_PCM;
	wave_header.num_chans = WAVE_NUM_CHANNELS;
	wave_header.srate = WAVE_SAMPLING_RATE;
    3c7c:	619e      	str	r6, [r3, #24]
	wave_header.bytes_per_sec = WAVE_BYTES_PER_SEC;
    3c7e:	61dd      	str	r5, [r3, #28]
	wave_header.bytes_per_samp = WAVE_BYTES_PER_SAMP;
    3c80:	841c      	strh	r4, [r3, #32]
	// Initialize the wave header
	strncpy(wave_header.riff,"RIFF",4);
	strncpy(wave_header.wave,"WAVE",4);
	strncpy(wave_header.fmt,"fmt ",4);
	// <- missing here the filesize
	wave_header.chunk_size = WAVE_FMT_CHUNK_SIZE;
    3c82:	6119      	str	r1, [r3, #16]
	wave_header.format_tag = WAVE_FORMAT_PCM;
	wave_header.num_chans = WAVE_NUM_CHANNELS;
	wave_header.srate = WAVE_SAMPLING_RATE;
	wave_header.bytes_per_sec = WAVE_BYTES_PER_SEC;
	wave_header.bytes_per_samp = WAVE_BYTES_PER_SAMP;
	wave_header.bits_per_samp = WAVE_BITS_PER_SAMP;
    3c84:	8459      	strh	r1, [r3, #34]	; 0x22
	strncpy(wave_header.riff,"RIFF",4);
	strncpy(wave_header.wave,"WAVE",4);
	strncpy(wave_header.fmt,"fmt ",4);
	// <- missing here the filesize
	wave_header.chunk_size = WAVE_FMT_CHUNK_SIZE;
	wave_header.format_tag = WAVE_FORMAT_PCM;
    3c86:	829a      	strh	r2, [r3, #20]
	wave_header.num_chans = WAVE_NUM_CHANNELS;
    3c88:	82da      	strh	r2, [r3, #22]
	wave_header.bytes_per_sec = WAVE_BYTES_PER_SEC;
	wave_header.bytes_per_samp = WAVE_BYTES_PER_SAMP;
	wave_header.bits_per_samp = WAVE_BITS_PER_SAMP;
	strncpy(wave_header.data,"data",4);
	// <- missing here the data size
}
    3c8a:	bcf0      	pop	{r4, r5, r6, r7}
    3c8c:	4770      	bx	lr
    3c8e:	bf00      	nop
    3c90:	1fff5a64 	.word	0x1fff5a64
    3c94:	46464952 	.word	0x46464952
    3c98:	45564157 	.word	0x45564157
    3c9c:	20746d66 	.word	0x20746d66
    3ca0:	61746164 	.word	0x61746164
    3ca4:	000ac440 	.word	0x000ac440

00003ca8 <_GLOBAL__sub_I_wave_header>:
  unsigned long  dlength;       /* data length in bytes (filelength - 44)  					*/
};
struct waveHd									wave_header;

// SD card file handle
File frec;
    3ca8:	4801      	ldr	r0, [pc, #4]	; (3cb0 <_GLOBAL__sub_I_wave_header+0x8>)
    3caa:	f003 b9c7 	b.w	703c <SDLib::File::File()>
    3cae:	bf00      	nop
    3cb0:	1fff5a44 	.word	0x1fff5a44

00003cb4 <writeWaveHeader(String, unsigned long)>:
 * when recording stop has been called
 * IN:	- file path (String)
 *			- number of recorded bytes (unsigned long)
 * OUT:	- none
 */
void writeWaveHeader(String path, unsigned long dlen) {
    3cb4:	b570      	push	{r4, r5, r6, lr}
	File fh;
  wave_header.dlength = dlen;
    3cb6:	4d1c      	ldr	r5, [pc, #112]	; (3d28 <writeWaveHeader(String, unsigned long)+0x74>)
 * when recording stop has been called
 * IN:	- file path (String)
 *			- number of recorded bytes (unsigned long)
 * OUT:	- none
 */
void writeWaveHeader(String path, unsigned long dlen) {
    3cb8:	b090      	sub	sp, #64	; 0x40
    3cba:	4606      	mov	r6, r0
    3cbc:	460c      	mov	r4, r1
	File fh;
    3cbe:	4668      	mov	r0, sp
    3cc0:	f003 f9bc 	bl	703c <SDLib::File::File()>

  // Open the specified file/directory with the supplied mode (e.g. read or
  // write, etc). Returns a File object for interacting with the file.
  // Note that currently only one file can be open at a time.
  File open(const char *filename, uint8_t mode = FILE_READ);
  File open(const String &filename, uint8_t mode = FILE_READ) { return open( filename.c_str(), mode ); }
    3cc4:	2302      	movs	r3, #2
    3cc6:	6832      	ldr	r2, [r6, #0]
  wave_header.dlength = dlen;
    3cc8:	62ac      	str	r4, [r5, #40]	; 0x28
    3cca:	a808      	add	r0, sp, #32
    3ccc:	4917      	ldr	r1, [pc, #92]	; (3d2c <writeWaveHeader(String, unsigned long)+0x78>)
  wave_header.flength = dlen + 36;
    3cce:	3424      	adds	r4, #36	; 0x24
    3cd0:	606c      	str	r4, [r5, #4]
    3cd2:	f003 fa91 	bl	71f8 <SDLib::SDClass::open(char const*, unsigned char)>
    3cd6:	ab10      	add	r3, sp, #64	; 0x40
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    3cd8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    3cdc:	f853 0d13 	ldr.w	r0, [r3, #-19]!
    3ce0:	f8cd 000d 	str.w	r0, [sp, #13]
    3ce4:	685c      	ldr	r4, [r3, #4]
    3ce6:	689a      	ldr	r2, [r3, #8]
    3ce8:	7b1b      	ldrb	r3, [r3, #12]
    3cea:	f8cd 4011 	str.w	r4, [sp, #17]
    3cee:	f8cd 2015 	str.w	r2, [sp, #21]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
    3cf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3cf4:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
    3cf8:	f88d 3019 	strb.w	r3, [sp, #25]
    3cfc:	f88d 1004 	strb.w	r1, [sp, #4]
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
    3d00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3d02:	9307      	str	r3, [sp, #28]
  
  fh = SD.open(path, O_WRITE);
  fh.seek(0);
    3d04:	4668      	mov	r0, sp
    3d06:	2100      	movs	r1, #0
    3d08:	f88d 200c 	strb.w	r2, [sp, #12]
    3d0c:	9402      	str	r4, [sp, #8]
    3d0e:	f003 f9ab 	bl	7068 <SDLib::File::seek(unsigned long)>
  fh.write((byte*)&wave_header, 44);
    3d12:	4629      	mov	r1, r5
    3d14:	222c      	movs	r2, #44	; 0x2c
    3d16:	4668      	mov	r0, sp
    3d18:	f003 f8f2 	bl	6f00 <SDLib::File::write(unsigned char const*, unsigned int)>
  fh.close();
    3d1c:	4668      	mov	r0, sp
    3d1e:	f003 f9ad 	bl	707c <SDLib::File::close()>
}
    3d22:	b010      	add	sp, #64	; 0x40
    3d24:	bd70      	pop	{r4, r5, r6, pc}
    3d26:	bf00      	nop
    3d28:	1fff5a64 	.word	0x1fff5a64
    3d2c:	1fff63a4 	.word	0x1fff63a4

00003d30 <AudioConnection::~AudioConnection()>:
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
	friend class AudioStream;
	~AudioConnection() {
    3d30:	b510      	push	{r4, lr}
    3d32:	4604      	mov	r4, r0
		disconnect();
    3d34:	f009 f94e 	bl	cfd4 <AudioConnection::disconnect()>
	}
    3d38:	4620      	mov	r0, r4
    3d3a:	bd10      	pop	{r4, pc}

00003d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    3d3c:	2300      	movs	r3, #0
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
    3d3e:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    3d40:	4c11      	ldr	r4, [pc, #68]	; (3d88 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x4c>)
    3d42:	7241      	strb	r1, [r0, #9]
    3d44:	6102      	str	r2, [r0, #16]
    3d46:	6004      	str	r4, [r0, #0]
			active = false;
    3d48:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    3d4a:	60c3      	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
    3d4c:	b141      	cbz	r1, 3d60 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				inputQueue[i] = NULL;
    3d4e:	4619      	mov	r1, r3
    3d50:	e000      	b.n	3d54 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x18>
    3d52:	6902      	ldr	r2, [r0, #16]
    3d54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    3d58:	7a42      	ldrb	r2, [r0, #9]
    3d5a:	3301      	adds	r3, #1
    3d5c:	429a      	cmp	r2, r3
    3d5e:	dcf8      	bgt.n	3d52 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x16>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    3d60:	4b0a      	ldr	r3, [pc, #40]	; (3d8c <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x50>)
    3d62:	681a      	ldr	r2, [r3, #0]
    3d64:	b90a      	cbnz	r2, 3d6a <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
    3d66:	e00c      	b.n	3d82 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x46>
    3d68:	461a      	mov	r2, r3
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    3d6a:	6953      	ldr	r3, [r2, #20]
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d1fb      	bne.n	3d68 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2c>
				p->next_update = this;
    3d70:	6150      	str	r0, [r2, #20]
			}
			next_update = NULL;
    3d72:	2300      	movs	r3, #0
    3d74:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    3d76:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    3d78:	80c3      	strh	r3, [r0, #6]
			numConnections = 0;
    3d7a:	7283      	strb	r3, [r0, #10]
		}
    3d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d80:	4770      	bx	lr
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    3d82:	6018      	str	r0, [r3, #0]
    3d84:	e7f5      	b.n	3d72 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x36>
    3d86:	bf00      	nop
    3d88:	00017278 	.word	0x00017278
    3d8c:	1fff6754 	.word	0x1fff6754

00003d90 <prepareRecording(bool)>:
 * create the file path according to it, save all record information
 * and start the record timer.
 * IN:	- sync with GPS (bool)
 * OUT:	- none
 */
void prepareRecording(bool sync) {
    3d90:	b510      	push	{r4, lr}
	bool gps_fix = true;
	
	startLED(&leds[LED_RECORD], LED_MODE_ON);
    3d92:	2101      	movs	r1, #1
 * create the file path according to it, save all record information
 * and start the record timer.
 * IN:	- sync with GPS (bool)
 * OUT:	- none
 */
void prepareRecording(bool sync) {
    3d94:	4604      	mov	r4, r0
    3d96:	b086      	sub	sp, #24
	bool gps_fix = true;
	
	startLED(&leds[LED_RECORD], LED_MODE_ON);
    3d98:	4835      	ldr	r0, [pc, #212]	; (3e70 <prepareRecording(bool)+0xe0>)
    3d9a:	f7ff fde3 	bl	3964 <startLED(leds_s*, lMode)>
	if(sync) {
    3d9e:	2c00      	cmp	r4, #0
    3da0:	d13f      	bne.n	3e22 <prepareRecording(bool)+0x92>
    3da2:	4c34      	ldr	r4, [pc, #208]	; (3e74 <prepareRecording(bool)+0xe4>)
			startLED(&leds[LED_RECORD], LED_MODE_ON);
		}
		next_record.ts = now();
		MONPORT.printf("Next record: %ld\n", next_record.ts);
	}
	rec_path = createSDpath();
    3da4:	a802      	add	r0, sp, #8
    3da6:	f7ff fec1 	bl	3b2c <createSDpath()>
    3daa:	a902      	add	r1, sp, #8
    3dac:	4832      	ldr	r0, [pc, #200]	; (3e78 <prepareRecording(bool)+0xe8>)
    3dae:	f009 ff3f 	bl	dc30 <String::operator=(String&&)>
    3db2:	a802      	add	r0, sp, #8
    3db4:	f009 ff04 	bl	dbc0 <String::~String()>
	setRecInfos(&next_record, rec_path);
    3db8:	492f      	ldr	r1, [pc, #188]	; (3e78 <prepareRecording(bool)+0xe8>)
    3dba:	a802      	add	r0, sp, #8
    3dbc:	f009 fe1a 	bl	d9f4 <String::String(String const&)>
 * IN:	- pointer to a record struct (struct recInfos*)
 *			- recording path name (String)
 * OUT:	- none
 */
void setRecInfos(struct recInfo* rec, String path) {
	rec->dur.Second = rec_window.length.Second;
    3dc0:	4b2e      	ldr	r3, [pc, #184]	; (3e7c <prepareRecording(bool)+0xec>)
	rec->dur.Minute = rec_window.length.Minute;
	rec->dur.Hour = rec_window.length.Hour;
	rec->path.remove(0);
    3dc2:	482f      	ldr	r0, [pc, #188]	; (3e80 <prepareRecording(bool)+0xf0>)
 * IN:	- pointer to a record struct (struct recInfos*)
 *			- recording path name (String)
 * OUT:	- none
 */
void setRecInfos(struct recInfo* rec, String path) {
	rec->dur.Second = rec_window.length.Second;
    3dc4:	7819      	ldrb	r1, [r3, #0]
	rec->dur.Minute = rec_window.length.Minute;
    3dc6:	785a      	ldrb	r2, [r3, #1]
 * IN:	- pointer to a record struct (struct recInfos*)
 *			- recording path name (String)
 * OUT:	- none
 */
void setRecInfos(struct recInfo* rec, String path) {
	rec->dur.Second = rec_window.length.Second;
    3dc8:	7121      	strb	r1, [r4, #4]
	rec->dur.Minute = rec_window.length.Minute;
	rec->dur.Hour = rec_window.length.Hour;
    3dca:	789b      	ldrb	r3, [r3, #2]
 *			- recording path name (String)
 * OUT:	- none
 */
void setRecInfos(struct recInfo* rec, String path) {
	rec->dur.Second = rec_window.length.Second;
	rec->dur.Minute = rec_window.length.Minute;
    3dcc:	7162      	strb	r2, [r4, #5]
	rec->dur.Hour = rec_window.length.Hour;
	rec->path.remove(0);
    3dce:	2100      	movs	r1, #0
 * OUT:	- none
 */
void setRecInfos(struct recInfo* rec, String path) {
	rec->dur.Second = rec_window.length.Second;
	rec->dur.Minute = rec_window.length.Minute;
	rec->dur.Hour = rec_window.length.Hour;
    3dd0:	71a3      	strb	r3, [r4, #6]
	rec->path.remove(0);
    3dd2:	f00a faad 	bl	e330 <String::remove(unsigned int)>
    3dd6:	9902      	ldr	r1, [sp, #8]
    3dd8:	4829      	ldr	r0, [pc, #164]	; (3e80 <prepareRecording(bool)+0xf0>)
    3dda:	f009 ffbd 	bl	dd58 <String::append(char const*)>
	rec->path.concat(path.c_str());
	rec->t_set = (bool)rec->ts;
    3dde:	6823      	ldr	r3, [r4, #0]
    3de0:	3300      	adds	r3, #0
    3de2:	bf18      	it	ne
    3de4:	2301      	movne	r3, #1
		}
		next_record.ts = now();
		MONPORT.printf("Next record: %ld\n", next_record.ts);
	}
	rec_path = createSDpath();
	setRecInfos(&next_record, rec_path);
    3de6:	a802      	add	r0, sp, #8
	rec->dur.Second = rec_window.length.Second;
	rec->dur.Minute = rec_window.length.Minute;
	rec->dur.Hour = rec_window.length.Hour;
	rec->path.remove(0);
	rec->path.concat(path.c_str());
	rec->t_set = (bool)rec->ts;
    3de8:	72e3      	strb	r3, [r4, #11]
		}
		next_record.ts = now();
		MONPORT.printf("Next record: %ld\n", next_record.ts);
	}
	rec_path = createSDpath();
	setRecInfos(&next_record, rec_path);
    3dea:	f009 fee9 	bl	dbc0 <String::~String()>
	unsigned long dur = next_record.dur.Second + 
    3dee:	7921      	ldrb	r1, [r4, #4]
										(next_record.dur.Minute * SECS_PER_MIN) + 
    3df0:	7960      	ldrb	r0, [r4, #5]
    3df2:	79a3      	ldrb	r3, [r4, #6]
    3df4:	223c      	movs	r2, #60	; 0x3c
    3df6:	fb12 1100 	smlabb	r1, r2, r0, r1
    3dfa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    3dfe:	fb02 1103 	mla	r1, r2, r3, r1
    return create(value, onTickHandler, false, dtWeeklyAlarm);
  }

  // trigger once after the given number of seconds
  AlarmID_t timerOnce(time_t value, OnTick_t onTickHandler) {
    if (value <= 0) return dtINVALID_ALARM_ID;
    3e02:	b149      	cbz	r1, 3e18 <prepareRecording(bool)+0x88>
    return create(value, onTickHandler, true, dtTimer);
    3e04:	2301      	movs	r3, #1
    3e06:	9300      	str	r3, [sp, #0]
    3e08:	4a1e      	ldr	r2, [pc, #120]	; (3e84 <prepareRecording(bool)+0xf4>)
    3e0a:	481f      	ldr	r0, [pc, #124]	; (3e88 <prepareRecording(bool)+0xf8>)
    3e0c:	f007 fbc8 	bl	b5a0 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)>
										(next_record.dur.Hour * SECS_PER_HOUR);
	alarm_rec_id = Alarm.timerOnce(dur, timerRecDone);	
    3e10:	4b1e      	ldr	r3, [pc, #120]	; (3e8c <prepareRecording(bool)+0xfc>)
    3e12:	6018      	str	r0, [r3, #0]
}
    3e14:	b006      	add	sp, #24
    3e16:	bd10      	pop	{r4, pc}
	rec_path = createSDpath();
	setRecInfos(&next_record, rec_path);
	unsigned long dur = next_record.dur.Second + 
										(next_record.dur.Minute * SECS_PER_MIN) + 
										(next_record.dur.Hour * SECS_PER_HOUR);
	alarm_rec_id = Alarm.timerOnce(dur, timerRecDone);	
    3e18:	4b1c      	ldr	r3, [pc, #112]	; (3e8c <prepareRecording(bool)+0xfc>)
    return create(value, onTickHandler, false, dtWeeklyAlarm);
  }

  // trigger once after the given number of seconds
  AlarmID_t timerOnce(time_t value, OnTick_t onTickHandler) {
    if (value <= 0) return dtINVALID_ALARM_ID;
    3e1a:	20ff      	movs	r0, #255	; 0xff
    3e1c:	6018      	str	r0, [r3, #0]
}
    3e1e:	b006      	add	sp, #24
    3e20:	bd10      	pop	{r4, pc}
void prepareRecording(bool sync) {
	bool gps_fix = true;
	
	startLED(&leds[LED_RECORD], LED_MODE_ON);
	if(sync) {
		gpsPowerOn();
    3e22:	f000 fd61 	bl	48e8 <gpsPowerOn()>
		Alarm.delay(0);
    3e26:	2100      	movs	r1, #0
    3e28:	4817      	ldr	r0, [pc, #92]	; (3e88 <prepareRecording(bool)+0xf8>)
    3e2a:	f007 fb4d 	bl	b4c8 <TimeAlarmsClass::delay(unsigned long)>
		startLED(&leds[LED_RECORD], LED_MODE_WAITING);
    3e2e:	2102      	movs	r1, #2
    3e30:	480f      	ldr	r0, [pc, #60]	; (3e70 <prepareRecording(bool)+0xe0>)
    3e32:	f7ff fd97 	bl	3964 <startLED(leds_s*, lMode)>
		gps_fix = gpsGetData();
    3e36:	f000 fd5f 	bl	48f8 <gpsGetData()>
    3e3a:	4604      	mov	r4, r0
		gpsPowerOff();
    3e3c:	f000 fd58 	bl	48f0 <gpsPowerOff()>
		if(!gps_fix) {
    3e40:	b18c      	cbz	r4, 3e66 <prepareRecording(bool)+0xd6>
			startLED(&leds[LED_RECORD], LED_MODE_WARNING_LONG);
		}
		else {
			setCurTime(0, TSOURCE_GPS);
    3e42:	2102      	movs	r1, #2
    3e44:	2000      	movs	r0, #0
    3e46:	f000 fde3 	bl	4a10 <setCurTime(long, tSources)>
			startLED(&leds[LED_RECORD], LED_MODE_ON);
    3e4a:	2101      	movs	r1, #1
    3e4c:	4808      	ldr	r0, [pc, #32]	; (3e70 <prepareRecording(bool)+0xe0>)
    3e4e:	f7ff fd89 	bl	3964 <startLED(leds_s*, lMode)>
		}
		next_record.ts = now();
    3e52:	f006 ff71 	bl	ad38 <now()>
    3e56:	4c07      	ldr	r4, [pc, #28]	; (3e74 <prepareRecording(bool)+0xe4>)
		MONPORT.printf("Next record: %ld\n", next_record.ts);
    3e58:	490d      	ldr	r1, [pc, #52]	; (3e90 <prepareRecording(bool)+0x100>)
		}
		else {
			setCurTime(0, TSOURCE_GPS);
			startLED(&leds[LED_RECORD], LED_MODE_ON);
		}
		next_record.ts = now();
    3e5a:	4602      	mov	r2, r0
		MONPORT.printf("Next record: %ld\n", next_record.ts);
    3e5c:	480d      	ldr	r0, [pc, #52]	; (3e94 <prepareRecording(bool)+0x104>)
		}
		else {
			setCurTime(0, TSOURCE_GPS);
			startLED(&leds[LED_RECORD], LED_MODE_ON);
		}
		next_record.ts = now();
    3e5e:	6022      	str	r2, [r4, #0]
		MONPORT.printf("Next record: %ld\n", next_record.ts);
    3e60:	f009 fd56 	bl	d910 <Print::printf(char const*, ...)>
    3e64:	e79e      	b.n	3da4 <prepareRecording(bool)+0x14>
		Alarm.delay(0);
		startLED(&leds[LED_RECORD], LED_MODE_WAITING);
		gps_fix = gpsGetData();
		gpsPowerOff();
		if(!gps_fix) {
			startLED(&leds[LED_RECORD], LED_MODE_WARNING_LONG);
    3e66:	2104      	movs	r1, #4
    3e68:	4801      	ldr	r0, [pc, #4]	; (3e70 <prepareRecording(bool)+0xe0>)
    3e6a:	f7ff fd7b 	bl	3964 <startLED(leds_s*, lMode)>
    3e6e:	e7f0      	b.n	3e52 <prepareRecording(bool)+0xc2>
    3e70:	1fff59cc 	.word	0x1fff59cc
    3e74:	1fff5740 	.word	0x1fff5740
    3e78:	1fff5e1c 	.word	0x1fff5e1c
    3e7c:	1fff57e0 	.word	0x1fff57e0
    3e80:	1fff574c 	.word	0x1fff574c
    3e84:	00004abd 	.word	0x00004abd
    3e88:	1fff668c 	.word	0x1fff668c
    3e8c:	1fff62e8 	.word	0x1fff62e8
    3e90:	0001727c 	.word	0x0001727c
    3e94:	1fff4b00 	.word	0x1fff4b00

00003e98 <startRecording(String)>:
 * Open the file path and start the recording queue.
 * IN:	- file path (String)
 * OUT:	- none
 *
 */
void startRecording(String path) {
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e9a:	b089      	sub	sp, #36	; 0x24

  // Open the specified file/directory with the supplied mode (e.g. read or
  // write, etc). Returns a File object for interacting with the file.
  // Note that currently only one file can be open at a time.
  File open(const char *filename, uint8_t mode = FILE_READ);
  File open(const String &filename, uint8_t mode = FILE_READ) { return open( filename.c_str(), mode ); }
    3e9c:	6802      	ldr	r2, [r0, #0]
    3e9e:	491c      	ldr	r1, [pc, #112]	; (3f10 <startRecording(String)+0x78>)
    3ea0:	2317      	movs	r3, #23
    3ea2:	4668      	mov	r0, sp
    3ea4:	f003 f9a8 	bl	71f8 <SDLib::SDClass::open(char const*, unsigned char)>
    3ea8:	aa08      	add	r2, sp, #32
    3eaa:	4b1a      	ldr	r3, [pc, #104]	; (3f14 <startRecording(String)+0x7c>)
    3eac:	f852 1d13 	ldr.w	r1, [r2, #-19]!
    3eb0:	9c02      	ldr	r4, [sp, #8]
    3eb2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3eb6:	6855      	ldr	r5, [r2, #4]
    3eb8:	f89d 700c 	ldrb.w	r7, [sp, #12]
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
    3ebc:	9e07      	ldr	r6, [sp, #28]
    3ebe:	609c      	str	r4, [r3, #8]
    3ec0:	6894      	ldr	r4, [r2, #8]
    3ec2:	7b12      	ldrb	r2, [r2, #12]
    3ec4:	7118      	strb	r0, [r3, #4]
    3ec6:	f8c3 100d 	str.w	r1, [r3, #13]
  frec = SD.open(path, FILE_WRITE);
  if(frec) {
    3eca:	4618      	mov	r0, r3
    3ecc:	731f      	strb	r7, [r3, #12]
    3ece:	61de      	str	r6, [r3, #28]
    3ed0:	f8c3 5011 	str.w	r5, [r3, #17]
    3ed4:	f8c3 4015 	str.w	r4, [r3, #21]
    3ed8:	765a      	strb	r2, [r3, #25]
    3eda:	f003 f8dd 	bl	7098 <SDLib::File::operator bool()>
    3ede:	b958      	cbnz	r0, 3ef8 <startRecording(String)+0x60>
    3ee0:	2112      	movs	r1, #18
    3ee2:	480d      	ldr	r0, [pc, #52]	; (3f18 <startRecording(String)+0x80>)
    3ee4:	f00c fcce 	bl	10884 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3ee8:	480c      	ldr	r0, [pc, #48]	; (3f1c <startRecording(String)+0x84>)
    3eea:	f009 fcf9 	bl	d8e0 <Print::println()>
    queueSdc.begin();
    tot_rec_bytes = 0;
  }
  else {
    MONPORT.println("file opening error");
		working_state.rec_state = RECSTATE_REQ_OFF;
    3eee:	4b0c      	ldr	r3, [pc, #48]	; (3f20 <startRecording(String)+0x88>)
    3ef0:	2208      	movs	r2, #8
    3ef2:	701a      	strb	r2, [r3, #0]
    // while(1);
  }
}
    3ef4:	b009      	add	sp, #36	; 0x24
    3ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
	void begin(void) {
		clear();
    3ef8:	4c0a      	ldr	r4, [pc, #40]	; (3f24 <startRecording(String)+0x8c>)
    3efa:	4620      	mov	r0, r4
    3efc:	f002 fde8 	bl	6ad0 <AudioRecordQueue::clear()>
 */
void startRecording(String path) {
  frec = SD.open(path, FILE_WRITE);
  if(frec) {
    queueSdc.begin();
    tot_rec_bytes = 0;
    3f00:	4b09      	ldr	r3, [pc, #36]	; (3f28 <startRecording(String)+0x90>)
		enabled = 1;
    3f02:	2101      	movs	r1, #1
    3f04:	2200      	movs	r2, #0
    3f06:	f884 10f6 	strb.w	r1, [r4, #246]	; 0xf6
    3f0a:	601a      	str	r2, [r3, #0]
  else {
    MONPORT.println("file opening error");
		working_state.rec_state = RECSTATE_REQ_OFF;
    // while(1);
  }
}
    3f0c:	b009      	add	sp, #36	; 0x24
    3f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f10:	1fff63a4 	.word	0x1fff63a4
    3f14:	1fff5a44 	.word	0x1fff5a44
    3f18:	00017290 	.word	0x00017290
    3f1c:	1fff4b00 	.word	0x1fff4b00
    3f20:	1fff5820 	.word	0x1fff5820
    3f24:	1fff60f0 	.word	0x1fff60f0
    3f28:	1fff5a40 	.word	0x1fff5a40

00003f2c <pauseRecording()>:
 * --------------------
 * Prepare the next record informations.
 * IN:	- none
 * OUT:	- none
 */
void pauseRecording(void) {
    3f2c:	b570      	push	{r4, r5, r6, lr}
    3f2e:	4c1a      	ldr	r4, [pc, #104]	; (3f98 <pauseRecording()+0x6c>)
    3f30:	4d1a      	ldr	r5, [pc, #104]	; (3f9c <pauseRecording()+0x70>)
    3f32:	7ae3      	ldrb	r3, [r4, #11]
    3f34:	72eb      	strb	r3, [r5, #11]
    3f36:	4622      	mov	r2, r4
    3f38:	462b      	mov	r3, r5
    3f3a:	f852 1b04 	ldr.w	r1, [r2], #4
    3f3e:	f843 1b04 	str.w	r1, [r3], #4
    3f42:	e892 0003 	ldmia.w	r2, {r0, r1}
    3f46:	3304      	adds	r3, #4
    3f48:	0c0a      	lsrs	r2, r1, #16
    3f4a:	f823 1b02 	strh.w	r1, [r3], #2
    3f4e:	6068      	str	r0, [r5, #4]
    3f50:	f104 010c 	add.w	r1, r4, #12
    3f54:	f105 000c 	add.w	r0, r5, #12
    3f58:	701a      	strb	r2, [r3, #0]
    3f5a:	f009 fe39 	bl	dbd0 <String::operator=(String const&)>
	last_record = next_record;
	next_record.ts = last_record.ts + (rec_window.period.Hour * SECS_PER_HOUR) +
									(rec_window.period.Minute * SECS_PER_MIN) + rec_window.period.Second;
    3f5e:	4a10      	ldr	r2, [pc, #64]	; (3fa0 <pauseRecording()+0x74>)
    3f60:	682b      	ldr	r3, [r5, #0]
    3f62:	7a51      	ldrb	r1, [r2, #9]
    3f64:	69e6      	ldr	r6, [r4, #28]
    3f66:	7a10      	ldrb	r0, [r2, #8]
    3f68:	61ee      	str	r6, [r5, #28]
    3f6a:	f44f 6561 	mov.w	r5, #3600	; 0xe10
    3f6e:	fb05 3301 	mla	r3, r5, r1, r3
    3f72:	79d2      	ldrb	r2, [r2, #7]
    3f74:	213c      	movs	r1, #60	; 0x3c
    3f76:	fb11 3300 	smlabb	r3, r1, r0, r3
    3f7a:	4413      	add	r3, r2
	rec_path = "--";
    3f7c:	4909      	ldr	r1, [pc, #36]	; (3fa4 <pauseRecording()+0x78>)
    3f7e:	480a      	ldr	r0, [pc, #40]	; (3fa8 <pauseRecording()+0x7c>)
 * OUT:	- none
 */
void pauseRecording(void) {
	last_record = next_record;
	next_record.ts = last_record.ts + (rec_window.period.Hour * SECS_PER_HOUR) +
									(rec_window.period.Minute * SECS_PER_MIN) + rec_window.period.Second;
    3f80:	6023      	str	r3, [r4, #0]
	rec_path = "--";
    3f82:	f009 fe77 	bl	dc74 <String::operator=(char const*)>
	// MONPORT.printf("Next record: %ld\n", next_record.ts);
	next_record.cnt++;
    3f86:	69e3      	ldr	r3, [r4, #28]
	stopLED(&leds[LED_RECORD]);
    3f88:	4808      	ldr	r0, [pc, #32]	; (3fac <pauseRecording()+0x80>)
	last_record = next_record;
	next_record.ts = last_record.ts + (rec_window.period.Hour * SECS_PER_HOUR) +
									(rec_window.period.Minute * SECS_PER_MIN) + rec_window.period.Second;
	rec_path = "--";
	// MONPORT.printf("Next record: %ld\n", next_record.ts);
	next_record.cnt++;
    3f8a:	3301      	adds	r3, #1
    3f8c:	61e3      	str	r3, [r4, #28]
	stopLED(&leds[LED_RECORD]);
}
    3f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	next_record.ts = last_record.ts + (rec_window.period.Hour * SECS_PER_HOUR) +
									(rec_window.period.Minute * SECS_PER_MIN) + rec_window.period.Second;
	rec_path = "--";
	// MONPORT.printf("Next record: %ld\n", next_record.ts);
	next_record.cnt++;
	stopLED(&leds[LED_RECORD]);
    3f92:	f7ff bd33 	b.w	39fc <stopLED(leds_s*)>
    3f96:	bf00      	nop
    3f98:	1fff5740 	.word	0x1fff5740
    3f9c:	1fff5720 	.word	0x1fff5720
    3fa0:	1fff57e0 	.word	0x1fff57e0
    3fa4:	000172a4 	.word	0x000172a4
    3fa8:	1fff5e1c 	.word	0x1fff5e1c
    3fac:	1fff59cc 	.word	0x1fff59cc

00003fb0 <finishRecording()>:
 * Reset the record informations, time source
 * and switch-off the REC LED.
 * IN:	- none
 * OUT:	- none
 */
void finishRecording(void) {
    3fb0:	b570      	push	{r4, r5, r6, lr}
 * Set all values of the pointed record to 0
 * IN:	- pointer to the record (struct recInfo*)
 * OUT:	- none
 */
void resetRecInfo(struct recInfo* rec) {
	rec->ts = 0;
    3fb2:	4e18      	ldr	r6, [pc, #96]	; (4014 <finishRecording()+0x64>)
    3fb4:	4d18      	ldr	r5, [pc, #96]	; (4018 <finishRecording()+0x68>)
    3fb6:	2400      	movs	r4, #0
	rec->dur.Hour = 0;
	rec->dur.Minute = 0;
	rec->dur.Second = 0;
	rec->t_set = false;
	rec->path.remove(0);
    3fb8:	4621      	mov	r1, r4
    3fba:	f106 000c 	add.w	r0, r6, #12
 * Set all values of the pointed record to 0
 * IN:	- pointer to the record (struct recInfo*)
 * OUT:	- none
 */
void resetRecInfo(struct recInfo* rec) {
	rec->ts = 0;
    3fbe:	6034      	str	r4, [r6, #0]
	rec->dur.Hour = 0;
    3fc0:	71b4      	strb	r4, [r6, #6]
	rec->dur.Minute = 0;
    3fc2:	7174      	strb	r4, [r6, #5]
	rec->dur.Second = 0;
    3fc4:	7134      	strb	r4, [r6, #4]
	rec->t_set = false;
    3fc6:	72f4      	strb	r4, [r6, #11]
	rec->path.remove(0);
    3fc8:	f00a f9b2 	bl	e330 <String::remove(unsigned int)>
    3fcc:	4621      	mov	r1, r4
    3fce:	f105 000c 	add.w	r0, r5, #12
	rec->cnt = 0;
    3fd2:	61f4      	str	r4, [r6, #28]
 * Set all values of the pointed record to 0
 * IN:	- pointer to the record (struct recInfo*)
 * OUT:	- none
 */
void resetRecInfo(struct recInfo* rec) {
	rec->ts = 0;
    3fd4:	602c      	str	r4, [r5, #0]
	rec->dur.Hour = 0;
    3fd6:	71ac      	strb	r4, [r5, #6]
	rec->dur.Minute = 0;
    3fd8:	716c      	strb	r4, [r5, #5]
	rec->dur.Second = 0;
    3fda:	712c      	strb	r4, [r5, #4]
	rec->t_set = false;
    3fdc:	72ec      	strb	r4, [r5, #11]
	rec->path.remove(0);
    3fde:	f00a f9a7 	bl	e330 <String::remove(unsigned int)>
 * OUT:	- none
 */
void finishRecording(void) {
	resetRecInfo(&last_record);
	resetRecInfo(&next_record);
	rec_path = "--";
    3fe2:	490e      	ldr	r1, [pc, #56]	; (401c <finishRecording()+0x6c>)
    3fe4:	480e      	ldr	r0, [pc, #56]	; (4020 <finishRecording()+0x70>)
	rec->dur.Hour = 0;
	rec->dur.Minute = 0;
	rec->dur.Second = 0;
	rec->t_set = false;
	rec->path.remove(0);
	rec->cnt = 0;
    3fe6:	61ec      	str	r4, [r5, #28]
 * OUT:	- none
 */
void finishRecording(void) {
	resetRecInfo(&last_record);
	resetRecInfo(&next_record);
	rec_path = "--";
    3fe8:	f009 fe44 	bl	dc74 <String::operator=(char const*)>
	if(time_source == TSOURCE_GPS) time_source = TSOURCE_TEENSY;
    3fec:	4b0d      	ldr	r3, [pc, #52]	; (4024 <finishRecording()+0x74>)
	startLED(&leds[LED_RECORD], LED_MODE_WARNING_SHORT);
    3fee:	480e      	ldr	r0, [pc, #56]	; (4028 <finishRecording()+0x78>)
 */
void finishRecording(void) {
	resetRecInfo(&last_record);
	resetRecInfo(&next_record);
	rec_path = "--";
	if(time_source == TSOURCE_GPS) time_source = TSOURCE_TEENSY;
    3ff0:	781a      	ldrb	r2, [r3, #0]
    3ff2:	2a02      	cmp	r2, #2
    3ff4:	bf08      	it	eq
    3ff6:	2201      	moveq	r2, #1
	startLED(&leds[LED_RECORD], LED_MODE_WARNING_SHORT);
    3ff8:	f04f 0103 	mov.w	r1, #3
 */
void finishRecording(void) {
	resetRecInfo(&last_record);
	resetRecInfo(&next_record);
	rec_path = "--";
	if(time_source == TSOURCE_GPS) time_source = TSOURCE_TEENSY;
    3ffc:	bf08      	it	eq
    3ffe:	701a      	strbeq	r2, [r3, #0]
	startLED(&leds[LED_RECORD], LED_MODE_WARNING_SHORT);
    4000:	f7ff fcb0 	bl	3964 <startLED(leds_s*, lMode)>
	// Wait until the notification is finished before sleeping or doing whatever.
	Alarm.delay(500);
    4004:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    4008:	4808      	ldr	r0, [pc, #32]	; (402c <finishRecording()+0x7c>)
}
    400a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	resetRecInfo(&next_record);
	rec_path = "--";
	if(time_source == TSOURCE_GPS) time_source = TSOURCE_TEENSY;
	startLED(&leds[LED_RECORD], LED_MODE_WARNING_SHORT);
	// Wait until the notification is finished before sleeping or doing whatever.
	Alarm.delay(500);
    400e:	f007 ba5b 	b.w	b4c8 <TimeAlarmsClass::delay(unsigned long)>
    4012:	bf00      	nop
    4014:	1fff5720 	.word	0x1fff5720
    4018:	1fff5740 	.word	0x1fff5740
    401c:	000172a4 	.word	0x000172a4
    4020:	1fff5e1c 	.word	0x1fff5e1c
    4024:	1fff62f4 	.word	0x1fff62f4
    4028:	1fff59cc 	.word	0x1fff59cc
    402c:	1fff668c 	.word	0x1fff668c

00004030 <startMonitoring()>:
 * ---------------------
 * To start monitoring, just open the mixer channel at the read gain value
 * IN:	- none
 * OUT:	- none
 */
void startMonitoring(void) {
    4030:	b508      	push	{r3, lr}
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
		if (gain > 32767.0f) gain = 32767.0f;
		else if (gain < -32767.0f) gain = -32767.0f;
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    4032:	4b12      	ldr	r3, [pc, #72]	; (407c <startMonitoring()+0x4c>)
    4034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 * IN:	- none
 * OUT:	- none
 */
void setHpGain(void) {
	float gain;
	vol_ctrl = analogRead(AUDIO_VOLUME_PIN);
    4038:	200f      	movs	r0, #15
    403a:	619a      	str	r2, [r3, #24]
    403c:	f00a fa98 	bl	e570 <analogRead>
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    4040:	ee07 0a90 	vmov	s15, r0
    4044:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 4080 <startMonitoring()+0x50>
    4048:	eddf 5a0e 	vldr	s11, [pc, #56]	; 4084 <startMonitoring()+0x54>
    404c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 4088 <startMonitoring()+0x58>
    4050:	4a0e      	ldr	r2, [pc, #56]	; (408c <startMonitoring()+0x5c>)
    4052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    4056:	eddf 7a0e 	vldr	s15, [pc, #56]	; 4090 <startMonitoring()+0x60>
    405a:	ee27 7a06 	vmul.f32	s14, s14, s12
    405e:	4603      	mov	r3, r0
    4060:	ee87 6a25 	vdiv.f32	s12, s14, s11
    4064:	6013      	str	r3, [r2, #0]
    4066:	480b      	ldr	r0, [pc, #44]	; (4094 <startMonitoring()+0x64>)
 */
void startMonitoring(void) {
	monMixer.gain(MIXER_CH_REC, 1);
	// sgtl5000.lineOutLevel(GSTL5000_OUTLEVEL_DEF);
	setHpGain();
}
    4068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    406c:	eee6 7a26 	vfma.f32	s15, s12, s13
    4070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4074:	ee17 1a90 	vmov	r1, s15
    4078:	f001 b8ee 	b.w	5258 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    407c:	1fff5a90 	.word	0x1fff5a90
    4080:	3f4ccccd 	.word	0x3f4ccccd
    4084:	447fc000 	.word	0x447fc000
    4088:	43010000 	.word	0x43010000
    408c:	1fff5e40 	.word	0x1fff5e40
    4090:	3eff7cee 	.word	0x3eff7cee
    4094:	1fff5e30 	.word	0x1fff5e30

00004098 <stopMonitoring()>:
    4098:	4b01      	ldr	r3, [pc, #4]	; (40a0 <stopMonitoring()+0x8>)
    409a:	2200      	movs	r2, #0
    409c:	619a      	str	r2, [r3, #24]
    409e:	4770      	bx	lr
    40a0:	1fff5a90 	.word	0x1fff5a90

000040a4 <setHpGain()>:
 * ---------------
 * Read the rotary pot value and set the headphones gain.
 * IN:	- none
 * OUT:	- none
 */
void setHpGain(void) {
    40a4:	b508      	push	{r3, lr}
	float gain;
	vol_ctrl = analogRead(AUDIO_VOLUME_PIN);
    40a6:	200f      	movs	r0, #15
    40a8:	f00a fa62 	bl	e570 <analogRead>
    40ac:	ee07 0a90 	vmov	s15, r0
    40b0:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 40e8 <setHpGain()+0x44>
    40b4:	eddf 5a0d 	vldr	s11, [pc, #52]	; 40ec <setHpGain()+0x48>
    40b8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 40f0 <setHpGain()+0x4c>
    40bc:	4a0d      	ldr	r2, [pc, #52]	; (40f4 <setHpGain()+0x50>)
    40be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    40c2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 40f8 <setHpGain()+0x54>
    40c6:	ee27 7a06 	vmul.f32	s14, s14, s12
    40ca:	4603      	mov	r3, r0
    40cc:	ee87 6a25 	vdiv.f32	s12, s14, s11
    40d0:	6013      	str	r3, [r2, #0]
    40d2:	480a      	ldr	r0, [pc, #40]	; (40fc <setHpGain()+0x58>)
	gain = (float)vol_ctrl * 0.8 / 1023.0;
	sgtl5000.volume(gain);
	// sgtl5000.lineOutLevel(GSTL5000_OUTLEVEL_DEF);
}
    40d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    40d8:	eee6 7a26 	vfma.f32	s15, s12, s13
    40dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    40e0:	ee17 1a90 	vmov	r1, s15
    40e4:	f001 b8b8 	b.w	5258 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    40e8:	3f4ccccd 	.word	0x3f4ccccd
    40ec:	447fc000 	.word	0x447fc000
    40f0:	43010000 	.word	0x43010000
    40f4:	1fff5e40 	.word	0x1fff5e40
    40f8:	3eff7cee 	.word	0x3eff7cee
    40fc:	1fff5e30 	.word	0x1fff5e30

00004100 <detectPeaks()>:
 * Detect possible peaks at line input and
 * notify them with the peak LED.
 * IN:	- none
 * OUT:	- none
 */
void detectPeaks(void) {
    4100:	b510      	push	{r4, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4102:	4924      	ldr	r1, [pc, #144]	; (4194 <detectPeaks()+0x94>)
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    4104:	4a24      	ldr	r2, [pc, #144]	; (4198 <detectPeaks()+0x98>)
    4106:	680b      	ldr	r3, [r1, #0]
	if(peak_interval > 24) {
    4108:	6810      	ldr	r0, [r2, #0]
 * Detect possible peaks at line input and
 * notify them with the peak LED.
 * IN:	- none
 * OUT:	- none
 */
void detectPeaks(void) {
    410a:	b082      	sub	sp, #8
    410c:	9300      	str	r3, [sp, #0]
	return ret;
    410e:	9b00      	ldr	r3, [sp, #0]
	if(peak_interval > 24) {
    4110:	1a1b      	subs	r3, r3, r0
    4112:	2b18      	cmp	r3, #24
    4114:	d936      	bls.n	4184 <detectPeaks()+0x84>
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
		min_sample = 32767;
		max_sample = -32768;
	}
	bool available(void) {
		__disable_irq();
    4116:	b672      	cpsid	i
		bool flag = new_output;
    4118:	4b20      	ldr	r3, [pc, #128]	; (419c <detectPeaks()+0x9c>)
    411a:	7f18      	ldrb	r0, [r3, #28]
		if (flag) new_output = false;
    411c:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    4120:	b108      	cbz	r0, 4126 <detectPeaks()+0x26>
    4122:	2000      	movs	r0, #0
    4124:	7718      	strb	r0, [r3, #28]
		__enable_irq();
    4126:	b662      	cpsie	i
		if(peak.available()) {
    4128:	b364      	cbz	r4, 4184 <detectPeaks()+0x84>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    412a:	6809      	ldr	r1, [r1, #0]
    412c:	9101      	str	r1, [sp, #4]
	return ret;
    412e:	9901      	ldr	r1, [sp, #4]
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    4130:	6011      	str	r1, [r2, #0]
		return flag;
	}
	float read(void) {
		__disable_irq();
    4132:	b672      	cpsid	i
		int min = min_sample;
		int max = max_sample;
		min_sample = 32767;
    4134:	f647 74ff 	movw	r4, #32767	; 0x7fff
		max_sample = -32768;
    4138:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		__enable_irq();
		return flag;
	}
	float read(void) {
		__disable_irq();
		int min = min_sample;
    413c:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
		int max = max_sample;
    4140:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
		min_sample = 32767;
    4144:	83dc      	strh	r4, [r3, #30]
		max_sample = -32768;
    4146:	8418      	strh	r0, [r3, #32]
		__enable_irq();
    4148:	b662      	cpsie	i
		min = abs(min);
    414a:	2900      	cmp	r1, #0
		max = abs(max);
    414c:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
    4150:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		int min = min_sample;
		int max = max_sample;
		min_sample = 32767;
		max_sample = -32768;
		__enable_irq();
		min = abs(min);
    4154:	bfb8      	it	lt
    4156:	4249      	neglt	r1, r1
			peak_interval = 0;
			if(peak.read() >= 1.0) {
    4158:	428b      	cmp	r3, r1
    415a:	bfb8      	it	lt
    415c:	460b      	movlt	r3, r1
    415e:	ee07 3a90 	vmov	s15, r3
    4162:	eddf 6a0f 	vldr	s13, [pc, #60]	; 41a0 <detectPeaks()+0xa0>
    4166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    416a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    416e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4172:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    417a:	db05      	blt.n	4188 <detectPeaks()+0x88>
				startLED(&leds[LED_PEAK], LED_MODE_ON);
    417c:	2101      	movs	r1, #1
    417e:	4809      	ldr	r0, [pc, #36]	; (41a4 <detectPeaks()+0xa4>)
    4180:	f7ff fbf0 	bl	3964 <startLED(leds_s*, lMode)>
			else {
				stopLED(&leds[LED_PEAK]);
			}
		}
	}
}
    4184:	b002      	add	sp, #8
    4186:	bd10      	pop	{r4, pc}
			peak_interval = 0;
			if(peak.read() >= 1.0) {
				startLED(&leds[LED_PEAK], LED_MODE_ON);
			}
			else {
				stopLED(&leds[LED_PEAK]);
    4188:	4806      	ldr	r0, [pc, #24]	; (41a4 <detectPeaks()+0xa4>)
    418a:	f7ff fc37 	bl	39fc <stopLED(leds_s*)>
			}
		}
	}
}
    418e:	b002      	add	sp, #8
    4190:	bd10      	pop	{r4, pc}
    4192:	bf00      	nop
    4194:	1fff6804 	.word	0x1fff6804
    4198:	1fff5e3c 	.word	0x1fff5e3c
    419c:	1fff5e44 	.word	0x1fff5e44
    41a0:	46fffe00 	.word	0x46fffe00
    41a4:	1fff5a14 	.word	0x1fff5a14

000041a8 <initAudio()>:
 * Set memory to buffer audio signal, enable & set-up
 * the audio chip and the mixer.
 * IN:	- none
 * OUT:	- none
 */
void initAudio(void) {
    41a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  // Memory buffer for the record queue
  AudioMemory(60);

  // Enable the audio shield, select input, enable output
  sgtl5000.enable();
    41aa:	4c75      	ldr	r4, [pc, #468]	; (4380 <initAudio()+0x1d8>)
 * IN:	- none
 * OUT:	- none
 */
void initAudio(void) {
  // Memory buffer for the record queue
  AudioMemory(60);
    41ac:	4875      	ldr	r0, [pc, #468]	; (4384 <initAudio()+0x1dc>)
 * Set memory to buffer audio signal, enable & set-up
 * the audio chip and the mixer.
 * IN:	- none
 * OUT:	- none
 */
void initAudio(void) {
    41ae:	b087      	sub	sp, #28
  // Memory buffer for the record queue
  AudioMemory(60);
    41b0:	213c      	movs	r1, #60	; 0x3c
    41b2:	f008 fd8f 	bl	ccd4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>

  // Enable the audio shield, select input, enable output
  sgtl5000.enable();
    41b6:	4620      	mov	r0, r4
    41b8:	f000 fdb8 	bl	4d2c <AudioControlSGTL5000::enable()>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    41bc:	4620      	mov	r0, r4
    41be:	2255      	movs	r2, #85	; 0x55
    41c0:	2120      	movs	r1, #32
    41c2:	f000 fce3 	bl	4b8c <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    41c6:	b138      	cbz	r0, 41d8 <initAudio()+0x30>
    41c8:	88e2      	ldrh	r2, [r4, #6]
    41ca:	f042 0204 	orr.w	r2, r2, #4
    41ce:	b292      	uxth	r2, r2
    41d0:	4620      	mov	r0, r4
    41d2:	2124      	movs	r1, #36	; 0x24
    41d4:	f000 fcda 	bl	4b8c <AudioControlSGTL5000::write(unsigned int, unsigned int)>
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    41d8:	2167      	movs	r1, #103	; 0x67
    41da:	4869      	ldr	r0, [pc, #420]	; (4380 <initAudio()+0x1d8>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    41dc:	4e6a      	ldr	r6, [pc, #424]	; (4388 <initAudio()+0x1e0>)
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    41de:	4c6b      	ldr	r4, [pc, #428]	; (438c <initAudio()+0x1e4>)
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    41e0:	4f6b      	ldr	r7, [pc, #428]	; (4390 <initAudio()+0x1e8>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    41e2:	4d6c      	ldr	r5, [pc, #432]	; (4394 <initAudio()+0x1ec>)
    41e4:	f001 f838 	bl	5258 <AudioControlSGTL5000::volumeInteger(unsigned int)>
			return false;
		}
	}
	bool volume(float left, float right);
	bool micGain(unsigned int dB);
	bool lineInLevel(uint8_t n) { return lineInLevel(n, n); }
    41e8:	2200      	movs	r2, #0
    41ea:	4611      	mov	r1, r2
    41ec:	4864      	ldr	r0, [pc, #400]	; (4380 <initAudio()+0x1d8>)
    41ee:	f000 fcf9 	bl	4be4 <AudioControlSGTL5000::lineInLevel(unsigned char, unsigned char)>
  sgtl5000.inputSelect(audioInput);
  sgtl5000.volume(SGTL5000_VOLUME_DEF);
	sgtl5000.lineInLevel(SGTL5000_INLEVEL_DEF);
	sgtl5000.lineOutLevel(GSTL5000_OUTLEVEL_DEF);
    41f2:	210d      	movs	r1, #13
    41f4:	4862      	ldr	r0, [pc, #392]	; (4380 <initAudio()+0x1d8>)
    41f6:	f000 fd25 	bl	4c44 <AudioControlSGTL5000::lineOutLevel(unsigned char)>
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    41fa:	aa01      	add	r2, sp, #4
    41fc:	2100      	movs	r1, #0
    41fe:	4866      	ldr	r0, [pc, #408]	; (4398 <initAudio()+0x1f0>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4200:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
    4202:	9603      	str	r6, [sp, #12]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4204:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    4206:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4208:	9705      	str	r7, [sp, #20]
		setCoefficients(stage, coef);
    420a:	f001 f9f3 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    420e:	aa01      	add	r2, sp, #4
    4210:	2101      	movs	r1, #1
    4212:	4861      	ldr	r0, [pc, #388]	; (4398 <initAudio()+0x1f0>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4214:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4216:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    4218:	9603      	str	r6, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    421a:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    421c:	9705      	str	r7, [sp, #20]
		setCoefficients(stage, coef);
    421e:	f001 f9e9 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4222:	aa01      	add	r2, sp, #4
    4224:	2102      	movs	r1, #2
    4226:	485c      	ldr	r0, [pc, #368]	; (4398 <initAudio()+0x1f0>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4228:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    422a:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    422c:	9603      	str	r6, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    422e:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4230:	9705      	str	r7, [sp, #20]
		setCoefficients(stage, coef);
    4232:	f001 f9df 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4236:	9705      	str	r7, [sp, #20]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4238:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    423a:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    423c:	f1a7 67ac 	sub.w	r7, r7, #90177536	; 0x5600000
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4240:	f104 64b8 	add.w	r4, r4, #96468992	; 0x5c00000
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    4244:	aa01      	add	r2, sp, #4
    4246:	2103      	movs	r1, #3
    4248:	4853      	ldr	r0, [pc, #332]	; (4398 <initAudio()+0x1f0>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    424a:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    424c:	f504 24f3 	add.w	r4, r4, #497664	; 0x79800
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4250:	f5a7 5773 	sub.w	r7, r7, #15552	; 0x3cc0
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4254:	f204 4402 	addw	r4, r4, #1026	; 0x402
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4258:	3f3c      	subs	r7, #60	; 0x3c
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
    425a:	9603      	str	r6, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    425c:	f001 f9ca 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4260:	aa01      	add	r2, sp, #4
    4262:	2100      	movs	r1, #0
    4264:	484d      	ldr	r0, [pc, #308]	; (439c <initAudio()+0x1f4>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4266:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
    4268:	9503      	str	r5, [sp, #12]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    426a:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    426c:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    426e:	9705      	str	r7, [sp, #20]
		setCoefficients(stage, coef);
    4270:	f001 f9c0 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4274:	aa01      	add	r2, sp, #4
    4276:	2101      	movs	r1, #1
    4278:	4848      	ldr	r0, [pc, #288]	; (439c <initAudio()+0x1f4>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    427a:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    427c:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    427e:	9503      	str	r5, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    4280:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4282:	9705      	str	r7, [sp, #20]
		setCoefficients(stage, coef);
    4284:	f001 f9b6 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4288:	aa01      	add	r2, sp, #4
    428a:	2102      	movs	r1, #2
    428c:	4843      	ldr	r0, [pc, #268]	; (439c <initAudio()+0x1f4>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    428e:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4290:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    4292:	9503      	str	r5, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    4294:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4296:	9705      	str	r7, [sp, #20]
		setCoefficients(stage, coef);
    4298:	f001 f9ac 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    429c:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    429e:	9404      	str	r4, [sp, #16]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    42a0:	f104 64b0 	add.w	r4, r4, #92274688	; 0x5800000
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    42a4:	aa01      	add	r2, sp, #4
    42a6:	2103      	movs	r1, #3
    42a8:	483c      	ldr	r0, [pc, #240]	; (439c <initAudio()+0x1f4>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    42aa:	4e3d      	ldr	r6, [pc, #244]	; (43a0 <initAudio()+0x1f8>)
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    42ac:	9705      	str	r7, [sp, #20]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    42ae:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
    42b2:	34df      	adds	r4, #223	; 0xdf
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    42b4:	4f3b      	ldr	r7, [pc, #236]	; (43a4 <initAudio()+0x1fc>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    42b6:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
    42b8:	9503      	str	r5, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    42ba:	f001 f99b 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    42be:	aa01      	add	r2, sp, #4
    42c0:	2100      	movs	r1, #0
    42c2:	4839      	ldr	r0, [pc, #228]	; (43a8 <initAudio()+0x200>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    42c4:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
    42c6:	9603      	str	r6, [sp, #12]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    42c8:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    42ca:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    42cc:	9705      	str	r7, [sp, #20]
		setCoefficients(stage, coef);
    42ce:	f001 f991 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    42d2:	aa01      	add	r2, sp, #4
    42d4:	2101      	movs	r1, #1
    42d6:	4834      	ldr	r0, [pc, #208]	; (43a8 <initAudio()+0x200>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    42d8:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    42da:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    42dc:	9603      	str	r6, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    42de:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    42e0:	9705      	str	r7, [sp, #20]
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    42e2:	f105 6584 	add.w	r5, r5, #69206016	; 0x4200000
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    42e6:	f001 f985 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    42ea:	aa01      	add	r2, sp, #4
    42ec:	2102      	movs	r1, #2
    42ee:	482e      	ldr	r0, [pc, #184]	; (43a8 <initAudio()+0x200>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    42f0:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    42f2:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    42f4:	9603      	str	r6, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    42f6:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    42f8:	9705      	str	r7, [sp, #20]
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    42fa:	f505 35a4 	add.w	r5, r5, #83968	; 0x14800
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    42fe:	f001 f979 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4302:	aa01      	add	r2, sp, #4
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4304:	9601      	str	r6, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
    4306:	9603      	str	r6, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    4308:	2103      	movs	r1, #3
    430a:	4827      	ldr	r0, [pc, #156]	; (43a8 <initAudio()+0x200>)
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    430c:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    430e:	f106 66a2 	add.w	r6, r6, #84934656	; 0x5100000
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4312:	f205 1521 	addw	r5, r5, #289	; 0x121
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4316:	f506 36a2 	add.w	r6, r6, #82944	; 0x14400
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    431a:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    431c:	9705      	str	r7, [sp, #20]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    431e:	4c23      	ldr	r4, [pc, #140]	; (43ac <initAudio()+0x204>)
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    4320:	f001 f968 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4324:	aa01      	add	r2, sp, #4
    4326:	2100      	movs	r1, #0
    4328:	4821      	ldr	r0, [pc, #132]	; (43b0 <initAudio()+0x208>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    432a:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
    432c:	9503      	str	r5, [sp, #12]
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    432e:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    4330:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4332:	9605      	str	r6, [sp, #20]
		setCoefficients(stage, coef);
    4334:	f001 f95e 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4338:	aa01      	add	r2, sp, #4
    433a:	2101      	movs	r1, #1
    433c:	481c      	ldr	r0, [pc, #112]	; (43b0 <initAudio()+0x208>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    433e:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4340:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    4342:	9503      	str	r5, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    4344:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4346:	9605      	str	r6, [sp, #20]
		setCoefficients(stage, coef);
    4348:	f001 f954 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    434c:	aa01      	add	r2, sp, #4
    434e:	2102      	movs	r1, #2
    4350:	4817      	ldr	r0, [pc, #92]	; (43b0 <initAudio()+0x208>)
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4352:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    4354:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    4356:	9503      	str	r5, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    4358:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    435a:	9605      	str	r6, [sp, #20]
		setCoefficients(stage, coef);
    435c:	f001 f94a 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4360:	aa01      	add	r2, sp, #4
    4362:	2103      	movs	r1, #3
    4364:	4812      	ldr	r0, [pc, #72]	; (43b0 <initAudio()+0x208>)
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
		/* b2 */ coef[2] = coef[0];
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
    4366:	9605      	str	r6, [sp, #20]
		double w0 = frequency * (2 * 3.141592654 / AUDIO_SAMPLE_RATE_EXACT);
		double sinW0 = sin(w0);
		double alpha = sinW0 / ((double)q * 2.0);
		double cosW0 = cos(w0);
		double scale = 1073741824.0 / (1.0 + alpha);
		/* b0 */ coef[0] = scale;
    4368:	9501      	str	r5, [sp, #4]
		/* b1 */ coef[1] = (-2.0 * cosW0) * scale;
    436a:	9402      	str	r4, [sp, #8]
		/* b2 */ coef[2] = coef[0];
    436c:	9503      	str	r5, [sp, #12]
		/* a1 */ coef[3] = (-2.0 * cosW0) * scale;
    436e:	9404      	str	r4, [sp, #16]
		/* a2 */ coef[4] = (1.0 - alpha) * scale;
		setCoefficients(stage, coef);
    4370:	f001 f940 	bl	55f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>
    4374:	4b0f      	ldr	r3, [pc, #60]	; (43b4 <initAudio()+0x20c>)
    4376:	2200      	movs	r2, #0
    4378:	619a      	str	r2, [r3, #24]
    437a:	61da      	str	r2, [r3, #28]
	biquad4.setNotch(1, 170, 0.5);
	biquad4.setNotch(2, 170, 0.5);
	biquad4.setNotch(3, 170, 0.5);
  monMixer.gain(MIXER_CH_REC, 0);
  monMixer.gain(MIXER_CH_SDC, 0);
}
    437c:	b007      	add	sp, #28
    437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4380:	1fff5e30 	.word	0x1fff5e30
    4384:	1fff0200 	.word	0x1fff0200
    4388:	3d0b922a 	.word	0x3d0b922a
    438c:	860d7e4d 	.word	0x860d7e4d
    4390:	3a172455 	.word	0x3a172455
    4394:	3a5b73ac 	.word	0x3a5b73ac
    4398:	1fff5e68 	.word	0x1fff5e68
    439c:	1fff5f04 	.word	0x1fff5f04
    43a0:	37e8359a 	.word	0x37e8359a
    43a4:	2fd06b35 	.word	0x2fd06b35
    43a8:	1fff5fa0 	.word	0x1fff5fa0
    43ac:	830fe6cc 	.word	0x830fe6cc
    43b0:	1fff603c 	.word	0x1fff603c
    43b4:	1fff5a90 	.word	0x1fff5a90

000043b8 <_GLOBAL__sub_I_i2sRec>:
    43b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    43bc:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 4574 <_GLOBAL__sub_I_i2sRec+0x1bc>

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    43c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 456c <_GLOBAL__sub_I_i2sRec+0x1b4>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    43c4:	f8d9 1000 	ldr.w	r1, [r9]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    43c8:	4b66      	ldr	r3, [pc, #408]	; (4564 <_GLOBAL__sub_I_i2sRec+0x1ac>)
    43ca:	f8c8 3000 	str.w	r3, [r8]
    43ce:	2200      	movs	r2, #0
    43d0:	b085      	sub	sp, #20
    43d2:	f888 2009 	strb.w	r2, [r8, #9]
    43d6:	f8c8 2010 	str.w	r2, [r8, #16]
			active = false;
    43da:	f888 2008 	strb.w	r2, [r8, #8]
			destination_list = NULL;
    43de:	f8c8 200c 	str.w	r2, [r8, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    43e2:	b909      	cbnz	r1, 43e8 <_GLOBAL__sub_I_i2sRec+0x30>
    43e4:	e1d7      	b.n	4796 <_GLOBAL__sub_I_i2sRec+0x3de>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    43e6:	4611      	mov	r1, r2
    43e8:	694a      	ldr	r2, [r1, #20]
    43ea:	2a00      	cmp	r2, #0
    43ec:	d1fb      	bne.n	43e6 <_GLOBAL__sub_I_i2sRec+0x2e>
				p->next_update = this;
    43ee:	f8c1 8014 	str.w	r8, [r1, #20]
			}
			next_update = NULL;
    43f2:	2400      	movs	r4, #0
#include "DMAChannel.h"

class AudioInputI2S : public AudioStream
{
public:
	AudioInputI2S(void) : AudioStream(0, NULL) { begin(); }
    43f4:	4a5c      	ldr	r2, [pc, #368]	; (4568 <_GLOBAL__sub_I_i2sRec+0x1b0>)
    43f6:	485d      	ldr	r0, [pc, #372]	; (456c <_GLOBAL__sub_I_i2sRec+0x1b4>)
    43f8:	f8c8 4014 	str.w	r4, [r8, #20]
			cpu_cycles = 0;
    43fc:	f8a8 4004 	strh.w	r4, [r8, #4]
			cpu_cycles_max = 0;
    4400:	f8a8 4006 	strh.w	r4, [r8, #6]
			numConnections = 0;
    4404:	f888 400a 	strb.w	r4, [r8, #10]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    4408:	4f59      	ldr	r7, [pc, #356]	; (4570 <_GLOBAL__sub_I_i2sRec+0x1b8>)
    440a:	9301      	str	r3, [sp, #4]
    440c:	f8c8 2000 	str.w	r2, [r8]
    4410:	f001 f9d4 	bl	57bc <AudioInputI2S::begin()>
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    4414:	f8d9 1000 	ldr.w	r1, [r9]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    4418:	9b01      	ldr	r3, [sp, #4]
    441a:	727c      	strb	r4, [r7, #9]
    441c:	603b      	str	r3, [r7, #0]
    441e:	613c      	str	r4, [r7, #16]
			active = false;
    4420:	723c      	strb	r4, [r7, #8]
			destination_list = NULL;
    4422:	60fc      	str	r4, [r7, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    4424:	4a53      	ldr	r2, [pc, #332]	; (4574 <_GLOBAL__sub_I_i2sRec+0x1bc>)
    4426:	b909      	cbnz	r1, 442c <_GLOBAL__sub_I_i2sRec+0x74>
    4428:	e1b8      	b.n	479c <_GLOBAL__sub_I_i2sRec+0x3e4>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    442a:	4611      	mov	r1, r2
    442c:	694a      	ldr	r2, [r1, #20]
    442e:	2a00      	cmp	r2, #0
    4430:	d1fb      	bne.n	442a <_GLOBAL__sub_I_i2sRec+0x72>
				p->next_update = this;
    4432:	614f      	str	r7, [r1, #20]
			}
			next_update = NULL;
    4434:	2400      	movs	r4, #0
#include "SD.h"

class AudioPlaySdWav : public AudioStream
{
public:
	AudioPlaySdWav(void) : AudioStream(0, NULL) { begin(); }
    4436:	4a50      	ldr	r2, [pc, #320]	; (4578 <_GLOBAL__sub_I_i2sRec+0x1c0>)
#include "AudioStream.h"

class AudioFilterBiquad : public AudioStream
{
public:
	AudioFilterBiquad(void) : AudioStream(1, inputQueueArray) {
    4438:	f8df b16c 	ldr.w	fp, [pc, #364]	; 45a8 <_GLOBAL__sub_I_i2sRec+0x1f0>
    443c:	617c      	str	r4, [r7, #20]
			cpu_cycles = 0;
    443e:	80bc      	strh	r4, [r7, #4]
			cpu_cycles_max = 0;
    4440:	80fc      	strh	r4, [r7, #6]
			numConnections = 0;
    4442:	72bc      	strb	r4, [r7, #10]
    4444:	484d      	ldr	r0, [pc, #308]	; (457c <_GLOBAL__sub_I_i2sRec+0x1c4>)
    4446:	9301      	str	r3, [sp, #4]
    4448:	603a      	str	r2, [r7, #0]
    444a:	f002 fdf7 	bl	703c <SDLib::File::File()>
    444e:	4848      	ldr	r0, [pc, #288]	; (4570 <_GLOBAL__sub_I_i2sRec+0x1b8>)
    4450:	4d4b      	ldr	r5, [pc, #300]	; (4580 <_GLOBAL__sub_I_i2sRec+0x1c8>)

class AudioMixer4 : public AudioStream
{
#if defined(KINETISK)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    4452:	4e4c      	ldr	r6, [pc, #304]	; (4584 <_GLOBAL__sub_I_i2sRec+0x1cc>)

class AudioRecordQueue : public AudioStream
{
public:
	AudioRecordQueue(void) : AudioStream(1, inputQueueArray),
		userblock(NULL), head(0), tail(0), enabled(0) { }
    4454:	f8df a154 	ldr.w	sl, [pc, #340]	; 45ac <_GLOBAL__sub_I_i2sRec+0x1f4>
    4458:	f001 fdd2 	bl	6000 <AudioPlaySdWav::begin()>
    445c:	f10b 0298 	add.w	r2, fp, #152	; 0x98
    4460:	2101      	movs	r1, #1
    4462:	4658      	mov	r0, fp
    4464:	f7ff fc6a 	bl	3d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    4468:	4658      	mov	r0, fp
    446a:	4621      	mov	r1, r4
    446c:	f840 5b18 	str.w	r5, [r0], #24
    4470:	2280      	movs	r2, #128	; 0x80
    4472:	f00e f8c3 	bl	125fc <memset>
    4476:	4b44      	ldr	r3, [pc, #272]	; (4588 <_GLOBAL__sub_I_i2sRec+0x1d0>)
    4478:	2101      	movs	r1, #1
    447a:	f103 0298 	add.w	r2, r3, #152	; 0x98
    447e:	4618      	mov	r0, r3
    4480:	f7ff fc5c 	bl	3d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    4484:	4840      	ldr	r0, [pc, #256]	; (4588 <_GLOBAL__sub_I_i2sRec+0x1d0>)
    4486:	4621      	mov	r1, r4
    4488:	f840 5b18 	str.w	r5, [r0], #24
    448c:	2280      	movs	r2, #128	; 0x80
    448e:	f00e f8b5 	bl	125fc <memset>
    4492:	4b3e      	ldr	r3, [pc, #248]	; (458c <_GLOBAL__sub_I_i2sRec+0x1d4>)
    4494:	2101      	movs	r1, #1
    4496:	f103 0298 	add.w	r2, r3, #152	; 0x98
    449a:	4618      	mov	r0, r3
    449c:	f7ff fc4e 	bl	3d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    44a0:	483a      	ldr	r0, [pc, #232]	; (458c <_GLOBAL__sub_I_i2sRec+0x1d4>)
    44a2:	4621      	mov	r1, r4
    44a4:	f840 5b18 	str.w	r5, [r0], #24
    44a8:	2280      	movs	r2, #128	; 0x80
    44aa:	f00e f8a7 	bl	125fc <memset>
    44ae:	4b38      	ldr	r3, [pc, #224]	; (4590 <_GLOBAL__sub_I_i2sRec+0x1d8>)
    44b0:	2101      	movs	r1, #1
    44b2:	f103 0298 	add.w	r2, r3, #152	; 0x98
    44b6:	4618      	mov	r0, r3
    44b8:	f7ff fc40 	bl	3d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    44bc:	4834      	ldr	r0, [pc, #208]	; (4590 <_GLOBAL__sub_I_i2sRec+0x1d8>)
    44be:	4621      	mov	r1, r4
    44c0:	f840 5b18 	str.w	r5, [r0], #24
    44c4:	2280      	movs	r2, #128	; 0x80
    44c6:	f00e f899 	bl	125fc <memset>
    44ca:	f106 0228 	add.w	r2, r6, #40	; 0x28
    44ce:	2104      	movs	r1, #4
    44d0:	4630      	mov	r0, r6
    44d2:	f7ff fc33 	bl	3d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
#include "AudioStream.h"

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
    44d6:	4b2f      	ldr	r3, [pc, #188]	; (4594 <_GLOBAL__sub_I_i2sRec+0x1dc>)
    44d8:	4a2f      	ldr	r2, [pc, #188]	; (4598 <_GLOBAL__sub_I_i2sRec+0x1e0>)
    44da:	6032      	str	r2, [r6, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    44dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    44e0:	f103 0218 	add.w	r2, r3, #24
    44e4:	4618      	mov	r0, r3
    44e6:	61b1      	str	r1, [r6, #24]
    44e8:	61f1      	str	r1, [r6, #28]
    44ea:	6231      	str	r1, [r6, #32]
    44ec:	6271      	str	r1, [r6, #36]	; 0x24
    44ee:	2101      	movs	r1, #1
    44f0:	f7ff fc24 	bl	3d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    44f4:	4b27      	ldr	r3, [pc, #156]	; (4594 <_GLOBAL__sub_I_i2sRec+0x1dc>)
    44f6:	4a29      	ldr	r2, [pc, #164]	; (459c <_GLOBAL__sub_I_i2sRec+0x1e4>)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    44f8:	4d29      	ldr	r5, [pc, #164]	; (45a0 <_GLOBAL__sub_I_i2sRec+0x1e8>)
    44fa:	601a      	str	r2, [r3, #0]
		min_sample = 32767;
    44fc:	f647 70ff 	movw	r0, #32767	; 0x7fff
		max_sample = -32768;
    4500:	f44f 4100 	mov.w	r1, #32768	; 0x8000

class AudioAnalyzePeak : public AudioStream
{
public:
	AudioAnalyzePeak(void) : AudioStream(1, inputQueueArray) {
		min_sample = 32767;
    4504:	83d8      	strh	r0, [r3, #30]
		max_sample = -32768;
    4506:	8419      	strh	r1, [r3, #32]
    4508:	f10a 0218 	add.w	r2, sl, #24
    450c:	2101      	movs	r1, #1
    450e:	4650      	mov	r0, sl
    4510:	f7ff fc14 	bl	3d3c <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    4514:	4923      	ldr	r1, [pc, #140]	; (45a4 <_GLOBAL__sub_I_i2sRec+0x1ec>)
    4516:	f8ca 1000 	str.w	r1, [sl]
    451a:	f04f 0e02 	mov.w	lr, #2
    451e:	9b01      	ldr	r3, [sp, #4]
    4520:	f88a 40f4 	strb.w	r4, [sl, #244]	; 0xf4
    4524:	f105 0118 	add.w	r1, r5, #24
    4528:	f88a 40f5 	strb.w	r4, [sl, #245]	; 0xf5
			active = false;
			destination_list = NULL;
    452c:	4622      	mov	r2, r4
    452e:	f8ca 40f0 	str.w	r4, [sl, #240]	; 0xf0
    4532:	f88a 40f6 	strb.w	r4, [sl, #246]	; 0xf6
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    4536:	4620      	mov	r0, r4
class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    4538:	722c      	strb	r4, [r5, #8]
			destination_list = NULL;
    453a:	60ec      	str	r4, [r5, #12]

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    453c:	602b      	str	r3, [r5, #0]
    453e:	f885 e009 	strb.w	lr, [r5, #9]
    4542:	6129      	str	r1, [r5, #16]
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    4544:	462c      	mov	r4, r5
    4546:	e000      	b.n	454a <_GLOBAL__sub_I_i2sRec+0x192>
    4548:	6921      	ldr	r1, [r4, #16]
				inputQueue[i] = NULL;
    454a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
			destination_list = NULL;
			for (int i=0; i < num_inputs; i++) {
    454e:	7a6b      	ldrb	r3, [r5, #9]
    4550:	4913      	ldr	r1, [pc, #76]	; (45a0 <_GLOBAL__sub_I_i2sRec+0x1e8>)
    4552:	3201      	adds	r2, #1
    4554:	4293      	cmp	r3, r2
    4556:	dcf7      	bgt.n	4548 <_GLOBAL__sub_I_i2sRec+0x190>
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    4558:	f8d9 2000 	ldr.w	r2, [r9]
    455c:	4b05      	ldr	r3, [pc, #20]	; (4574 <_GLOBAL__sub_I_i2sRec+0x1bc>)
    455e:	bb42      	cbnz	r2, 45b2 <_GLOBAL__sub_I_i2sRec+0x1fa>
    4560:	e11e      	b.n	47a0 <_GLOBAL__sub_I_i2sRec+0x3e8>
    4562:	bf00      	nop
    4564:	00017278 	.word	0x00017278
    4568:	00017490 	.word	0x00017490
    456c:	1fff60d8 	.word	0x1fff60d8
    4570:	1fff5ae8 	.word	0x1fff5ae8
    4574:	1fff6754 	.word	0x1fff6754
    4578:	000174b4 	.word	0x000174b4
    457c:	1fff5b00 	.word	0x1fff5b00
    4580:	00017484 	.word	0x00017484
    4584:	1fff5a90 	.word	0x1fff5a90
    4588:	1fff5f04 	.word	0x1fff5f04
    458c:	1fff5fa0 	.word	0x1fff5fa0
    4590:	1fff603c 	.word	0x1fff603c
    4594:	1fff5e44 	.word	0x1fff5e44
    4598:	0001749c 	.word	0x0001749c
    459c:	0001745c 	.word	0x0001745c
    45a0:	1fff5ac8 	.word	0x1fff5ac8
    45a4:	000174c0 	.word	0x000174c0
    45a8:	1fff5e68 	.word	0x1fff5e68
    45ac:	1fff60f0 	.word	0x1fff60f0
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    45b0:	461a      	mov	r2, r3
    45b2:	6953      	ldr	r3, [r2, #20]
    45b4:	2b00      	cmp	r3, #0
    45b6:	d1fb      	bne.n	45b0 <_GLOBAL__sub_I_i2sRec+0x1f8>
				p->next_update = this;
    45b8:	6155      	str	r5, [r2, #20]
			}
			next_update = NULL;
    45ba:	2400      	movs	r4, #0
#include "DMAChannel.h"

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
    45bc:	4a79      	ldr	r2, [pc, #484]	; (47a4 <_GLOBAL__sub_I_i2sRec+0x3ec>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    45be:	4b7a      	ldr	r3, [pc, #488]	; (47a8 <_GLOBAL__sub_I_i2sRec+0x3f0>)
    45c0:	487a      	ldr	r0, [pc, #488]	; (47ac <_GLOBAL__sub_I_i2sRec+0x3f4>)
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
				p->next_update = this;
			}
			next_update = NULL;
    45c2:	616c      	str	r4, [r5, #20]
			cpu_cycles = 0;
    45c4:	80ac      	strh	r4, [r5, #4]
			cpu_cycles_max = 0;
    45c6:	80ec      	strh	r4, [r5, #6]
			numConnections = 0;
    45c8:	72ac      	strb	r4, [r5, #10]
    45ca:	602a      	str	r2, [r5, #0]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    45cc:	9301      	str	r3, [sp, #4]
    45ce:	f001 fb75 	bl	5cbc <AudioOutputI2S::begin()>
		{ isConnected = false;
		  connect(); }
    45d2:	9b01      	ldr	r3, [sp, #4]
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    45d4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 47f0 <_GLOBAL__sub_I_i2sRec+0x438>
    45d8:	721c      	strb	r4, [r3, #8]
		{ isConnected = false;
		  connect(); }
    45da:	4618      	mov	r0, r3
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    45dc:	e883 0900 	stmia.w	r3, {r8, fp}
    45e0:	725c      	strb	r4, [r3, #9]
    45e2:	60dc      	str	r4, [r3, #12]
		{ isConnected = false;
    45e4:	741c      	strb	r4, [r3, #16]
		  connect(); }
    45e6:	f008 fcc1 	bl	cf6c <AudioConnection::connect()>
AudioFilterBiquad        biquad4;        //xy=259,183
AudioMixer4              monMixer;       //xy=486,212
AudioAnalyzePeak         peak;           //xy=686,113
AudioRecordQueue         queueSdc;       //xy=692,37
AudioOutputI2S           i2sMon;         //xy=700,207
AudioConnection          patchCord1(i2sRec, 0, biquad1, 0);
    45ea:	9b01      	ldr	r3, [sp, #4]
    45ec:	4a70      	ldr	r2, [pc, #448]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    45ee:	4971      	ldr	r1, [pc, #452]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    45f0:	f8df 8200 	ldr.w	r8, [pc, #512]	; 47f4 <_GLOBAL__sub_I_i2sRec+0x43c>
    45f4:	4618      	mov	r0, r3
    45f6:	f00d fbb1 	bl	11d5c <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    45fa:	2301      	movs	r3, #1
		{ isConnected = false;
		  connect(); }
    45fc:	4648      	mov	r0, r9
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    45fe:	f889 3009 	strb.w	r3, [r9, #9]
    4602:	9301      	str	r3, [sp, #4]
    4604:	f889 4008 	strb.w	r4, [r9, #8]
    4608:	f8c9 7000 	str.w	r7, [r9]
    460c:	f8c9 6004 	str.w	r6, [r9, #4]
    4610:	f8c9 400c 	str.w	r4, [r9, #12]
		{ isConnected = false;
    4614:	f889 4010 	strb.w	r4, [r9, #16]
		  connect(); }
    4618:	f008 fca8 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord2(playWav, 0, monMixer, 1);
    461c:	4a64      	ldr	r2, [pc, #400]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    461e:	4965      	ldr	r1, [pc, #404]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    4620:	4f65      	ldr	r7, [pc, #404]	; (47b8 <_GLOBAL__sub_I_i2sRec+0x400>)
    4622:	4648      	mov	r0, r9
    4624:	f00d fb9a 	bl	11d5c <__aeabi_atexit>
    4628:	4b64      	ldr	r3, [pc, #400]	; (47bc <_GLOBAL__sub_I_i2sRec+0x404>)
    462a:	f8c8 3004 	str.w	r3, [r8, #4]
		{ isConnected = false;
		  connect(); }
    462e:	4640      	mov	r0, r8
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    4630:	f888 4008 	strb.w	r4, [r8, #8]
    4634:	f8c8 b000 	str.w	fp, [r8]
    4638:	f888 4009 	strb.w	r4, [r8, #9]
    463c:	f8c8 400c 	str.w	r4, [r8, #12]
		{ isConnected = false;
    4640:	f888 4010 	strb.w	r4, [r8, #16]
		  connect(); }
    4644:	f008 fc92 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord3(biquad1, biquad2);
    4648:	4a59      	ldr	r2, [pc, #356]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    464a:	495a      	ldr	r1, [pc, #360]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    464c:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 47f8 <_GLOBAL__sub_I_i2sRec+0x440>
    4650:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 47fc <_GLOBAL__sub_I_i2sRec+0x444>
    4654:	4640      	mov	r0, r8
    4656:	f00d fb81 	bl	11d5c <__aeabi_atexit>
    465a:	4b58      	ldr	r3, [pc, #352]	; (47bc <_GLOBAL__sub_I_i2sRec+0x404>)
    465c:	603b      	str	r3, [r7, #0]
		{ isConnected = false;
		  connect(); }
    465e:	4638      	mov	r0, r7
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    4660:	4b57      	ldr	r3, [pc, #348]	; (47c0 <_GLOBAL__sub_I_i2sRec+0x408>)
    4662:	f8df 819c 	ldr.w	r8, [pc, #412]	; 4800 <_GLOBAL__sub_I_i2sRec+0x448>
    4666:	607b      	str	r3, [r7, #4]
    4668:	723c      	strb	r4, [r7, #8]
    466a:	727c      	strb	r4, [r7, #9]
    466c:	60fc      	str	r4, [r7, #12]
		{ isConnected = false;
    466e:	743c      	strb	r4, [r7, #16]
		  connect(); }
    4670:	f008 fc7c 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord4(biquad2, biquad3);
    4674:	4a4e      	ldr	r2, [pc, #312]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    4676:	494f      	ldr	r1, [pc, #316]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
    4678:	4638      	mov	r0, r7
    467a:	f00d fb6f 	bl	11d5c <__aeabi_atexit>
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    467e:	4b50      	ldr	r3, [pc, #320]	; (47c0 <_GLOBAL__sub_I_i2sRec+0x408>)
    4680:	f8c8 3000 	str.w	r3, [r8]
		{ isConnected = false;
		  connect(); }
    4684:	4640      	mov	r0, r8
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    4686:	4b4f      	ldr	r3, [pc, #316]	; (47c4 <_GLOBAL__sub_I_i2sRec+0x40c>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    4688:	4f4f      	ldr	r7, [pc, #316]	; (47c8 <_GLOBAL__sub_I_i2sRec+0x410>)
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    468a:	f8c8 3004 	str.w	r3, [r8, #4]
    468e:	f888 4008 	strb.w	r4, [r8, #8]
    4692:	f888 4009 	strb.w	r4, [r8, #9]
    4696:	f8c8 400c 	str.w	r4, [r8, #12]
		{ isConnected = false;
    469a:	f888 4010 	strb.w	r4, [r8, #16]
		  connect(); }
    469e:	f008 fc65 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord5(biquad3, biquad4);
    46a2:	4a43      	ldr	r2, [pc, #268]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    46a4:	4943      	ldr	r1, [pc, #268]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
    46a6:	4640      	mov	r0, r8
    46a8:	f00d fb58 	bl	11d5c <__aeabi_atexit>
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    46ac:	4b45      	ldr	r3, [pc, #276]	; (47c4 <_GLOBAL__sub_I_i2sRec+0x40c>)
    46ae:	723c      	strb	r4, [r7, #8]
		{ isConnected = false;
		  connect(); }
    46b0:	4638      	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    46b2:	e887 0048 	stmia.w	r7, {r3, r6}
    46b6:	727c      	strb	r4, [r7, #9]
    46b8:	60fc      	str	r4, [r7, #12]
		{ isConnected = false;
    46ba:	743c      	strb	r4, [r7, #16]
		  connect(); }
    46bc:	f008 fc56 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord6(biquad4, 0, monMixer, 0);
    46c0:	4a3b      	ldr	r2, [pc, #236]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    46c2:	493c      	ldr	r1, [pc, #240]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    46c4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 4804 <_GLOBAL__sub_I_i2sRec+0x44c>
    46c8:	4638      	mov	r0, r7
    46ca:	f00d fb47 	bl	11d5c <__aeabi_atexit>
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    46ce:	4b3d      	ldr	r3, [pc, #244]	; (47c4 <_GLOBAL__sub_I_i2sRec+0x40c>)
    46d0:	f8cb 3000 	str.w	r3, [fp]
		{ isConnected = false;
		  connect(); }
    46d4:	4658      	mov	r0, fp
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    46d6:	4b3d      	ldr	r3, [pc, #244]	; (47cc <_GLOBAL__sub_I_i2sRec+0x414>)
    46d8:	f8cb 3004 	str.w	r3, [fp, #4]
    46dc:	f88b 4008 	strb.w	r4, [fp, #8]
    46e0:	f88b 4009 	strb.w	r4, [fp, #9]
    46e4:	f8cb 400c 	str.w	r4, [fp, #12]
		{ isConnected = false;
    46e8:	f88b 4010 	strb.w	r4, [fp, #16]
		  connect(); }
    46ec:	f008 fc3e 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord7(biquad4, peak);
    46f0:	4a2f      	ldr	r2, [pc, #188]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    46f2:	4930      	ldr	r1, [pc, #192]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    46f4:	4f36      	ldr	r7, [pc, #216]	; (47d0 <_GLOBAL__sub_I_i2sRec+0x418>)
    46f6:	4658      	mov	r0, fp
    46f8:	f00d fb30 	bl	11d5c <__aeabi_atexit>
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    46fc:	4b31      	ldr	r3, [pc, #196]	; (47c4 <_GLOBAL__sub_I_i2sRec+0x40c>)
    46fe:	f889 4008 	strb.w	r4, [r9, #8]
		{ isConnected = false;
		  connect(); }
    4702:	4648      	mov	r0, r9
class AudioConnection
{
public:
	AudioConnection(AudioStream &source, AudioStream &destination) :
		src(source), dst(destination), src_index(0), dest_index(0),
		next_dest(NULL)
    4704:	e889 0408 	stmia.w	r9, {r3, sl}
    4708:	f889 4009 	strb.w	r4, [r9, #9]
    470c:	f8c9 400c 	str.w	r4, [r9, #12]
		{ isConnected = false;
    4710:	f889 4010 	strb.w	r4, [r9, #16]
		  connect(); }
    4714:	f008 fc2a 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord8(biquad4, queueSdc);
    4718:	4a25      	ldr	r2, [pc, #148]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    471a:	4926      	ldr	r1, [pc, #152]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
    471c:	4648      	mov	r0, r9
    471e:	f00d fb1d 	bl	11d5c <__aeabi_atexit>
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
		{ isConnected = false;
		  connect(); }
    4722:	4640      	mov	r0, r8
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    4724:	f888 4008 	strb.w	r4, [r8, #8]
    4728:	f8c8 6000 	str.w	r6, [r8]
    472c:	f8c8 5004 	str.w	r5, [r8, #4]
    4730:	f888 4009 	strb.w	r4, [r8, #9]
    4734:	f8c8 400c 	str.w	r4, [r8, #12]
		{ isConnected = false;
    4738:	f888 4010 	strb.w	r4, [r8, #16]
		  connect(); }
    473c:	f008 fc16 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord9(monMixer, 0, i2sMon, 0);
    4740:	4a1b      	ldr	r2, [pc, #108]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    4742:	491c      	ldr	r1, [pc, #112]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
    4744:	4640      	mov	r0, r8
    4746:	f00d fb09 	bl	11d5c <__aeabi_atexit>
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    474a:	9b01      	ldr	r3, [sp, #4]
    474c:	727b      	strb	r3, [r7, #9]
		{ isConnected = false;
		  connect(); }
    474e:	4638      	mov	r0, r7
		  connect(); }
	AudioConnection(AudioStream &source, unsigned char sourceOutput,
		AudioStream &destination, unsigned char destinationInput) :
		src(source), dst(destination),
		src_index(sourceOutput), dest_index(destinationInput),
		next_dest(NULL)
    4750:	603e      	str	r6, [r7, #0]
    4752:	607d      	str	r5, [r7, #4]
    4754:	723c      	strb	r4, [r7, #8]
    4756:	60fc      	str	r4, [r7, #12]
		{ isConnected = false;
    4758:	743c      	strb	r4, [r7, #16]
		  connect(); }
    475a:	f008 fc07 	bl	cf6c <AudioConnection::connect()>
AudioConnection          patchCord10(monMixer, 0, i2sMon, 1);
    475e:	4638      	mov	r0, r7
    4760:	4a13      	ldr	r2, [pc, #76]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    4762:	4914      	ldr	r1, [pc, #80]	; (47b4 <_GLOBAL__sub_I_i2sRec+0x3fc>)
    4764:	f00d fafa 	bl	11d5c <__aeabi_atexit>
#include "AudioControl.h"

class AudioControlSGTL5000 : public AudioControl
{
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    4768:	4b1a      	ldr	r3, [pc, #104]	; (47d4 <_GLOBAL__sub_I_i2sRec+0x41c>)
    476a:	4a1b      	ldr	r2, [pc, #108]	; (47d8 <_GLOBAL__sub_I_i2sRec+0x420>)
    476c:	601a      	str	r2, [r3, #0]
AudioControlSGTL5000     sgtl5000;       //xy=382,39
// GUItool: end automatically generated code
const int                     audioInput = AUDIO_INPUT_LINEIN;
String 												rec_path = "--";
    476e:	491b      	ldr	r1, [pc, #108]	; (47dc <_GLOBAL__sub_I_i2sRec+0x424>)
    4770:	481b      	ldr	r0, [pc, #108]	; (47e0 <_GLOBAL__sub_I_i2sRec+0x428>)
    4772:	220a      	movs	r2, #10
    4774:	721a      	strb	r2, [r3, #8]
    4776:	f009 f911 	bl	d99c <String::String(char const*)>
    477a:	4a0d      	ldr	r2, [pc, #52]	; (47b0 <_GLOBAL__sub_I_i2sRec+0x3f8>)
    477c:	4919      	ldr	r1, [pc, #100]	; (47e4 <_GLOBAL__sub_I_i2sRec+0x42c>)
    477e:	4818      	ldr	r0, [pc, #96]	; (47e0 <_GLOBAL__sub_I_i2sRec+0x428>)
    4780:	f00d faec 	bl	11d5c <__aeabi_atexit>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4784:	4a18      	ldr	r2, [pc, #96]	; (47e8 <_GLOBAL__sub_I_i2sRec+0x430>)
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
    4786:	4b19      	ldr	r3, [pc, #100]	; (47ec <_GLOBAL__sub_I_i2sRec+0x434>)
    4788:	6812      	ldr	r2, [r2, #0]
    478a:	9203      	str	r2, [sp, #12]
	return ret;
    478c:	9a03      	ldr	r2, [sp, #12]
    478e:	601a      	str	r2, [r3, #0]
	biquad4.setNotch(1, 170, 0.5);
	biquad4.setNotch(2, 170, 0.5);
	biquad4.setNotch(3, 170, 0.5);
  monMixer.gain(MIXER_CH_REC, 0);
  monMixer.gain(MIXER_CH_SDC, 0);
}
    4790:	b005      	add	sp, #20
    4792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				inputQueue[i] = NULL;
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
				first_update = this;
    4796:	f8c9 8000 	str.w	r8, [r9]
    479a:	e62a      	b.n	43f2 <_GLOBAL__sub_I_i2sRec+0x3a>
    479c:	6017      	str	r7, [r2, #0]
    479e:	e649      	b.n	4434 <_GLOBAL__sub_I_i2sRec+0x7c>
    47a0:	6019      	str	r1, [r3, #0]
    47a2:	e70a      	b.n	45ba <_GLOBAL__sub_I_i2sRec+0x202>
    47a4:	000174a8 	.word	0x000174a8
    47a8:	1fff61e8 	.word	0x1fff61e8
    47ac:	1fff5ac8 	.word	0x1fff5ac8
    47b0:	1fff4930 	.word	0x1fff4930
    47b4:	00003d31 	.word	0x00003d31
    47b8:	1fff5d90 	.word	0x1fff5d90
    47bc:	1fff5f04 	.word	0x1fff5f04
    47c0:	1fff5fa0 	.word	0x1fff5fa0
    47c4:	1fff603c 	.word	0x1fff603c
    47c8:	1fff5db8 	.word	0x1fff5db8
    47cc:	1fff5e44 	.word	0x1fff5e44
    47d0:	1fff5e08 	.word	0x1fff5e08
    47d4:	1fff5e30 	.word	0x1fff5e30
    47d8:	00017468 	.word	0x00017468
    47dc:	000172a4 	.word	0x000172a4
    47e0:	1fff5e1c 	.word	0x1fff5e1c
    47e4:	0000dbc1 	.word	0x0000dbc1
    47e8:	1fff6804 	.word	0x1fff6804
    47ec:	1fff5e3c 	.word	0x1fff5e3c
    47f0:	1fff5d68 	.word	0x1fff5d68
    47f4:	1fff5d7c 	.word	0x1fff5d7c
    47f8:	1fff5dcc 	.word	0x1fff5dcc
    47fc:	1fff5de0 	.word	0x1fff5de0
    4800:	1fff5da4 	.word	0x1fff5da4
    4804:	1fff5df4 	.word	0x1fff5df4

00004808 <continueRecording()>:
 * -----------------------
 * Write to the SD card and free the recording queue every 512 samples
 * IN:	- none
 * OUT:	- none
 */
void continueRecording(void) {
    4808:	b500      	push	{lr}
  if(queueSdc.available() >= 2) {
    480a:	4817      	ldr	r0, [pc, #92]	; (4868 <continueRecording()+0x60>)
 * -----------------------
 * Write to the SD card and free the recording queue every 512 samples
 * IN:	- none
 * OUT:	- none
 */
void continueRecording(void) {
    480c:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
  if(queueSdc.available() >= 2) {
    4810:	f002 f952 	bl	6ab8 <AudioRecordQueue::available()>
    4814:	2801      	cmp	r0, #1
    4816:	dd23      	ble.n	4860 <continueRecording()+0x58>
    byte buffer[512];
    // Fetch 2 blocks from the audio library and copy
    // into a 512 byte buffer.  The Arduino SD library
    // is most efficient when full 512 byte sector size
    // writes are used.
    memcpy(buffer, queueSdc.readBuffer(), 256);
    4818:	4813      	ldr	r0, [pc, #76]	; (4868 <continueRecording()+0x60>)
    481a:	f002 f97f 	bl	6b1c <AudioRecordQueue::readBuffer()>
    481e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4822:	4601      	mov	r1, r0
    4824:	4668      	mov	r0, sp
    4826:	f009 ff29 	bl	e67c <memcpy>
    queueSdc.freeBuffer();
    482a:	480f      	ldr	r0, [pc, #60]	; (4868 <continueRecording()+0x60>)
    482c:	f002 f994 	bl	6b58 <AudioRecordQueue::freeBuffer()>
    memcpy(buffer+256, queueSdc.readBuffer(), 256);
    4830:	480d      	ldr	r0, [pc, #52]	; (4868 <continueRecording()+0x60>)
    4832:	f002 f973 	bl	6b1c <AudioRecordQueue::readBuffer()>
    4836:	f44f 7280 	mov.w	r2, #256	; 0x100
    483a:	4601      	mov	r1, r0
    483c:	eb0d 0002 	add.w	r0, sp, r2
    4840:	f009 ff1c 	bl	e67c <memcpy>
    queueSdc.freeBuffer();
    4844:	4808      	ldr	r0, [pc, #32]	; (4868 <continueRecording()+0x60>)
    4846:	f002 f987 	bl	6b58 <AudioRecordQueue::freeBuffer()>
//    elapsedMicros usec = 0;
    frec.write(buffer, 512);
    484a:	f44f 7200 	mov.w	r2, #512	; 0x200
    484e:	4669      	mov	r1, sp
    4850:	4806      	ldr	r0, [pc, #24]	; (486c <continueRecording()+0x64>)
    4852:	f002 fb55 	bl	6f00 <SDLib::File::write(unsigned char const*, unsigned int)>
    tot_rec_bytes += 512;
    4856:	4a06      	ldr	r2, [pc, #24]	; (4870 <continueRecording()+0x68>)
    4858:	6813      	ldr	r3, [r2, #0]
    485a:	f503 7300 	add.w	r3, r3, #512	; 0x200
    485e:	6013      	str	r3, [r2, #0]
//    MONPORT.print("SD write, us=");
//    MONPORT.println(usec);
  }
}
    4860:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    4864:	f85d fb04 	ldr.w	pc, [sp], #4
    4868:	1fff60f0 	.word	0x1fff60f0
    486c:	1fff5a44 	.word	0x1fff5a44
    4870:	1fff5a40 	.word	0x1fff5a40

00004874 <stopRecording(String)>:
	int available(void);
	void clear(void);
	int16_t * readBuffer(void);
	void freeBuffer(void);
	void end(void) {
		enabled = 0;
    4874:	4a18      	ldr	r2, [pc, #96]	; (48d8 <stopRecording(String)+0x64>)
 * OUT:	- none
 */
void stopRecording(String path) {
  // MONPORT.println("Stop recording");
  queueSdc.end();
  if(working_state.rec_state) {
    4876:	4b19      	ldr	r3, [pc, #100]	; (48dc <stopRecording(String)+0x68>)
    4878:	2100      	movs	r1, #0
    487a:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
    487e:	781b      	ldrb	r3, [r3, #0]
    4880:	b34b      	cbz	r3, 48d6 <stopRecording(String)+0x62>
 * Stop the recording queue, write the remaining data
 * and the WAV header values to the SD card.
 * IN:	- none
 * OUT:	- none
 */
void stopRecording(String path) {
    4882:	b530      	push	{r4, r5, lr}
    4884:	4605      	mov	r5, r0
    4886:	b085      	sub	sp, #20
    4888:	4c15      	ldr	r4, [pc, #84]	; (48e0 <stopRecording(String)+0x6c>)
    488a:	e00e      	b.n	48aa <stopRecording(String)+0x36>
  // MONPORT.println("Stop recording");
  queueSdc.end();
  if(working_state.rec_state) {
    while(queueSdc.available() > 0) {
      frec.write((byte*)queueSdc.readBuffer(), 256);
    488c:	f002 f946 	bl	6b1c <AudioRecordQueue::readBuffer()>
    4890:	f44f 7280 	mov.w	r2, #256	; 0x100
    4894:	4601      	mov	r1, r0
    4896:	4813      	ldr	r0, [pc, #76]	; (48e4 <stopRecording(String)+0x70>)
    4898:	f002 fb32 	bl	6f00 <SDLib::File::write(unsigned char const*, unsigned int)>
      queueSdc.freeBuffer();
    489c:	480e      	ldr	r0, [pc, #56]	; (48d8 <stopRecording(String)+0x64>)
    489e:	f002 f95b 	bl	6b58 <AudioRecordQueue::freeBuffer()>
      tot_rec_bytes += 256;
    48a2:	6823      	ldr	r3, [r4, #0]
    48a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    48a8:	6023      	str	r3, [r4, #0]
 */
void stopRecording(String path) {
  // MONPORT.println("Stop recording");
  queueSdc.end();
  if(working_state.rec_state) {
    while(queueSdc.available() > 0) {
    48aa:	480b      	ldr	r0, [pc, #44]	; (48d8 <stopRecording(String)+0x64>)
    48ac:	f002 f904 	bl	6ab8 <AudioRecordQueue::available()>
    48b0:	2800      	cmp	r0, #0
      frec.write((byte*)queueSdc.readBuffer(), 256);
    48b2:	4809      	ldr	r0, [pc, #36]	; (48d8 <stopRecording(String)+0x64>)
 */
void stopRecording(String path) {
  // MONPORT.println("Stop recording");
  queueSdc.end();
  if(working_state.rec_state) {
    while(queueSdc.available() > 0) {
    48b4:	dcea      	bgt.n	488c <stopRecording(String)+0x18>
      frec.write((byte*)queueSdc.readBuffer(), 256);
      queueSdc.freeBuffer();
      tot_rec_bytes += 256;
    }
    frec.close();
    48b6:	480b      	ldr	r0, [pc, #44]	; (48e4 <stopRecording(String)+0x70>)
    48b8:	f002 fbe0 	bl	707c <SDLib::File::close()>

    writeWaveHeader(path, tot_rec_bytes);
    48bc:	4629      	mov	r1, r5
    48be:	4668      	mov	r0, sp
    48c0:	f009 f898 	bl	d9f4 <String::String(String const&)>
    48c4:	6821      	ldr	r1, [r4, #0]
    48c6:	4668      	mov	r0, sp
    48c8:	f7ff f9f4 	bl	3cb4 <writeWaveHeader(String, unsigned long)>
    48cc:	4668      	mov	r0, sp
    48ce:	f009 f977 	bl	dbc0 <String::~String()>
  }
}
    48d2:	b005      	add	sp, #20
    48d4:	bd30      	pop	{r4, r5, pc}
    48d6:	4770      	bx	lr
    48d8:	1fff60f0 	.word	0x1fff60f0
    48dc:	1fff5820 	.word	0x1fff5820
    48e0:	1fff5a40 	.word	0x1fff5a40
    48e4:	1fff5a44 	.word	0x1fff5a44

000048e8 <gpsPowerOn()>:
/* gpsPowerOn(void)
 * ----------------
 * Switch on GPS module
 */
void gpsPowerOn(void) {
	digitalWrite(GPS_SWITCH_PIN, HIGH);
    48e8:	2101      	movs	r1, #1
    48ea:	2003      	movs	r0, #3
    48ec:	f00a bb16 	b.w	ef1c <digitalWrite>

000048f0 <gpsPowerOff()>:
/* gpsPowerOff(void)
 * -----------------
 * Switch off GPS module
 */
void gpsPowerOff(void) {
	digitalWrite(GPS_SWITCH_PIN, LOW);
    48f0:	2100      	movs	r1, #0
    48f2:	2003      	movs	r0, #3
    48f4:	f00a bb12 	b.w	ef1c <digitalWrite>

000048f8 <gpsGetData()>:
 * ----------------
 * Capture NMEA strings on gps port and test validity
 * IN:	- none
 * OUT:	- valid fix received (bool)
 */
bool gpsGetData(void) {
    48f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    48fa:	2703      	movs	r7, #3
    48fc:	b085      	sub	sp, #20
    48fe:	4d28      	ldr	r5, [pc, #160]	; (49a0 <gpsGetData()+0xa8>)
    4900:	f105 0610 	add.w	r6, r5, #16

	// MONPORT.print("Getting GPS data ");
	do {
#if(GPS_STATIC==1)
		for (int i=0; i<4; ++i) {
			gpsSendString(gps, teststrs[i]);
    4904:	f855 4b04 	ldr.w	r4, [r5], #4
 * OUT:	- none
 */
#if(GPS_STATIC==1)
void gpsSendString(TinyGPS &gps, const char *str) {
	while (true) {
		char c = pgm_read_byte_near(str++);
    4908:	7821      	ldrb	r1, [r4, #0]
    490a:	3401      	adds	r4, #1
		if (!c) break;
    490c:	b131      	cbz	r1, 491c <gpsGetData()+0x24>
		gps.encode(c);
    490e:	4825      	ldr	r0, [pc, #148]	; (49a4 <gpsGetData()+0xac>)
    4910:	f007 fc3e 	bl	c190 <TinyGPS::encode(char)>
 * OUT:	- none
 */
#if(GPS_STATIC==1)
void gpsSendString(TinyGPS &gps, const char *str) {
	while (true) {
		char c = pgm_read_byte_near(str++);
    4914:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (!c) break;
    4918:	2900      	cmp	r1, #0
    491a:	d1f8      	bne.n	490e <gpsGetData()+0x16>
		gps.encode(c);
	}
	gps.encode('\r');
    491c:	210d      	movs	r1, #13
    491e:	4821      	ldr	r0, [pc, #132]	; (49a4 <gpsGetData()+0xac>)
    4920:	f007 fc36 	bl	c190 <TinyGPS::encode(char)>
	gps.encode('\n');
    4924:	210a      	movs	r1, #10
    4926:	481f      	ldr	r0, [pc, #124]	; (49a4 <gpsGetData()+0xac>)
    4928:	f007 fc32 	bl	c190 <TinyGPS::encode(char)>
	bool fix_found = false;

	// MONPORT.print("Getting GPS data ");
	do {
#if(GPS_STATIC==1)
		for (int i=0; i<4; ++i) {
    492c:	42b5      	cmp	r5, r6
    492e:	d1e9      	bne.n	4904 <gpsGetData()+0xc>
		}
#else
		gpsEncodeData(1000);
#endif	
		// gps.f_get_position(&flat, &flon, &age);
		gps.f_get_position(&cur_lat, &cur_long, &age);
    4930:	4c1d      	ldr	r4, [pc, #116]	; (49a8 <gpsGetData()+0xb0>)
    4932:	4d1e      	ldr	r5, [pc, #120]	; (49ac <gpsGetData()+0xb4>)
    4934:	481b      	ldr	r0, [pc, #108]	; (49a4 <gpsGetData()+0xac>)
    4936:	4622      	mov	r2, r4
    4938:	ab03      	add	r3, sp, #12
    493a:	4629      	mov	r1, r5
    493c:	f007 fc90 	bl	c260 <TinyGPS::f_get_position(float*, float*, unsigned long*)>
		if((age == TinyGPS::GPS_INVALID_AGE) || (age > 10000)) {
    4940:	9a03      	ldr	r2, [sp, #12]
    4942:	f242 7310 	movw	r3, #10000	; 0x2710
    4946:	429a      	cmp	r2, r3
    4948:	d912      	bls.n	4970 <gpsGetData()+0x78>
    494a:	1e7b      	subs	r3, r7, #1
			retries++;
		}
		else {
			fix_found = true;
		}
	} while((!fix_found) && (retries < 3));
    494c:	f013 07ff 	ands.w	r7, r3, #255	; 0xff
    4950:	d1d5      	bne.n	48fe <gpsGetData()+0x6>
	MONPORT.printf("Fix found? %d", fix_found);
    4952:	463a      	mov	r2, r7
    4954:	4916      	ldr	r1, [pc, #88]	; (49b0 <gpsGetData()+0xb8>)
    4956:	4817      	ldr	r0, [pc, #92]	; (49b4 <gpsGetData()+0xbc>)
    4958:	f008 ffda 	bl	d910 <Print::printf(char const*, ...)>
    495c:	4639      	mov	r1, r7
    495e:	4816      	ldr	r0, [pc, #88]	; (49b8 <gpsGetData()+0xc0>)
    4960:	f00b ff90 	bl	10884 <usb_serial_write>
    4964:	4813      	ldr	r0, [pc, #76]	; (49b4 <gpsGetData()+0xbc>)
    4966:	f008 ffbb 	bl	d8e0 <Print::println()>
    496a:	4638      	mov	r0, r7
	if(fix_found) MONPORT.printf(" fLat: %f, fLong: %f\n", cur_lat, cur_long);
	else MONPORT.println("");
	return fix_found;
}
    496c:	b005      	add	sp, #20
    496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		}
		else {
			fix_found = true;
		}
	} while((!fix_found) && (retries < 3));
	MONPORT.printf("Fix found? %d", fix_found);
    4970:	2201      	movs	r2, #1
    4972:	490f      	ldr	r1, [pc, #60]	; (49b0 <gpsGetData()+0xb8>)
    4974:	480f      	ldr	r0, [pc, #60]	; (49b4 <gpsGetData()+0xbc>)
    4976:	f008 ffcb 	bl	d910 <Print::printf(char const*, ...)>
	if(fix_found) MONPORT.printf(" fLat: %f, fLong: %f\n", cur_lat, cur_long);
    497a:	6828      	ldr	r0, [r5, #0]
    497c:	f00c fd28 	bl	113d0 <__aeabi_f2d>
    4980:	4606      	mov	r6, r0
    4982:	6820      	ldr	r0, [r4, #0]
    4984:	460f      	mov	r7, r1
    4986:	f00c fd23 	bl	113d0 <__aeabi_f2d>
    498a:	4632      	mov	r2, r6
    498c:	e9cd 0100 	strd	r0, r1, [sp]
    4990:	463b      	mov	r3, r7
    4992:	490a      	ldr	r1, [pc, #40]	; (49bc <gpsGetData()+0xc4>)
    4994:	4807      	ldr	r0, [pc, #28]	; (49b4 <gpsGetData()+0xbc>)
    4996:	f008 ffbb 	bl	d910 <Print::printf(char const*, ...)>
    499a:	2001      	movs	r0, #1
	else MONPORT.println("");
	return fix_found;
}
    499c:	b005      	add	sp, #20
    499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49a0:	1fff4938 	.word	0x1fff4938
    49a4:	1fff61fc 	.word	0x1fff61fc
    49a8:	1fff62e4 	.word	0x1fff62e4
    49ac:	1fff62e0 	.word	0x1fff62e0
    49b0:	000172f0 	.word	0x000172f0
    49b4:	1fff4b00 	.word	0x1fff4b00
    49b8:	00017130 	.word	0x00017130
    49bc:	00017300 	.word	0x00017300

000049c0 <_GLOBAL__sub_I_gps>:
 * 
 */
#include "gpsRoutines.h"

// GPS instance
TinyGPS												gps;
    49c0:	4801      	ldr	r0, [pc, #4]	; (49c8 <_GLOBAL__sub_I_gps+0x8>)
    49c2:	f006 be91 	b.w	b6e8 <TinyGPS::TinyGPS()>
    49c6:	bf00      	nop
    49c8:	1fff61fc 	.word	0x1fff61fc

000049cc <getTeensy3Time()>:
#ifdef __cplusplus
}
class teensy3_clock_class
{
public:
	static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    49cc:	f00a b94c 	b.w	ec68 <rtc_get>

000049d0 <setTimeSource()>:
 * Test if the time value stored in Teensy3Clock
 * has been already set once or is somewhere in the 70s.
 * IN:	- none
 * OUT:	- none
 */
void setTimeSource(void) {
    49d0:	b508      	push	{r3, lr}
	setSyncProvider(getTeensy3Time);
    49d2:	480a      	ldr	r0, [pc, #40]	; (49fc <setTimeSource()+0x2c>)
    49d4:	f006 fb54 	bl	b080 <setSyncProvider(long (*)())>
	MONPORT.printf("Time at startup: %ld\n", now());
    49d8:	f006 f9ae 	bl	ad38 <now()>
    49dc:	4908      	ldr	r1, [pc, #32]	; (4a00 <setTimeSource()+0x30>)
    49de:	4602      	mov	r2, r0
    49e0:	4808      	ldr	r0, [pc, #32]	; (4a04 <setTimeSource()+0x34>)
    49e2:	f008 ff95 	bl	d910 <Print::printf(char const*, ...)>
	if(now() < MIN_TIME_DEC) time_source = TSOURCE_NONE;
    49e6:	f006 f9a7 	bl	ad38 <now()>
    49ea:	4b07      	ldr	r3, [pc, #28]	; (4a08 <setTimeSource()+0x38>)
    49ec:	4a07      	ldr	r2, [pc, #28]	; (4a0c <setTimeSource()+0x3c>)
    49ee:	4298      	cmp	r0, r3
    49f0:	bfd4      	ite	le
    49f2:	2000      	movle	r0, #0
    49f4:	2001      	movgt	r0, #1
    49f6:	7010      	strb	r0, [r2, #0]
    49f8:	bd08      	pop	{r3, pc}
    49fa:	bf00      	nop
    49fc:	000049cd 	.word	0x000049cd
    4a00:	00017404 	.word	0x00017404
    4a04:	1fff4b00 	.word	0x1fff4b00
    4a08:	5c541764 	.word	0x5c541764
    4a0c:	1fff62f4 	.word	0x1fff62f4

00004a10 <setCurTime(long, tSources)>:
 * (GPS or app over BLE) which has provided a new value.
 * IN:	- time value (time_t)
 *			- external source (enum tSources)
 * OUT:	- none
 */
void setCurTime(time_t cur_time, enum tSources source) {
    4a10:	b530      	push	{r4, r5, lr}
	int year;
	byte month, day, hour, minute, second;
	unsigned long fix_age;
	
	switch(source) {
    4a12:	2902      	cmp	r1, #2
 * (GPS or app over BLE) which has provided a new value.
 * IN:	- time value (time_t)
 *			- external source (enum tSources)
 * OUT:	- none
 */
void setCurTime(time_t cur_time, enum tSources source) {
    4a14:	b08b      	sub	sp, #44	; 0x2c
	int year;
	byte month, day, hour, minute, second;
	unsigned long fix_age;
	
	switch(source) {
    4a16:	d00c      	beq.n	4a32 <setCurTime(long, tSources)+0x22>
    4a18:	2903      	cmp	r1, #3
    4a1a:	d108      	bne.n	4a2e <setCurTime(long, tSources)+0x1e>
    4a1c:	4604      	mov	r4, r0
			Teensy3Clock.set(now());
			time_source = TSOURCE_TEENSY;
			break;
			
		case TSOURCE_BLE:
			setTime(cur_time);
    4a1e:	f006 f9db 	bl	add8 <setTime(long)>
	static void set(unsigned long t) __attribute__((always_inline)) { rtc_set(t); }
    4a22:	4620      	mov	r0, r4
    4a24:	f00a f926 	bl	ec74 <rtc_set>
			Teensy3Clock.set(cur_time);
			time_source = TSOURCE_TEENSY;
    4a28:	4b1a      	ldr	r3, [pc, #104]	; (4a94 <setCurTime(long, tSources)+0x84>)
    4a2a:	2201      	movs	r2, #1
    4a2c:	701a      	strb	r2, [r3, #0]
		
		default:
			break;
	}
	// MONPORT.printf("Time adjusted from source#%d. Current time: %ld\n", source, now());
}
    4a2e:	b00b      	add	sp, #44	; 0x2c
    4a30:	bd30      	pop	{r4, r5, pc}
	byte month, day, hour, minute, second;
	unsigned long fix_age;
	
	switch(source) {
		case TSOURCE_GPS:
			gps.crack_datetime(&year, &month, &day, &hour, &minute, &second, NULL, &fix_age);
    4a32:	ac09      	add	r4, sp, #36	; 0x24
    4a34:	f10d 011f 	add.w	r1, sp, #31
    4a38:	f10d 021e 	add.w	r2, sp, #30
    4a3c:	f10d 031d 	add.w	r3, sp, #29
    4a40:	2000      	movs	r0, #0
    4a42:	9404      	str	r4, [sp, #16]
    4a44:	9003      	str	r0, [sp, #12]
    4a46:	9102      	str	r1, [sp, #8]
    4a48:	9201      	str	r2, [sp, #4]
    4a4a:	9300      	str	r3, [sp, #0]
    4a4c:	f10d 021b 	add.w	r2, sp, #27
    4a50:	ab07      	add	r3, sp, #28
    4a52:	a908      	add	r1, sp, #32
    4a54:	4810      	ldr	r0, [pc, #64]	; (4a98 <setCurTime(long, tSources)+0x88>)
    4a56:	f007 fc3b 	bl	c2d0 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)>
			setTime(hour, minute, second, day, month, year);
    4a5a:	9d08      	ldr	r5, [sp, #32]
    4a5c:	f89d 401b 	ldrb.w	r4, [sp, #27]
    4a60:	f89d 301c 	ldrb.w	r3, [sp, #28]
    4a64:	f89d 201f 	ldrb.w	r2, [sp, #31]
    4a68:	f89d 101e 	ldrb.w	r1, [sp, #30]
    4a6c:	f89d 001d 	ldrb.w	r0, [sp, #29]
    4a70:	e88d 0030 	stmia.w	sp, {r4, r5}
    4a74:	f006 f9d2 	bl	ae1c <setTime(int, int, int, int, int, int)>
			adjustTime(TIME_OFFSET * SECS_PER_HOUR);
    4a78:	f44f 6061 	mov.w	r0, #3600	; 0xe10
    4a7c:	f006 faf8 	bl	b070 <adjustTime(long)>
			Teensy3Clock.set(now());
    4a80:	f006 f95a 	bl	ad38 <now()>
    4a84:	f00a f8f6 	bl	ec74 <rtc_set>
			time_source = TSOURCE_TEENSY;
    4a88:	4b02      	ldr	r3, [pc, #8]	; (4a94 <setCurTime(long, tSources)+0x84>)
    4a8a:	2201      	movs	r2, #1
    4a8c:	701a      	strb	r2, [r3, #0]
		
		default:
			break;
	}
	// MONPORT.printf("Time adjusted from source#%d. Current time: %ld\n", source, now());
}
    4a8e:	b00b      	add	sp, #44	; 0x2c
    4a90:	bd30      	pop	{r4, r5, pc}
    4a92:	bf00      	nop
    4a94:	1fff62f4 	.word	0x1fff62f4
    4a98:	1fff61fc 	.word	0x1fff61fc

00004a9c <alarmAdvTimeout()>:
 * ---------------------
 * Callback of a TimeAlarms timer triggered when BLE advertising times out.
 * IN:	- none
 * OUT:	- none
 */
void alarmAdvTimeout(void) {
    4a9c:	b508      	push	{r3, lr}
	Alarm.free(alarm_adv_id);
    4a9e:	4b04      	ldr	r3, [pc, #16]	; (4ab0 <alarmAdvTimeout()+0x14>)
    4aa0:	4804      	ldr	r0, [pc, #16]	; (4ab4 <alarmAdvTimeout()+0x18>)
    4aa2:	7819      	ldrb	r1, [r3, #0]
    4aa4:	f006 fcfa 	bl	b49c <TimeAlarmsClass::free(unsigned char)>
	working_state.ble_state = BLESTATE_REQ_OFF;
    4aa8:	4b03      	ldr	r3, [pc, #12]	; (4ab8 <alarmAdvTimeout()+0x1c>)
    4aaa:	2207      	movs	r2, #7
    4aac:	70da      	strb	r2, [r3, #3]
    4aae:	bd08      	pop	{r3, pc}
    4ab0:	1fff62f0 	.word	0x1fff62f0
    4ab4:	1fff668c 	.word	0x1fff668c
    4ab8:	1fff5820 	.word	0x1fff5820

00004abc <timerRecDone()>:
 * ------------------
 * Callback of a TimeAlarms timer triggered when a recording is finished.
 * IN:	- none
 * OUT:	- none
 */
void timerRecDone(void) {
    4abc:	b508      	push	{r3, lr}
	Alarm.free(alarm_rec_id);
    4abe:	4b11      	ldr	r3, [pc, #68]	; (4b04 <timerRecDone()+0x48>)
    4ac0:	4811      	ldr	r0, [pc, #68]	; (4b08 <timerRecDone()+0x4c>)
    4ac2:	7819      	ldrb	r1, [r3, #0]
    4ac4:	f006 fcea 	bl	b49c <TimeAlarmsClass::free(unsigned char)>
	
	if((rec_window.occurences == 0) || (next_record.cnt < (rec_window.occurences-1))) {
    4ac8:	4b10      	ldr	r3, [pc, #64]	; (4b0c <timerRecDone()+0x50>)
    4aca:	691b      	ldr	r3, [r3, #16]
    4acc:	b1bb      	cbz	r3, 4afe <timerRecDone()+0x42>
    4ace:	4a10      	ldr	r2, [pc, #64]	; (4b10 <timerRecDone()+0x54>)
    4ad0:	69d2      	ldr	r2, [r2, #28]
    4ad2:	3b01      	subs	r3, #1
    4ad4:	429a      	cmp	r2, r3
    4ad6:	d207      	bcs.n	4ae8 <timerRecDone()+0x2c>
		MONPORT.printf("Recording done... counting: %d\n", next_record.cnt);
    4ad8:	490e      	ldr	r1, [pc, #56]	; (4b14 <timerRecDone()+0x58>)
    4ada:	480f      	ldr	r0, [pc, #60]	; (4b18 <timerRecDone()+0x5c>)
    4adc:	f008 ff18 	bl	d910 <Print::printf(char const*, ...)>
		working_state.rec_state = RECSTATE_REQ_WAIT;
    4ae0:	4b0e      	ldr	r3, [pc, #56]	; (4b1c <timerRecDone()+0x60>)
    4ae2:	2203      	movs	r2, #3
    4ae4:	701a      	strb	r2, [r3, #0]
    4ae6:	bd08      	pop	{r3, pc}
    4ae8:	2117      	movs	r1, #23
    4aea:	480d      	ldr	r0, [pc, #52]	; (4b20 <timerRecDone()+0x64>)
    4aec:	f00b feca 	bl	10884 <usb_serial_write>
    4af0:	4809      	ldr	r0, [pc, #36]	; (4b18 <timerRecDone()+0x5c>)
    4af2:	f008 fef5 	bl	d8e0 <Print::println()>
	}
	else {
		MONPORT.println("Recording set finished!");
		working_state.rec_state = RECSTATE_REQ_OFF;
    4af6:	4b09      	ldr	r3, [pc, #36]	; (4b1c <timerRecDone()+0x60>)
    4af8:	2208      	movs	r2, #8
    4afa:	701a      	strb	r2, [r3, #0]
    4afc:	bd08      	pop	{r3, pc}
    4afe:	4b04      	ldr	r3, [pc, #16]	; (4b10 <timerRecDone()+0x54>)
    4b00:	69da      	ldr	r2, [r3, #28]
    4b02:	e7e9      	b.n	4ad8 <timerRecDone()+0x1c>
    4b04:	1fff62e8 	.word	0x1fff62e8
    4b08:	1fff668c 	.word	0x1fff668c
    4b0c:	1fff57e0 	.word	0x1fff57e0
    4b10:	1fff5740 	.word	0x1fff5740
    4b14:	0001741c 	.word	0x0001741c
    4b18:	1fff4b00 	.word	0x1fff4b00
    4b1c:	1fff5820 	.word	0x1fff5820
    4b20:	0001743c 	.word	0x0001743c

00004b24 <alarmNextRec()>:
 * Callbak of a TimeAlarms alarm triggered when the waiting time 
 * between two recordings is elapsed.
 * IN:	- none
 * OUT:	- none
 */
void alarmNextRec(void) {
    4b24:	b508      	push	{r3, lr}
	Alarm.free(alarm_wait_id);
    4b26:	4b04      	ldr	r3, [pc, #16]	; (4b38 <alarmNextRec()+0x14>)
    4b28:	4804      	ldr	r0, [pc, #16]	; (4b3c <alarmNextRec()+0x18>)
    4b2a:	7819      	ldrb	r1, [r3, #0]
    4b2c:	f006 fcb6 	bl	b49c <TimeAlarmsClass::free(unsigned char)>
	// MONPORT.println("Next REC called");
	working_state.rec_state = RECSTATE_RESTART;
    4b30:	4b03      	ldr	r3, [pc, #12]	; (4b40 <alarmNextRec()+0x1c>)
    4b32:	2207      	movs	r2, #7
    4b34:	701a      	strb	r2, [r3, #0]
    4b36:	bd08      	pop	{r3, pc}
    4b38:	1fff62ec 	.word	0x1fff62ec
    4b3c:	1fff668c 	.word	0x1fff668c
    4b40:	1fff5820 	.word	0x1fff5820

00004b44 <AudioAnalyzePeak::update()>:

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
    4b44:	b570      	push	{r4, r5, r6, lr}
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
    4b46:	2100      	movs	r1, #0

#include <Arduino.h>
#include "analyze_peak.h"

void AudioAnalyzePeak::update(void)
{
    4b48:	4606      	mov	r6, r0
	audio_block_t *block;
	const int16_t *p, *end;
	int32_t min, max;

	block = receiveReadOnly();
    4b4a:	f008 f98f 	bl	ce6c <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) {
    4b4e:	b1c0      	cbz	r0, 4b82 <AudioAnalyzePeak::update()+0x3e>
		return;
	}
	p = block->data;
	end = p + AUDIO_BLOCK_SAMPLES;
	min = min_sample;
    4b50:	f9b6 401e 	ldrsh.w	r4, [r6, #30]
	max = max_sample;
    4b54:	f9b6 1020 	ldrsh.w	r1, [r6, #32]

	block = receiveReadOnly();
	if (!block) {
		return;
	}
	p = block->data;
    4b58:	1d03      	adds	r3, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES;
    4b5a:	f500 7582 	add.w	r5, r0, #260	; 0x104
	max = max_sample;
	do {
		int16_t d=*p++;
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
    4b5e:	f933 2b02 	ldrsh.w	r2, [r3], #2
    4b62:	4294      	cmp	r4, r2
    4b64:	bfa8      	it	ge
    4b66:	4614      	movge	r4, r2
    4b68:	4291      	cmp	r1, r2
    4b6a:	bfb8      	it	lt
    4b6c:	4611      	movlt	r1, r2
		if (d>max) max=d;
	} while (p < end);
    4b6e:	429d      	cmp	r5, r3
    4b70:	d8f5      	bhi.n	4b5e <AudioAnalyzePeak::update()+0x1a>
	min_sample = min;
	max_sample = max;
	new_output = true;
    4b72:	2301      	movs	r3, #1
		// TODO: can we speed this up with SSUB16 and SEL
		// http://www.m4-unleashed.com/parallel-comparison/
		if (d<min) min=d;
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
    4b74:	83f4      	strh	r4, [r6, #30]
	max_sample = max;
    4b76:	8431      	strh	r1, [r6, #32]
	new_output = true;
    4b78:	7733      	strb	r3, [r6, #28]
	release(block);
}
    4b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if (d>max) max=d;
	} while (p < end);
	min_sample = min;
	max_sample = max;
	new_output = true;
	release(block);
    4b7e:	f008 b931 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
    4b82:	bd70      	pop	{r4, r5, r6, pc}

00004b84 <AudioControlSGTL5000::disable()>:
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
    4b84:	2000      	movs	r0, #0
    4b86:	4770      	bx	lr

00004b88 <AudioControlSGTL5000::inputLevel(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
    4b88:	2000      	movs	r0, #0
    4b8a:	4770      	bx	lr

00004b8c <AudioControlSGTL5000::write(unsigned int, unsigned int)>:
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    4b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4b8e:	4c14      	ldr	r4, [pc, #80]	; (4be0 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x54>)
    4b90:	7a03      	ldrb	r3, [r0, #8]
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    4b92:	2924      	cmp	r1, #36	; 0x24
    4b94:	bf08      	it	eq
    4b96:	80c2      	strheq	r2, [r0, #6]
    4b98:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    4b9a:	2501      	movs	r5, #1
	val |= Wire.read();
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    4b9c:	460e      	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4b9e:	4620      	mov	r0, r4
    4ba0:	f3c1 2107 	ubfx	r1, r1, #8, #8
    4ba4:	4617      	mov	r7, r2
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4ba6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    4baa:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    4bae:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4bb2:	f007 fc4d 	bl	c450 <TwoWire::write(unsigned char)>
    4bb6:	b2f1      	uxtb	r1, r6
    4bb8:	4620      	mov	r0, r4
    4bba:	f007 fc49 	bl	c450 <TwoWire::write(unsigned char)>
    4bbe:	f3c7 2107 	ubfx	r1, r7, #8, #8
    4bc2:	4620      	mov	r0, r4
    4bc4:	f007 fc44 	bl	c450 <TwoWire::write(unsigned char)>
    4bc8:	b2f9      	uxtb	r1, r7
    4bca:	4620      	mov	r0, r4
    4bcc:	f007 fc40 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4bd0:	4629      	mov	r1, r5
    4bd2:	4620      	mov	r0, r4
    4bd4:	f007 fd10 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    4bd8:	fab0 f080 	clz	r0, r0
    4bdc:	0940      	lsrs	r0, r0, #5
    4bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4be0:	1fff49fc 	.word	0x1fff49fc

00004be4 <AudioControlSGTL5000::lineInLevel(unsigned char, unsigned char)>:
// 12: 0.40 Volts p-p
// 13: 0.34 Volts p-p
// 14: 0.29 Volts p-p
// 15: 0.24 Volts p-p
bool AudioControlSGTL5000::lineInLevel(uint8_t left, uint8_t right)
{
    4be4:	b570      	push	{r4, r5, r6, lr}
	if (left > 15) left = 15;
	if (right > 15) right = 15;
	return write(CHIP_ANA_ADC_CTRL, (left << 4) | right);
    4be6:	290f      	cmp	r1, #15
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4be8:	4c15      	ldr	r4, [pc, #84]	; (4c40 <AudioControlSGTL5000::lineInLevel(unsigned char, unsigned char)+0x5c>)
    4bea:	7a03      	ldrb	r3, [r0, #8]
    4bec:	bf28      	it	cs
    4bee:	210f      	movcs	r1, #15
    4bf0:	2a0f      	cmp	r2, #15
    4bf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4bf6:	bf28      	it	cs
    4bf8:	220f      	movcs	r2, #15
		transmitting = 1;
    4bfa:	2501      	movs	r5, #1
    4bfc:	460e      	mov	r6, r1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4bfe:	4620      	mov	r0, r4
    4c00:	2100      	movs	r1, #0
    4c02:	ea42 1606 	orr.w	r6, r2, r6, lsl #4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4c06:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    4c0a:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    4c0e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4c12:	f007 fc1d 	bl	c450 <TwoWire::write(unsigned char)>
    4c16:	4620      	mov	r0, r4
    4c18:	2120      	movs	r1, #32
    4c1a:	f007 fc19 	bl	c450 <TwoWire::write(unsigned char)>
    4c1e:	4620      	mov	r0, r4
    4c20:	2100      	movs	r1, #0
    4c22:	f007 fc15 	bl	c450 <TwoWire::write(unsigned char)>
    4c26:	b2f1      	uxtb	r1, r6
    4c28:	4620      	mov	r0, r4
    4c2a:	f007 fc11 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4c2e:	4629      	mov	r1, r5
    4c30:	4620      	mov	r0, r4
    4c32:	f007 fce1 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
}
    4c36:	fab0 f080 	clz	r0, r0
    4c3a:	0940      	lsrs	r0, r0, #5
    4c3c:	bd70      	pop	{r4, r5, r6, pc}
    4c3e:	bf00      	nop
    4c40:	1fff49fc 	.word	0x1fff49fc

00004c44 <AudioControlSGTL5000::lineOutLevel(unsigned char)>:
//  29: 1.29 Volts p-p
//  30: 1.22 Volts p-p
//  31: 1.16 Volts p-p
unsigned short AudioControlSGTL5000::lineOutLevel(uint8_t n)
{
	if (n > 31) n = 31;
    4c44:	291f      	cmp	r1, #31
//  28: 1.37 Volts p-p
//  29: 1.29 Volts p-p
//  30: 1.22 Volts p-p
//  31: 1.16 Volts p-p
unsigned short AudioControlSGTL5000::lineOutLevel(uint8_t n)
{
    4c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c48:	4606      	mov	r6, r0
	if (n > 31) n = 31;
    4c4a:	d840      	bhi.n	4cce <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x8a>
	else if (n < 13) n = 13;
    4c4c:	290c      	cmp	r1, #12
    4c4e:	d83b      	bhi.n	4cc8 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x84>
    4c50:	f640 550d 	movw	r5, #3341	; 0xd0d
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4c54:	4c33      	ldr	r4, [pc, #204]	; (4d24 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xe0>)
    4c56:	7a32      	ldrb	r2, [r6, #8]
		transmitting = 1;
    4c58:	2701      	movs	r7, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4c5a:	0052      	lsls	r2, r2, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4c5c:	2100      	movs	r1, #0
    4c5e:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4c60:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
		transmitting = 1;
    4c64:	f884 705e 	strb.w	r7, [r4, #94]	; 0x5e
		txBufferLength = 1;
    4c68:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4c6c:	f007 fbf0 	bl	c450 <TwoWire::write(unsigned char)>
    4c70:	212e      	movs	r1, #46	; 0x2e
    4c72:	4620      	mov	r0, r4
    4c74:	f007 fbec 	bl	c450 <TwoWire::write(unsigned char)>
{
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    4c78:	4620      	mov	r0, r4
    4c7a:	2100      	movs	r1, #0
    4c7c:	f007 fcbc 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
    4c80:	b350      	cbz	r0, 4cd8 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x94>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4c82:	2300      	movs	r3, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4c84:	7a32      	ldrb	r2, [r6, #8]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4c86:	4827      	ldr	r0, [pc, #156]	; (4d24 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xe0>)
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4c88:	0052      	lsls	r2, r2, #1
		transmitting = 1;
    4c8a:	2601      	movs	r6, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4c8c:	2100      	movs	r1, #0
	return false;
}

unsigned int AudioControlSGTL5000::modify(unsigned int reg, unsigned int val, unsigned int iMask)
{
	unsigned int val1 = (read(reg)&(~iMask))|val;
    4c8e:	431d      	orrs	r5, r3
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4c90:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
		transmitting = 1;
    4c94:	f884 605e 	strb.w	r6, [r4, #94]	; 0x5e
		txBufferLength = 1;
    4c98:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4c9c:	f007 fbd8 	bl	c450 <TwoWire::write(unsigned char)>
    4ca0:	212e      	movs	r1, #46	; 0x2e
    4ca2:	4820      	ldr	r0, [pc, #128]	; (4d24 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xe0>)
    4ca4:	f007 fbd4 	bl	c450 <TwoWire::write(unsigned char)>
    4ca8:	f3c5 2107 	ubfx	r1, r5, #8, #8
    4cac:	481d      	ldr	r0, [pc, #116]	; (4d24 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xe0>)
    4cae:	f007 fbcf 	bl	c450 <TwoWire::write(unsigned char)>
    4cb2:	b2e9      	uxtb	r1, r5
    4cb4:	481b      	ldr	r0, [pc, #108]	; (4d24 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xe0>)
    4cb6:	f007 fbcb 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4cba:	4631      	mov	r1, r6
    4cbc:	4819      	ldr	r0, [pc, #100]	; (4d24 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xe0>)
    4cbe:	f007 fc9b 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
    4cc2:	b138      	cbz	r0, 4cd4 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x90>
    4cc4:	2000      	movs	r0, #0
unsigned short AudioControlSGTL5000::lineOutLevel(uint8_t n)
{
	if (n > 31) n = 31;
	else if (n < 13) n = 13;
	return modify(CHIP_LINE_OUT_VOL,(n<<8)|n,(31<<8)|31);
}
    4cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cc8:	ea41 2501 	orr.w	r5, r1, r1, lsl #8
    4ccc:	e7c2      	b.n	4c54 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x10>
    4cce:	f641 751f 	movw	r5, #7967	; 0x1f1f
    4cd2:	e7bf      	b.n	4c54 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x10>
    4cd4:	b2a8      	uxth	r0, r5
    4cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    4cd8:	463b      	mov	r3, r7
    4cda:	2202      	movs	r2, #2
    4cdc:	7a31      	ldrb	r1, [r6, #8]
    4cde:	4620      	mov	r0, r4
    4ce0:	f007 fd14 	bl	c70c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    4ce4:	2801      	cmp	r0, #1
    4ce6:	d9cc      	bls.n	4c82 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x3e>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4ce8:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
    4cec:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
    4cf0:	4281      	cmp	r1, r0
    4cf2:	d214      	bcs.n	4d1e <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xda>
		return rxBuffer[rxBufferIndex++];
    4cf4:	1863      	adds	r3, r4, r1
    4cf6:	1c4a      	adds	r2, r1, #1
    4cf8:	b2d2      	uxtb	r2, r2
	val = Wire.read() << 8;
    4cfa:	7e1b      	ldrb	r3, [r3, #24]
    4cfc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4d00:	4290      	cmp	r0, r2
    4d02:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4d06:	d90a      	bls.n	4d1e <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xda>
		return rxBuffer[rxBufferIndex++];
    4d08:	4422      	add	r2, r4
    4d0a:	3102      	adds	r1, #2
    4d0c:	7e12      	ldrb	r2, [r2, #24]
    4d0e:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
    4d12:	4313      	orrs	r3, r2
    4d14:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d18:	f023 031f 	bic.w	r3, r3, #31
    4d1c:	e7b2      	b.n	4c84 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x40>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4d1e:	4b02      	ldr	r3, [pc, #8]	; (4d28 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0xe4>)
    4d20:	e7b0      	b.n	4c84 <AudioControlSGTL5000::lineOutLevel(unsigned char)+0x40>
    4d22:	bf00      	nop
    4d24:	1fff49fc 	.word	0x1fff49fc
    4d28:	ffffe0e0 	.word	0xffffe0e0

00004d2c <AudioControlSGTL5000::enable()>:
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    4d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	muted = true;
	Wire.begin();
    4d2e:	4ceb      	ldr	r4, [pc, #940]	; (50dc <AudioControlSGTL5000::enable()+0x3b0>)
	}
}

bool AudioControlSGTL5000::enable(void)
{
	muted = true;
    4d30:	2501      	movs	r5, #1
		i2c_addr = SGTL5000_I2C_ADDR_CS_HIGH;
	}
}

bool AudioControlSGTL5000::enable(void)
{
    4d32:	4606      	mov	r6, r0
	muted = true;
    4d34:	7105      	strb	r5, [r0, #4]
	Wire.begin();
    4d36:	4620      	mov	r0, r4
    4d38:	f007 fb9e 	bl	c478 <TwoWire::begin()>
	delay(5);
    4d3c:	2005      	movs	r0, #5
    4d3e:	f00a f95b 	bl	eff8 <delay>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4d42:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4d44:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4d48:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4d4a:	4620      	mov	r0, r4
    4d4c:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4d4e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4d52:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4d56:	f007 fb7b 	bl	c450 <TwoWire::write(unsigned char)>
    4d5a:	4620      	mov	r0, r4
    4d5c:	2130      	movs	r1, #48	; 0x30
    4d5e:	f007 fb77 	bl	c450 <TwoWire::write(unsigned char)>
    4d62:	4620      	mov	r0, r4
    4d64:	2140      	movs	r1, #64	; 0x40
    4d66:	f007 fb73 	bl	c450 <TwoWire::write(unsigned char)>
    4d6a:	4620      	mov	r0, r4
    4d6c:	2160      	movs	r1, #96	; 0x60
    4d6e:	f007 fb6f 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4d72:	4629      	mov	r1, r5
    4d74:	4620      	mov	r0, r4
    4d76:	f007 fc3f 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4d7a:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4d7c:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4d80:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4d82:	4620      	mov	r0, r4
    4d84:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4d86:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4d8a:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4d8e:	f007 fb5f 	bl	c450 <TwoWire::write(unsigned char)>
    4d92:	4620      	mov	r0, r4
    4d94:	2126      	movs	r1, #38	; 0x26
    4d96:	f007 fb5b 	bl	c450 <TwoWire::write(unsigned char)>
    4d9a:	4620      	mov	r0, r4
    4d9c:	2100      	movs	r1, #0
    4d9e:	f007 fb57 	bl	c450 <TwoWire::write(unsigned char)>
    4da2:	4620      	mov	r0, r4
    4da4:	216c      	movs	r1, #108	; 0x6c
    4da6:	f007 fb53 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4daa:	4629      	mov	r1, r5
    4dac:	4620      	mov	r0, r4
    4dae:	f007 fc23 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4db2:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4db4:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4db8:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4dba:	4620      	mov	r0, r4
    4dbc:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4dbe:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4dc2:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4dc6:	f007 fb43 	bl	c450 <TwoWire::write(unsigned char)>
    4dca:	4620      	mov	r0, r4
    4dcc:	2128      	movs	r1, #40	; 0x28
    4dce:	f007 fb3f 	bl	c450 <TwoWire::write(unsigned char)>
    4dd2:	4629      	mov	r1, r5
    4dd4:	4620      	mov	r0, r4
    4dd6:	f007 fb3b 	bl	c450 <TwoWire::write(unsigned char)>
    4dda:	4620      	mov	r0, r4
    4ddc:	21f2      	movs	r1, #242	; 0xf2
    4dde:	f007 fb37 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4de2:	4629      	mov	r1, r5
    4de4:	4620      	mov	r0, r4
    4de6:	f007 fc07 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4dea:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4dec:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4df0:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4df2:	4620      	mov	r0, r4
    4df4:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4df6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4dfa:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4dfe:	f007 fb27 	bl	c450 <TwoWire::write(unsigned char)>
    4e02:	4620      	mov	r0, r4
    4e04:	212c      	movs	r1, #44	; 0x2c
    4e06:	f007 fb23 	bl	c450 <TwoWire::write(unsigned char)>
    4e0a:	4620      	mov	r0, r4
    4e0c:	210f      	movs	r1, #15
    4e0e:	f007 fb1f 	bl	c450 <TwoWire::write(unsigned char)>
    4e12:	4620      	mov	r0, r4
    4e14:	2122      	movs	r1, #34	; 0x22
    4e16:	f007 fb1b 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4e1a:	4629      	mov	r1, r5
    4e1c:	4620      	mov	r0, r4
    4e1e:	f007 fbeb 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4e22:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4e24:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4e28:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4e2a:	4620      	mov	r0, r4
    4e2c:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4e2e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4e32:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4e36:	f007 fb0b 	bl	c450 <TwoWire::write(unsigned char)>
    4e3a:	4620      	mov	r0, r4
    4e3c:	213c      	movs	r1, #60	; 0x3c
    4e3e:	f007 fb07 	bl	c450 <TwoWire::write(unsigned char)>
    4e42:	4620      	mov	r0, r4
    4e44:	2144      	movs	r1, #68	; 0x44
    4e46:	f007 fb03 	bl	c450 <TwoWire::write(unsigned char)>
    4e4a:	4620      	mov	r0, r4
    4e4c:	2146      	movs	r1, #70	; 0x46
    4e4e:	f007 faff 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4e52:	4629      	mov	r1, r5
    4e54:	4620      	mov	r0, r4
    4e56:	f007 fbcf 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4e5a:	7a33      	ldrb	r3, [r6, #8]
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    4e5c:	f240 1237 	movw	r2, #311	; 0x137
    4e60:	80f2      	strh	r2, [r6, #6]
    4e62:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4e64:	4620      	mov	r0, r4
    4e66:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4e68:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    4e6c:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    4e70:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4e74:	f007 faec 	bl	c450 <TwoWire::write(unsigned char)>
    4e78:	4620      	mov	r0, r4
    4e7a:	2124      	movs	r1, #36	; 0x24
    4e7c:	f007 fae8 	bl	c450 <TwoWire::write(unsigned char)>
    4e80:	4629      	mov	r1, r5
    4e82:	4620      	mov	r0, r4
    4e84:	f007 fae4 	bl	c450 <TwoWire::write(unsigned char)>
    4e88:	4620      	mov	r0, r4
    4e8a:	2137      	movs	r1, #55	; 0x37
    4e8c:	f007 fae0 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4e90:	4629      	mov	r1, r5
    4e92:	4620      	mov	r0, r4
    4e94:	f007 fbb0 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4e98:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4e9a:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4e9e:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4ea0:	4620      	mov	r0, r4
    4ea2:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4ea4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4ea8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4eac:	f007 fad0 	bl	c450 <TwoWire::write(unsigned char)>
    4eb0:	4620      	mov	r0, r4
    4eb2:	2130      	movs	r1, #48	; 0x30
    4eb4:	f007 facc 	bl	c450 <TwoWire::write(unsigned char)>
    4eb8:	4620      	mov	r0, r4
    4eba:	2140      	movs	r1, #64	; 0x40
    4ebc:	f007 fac8 	bl	c450 <TwoWire::write(unsigned char)>
    4ec0:	4620      	mov	r0, r4
    4ec2:	21ff      	movs	r1, #255	; 0xff
    4ec4:	f007 fac4 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4ec8:	4629      	mov	r1, r5
    4eca:	4620      	mov	r0, r4
    4ecc:	f007 fb94 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4ed0:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4ed2:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4ed6:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4ed8:	4620      	mov	r0, r4
    4eda:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4edc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4ee0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4ee4:	f007 fab4 	bl	c450 <TwoWire::write(unsigned char)>
    4ee8:	4620      	mov	r0, r4
    4eea:	2102      	movs	r1, #2
    4eec:	f007 fab0 	bl	c450 <TwoWire::write(unsigned char)>
    4ef0:	4620      	mov	r0, r4
    4ef2:	2100      	movs	r1, #0
    4ef4:	f007 faac 	bl	c450 <TwoWire::write(unsigned char)>
    4ef8:	4620      	mov	r0, r4
    4efa:	2173      	movs	r1, #115	; 0x73
    4efc:	f007 faa8 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4f00:	4629      	mov	r1, r5
    4f02:	4620      	mov	r0, r4
    4f04:	f007 fb78 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
	write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
	delay(400);
    4f08:	f44f 70c8 	mov.w	r0, #400	; 0x190
    4f0c:	f00a f874 	bl	eff8 <delay>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f10:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4f12:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f16:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4f18:	4620      	mov	r0, r4
    4f1a:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f1c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4f20:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4f24:	f007 fa94 	bl	c450 <TwoWire::write(unsigned char)>
    4f28:	4620      	mov	r0, r4
    4f2a:	212e      	movs	r1, #46	; 0x2e
    4f2c:	f007 fa90 	bl	c450 <TwoWire::write(unsigned char)>
    4f30:	4620      	mov	r0, r4
    4f32:	211d      	movs	r1, #29
    4f34:	f007 fa8c 	bl	c450 <TwoWire::write(unsigned char)>
    4f38:	4620      	mov	r0, r4
    4f3a:	211d      	movs	r1, #29
    4f3c:	f007 fa88 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4f40:	4629      	mov	r1, r5
    4f42:	4620      	mov	r0, r4
    4f44:	f007 fb58 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f48:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4f4a:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f4e:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4f50:	4620      	mov	r0, r4
    4f52:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f54:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4f58:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4f5c:	f007 fa78 	bl	c450 <TwoWire::write(unsigned char)>
    4f60:	4620      	mov	r0, r4
    4f62:	2104      	movs	r1, #4
    4f64:	f007 fa74 	bl	c450 <TwoWire::write(unsigned char)>
    4f68:	4620      	mov	r0, r4
    4f6a:	2100      	movs	r1, #0
    4f6c:	f007 fa70 	bl	c450 <TwoWire::write(unsigned char)>
    4f70:	4620      	mov	r0, r4
    4f72:	2104      	movs	r1, #4
    4f74:	f007 fa6c 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4f78:	4629      	mov	r1, r5
    4f7a:	4620      	mov	r0, r4
    4f7c:	f007 fb3c 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f80:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4f82:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f86:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4f88:	4620      	mov	r0, r4
    4f8a:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4f8c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4f90:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4f94:	f007 fa5c 	bl	c450 <TwoWire::write(unsigned char)>
    4f98:	4620      	mov	r0, r4
    4f9a:	2106      	movs	r1, #6
    4f9c:	f007 fa58 	bl	c450 <TwoWire::write(unsigned char)>
    4fa0:	4629      	mov	r1, r5
    4fa2:	4620      	mov	r0, r4
    4fa4:	f007 fa54 	bl	c450 <TwoWire::write(unsigned char)>
    4fa8:	4620      	mov	r0, r4
    4faa:	2130      	movs	r1, #48	; 0x30
    4fac:	f007 fa50 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4fb0:	4629      	mov	r1, r5
    4fb2:	4620      	mov	r0, r4
    4fb4:	f007 fb20 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4fb8:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4fba:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4fbe:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4fc0:	4620      	mov	r0, r4
    4fc2:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4fc4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    4fc8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4fcc:	f007 fa40 	bl	c450 <TwoWire::write(unsigned char)>
    4fd0:	4620      	mov	r0, r4
    4fd2:	210a      	movs	r1, #10
    4fd4:	f007 fa3c 	bl	c450 <TwoWire::write(unsigned char)>
    4fd8:	4620      	mov	r0, r4
    4fda:	2100      	movs	r1, #0
    4fdc:	f007 fa38 	bl	c450 <TwoWire::write(unsigned char)>
    4fe0:	4620      	mov	r0, r4
    4fe2:	2110      	movs	r1, #16
    4fe4:	f007 fa34 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4fe8:	4629      	mov	r1, r5
    4fea:	4620      	mov	r0, r4
    4fec:	f007 fb04 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4ff0:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    4ff2:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4ff6:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    4ff8:	4620      	mov	r0, r4
    4ffa:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    4ffc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    5000:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5004:	f007 fa24 	bl	c450 <TwoWire::write(unsigned char)>
    5008:	4620      	mov	r0, r4
    500a:	210e      	movs	r1, #14
    500c:	f007 fa20 	bl	c450 <TwoWire::write(unsigned char)>
    5010:	4620      	mov	r0, r4
    5012:	2100      	movs	r1, #0
    5014:	f007 fa1c 	bl	c450 <TwoWire::write(unsigned char)>
    5018:	4620      	mov	r0, r4
    501a:	2100      	movs	r1, #0
    501c:	f007 fa18 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    5020:	4629      	mov	r1, r5
    5022:	4620      	mov	r0, r4
    5024:	f007 fae8 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5028:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    502a:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    502e:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5030:	4620      	mov	r0, r4
    5032:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5034:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    5038:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    503c:	f007 fa08 	bl	c450 <TwoWire::write(unsigned char)>
    5040:	4620      	mov	r0, r4
    5042:	2110      	movs	r1, #16
    5044:	f007 fa04 	bl	c450 <TwoWire::write(unsigned char)>
    5048:	4620      	mov	r0, r4
    504a:	213c      	movs	r1, #60	; 0x3c
    504c:	f007 fa00 	bl	c450 <TwoWire::write(unsigned char)>
    5050:	4620      	mov	r0, r4
    5052:	213c      	movs	r1, #60	; 0x3c
    5054:	f007 f9fc 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    5058:	4629      	mov	r1, r5
    505a:	4620      	mov	r0, r4
    505c:	f007 facc 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5060:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    5062:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5066:	40ab      	lsls	r3, r5
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5068:	4620      	mov	r0, r4
    506a:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    506c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    5070:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5074:	f007 f9ec 	bl	c450 <TwoWire::write(unsigned char)>
    5078:	4620      	mov	r0, r4
    507a:	2122      	movs	r1, #34	; 0x22
    507c:	f007 f9e8 	bl	c450 <TwoWire::write(unsigned char)>
    5080:	4620      	mov	r0, r4
    5082:	217f      	movs	r1, #127	; 0x7f
    5084:	f007 f9e4 	bl	c450 <TwoWire::write(unsigned char)>
    5088:	4620      	mov	r0, r4
    508a:	217f      	movs	r1, #127	; 0x7f
    508c:	f007 f9e0 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    5090:	4629      	mov	r1, r5
    5092:	4620      	mov	r0, r4
    5094:	f007 fab0 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5098:	7a33      	ldrb	r3, [r6, #8]
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    509a:	2736      	movs	r7, #54	; 0x36
    509c:	40ab      	lsls	r3, r5
    509e:	80f7      	strh	r7, [r6, #6]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    50a0:	4620      	mov	r0, r4
    50a2:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    50a4:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    50a8:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    50ac:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    50b0:	f007 f9ce 	bl	c450 <TwoWire::write(unsigned char)>
    50b4:	4620      	mov	r0, r4
    50b6:	2124      	movs	r1, #36	; 0x24
    50b8:	f007 f9ca 	bl	c450 <TwoWire::write(unsigned char)>
    50bc:	4620      	mov	r0, r4
    50be:	2100      	movs	r1, #0
    50c0:	f007 f9c6 	bl	c450 <TwoWire::write(unsigned char)>
    50c4:	4639      	mov	r1, r7
    50c6:	4620      	mov	r0, r4
    50c8:	f007 f9c2 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    50cc:	4629      	mov	r1, r5
    50ce:	4620      	mov	r0, r4
    50d0:	f007 fa92 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
	//mute = false;
	semi_automated = true;
    50d4:	7275      	strb	r5, [r6, #9]
	return true;
}
    50d6:	4628      	mov	r0, r5
    50d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50da:	bf00      	nop
    50dc:	1fff49fc 	.word	0x1fff49fc

000050e0 <AudioControlSGTL5000::volume(float)>:
public:
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
    50e0:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 524c <AudioControlSGTL5000::volume(float)+0x16c>
    50e4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 5250 <AudioControlSGTL5000::volume(float)+0x170>
    50e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    50ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    50f4:	4606      	mov	r6, r0
    50f6:	ee17 4a90 	vmov	r4, s15
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
    50fa:	2c00      	cmp	r4, #0
    50fc:	d05b      	beq.n	51b6 <AudioControlSGTL5000::volume(float)+0xd6>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    50fe:	2c80      	cmp	r4, #128	; 0x80
    5100:	d926      	bls.n	5150 <AudioControlSGTL5000::volume(float)+0x70>
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    5102:	7933      	ldrb	r3, [r6, #4]
{
	if (n == 0) {
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    5104:	2400      	movs	r4, #0
    5106:	4627      	mov	r7, r4
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    5108:	bb63      	cbnz	r3, 5164 <AudioControlSGTL5000::volume(float)+0x84>
    510a:	4d52      	ldr	r5, [pc, #328]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    510c:	7a33      	ldrb	r3, [r6, #8]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    510e:	4851      	ldr	r0, [pc, #324]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5110:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    5112:	2601      	movs	r6, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5114:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5116:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    511a:	f885 605e 	strb.w	r6, [r5, #94]	; 0x5e
		txBufferLength = 1;
    511e:	f885 605d 	strb.w	r6, [r5, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5122:	f007 f995 	bl	c450 <TwoWire::write(unsigned char)>
    5126:	2122      	movs	r1, #34	; 0x22
    5128:	484a      	ldr	r0, [pc, #296]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
    512a:	f007 f991 	bl	c450 <TwoWire::write(unsigned char)>
    512e:	4639      	mov	r1, r7
    5130:	4848      	ldr	r0, [pc, #288]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
    5132:	f007 f98d 	bl	c450 <TwoWire::write(unsigned char)>
    5136:	4621      	mov	r1, r4
    5138:	4846      	ldr	r0, [pc, #280]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
    513a:	f007 f989 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    513e:	4631      	mov	r1, r6
    5140:	4844      	ldr	r0, [pc, #272]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
    5142:	f007 fa59 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
    5146:	fab0 f080 	clz	r0, r0
    514a:	0940      	lsrs	r0, r0, #5
    514c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    5150:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	}
	if (muted) {
    5154:	7933      	ldrb	r3, [r6, #4]
    5156:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
    515a:	f3c4 2707 	ubfx	r7, r4, #8, #8
    515e:	b2e4      	uxtb	r4, r4
    5160:	2b00      	cmp	r3, #0
    5162:	d0d2      	beq.n	510a <AudioControlSGTL5000::volume(float)+0x2a>
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    5164:	f8b6 8006 	ldrh.w	r8, [r6, #6]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5168:	4d3a      	ldr	r5, [pc, #232]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
    516a:	7a33      	ldrb	r3, [r6, #8]
    516c:	f028 0810 	bic.w	r8, r8, #16
		muted = false;
    5170:	2100      	movs	r1, #0
    5172:	005b      	lsls	r3, r3, #1
    5174:	7131      	strb	r1, [r6, #4]
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    5176:	f8a6 8006 	strh.w	r8, [r6, #6]
		transmitting = 1;
    517a:	f04f 0901 	mov.w	r9, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    517e:	4628      	mov	r0, r5
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5180:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    5184:	f885 905e 	strb.w	r9, [r5, #94]	; 0x5e
		txBufferLength = 1;
    5188:	f885 905d 	strb.w	r9, [r5, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    518c:	f007 f960 	bl	c450 <TwoWire::write(unsigned char)>
    5190:	4628      	mov	r0, r5
    5192:	2124      	movs	r1, #36	; 0x24
    5194:	f007 f95c 	bl	c450 <TwoWire::write(unsigned char)>
    5198:	ea4f 2118 	mov.w	r1, r8, lsr #8
    519c:	4628      	mov	r0, r5
    519e:	f007 f957 	bl	c450 <TwoWire::write(unsigned char)>
    51a2:	f008 01ef 	and.w	r1, r8, #239	; 0xef
    51a6:	4628      	mov	r0, r5
    51a8:	f007 f952 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    51ac:	4649      	mov	r1, r9
    51ae:	4628      	mov	r0, r5
    51b0:	f007 fa22 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
    51b4:	e7aa      	b.n	510c <AudioControlSGTL5000::volume(float)+0x2c>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    51b6:	4d27      	ldr	r5, [pc, #156]	; (5254 <AudioControlSGTL5000::volume(float)+0x174>)
    51b8:	7a03      	ldrb	r3, [r0, #8]
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    51ba:	2701      	movs	r7, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    51bc:	ee17 1a90 	vmov	r1, s15
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    51c0:	40bb      	lsls	r3, r7
    51c2:	7107      	strb	r7, [r0, #4]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    51c4:	4628      	mov	r0, r5
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    51c6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    51ca:	f885 705e 	strb.w	r7, [r5, #94]	; 0x5e
		txBufferLength = 1;
    51ce:	f885 705d 	strb.w	r7, [r5, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    51d2:	f007 f93d 	bl	c450 <TwoWire::write(unsigned char)>
    51d6:	4628      	mov	r0, r5
    51d8:	2122      	movs	r1, #34	; 0x22
    51da:	f007 f939 	bl	c450 <TwoWire::write(unsigned char)>
    51de:	4628      	mov	r0, r5
    51e0:	217f      	movs	r1, #127	; 0x7f
    51e2:	f007 f935 	bl	c450 <TwoWire::write(unsigned char)>
    51e6:	4628      	mov	r0, r5
    51e8:	217f      	movs	r1, #127	; 0x7f
    51ea:	f007 f931 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    51ee:	4639      	mov	r1, r7
    51f0:	4628      	mov	r0, r5
    51f2:	f007 fa01 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    51f6:	f8b6 8006 	ldrh.w	r8, [r6, #6]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    51fa:	7a33      	ldrb	r3, [r6, #8]
    51fc:	f048 0810 	orr.w	r8, r8, #16
    5200:	fa1f f888 	uxth.w	r8, r8
    5204:	40bb      	lsls	r3, r7
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    5206:	f8a6 8006 	strh.w	r8, [r6, #6]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    520a:	4621      	mov	r1, r4
    520c:	4628      	mov	r0, r5
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    520e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    5212:	f885 705e 	strb.w	r7, [r5, #94]	; 0x5e
		txBufferLength = 1;
    5216:	f885 705d 	strb.w	r7, [r5, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    521a:	f007 f919 	bl	c450 <TwoWire::write(unsigned char)>
    521e:	4628      	mov	r0, r5
    5220:	2124      	movs	r1, #36	; 0x24
    5222:	f007 f915 	bl	c450 <TwoWire::write(unsigned char)>
    5226:	ea4f 2118 	mov.w	r1, r8, lsr #8
    522a:	4628      	mov	r0, r5
    522c:	f007 f910 	bl	c450 <TwoWire::write(unsigned char)>
    5230:	fa5f f188 	uxtb.w	r1, r8
    5234:	4628      	mov	r0, r5
    5236:	f007 f90b 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    523a:	4639      	mov	r1, r7
    523c:	4628      	mov	r0, r5
    523e:	f007 f9db 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
    5242:	fab0 f080 	clz	r0, r0
    5246:	0940      	lsrs	r0, r0, #5
    5248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    524c:	43010000 	.word	0x43010000
    5250:	3eff7cee 	.word	0x3eff7cee
    5254:	1fff49fc 	.word	0x1fff49fc

00005258 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    5258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    525c:	4606      	mov	r6, r0
	if (n == 0) {
    525e:	460c      	mov	r4, r1
    5260:	2900      	cmp	r1, #0
    5262:	d05b      	beq.n	531c <AudioControlSGTL5000::volumeInteger(unsigned int)+0xc4>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    5264:	2980      	cmp	r1, #128	; 0x80
    5266:	d926      	bls.n	52b6 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x5e>
		n = 0;
	} else {
		n = 0x80 - n;
	}
	if (muted) {
    5268:	7933      	ldrb	r3, [r6, #4]
    526a:	2500      	movs	r5, #0
    526c:	462f      	mov	r7, r5
    526e:	bb63      	cbnz	r3, 52ca <AudioControlSGTL5000::volumeInteger(unsigned int)+0x72>
    5270:	4c4f      	ldr	r4, [pc, #316]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5272:	7a33      	ldrb	r3, [r6, #8]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5274:	484e      	ldr	r0, [pc, #312]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5276:	005b      	lsls	r3, r3, #1
		transmitting = 1;
    5278:	2601      	movs	r6, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    527a:	2100      	movs	r1, #0
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    527c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    5280:	f884 605e 	strb.w	r6, [r4, #94]	; 0x5e
		txBufferLength = 1;
    5284:	f884 605d 	strb.w	r6, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5288:	f007 f8e2 	bl	c450 <TwoWire::write(unsigned char)>
    528c:	2122      	movs	r1, #34	; 0x22
    528e:	4848      	ldr	r0, [pc, #288]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
    5290:	f007 f8de 	bl	c450 <TwoWire::write(unsigned char)>
    5294:	4639      	mov	r1, r7
    5296:	4846      	ldr	r0, [pc, #280]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
    5298:	f007 f8da 	bl	c450 <TwoWire::write(unsigned char)>
    529c:	4629      	mov	r1, r5
    529e:	4844      	ldr	r0, [pc, #272]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
    52a0:	f007 f8d6 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    52a4:	4631      	mov	r1, r6
    52a6:	4842      	ldr	r0, [pc, #264]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
    52a8:	f007 f9a6 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
    52ac:	fab0 f080 	clz	r0, r0
    52b0:	0940      	lsrs	r0, r0, #5
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
}
    52b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
		n = 0;
	} else {
		n = 0x80 - n;
    52b6:	f1c1 0580 	rsb	r5, r1, #128	; 0x80
	}
	if (muted) {
    52ba:	7933      	ldrb	r3, [r6, #4]
    52bc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    52c0:	f3c5 2707 	ubfx	r7, r5, #8, #8
    52c4:	b2ed      	uxtb	r5, r5
    52c6:	2b00      	cmp	r3, #0
    52c8:	d0d2      	beq.n	5270 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x18>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    52ca:	f8b6 8006 	ldrh.w	r8, [r6, #6]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    52ce:	4c38      	ldr	r4, [pc, #224]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
    52d0:	7a33      	ldrb	r3, [r6, #8]
    52d2:	f028 0810 	bic.w	r8, r8, #16
		muted = false;
    52d6:	2100      	movs	r1, #0
    52d8:	005b      	lsls	r3, r3, #1
    52da:	7131      	strb	r1, [r6, #4]
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    52dc:	f8a6 8006 	strh.w	r8, [r6, #6]
		transmitting = 1;
    52e0:	f04f 0901 	mov.w	r9, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    52e4:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    52e6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    52ea:	f884 905e 	strb.w	r9, [r4, #94]	; 0x5e
		txBufferLength = 1;
    52ee:	f884 905d 	strb.w	r9, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    52f2:	f007 f8ad 	bl	c450 <TwoWire::write(unsigned char)>
    52f6:	4620      	mov	r0, r4
    52f8:	2124      	movs	r1, #36	; 0x24
    52fa:	f007 f8a9 	bl	c450 <TwoWire::write(unsigned char)>
    52fe:	ea4f 2118 	mov.w	r1, r8, lsr #8
    5302:	4620      	mov	r0, r4
    5304:	f007 f8a4 	bl	c450 <TwoWire::write(unsigned char)>
    5308:	f008 01ef 	and.w	r1, r8, #239	; 0xef
    530c:	4620      	mov	r0, r4
    530e:	f007 f89f 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    5312:	4649      	mov	r1, r9
    5314:	4620      	mov	r0, r4
    5316:	f007 f96f 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
    531a:	e7aa      	b.n	5272 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x1a>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    531c:	4d24      	ldr	r5, [pc, #144]	; (53b0 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x158>)
    531e:	7a03      	ldrb	r3, [r0, #8]
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
	if (n == 0) {
		muted = true;
    5320:	2701      	movs	r7, #1
    5322:	40bb      	lsls	r3, r7
    5324:	7107      	strb	r7, [r0, #4]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5326:	4628      	mov	r0, r5
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5328:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    532c:	f885 705e 	strb.w	r7, [r5, #94]	; 0x5e
		txBufferLength = 1;
    5330:	f885 705d 	strb.w	r7, [r5, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5334:	f007 f88c 	bl	c450 <TwoWire::write(unsigned char)>
    5338:	4628      	mov	r0, r5
    533a:	2122      	movs	r1, #34	; 0x22
    533c:	f007 f888 	bl	c450 <TwoWire::write(unsigned char)>
    5340:	4628      	mov	r0, r5
    5342:	217f      	movs	r1, #127	; 0x7f
    5344:	f007 f884 	bl	c450 <TwoWire::write(unsigned char)>
    5348:	4628      	mov	r0, r5
    534a:	217f      	movs	r1, #127	; 0x7f
    534c:	f007 f880 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    5350:	4639      	mov	r1, r7
    5352:	4628      	mov	r0, r5
    5354:	f007 f950 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	void setAddress(uint8_t level);
	bool enable(void);
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499); }
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    5358:	f8b6 8006 	ldrh.w	r8, [r6, #6]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    535c:	7a33      	ldrb	r3, [r6, #8]
    535e:	f048 0810 	orr.w	r8, r8, #16
    5362:	fa1f f888 	uxth.w	r8, r8
    5366:	40bb      	lsls	r3, r7
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    5368:	f8a6 8006 	strh.w	r8, [r6, #6]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    536c:	4621      	mov	r1, r4
    536e:	4628      	mov	r0, r5
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5370:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    5374:	f885 705e 	strb.w	r7, [r5, #94]	; 0x5e
		txBufferLength = 1;
    5378:	f885 705d 	strb.w	r7, [r5, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    537c:	f007 f868 	bl	c450 <TwoWire::write(unsigned char)>
    5380:	4628      	mov	r0, r5
    5382:	2124      	movs	r1, #36	; 0x24
    5384:	f007 f864 	bl	c450 <TwoWire::write(unsigned char)>
    5388:	ea4f 2118 	mov.w	r1, r8, lsr #8
    538c:	4628      	mov	r0, r5
    538e:	f007 f85f 	bl	c450 <TwoWire::write(unsigned char)>
    5392:	fa5f f188 	uxtb.w	r1, r8
    5396:	4628      	mov	r0, r5
    5398:	f007 f85a 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    539c:	4639      	mov	r1, r7
    539e:	4628      	mov	r0, r5
    53a0:	f007 f92a 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
    53a4:	fab0 f080 	clz	r0, r0
    53a8:	0940      	lsrs	r0, r0, #5
    53aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    53ae:	bf00      	nop
    53b0:	1fff49fc 	.word	0x1fff49fc

000053b4 <AudioControlSGTL5000::inputSelect(int)>:
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    53b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53b6:	4606      	mov	r6, r0
		if (n == AUDIO_INPUT_LINEIN) {
    53b8:	460d      	mov	r5, r1
    53ba:	b119      	cbz	r1, 53c4 <AudioControlSGTL5000::inputSelect(int)+0x10>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    53bc:	2901      	cmp	r1, #1
    53be:	d045      	beq.n	544c <AudioControlSGTL5000::inputSelect(int)+0x98>
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
		if (n == AUDIO_INPUT_LINEIN) {
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    53c0:	2000      	movs	r0, #0
    53c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    53c4:	4c53      	ldr	r4, [pc, #332]	; (5514 <AudioControlSGTL5000::inputSelect(int)+0x160>)
    53c6:	7a03      	ldrb	r3, [r0, #8]
		transmitting = 1;
    53c8:	2701      	movs	r7, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    53ca:	005b      	lsls	r3, r3, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    53cc:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    53ce:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    53d2:	f884 705e 	strb.w	r7, [r4, #94]	; 0x5e
		txBufferLength = 1;
    53d6:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    53da:	f007 f839 	bl	c450 <TwoWire::write(unsigned char)>
    53de:	2120      	movs	r1, #32
    53e0:	4620      	mov	r0, r4
    53e2:	f007 f835 	bl	c450 <TwoWire::write(unsigned char)>
    53e6:	4629      	mov	r1, r5
    53e8:	4620      	mov	r0, r4
    53ea:	f007 f831 	bl	c450 <TwoWire::write(unsigned char)>
    53ee:	2155      	movs	r1, #85	; 0x55
    53f0:	4620      	mov	r0, r4
    53f2:	f007 f82d 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    53f6:	4639      	mov	r1, r7
    53f8:	4620      	mov	r0, r4
    53fa:	f007 f8fd 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
    53fe:	2800      	cmp	r0, #0
    5400:	d1de      	bne.n	53c0 <AudioControlSGTL5000::inputSelect(int)+0xc>
    5402:	88f5      	ldrh	r5, [r6, #6]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5404:	7a33      	ldrb	r3, [r6, #8]
    5406:	f045 0504 	orr.w	r5, r5, #4
    540a:	b2ad      	uxth	r5, r5
    540c:	005b      	lsls	r3, r3, #1
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    540e:	80f5      	strh	r5, [r6, #6]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5410:	4601      	mov	r1, r0
    5412:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5414:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    5418:	f884 705e 	strb.w	r7, [r4, #94]	; 0x5e
		txBufferLength = 1;
    541c:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5420:	f007 f816 	bl	c450 <TwoWire::write(unsigned char)>
    5424:	2124      	movs	r1, #36	; 0x24
    5426:	4620      	mov	r0, r4
    5428:	f007 f812 	bl	c450 <TwoWire::write(unsigned char)>
    542c:	0a29      	lsrs	r1, r5, #8
    542e:	4620      	mov	r0, r4
    5430:	f007 f80e 	bl	c450 <TwoWire::write(unsigned char)>
    5434:	b2e9      	uxtb	r1, r5
    5436:	4620      	mov	r0, r4
    5438:	f007 f80a 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    543c:	4639      	mov	r1, r7
    543e:	4620      	mov	r0, r4
    5440:	f007 f8da 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
    5444:	fab0 f080 	clz	r0, r0
    5448:	0940      	lsrs	r0, r0, #5
    544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    544c:	4c31      	ldr	r4, [pc, #196]	; (5514 <AudioControlSGTL5000::inputSelect(int)+0x160>)
    544e:	7a03      	ldrb	r3, [r0, #8]
		transmitting = 1;
    5450:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5454:	005b      	lsls	r3, r3, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5456:	2100      	movs	r1, #0
    5458:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    545a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    545e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5462:	f006 fff5 	bl	c450 <TwoWire::write(unsigned char)>
    5466:	212a      	movs	r1, #42	; 0x2a
    5468:	4620      	mov	r0, r4
    546a:	f006 fff1 	bl	c450 <TwoWire::write(unsigned char)>
    546e:	4629      	mov	r1, r5
    5470:	4620      	mov	r0, r4
    5472:	f006 ffed 	bl	c450 <TwoWire::write(unsigned char)>
    5476:	2173      	movs	r1, #115	; 0x73
    5478:	4620      	mov	r0, r4
    547a:	f006 ffe9 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    547e:	4629      	mov	r1, r5
    5480:	4620      	mov	r0, r4
    5482:	f007 f8b9 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
    5486:	4607      	mov	r7, r0
    5488:	2800      	cmp	r0, #0
    548a:	d199      	bne.n	53c0 <AudioControlSGTL5000::inputSelect(int)+0xc>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    548c:	7a33      	ldrb	r3, [r6, #8]
		transmitting = 1;
    548e:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5492:	005b      	lsls	r3, r3, #1
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    5494:	4601      	mov	r1, r0
    5496:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    5498:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
		txBufferLength = 1;
    549c:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    54a0:	f006 ffd6 	bl	c450 <TwoWire::write(unsigned char)>
    54a4:	2120      	movs	r1, #32
    54a6:	4620      	mov	r0, r4
    54a8:	f006 ffd2 	bl	c450 <TwoWire::write(unsigned char)>
    54ac:	4639      	mov	r1, r7
    54ae:	4620      	mov	r0, r4
    54b0:	f006 ffce 	bl	c450 <TwoWire::write(unsigned char)>
    54b4:	2188      	movs	r1, #136	; 0x88
    54b6:	4620      	mov	r0, r4
    54b8:	f006 ffca 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    54bc:	4629      	mov	r1, r5
    54be:	4620      	mov	r0, r4
    54c0:	f007 f89a 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
    54c4:	2800      	cmp	r0, #0
    54c6:	f47f af7b 	bne.w	53c0 <AudioControlSGTL5000::inputSelect(int)+0xc>
		} else if (n == AUDIO_INPUT_MIC) {
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    54ca:	88f7      	ldrh	r7, [r6, #6]
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    54cc:	7a33      	ldrb	r3, [r6, #8]
    54ce:	f027 0704 	bic.w	r7, r7, #4
    54d2:	005b      	lsls	r3, r3, #1
	return val;
}

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    54d4:	80f7      	strh	r7, [r6, #6]
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    54d6:	4601      	mov	r1, r0
    54d8:	4620      	mov	r0, r4
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    54da:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    54de:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    54e2:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    54e6:	f006 ffb3 	bl	c450 <TwoWire::write(unsigned char)>
    54ea:	2124      	movs	r1, #36	; 0x24
    54ec:	4620      	mov	r0, r4
    54ee:	f006 ffaf 	bl	c450 <TwoWire::write(unsigned char)>
    54f2:	0a39      	lsrs	r1, r7, #8
    54f4:	4620      	mov	r0, r4
    54f6:	f006 ffab 	bl	c450 <TwoWire::write(unsigned char)>
    54fa:	f007 01fb 	and.w	r1, r7, #251	; 0xfb
    54fe:	4620      	mov	r0, r4
    5500:	f006 ffa6 	bl	c450 <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    5504:	4629      	mov	r1, r5
    5506:	4620      	mov	r0, r4
    5508:	f007 f876 	bl	c5f8 <TwoWire::endTransmission(unsigned char)>
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
    550c:	fab0 f080 	clz	r0, r0
    5510:	0940      	lsrs	r0, r0, #5
		} else {
			return false;
		}
	}
    5512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5514:	1fff49fc 	.word	0x1fff49fc

00005518 <AudioFilterBiquad::update()>:
#include "utility/dspinst.h"

#if defined(KINETISK)

void AudioFilterBiquad::update(void)
{
    5518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    551c:	b083      	sub	sp, #12
	audio_block_t *block;
	int32_t b0, b1, b2, a1, a2, sum;
	uint32_t in2, out2, bprev, aprev, flag;
	uint32_t *data, *end;
	int32_t *state;
	block = receiveWritable();
    551e:	2100      	movs	r1, #0
#include "utility/dspinst.h"

#if defined(KINETISK)

void AudioFilterBiquad::update(void)
{
    5520:	4604      	mov	r4, r0
    5522:	9000      	str	r0, [sp, #0]
	audio_block_t *block;
	int32_t b0, b1, b2, a1, a2, sum;
	uint32_t in2, out2, bprev, aprev, flag;
	uint32_t *data, *end;
	int32_t *state;
	block = receiveWritable();
    5524:	f007 fcae 	bl	ce84 <AudioStream::receiveWritable(unsigned int)>
	if (!block) return;
    5528:	9001      	str	r0, [sp, #4]
    552a:	2800      	cmp	r0, #0
    552c:	d05e      	beq.n	55ec <AudioFilterBiquad::update()+0xd4>
	end = (uint32_t *)(block->data) + AUDIO_BLOCK_SAMPLES/2;
    552e:	f500 7982 	add.w	r9, r0, #260	; 0x104
    5532:	f100 0a04 	add.w	sl, r0, #4
    5536:	f104 0838 	add.w	r8, r4, #56	; 0x38
	state = (int32_t *)definition;
	do {
		b0 = *state++;
		b1 = *state++;
		b2 = *state++;
    553a:	f1a8 0b20 	sub.w	fp, r8, #32
		a1 = *state++;
		a2 = *state++;
		bprev = *state++;
		aprev = *state++;
		sum = *state & 0x3FFF;
    553e:	f858 2c04 	ldr.w	r2, [r8, #-4]
		b0 = *state++;
		b1 = *state++;
		b2 = *state++;
		a1 = *state++;
		a2 = *state++;
		bprev = *state++;
    5542:	f858 4c0c 	ldr.w	r4, [r8, #-12]
	do {
		b0 = *state++;
		b1 = *state++;
		b2 = *state++;
		a1 = *state++;
		a2 = *state++;
    5546:	f858 6c10 	ldr.w	r6, [r8, #-16]
	state = (int32_t *)definition;
	do {
		b0 = *state++;
		b1 = *state++;
		b2 = *state++;
		a1 = *state++;
    554a:	f858 7c14 	ldr.w	r7, [r8, #-20]
		a2 = *state++;
		bprev = *state++;
		aprev = *state++;
    554e:	f858 1c08 	ldr.w	r1, [r8, #-8]
	end = (uint32_t *)(block->data) + AUDIO_BLOCK_SAMPLES/2;
	state = (int32_t *)definition;
	do {
		b0 = *state++;
		b1 = *state++;
		b2 = *state++;
    5552:	e89b 5800 	ldmia.w	fp, {fp, ip, lr}
		a1 = *state++;
		a2 = *state++;
		bprev = *state++;
		aprev = *state++;
		sum = *state & 0x3FFF;
    5556:	f3c2 030d 	ubfx	r3, r2, #0, #14
		data = end - AUDIO_BLOCK_SAMPLES/2;
    555a:	4655      	mov	r5, sl
    555c:	461a      	mov	r2, r3
    555e:	4623      	mov	r3, r4
    5560:	4654      	mov	r4, sl
    5562:	46c2      	mov	sl, r8
    5564:	46b0      	mov	r8, r6
		do {
			in2 = *data;
    5566:	6828      	ldr	r0, [r5, #0]
// computes (sum + ((a[31:0] * b[15:0]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawb %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5568:	fb3b 2200 	smlawb	r2, fp, r0, r2
// computes (sum + ((a[31:0] * b[31:16]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawt %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    556c:	fb3c 2213 	smlawt	r2, ip, r3, r2
// computes (sum + ((a[31:0] * b[15:0]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawb %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5570:	fb3e 2203 	smlawb	r2, lr, r3, r2
// computes (sum + ((a[31:0] * b[31:16]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawt %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5574:	fb37 2211 	smlawt	r2, r7, r1, r2
// computes (sum + ((a[31:0] * b[15:0]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawb %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5578:	fb38 2201 	smlawb	r2, r8, r1, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    557c:	f322 368f 	ssat	r6, #16, r2, asr #14
			sum = signed_multiply_accumulate_32x16t(sum, b1, bprev);
			sum = signed_multiply_accumulate_32x16b(sum, b2, bprev);
			sum = signed_multiply_accumulate_32x16t(sum, a1, aprev);
			sum = signed_multiply_accumulate_32x16b(sum, a2, aprev);
			out2 = signed_saturate_rshift(sum, 16, 14);
			sum &= 0x3FFF;
    5580:	f3c2 020d 	ubfx	r2, r2, #0, #14
// computes (sum + ((a[31:0] * b[31:16]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawt %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5584:	fb3b 2210 	smlawt	r2, fp, r0, r2
// computes (sum + ((a[31:0] * b[15:0]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawb %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5588:	fb3c 2200 	smlawb	r2, ip, r0, r2
// computes (sum + ((a[31:0] * b[31:16]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawt %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    558c:	fb3e 2313 	smlawt	r3, lr, r3, r2
// computes (sum + ((a[31:0] * b[15:0]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16b(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawb %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5590:	fb37 3306 	smlawb	r3, r7, r6, r3
// computes (sum + ((a[31:0] * b[31:16]) >> 16))
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_accumulate_32x16t(int32_t sum, int32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("smlawt %0, %2, %3, %1" : "=r" (out) : "r" (sum), "r" (a), "r" (b));
    5594:	fb38 3311 	smlawt	r3, r8, r1, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    5598:	f323 318f 	ssat	r1, #16, r3, asr #14
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    559c:	eac6 4101 	pkhbt	r1, r6, r1, lsl #16
			bprev = in2;
			aprev = pack_16b_16b(
				signed_saturate_rshift(sum, 16, 14), out2);
			sum &= 0x3FFF;
			bprev = in2;
			*data++ = aprev;
    55a0:	f845 1b04 	str.w	r1, [r5], #4
		} while (data < end);
    55a4:	45a9      	cmp	r9, r5
			sum = signed_multiply_accumulate_32x16b(sum, a1, out2);
			sum = signed_multiply_accumulate_32x16t(sum, a2, aprev);
			bprev = in2;
			aprev = pack_16b_16b(
				signed_saturate_rshift(sum, 16, 14), out2);
			sum &= 0x3FFF;
    55a6:	f3c3 020d 	ubfx	r2, r3, #0, #14
		bprev = *state++;
		aprev = *state++;
		sum = *state & 0x3FFF;
		data = end - AUDIO_BLOCK_SAMPLES/2;
		do {
			in2 = *data;
    55aa:	4603      	mov	r3, r0
			aprev = pack_16b_16b(
				signed_saturate_rshift(sum, 16, 14), out2);
			sum &= 0x3FFF;
			bprev = in2;
			*data++ = aprev;
		} while (data < end);
    55ac:	d8db      	bhi.n	5566 <AudioFilterBiquad::update()+0x4e>
    55ae:	46d0      	mov	r8, sl
    55b0:	46a2      	mov	sl, r4
    55b2:	4604      	mov	r4, r0
		flag = *state & 0x80000000;
    55b4:	f858 0c04 	ldr.w	r0, [r8, #-4]
		*state++ = sum | flag;
		*(state-2) = aprev;
    55b8:	f848 1c08 	str.w	r1, [r8, #-8]
    55bc:	4613      	mov	r3, r2
				signed_saturate_rshift(sum, 16, 14), out2);
			sum &= 0x3FFF;
			bprev = in2;
			*data++ = aprev;
		} while (data < end);
		flag = *state & 0x80000000;
    55be:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
		*state++ = sum | flag;
    55c2:	4303      	orrs	r3, r0
		*(state-2) = aprev;
		*(state-3) = bprev;
    55c4:	f848 4c0c 	str.w	r4, [r8, #-12]
			sum &= 0x3FFF;
			bprev = in2;
			*data++ = aprev;
		} while (data < end);
		flag = *state & 0x80000000;
		*state++ = sum | flag;
    55c8:	f848 3c04 	str.w	r3, [r8, #-4]
    55cc:	f108 0820 	add.w	r8, r8, #32
	int32_t *state;
	block = receiveWritable();
	if (!block) return;
	end = (uint32_t *)(block->data) + AUDIO_BLOCK_SAMPLES/2;
	state = (int32_t *)definition;
	do {
    55d0:	2800      	cmp	r0, #0
    55d2:	d1b2      	bne.n	553a <AudioFilterBiquad::update()+0x22>
		flag = *state & 0x80000000;
		*state++ = sum | flag;
		*(state-2) = aprev;
		*(state-3) = bprev;
	} while (flag);
	transmit(block);
    55d4:	4602      	mov	r2, r0
    55d6:	e89d 0011 	ldmia.w	sp, {r0, r4}
    55da:	4621      	mov	r1, r4
    55dc:	f007 fc2c 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    55e0:	4620      	mov	r0, r4
}
    55e2:	b003      	add	sp, #12
    55e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		*state++ = sum | flag;
		*(state-2) = aprev;
		*(state-3) = bprev;
	} while (flag);
	transmit(block);
	release(block);
    55e8:	f007 bbfc 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
}
    55ec:	b003      	add	sp, #12
    55ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55f2:	bf00      	nop

000055f4 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)>:

void AudioFilterBiquad::setCoefficients(uint32_t stage, const int *coefficients)
{
	if (stage >= 4) return;
    55f4:	2903      	cmp	r1, #3
    55f6:	d817      	bhi.n	5628 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)+0x34>
	transmit(block);
	release(block);
}

void AudioFilterBiquad::setCoefficients(uint32_t stage, const int *coefficients)
{
    55f8:	b470      	push	{r4, r5, r6}
	if (stage >= 4) return;
	int32_t *dest = definition + (stage << 3);
    55fa:	3018      	adds	r0, #24
    55fc:	014c      	lsls	r4, r1, #5
    55fe:	1903      	adds	r3, r0, r4
	__disable_irq();
    5600:	b672      	cpsid	i
	if (stage > 0) *(dest - 1) |= 0x80000000;
    5602:	b991      	cbnz	r1, 562a <AudioFilterBiquad::setCoefficients(unsigned long, int const*)+0x36>
	*dest++ = *coefficients++;
    5604:	6811      	ldr	r1, [r2, #0]
    5606:	5101      	str	r1, [r0, r4]
	*dest++ = *coefficients++;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++ * -1;
    5608:	68d0      	ldr	r0, [r2, #12]
	*dest++ = *coefficients++ * -1;
    560a:	6911      	ldr	r1, [r2, #16]
	//*dest++ = 0;
	//*dest++ = 0;  // clearing filter state causes loud pop
	dest += 2;
	*dest   &= 0x80000000;
    560c:	69dc      	ldr	r4, [r3, #28]
	if (stage >= 4) return;
	int32_t *dest = definition + (stage << 3);
	__disable_irq();
	if (stage > 0) *(dest - 1) |= 0x80000000;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++;
    560e:	6856      	ldr	r6, [r2, #4]
	*dest++ = *coefficients++;
    5610:	6895      	ldr	r5, [r2, #8]
    5612:	609d      	str	r5, [r3, #8]
	*dest++ = *coefficients++ * -1;
	*dest++ = *coefficients++ * -1;
	//*dest++ = 0;
	//*dest++ = 0;  // clearing filter state causes loud pop
	dest += 2;
	*dest   &= 0x80000000;
    5614:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
	__disable_irq();
	if (stage > 0) *(dest - 1) |= 0x80000000;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++ * -1;
    5618:	4240      	negs	r0, r0
	*dest++ = *coefficients++ * -1;
    561a:	424a      	negs	r2, r1
	if (stage >= 4) return;
	int32_t *dest = definition + (stage << 3);
	__disable_irq();
	if (stage > 0) *(dest - 1) |= 0x80000000;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++;
    561c:	605e      	str	r6, [r3, #4]
	*dest++ = *coefficients++ * -1;
	*dest++ = *coefficients++ * -1;
	//*dest++ = 0;
	//*dest++ = 0;  // clearing filter state causes loud pop
	dest += 2;
	*dest   &= 0x80000000;
    561e:	61dc      	str	r4, [r3, #28]
	__disable_irq();
	if (stage > 0) *(dest - 1) |= 0x80000000;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++;
	*dest++ = *coefficients++ * -1;
    5620:	60d8      	str	r0, [r3, #12]
	*dest++ = *coefficients++ * -1;
    5622:	611a      	str	r2, [r3, #16]
	//*dest++ = 0;
	//*dest++ = 0;  // clearing filter state causes loud pop
	dest += 2;
	*dest   &= 0x80000000;
	__enable_irq();
    5624:	b662      	cpsie	i
}
    5626:	bc70      	pop	{r4, r5, r6}
    5628:	4770      	bx	lr
void AudioFilterBiquad::setCoefficients(uint32_t stage, const int *coefficients)
{
	if (stage >= 4) return;
	int32_t *dest = definition + (stage << 3);
	__disable_irq();
	if (stage > 0) *(dest - 1) |= 0x80000000;
    562a:	f853 1c04 	ldr.w	r1, [r3, #-4]
    562e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    5632:	f843 1c04 	str.w	r1, [r3, #-4]
    5636:	e7e5      	b.n	5604 <AudioFilterBiquad::setCoefficients(unsigned long, int const*)+0x10>

00005638 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
    5638:	b510      	push	{r4, lr}
    563a:	4604      	mov	r4, r0
		release();
    563c:	f007 fdf2 	bl	d224 <DMAChannel::release()>
	}
    5640:	4620      	mov	r0, r4
    5642:	bd10      	pop	{r4, pc}

00005644 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE>:
uint16_t AudioInputAnalog::block_offset = 0;
int32_t AudioInputAnalog::hpf_y1 = 0;
int32_t AudioInputAnalog::hpf_x1 = 0;

bool AudioInputAnalog::update_responsibility = false;
DMAChannel AudioInputAnalog::dma(false);
    5644:	4a02      	ldr	r2, [pc, #8]	; (5650 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0xc>)
    5646:	4903      	ldr	r1, [pc, #12]	; (5654 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x10>)
    5648:	4803      	ldr	r0, [pc, #12]	; (5658 <_GLOBAL__sub_I__ZN16AudioInputAnalog10block_leftE+0x14>)
    564a:	f00c bb87 	b.w	11d5c <__aeabi_atexit>
    564e:	bf00      	nop
    5650:	1fff4930 	.word	0x1fff4930
    5654:	00005639 	.word	0x00005639
    5658:	1fff62f8 	.word	0x1fff62f8

0000565c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE>:
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    565c:	b538      	push	{r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_left = 0;
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
    565e:	4d07      	ldr	r5, [pc, #28]	; (567c <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x20>)
    5660:	4c07      	ldr	r4, [pc, #28]	; (5680 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x24>)
    5662:	4808      	ldr	r0, [pc, #32]	; (5684 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x28>)
    5664:	462a      	mov	r2, r5
    5666:	4621      	mov	r1, r4
    5668:	f00c fb78 	bl	11d5c <__aeabi_atexit>
DMAChannel AudioInputAnalogStereo::dma1(false);
    566c:	462a      	mov	r2, r5
    566e:	4621      	mov	r1, r4
    5670:	4805      	ldr	r0, [pc, #20]	; (5688 <_GLOBAL__sub_I__ZN22AudioInputAnalogStereo10block_leftE+0x2c>)
        while (1) {
                if ((ADC1_SC1A & ADC_SC1_COCO)) {
                        return ADC1_RA;
                }
        }
}
    5672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
uint16_t AudioInputAnalogStereo::offset_right = 0;
int32_t AudioInputAnalogStereo::hpf_y1[2] = { 0, 0 };
int32_t AudioInputAnalogStereo::hpf_x1[2] = { 0, 0 };
bool AudioInputAnalogStereo::update_responsibility = false;
DMAChannel AudioInputAnalogStereo::dma0(false);
DMAChannel AudioInputAnalogStereo::dma1(false);
    5676:	f00c bb71 	b.w	11d5c <__aeabi_atexit>
    567a:	bf00      	nop
    567c:	1fff4930 	.word	0x1fff4930
    5680:	00005639 	.word	0x00005639
    5684:	1fff6300 	.word	0x1fff6300
    5688:	1fff6308 	.word	0x1fff6308

0000568c <AudioInputI2S::isr()>:
	int16_t *dest_left, *dest_right;
	audio_block_t *left, *right;

	//digitalWriteFast(3, HIGH);
#if defined(KINETISK)
	daddr = (uint32_t)(dma.TCD->DADDR);
    568c:	4a1a      	ldr	r2, [pc, #104]	; (56f8 <AudioInputI2S::isr()+0x6c>)
#endif
	dma.clearInterrupt();

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    568e:	4b1b      	ldr	r3, [pc, #108]	; (56fc <AudioInputI2S::isr()+0x70>)
	int16_t *dest_left, *dest_right;
	audio_block_t *left, *right;

	//digitalWriteFast(3, HIGH);
#if defined(KINETISK)
	daddr = (uint32_t)(dma.TCD->DADDR);
    5690:	6811      	ldr	r1, [r2, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    5692:	481b      	ldr	r0, [pc, #108]	; (5700 <AudioInputI2S::isr()+0x74>)
    5694:	6909      	ldr	r1, [r1, #16]
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
	dma.attachInterrupt(isr);
}

void AudioInputI2S::isr(void)
{
    5696:	b470      	push	{r4, r5, r6}
#if defined(KINETISK)
	daddr = (uint32_t)(dma.TCD->DADDR);
#endif
	dma.clearInterrupt();

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
    5698:	4299      	cmp	r1, r3
    569a:	7912      	ldrb	r2, [r2, #4]
    569c:	7002      	strb	r2, [r0, #0]
    569e:	d208      	bcs.n	56b2 <AudioInputI2S::isr()+0x26>
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
    56a0:	4a18      	ldr	r2, [pc, #96]	; (5704 <AudioInputI2S::isr()+0x78>)
    56a2:	7812      	ldrb	r2, [r2, #0]
    56a4:	b32a      	cbz	r2, 56f2 <AudioInputI2S::isr()+0x66>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    56a6:	4a18      	ldr	r2, [pc, #96]	; (5708 <AudioInputI2S::isr()+0x7c>)
    56a8:	2101      	movs	r1, #1
    56aa:	6011      	str	r1, [r2, #0]

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    56ac:	f503 7480 	add.w	r4, r3, #256	; 0x100
    56b0:	e002      	b.n	56b8 <AudioInputI2S::isr()+0x2c>
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
    56b2:	461c      	mov	r4, r3
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
		if (AudioInputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
    56b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = AudioInputI2S::block_left;
    56b8:	4a14      	ldr	r2, [pc, #80]	; (570c <AudioInputI2S::isr()+0x80>)
	right = AudioInputI2S::block_right;
    56ba:	4915      	ldr	r1, [pc, #84]	; (5710 <AudioInputI2S::isr()+0x84>)
		// DMA is receiving to the second half of the buffer
		// need to remove data from the first half
		src = (int16_t *)&i2s_rx_buffer[0];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
	}
	left = AudioInputI2S::block_left;
    56bc:	6812      	ldr	r2, [r2, #0]
	right = AudioInputI2S::block_right;
    56be:	680d      	ldr	r5, [r1, #0]
	if (left != NULL && right != NULL) {
    56c0:	b1aa      	cbz	r2, 56ee <AudioInputI2S::isr()+0x62>
    56c2:	b1a5      	cbz	r5, 56ee <AudioInputI2S::isr()+0x62>
		offset = AudioInputI2S::block_offset;
    56c4:	4e13      	ldr	r6, [pc, #76]	; (5714 <AudioInputI2S::isr()+0x88>)
    56c6:	8830      	ldrh	r0, [r6, #0]
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
    56c8:	2840      	cmp	r0, #64	; 0x40
    56ca:	d810      	bhi.n	56ee <AudioInputI2S::isr()+0x62>
			dest_left = &(left->data[offset]);
    56cc:	0041      	lsls	r1, r0, #1
    56ce:	440a      	add	r2, r1
			dest_right = &(right->data[offset]);
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    56d0:	3040      	adds	r0, #64	; 0x40
	right = AudioInputI2S::block_right;
	if (left != NULL && right != NULL) {
		offset = AudioInputI2S::block_offset;
		if (offset <= AUDIO_BLOCK_SAMPLES/2) {
			dest_left = &(left->data[offset]);
			dest_right = &(right->data[offset]);
    56d2:	4429      	add	r1, r5
    56d4:	3202      	adds	r2, #2
    56d6:	3102      	adds	r1, #2
			AudioInputI2S::block_offset = offset + AUDIO_BLOCK_SAMPLES/2;
    56d8:	8030      	strh	r0, [r6, #0]
			do {
				//n = *src++;
				//*dest_left++ = (int16_t)n;
				//*dest_right++ = (int16_t)(n >> 16);
				*dest_left++ = *src++;
    56da:	f933 0b04 	ldrsh.w	r0, [r3], #4
    56de:	f822 0f02 	strh.w	r0, [r2, #2]!
				*dest_right++ = *src++;
			} while (src < end);
    56e2:	429c      	cmp	r4, r3
			do {
				//n = *src++;
				//*dest_left++ = (int16_t)n;
				//*dest_right++ = (int16_t)(n >> 16);
				*dest_left++ = *src++;
				*dest_right++ = *src++;
    56e4:	f933 0c02 	ldrsh.w	r0, [r3, #-2]
    56e8:	f821 0f02 	strh.w	r0, [r1, #2]!
			} while (src < end);
    56ec:	d8f5      	bhi.n	56da <AudioInputI2S::isr()+0x4e>
		}
	}
	//digitalWriteFast(3, LOW);
}
    56ee:	bc70      	pop	{r4, r5, r6}
    56f0:	4770      	bx	lr

	if (daddr < (uint32_t)i2s_rx_buffer + sizeof(i2s_rx_buffer) / 2) {
		// DMA is receiving to the first half of the buffer
		// need to remove data from the second half
		src = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES/2];
		end = (int16_t *)&i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
    56f2:	f503 7480 	add.w	r4, r3, #256	; 0x100
    56f6:	e7df      	b.n	56b8 <AudioInputI2S::isr()+0x2c>
    56f8:	1fff6318 	.word	0x1fff6318
    56fc:	1fff3ff0 	.word	0x1fff3ff0
    5700:	4000801f 	.word	0x4000801f
    5704:	1fff6312 	.word	0x1fff6312
    5708:	e000e208 	.word	0xe000e208
    570c:	1fff6320 	.word	0x1fff6320
    5710:	1fff6314 	.word	0x1fff6314
    5714:	1fff6310 	.word	0x1fff6310

00005718 <AudioInputI2S::update()>:
}



void AudioInputI2S::update(void)
{
    5718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    571a:	4606      	mov	r6, r0
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;

	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
    571c:	f007 fb0e 	bl	cd3c <AudioStream::allocate()>
	if (new_left != NULL) {
    5720:	4604      	mov	r4, r0
    5722:	b1e8      	cbz	r0, 5760 <AudioInputI2S::update()+0x48>
		new_right = allocate();
    5724:	f007 fb0a 	bl	cd3c <AudioStream::allocate()>
		if (new_right == NULL) {
    5728:	4605      	mov	r5, r0
    572a:	2800      	cmp	r0, #0
    572c:	d03a      	beq.n	57a4 <AudioInputI2S::update()+0x8c>
			release(new_left);
			new_left = NULL;
		}
	}
	__disable_irq();
    572e:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    5730:	4b1f      	ldr	r3, [pc, #124]	; (57b0 <AudioInputI2S::update()+0x98>)
    5732:	881a      	ldrh	r2, [r3, #0]
    5734:	2a7f      	cmp	r2, #127	; 0x7f
    5736:	d819      	bhi.n	576c <AudioInputI2S::update()+0x54>
		transmit(out_left, 0);
		release(out_left);
		transmit(out_right, 1);
		release(out_right);
		//Serial.print(".");
	} else if (new_left != NULL) {
    5738:	2c00      	cmp	r4, #0
    573a:	d031      	beq.n	57a0 <AudioInputI2S::update()+0x88>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
    573c:	491d      	ldr	r1, [pc, #116]	; (57b4 <AudioInputI2S::update()+0x9c>)
    573e:	680a      	ldr	r2, [r1, #0]
    5740:	b142      	cbz	r2, 5754 <AudioInputI2S::update()+0x3c>
			block_right = new_right;
			block_offset = 0;
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
    5742:	b662      	cpsie	i
			release(new_left);
    5744:	4620      	mov	r0, r4
    5746:	f007 fb4d 	bl	cde4 <AudioStream::release(audio_block_struct*)>
			release(new_right);
    574a:	4628      	mov	r0, r5
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    574c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			__enable_irq();
		} else {
			// the DMA already has blocks, doesn't need these
			__enable_irq();
			release(new_left);
			release(new_right);
    5750:	f007 bb48 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
			block_right = new_right;
    5754:	4818      	ldr	r0, [pc, #96]	; (57b8 <AudioInputI2S::update()+0xa0>)
	} else if (new_left != NULL) {
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
    5756:	600c      	str	r4, [r1, #0]
			block_right = new_right;
			block_offset = 0;
    5758:	801a      	strh	r2, [r3, #0]
		// the DMA didn't fill blocks, but we allocated blocks
		if (block_left == NULL) {
			// the DMA doesn't have any blocks to fill, so
			// give it the ones we just allocated
			block_left = new_left;
			block_right = new_right;
    575a:	6005      	str	r5, [r0, #0]
			block_offset = 0;
			__enable_irq();
    575c:	b662      	cpsie	i
    575e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}



void AudioInputI2S::update(void)
{
	audio_block_t *new_left=NULL, *new_right=NULL, *out_left=NULL, *out_right=NULL;
    5760:	4605      	mov	r5, r0
		if (new_right == NULL) {
			release(new_left);
			new_left = NULL;
		}
	}
	__disable_irq();
    5762:	b672      	cpsid	i
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    5764:	4b12      	ldr	r3, [pc, #72]	; (57b0 <AudioInputI2S::update()+0x98>)
    5766:	881a      	ldrh	r2, [r3, #0]
    5768:	2a7f      	cmp	r2, #127	; 0x7f
    576a:	d9e5      	bls.n	5738 <AudioInputI2S::update()+0x20>
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
    576c:	4a11      	ldr	r2, [pc, #68]	; (57b4 <AudioInputI2S::update()+0x9c>)
		block_left = new_left;
		out_right = block_right;
    576e:	4912      	ldr	r1, [pc, #72]	; (57b8 <AudioInputI2S::update()+0xa0>)
	}
	__disable_irq();
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
    5770:	6817      	ldr	r7, [r2, #0]
		block_left = new_left;
    5772:	6014      	str	r4, [r2, #0]
		out_right = block_right;
		block_right = new_right;
		block_offset = 0;
    5774:	2200      	movs	r2, #0
	if (block_offset >= AUDIO_BLOCK_SAMPLES) {
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
		block_left = new_left;
		out_right = block_right;
    5776:	680c      	ldr	r4, [r1, #0]
		block_right = new_right;
		block_offset = 0;
    5778:	801a      	strh	r2, [r3, #0]
		// the DMA filled 2 blocks, so grab them and get the
		// 2 new blocks to the DMA, as quickly as possible
		out_left = block_left;
		block_left = new_left;
		out_right = block_right;
		block_right = new_right;
    577a:	600d      	str	r5, [r1, #0]
		block_offset = 0;
		__enable_irq();
    577c:	b662      	cpsie	i
		// then transmit the DMA's former blocks
		transmit(out_left, 0);
    577e:	4639      	mov	r1, r7
    5780:	4630      	mov	r0, r6
    5782:	f007 fb59 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_left);
    5786:	4638      	mov	r0, r7
    5788:	f007 fb2c 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		transmit(out_right, 1);
    578c:	4630      	mov	r0, r6
    578e:	4621      	mov	r1, r4
    5790:	2201      	movs	r2, #1
    5792:	f007 fb51 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out_right);
    5796:	4620      	mov	r0, r4
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    5798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		__enable_irq();
		// then transmit the DMA's former blocks
		transmit(out_left, 0);
		release(out_left);
		transmit(out_right, 1);
		release(out_right);
    579c:	f007 bb22 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
		}
	} else {
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
    57a0:	b662      	cpsie	i
    57a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	// allocate 2 new blocks, but if one fails, allocate neither
	new_left = allocate();
	if (new_left != NULL) {
		new_right = allocate();
		if (new_right == NULL) {
			release(new_left);
    57a4:	4620      	mov	r0, r4
    57a6:	f007 fb1d 	bl	cde4 <AudioStream::release(audio_block_struct*)>
			new_left = NULL;
    57aa:	462c      	mov	r4, r5
    57ac:	e7bf      	b.n	572e <AudioInputI2S::update()+0x16>
    57ae:	bf00      	nop
    57b0:	1fff6310 	.word	0x1fff6310
    57b4:	1fff6320 	.word	0x1fff6320
    57b8:	1fff6314 	.word	0x1fff6314

000057bc <AudioInputI2S::begin()>:
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
    57bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    57be:	4c28      	ldr	r4, [pc, #160]	; (5860 <AudioInputI2S::begin()+0xa4>)
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    57c0:	4e28      	ldr	r6, [pc, #160]	; (5864 <AudioInputI2S::begin()+0xa8>)
DMAChannel AudioInputI2S::dma(false);


void AudioInputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    57c2:	4620      	mov	r0, r4
    57c4:	2101      	movs	r1, #1
    57c6:	f007 fc8f 	bl	d0e8 <DMAChannel::begin(bool)>

	//block_left_1st = NULL;
	//block_right_1st = NULL;

	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2S::config_i2s();
    57ca:	f000 fb55 	bl	5e78 <AudioOutputI2S::config_i2s()>

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
    57ce:	4b26      	ldr	r3, [pc, #152]	; (5868 <AudioInputI2S::begin()+0xac>)
#if defined(KINETISK)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0 + 2);
    57d0:	4a26      	ldr	r2, [pc, #152]	; (586c <AudioInputI2S::begin()+0xb0>)
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    57d2:	4827      	ldr	r0, [pc, #156]	; (5870 <AudioInputI2S::begin()+0xb4>)
	//block_right_1st = NULL;

	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2S::config_i2s();

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
    57d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    57d8:	6019      	str	r1, [r3, #0]
#if defined(KINETISK)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0 + 2);
    57da:	6823      	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 0;
    57dc:	2100      	movs	r1, #0
	// TODO: should we set & clear the I2S_RCSR_SR bit here?
	AudioOutputI2S::config_i2s();

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#if defined(KINETISK)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0 + 2);
    57de:	601a      	str	r2, [r3, #0]
	dma.TCD->SOFF = 0;
    57e0:	8099      	strh	r1, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    57e2:	7922      	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
    57e4:	6118      	str	r0, [r3, #16]
    57e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    57ea:	f502 3204 	add.w	r2, r2, #135168	; 0x21000

	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#if defined(KINETISK)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    57ee:	f240 1001 	movw	r0, #257	; 0x101
    57f2:	80d8      	strh	r0, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
    57f4:	619e      	str	r6, [r3, #24]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    57f6:	f44f 7580 	mov.w	r5, #256	; 0x100
	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#if defined(KINETISK)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    57fa:	2002      	movs	r0, #2
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    57fc:	2706      	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    57fe:	268c      	movs	r6, #140	; 0x8c
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    5800:	82dd      	strh	r5, [r3, #22]
#if defined(KINETISK)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
    5802:	60d9      	str	r1, [r3, #12]
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
    5804:	83dd      	strh	r5, [r3, #30]
	CORE_PIN13_CONFIG = PORT_PCR_MUX(4); // pin 13, PTC5, I2S0_RXD0
#if defined(KINETISK)
	dma.TCD->SADDR = (void *)((uint32_t)&I2S0_RDR0 + 2);
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    5806:	6098      	str	r0, [r3, #8]
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    5808:	839f      	strh	r7, [r3, #28]
	dma.TCD->SOFF = 0;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = 0;
	dma.TCD->DADDR = i2s_rx_buffer;
	dma.TCD->DOFF = 2;
    580a:	8298      	strh	r0, [r3, #20]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    580c:	7011      	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    580e:	7016      	strb	r6, [r2, #0]
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
    5810:	f007 fc10 	bl	d034 <AudioStream::update_setup()>
    5814:	4917      	ldr	r1, [pc, #92]	; (5874 <AudioInputI2S::begin()+0xb8>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    5816:	4b18      	ldr	r3, [pc, #96]	; (5878 <AudioInputI2S::begin()+0xbc>)
    5818:	7922      	ldrb	r2, [r4, #4]
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    581a:	4f18      	ldr	r7, [pc, #96]	; (587c <AudioInputI2S::begin()+0xc0>)
	dma.TCD->DLASTSGA = -sizeof(i2s_rx_buffer);
	dma.TCD->BITER_ELINKNO = sizeof(i2s_rx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
    581c:	7008      	strb	r0, [r1, #0]
    581e:	701a      	strb	r2, [r3, #0]
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    5820:	6839      	ldr	r1, [r7, #0]
    5822:	7922      	ldrb	r2, [r4, #4]
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
    5824:	4c16      	ldr	r4, [pc, #88]	; (5880 <AudioInputI2S::begin()+0xc4>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    5826:	4d17      	ldr	r5, [pc, #92]	; (5884 <AudioInputI2S::begin()+0xc8>)
    5828:	4e17      	ldr	r6, [pc, #92]	; (5888 <AudioInputI2S::begin()+0xcc>)
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_RX);
	update_responsibility = update_setup();
	dma.enable();

	I2S0_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
    582a:	f041 4112 	orr.w	r1, r1, #2449473536	; 0x92000000
    582e:	f041 0101 	orr.w	r1, r1, #1
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    5832:	1153      	asrs	r3, r2, #5
    5834:	6039      	str	r1, [r7, #0]
    5836:	009b      	lsls	r3, r3, #2
	I2S0_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // TX clock enable, because sync'd to TX
    5838:	6820      	ldr	r0, [r4, #0]
    583a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    583e:	f102 0710 	add.w	r7, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    5842:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5846:	f002 021f 	and.w	r2, r2, #31
    584a:	2101      	movs	r1, #1
    584c:	f040 4010 	orr.w	r0, r0, #2415919104	; 0x90000000
    5850:	fa01 f202 	lsl.w	r2, r1, r2
    5854:	6020      	str	r0, [r4, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    5856:	f845 6027 	str.w	r6, [r5, r7, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    585a:	601a      	str	r2, [r3, #0]
    585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    585e:	bf00      	nop
    5860:	1fff6318 	.word	0x1fff6318
    5864:	fffffe00 	.word	0xfffffe00
    5868:	4004b014 	.word	0x4004b014
    586c:	4002f0a2 	.word	0x4002f0a2
    5870:	1fff3ef0 	.word	0x1fff3ef0
    5874:	1fff6312 	.word	0x1fff6312
    5878:	4000801b 	.word	0x4000801b
    587c:	4002f080 	.word	0x4002f080
    5880:	4002f000 	.word	0x4002f000
    5884:	1fff4400 	.word	0x1fff4400
    5888:	0000568d 	.word	0x0000568d

0000588c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    588c:	4a02      	ldr	r2, [pc, #8]	; (5898 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    588e:	4903      	ldr	r1, [pc, #12]	; (589c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    5890:	4803      	ldr	r0, [pc, #12]	; (58a0 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    5892:	f00c ba63 	b.w	11d5c <__aeabi_atexit>
    5896:	bf00      	nop
    5898:	1fff4930 	.word	0x1fff4930
    589c:	00005639 	.word	0x00005639
    58a0:	1fff6318 	.word	0x1fff6318

000058a4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    58a4:	4a02      	ldr	r2, [pc, #8]	; (58b0 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    58a6:	4903      	ldr	r1, [pc, #12]	; (58b4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    58a8:	4803      	ldr	r0, [pc, #12]	; (58b8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    58aa:	f00c ba57 	b.w	11d5c <__aeabi_atexit>
    58ae:	bf00      	nop
    58b0:	1fff4930 	.word	0x1fff4930
    58b4:	00005639 	.word	0x00005639
    58b8:	1fff6324 	.word	0x1fff6324

000058bc <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:

DMAMEM static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM::block_left = NULL;
bool AudioInputPDM::update_responsibility = false;
DMAChannel AudioInputPDM::dma(false);
    58bc:	4a02      	ldr	r2, [pc, #8]	; (58c8 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    58be:	4903      	ldr	r1, [pc, #12]	; (58cc <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    58c0:	4803      	ldr	r0, [pc, #12]	; (58d0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    58c2:	f00c ba4b 	b.w	11d5c <__aeabi_atexit>
    58c6:	bf00      	nop
    58c8:	1fff4930 	.word	0x1fff4930
    58cc:	00005639 	.word	0x00005639
    58d0:	1fff632c 	.word	0x1fff632c

000058d4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    58d4:	4a02      	ldr	r2, [pc, #8]	; (58e0 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    58d6:	4903      	ldr	r1, [pc, #12]	; (58e4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    58d8:	4803      	ldr	r0, [pc, #12]	; (58e8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    58da:	f00c ba3f 	b.w	11d5c <__aeabi_atexit>
    58de:	bf00      	nop
    58e0:	1fff4930 	.word	0x1fff4930
    58e4:	00005639 	.word	0x00005639
    58e8:	1fff6334 	.word	0x1fff6334

000058ec <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    58ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    58f0:	f500 7e80 	add.w	lr, r0, #256	; 0x100

000058f4 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    58f4:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    58f8:	e8b2 1540 	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    58fc:	eac5 4306 	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    5900:	eac6 4425 	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    5904:	eac7 4508 	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    5908:	eac8 4627 	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    590c:	eac9 470a 	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    5910:	eaca 4829 	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    5914:	eacb 490c 	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    5918:	eacc 4a2b 	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    591c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    5920:	4586      	cmp	lr, r0
	bne .loopLR
    5922:	d1e7      	bne.n	58f4 <.loopLR>

	pop	{r4-r11,r14}	
    5924:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8,r14}	
#endif
	BX lr
    5928:	4770      	bx	lr

0000592a <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    592a:	f04f 0200 	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    592e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    5932:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    5936:	bf00      	nop

00005938 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    5938:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    593c:	eac5 0302 	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    5940:	eac2 4425 	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    5944:	eac7 0502 	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    5948:	eac2 4627 	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    594c:	eac9 0702 	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    5950:	eac2 4829 	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    5954:	eacb 0902 	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    5958:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    595c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    5960:	4584      	cmp	ip, r0
	bne .loopL
    5962:	d1e9      	bne.n	5938 <.loopL>

	pop	{r4-r11}
    5964:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    5968:	4770      	bx	lr

0000596a <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    596a:	f04f 0200 	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    596e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    5972:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    5976:	bf00      	nop

00005978 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    5978:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    597c:	eac2 4305 	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    5980:	eac2 0405 	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    5984:	eac2 4507 	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    5988:	eac2 0607 	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    598c:	eac2 4709 	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    5990:	eac2 0809 	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    5994:	eac2 490b 	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    5998:	eac2 0a0b 	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    599c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    59a0:	4584      	cmp	ip, r0
	bne .loopR
    59a2:	d1e9      	bne.n	5978 <.loopR>

	pop	{r4-r11}
    59a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    59a8:	4770      	bx	lr

000059aa <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    59aa:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    59ae:	9c08      	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    59b0:	f500 7b00 	add.w	fp, r0, #512	; 0x200

000059b4 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    59b4:	f851 5b04 	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    59b8:	f853 6b04 	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    59bc:	eac5 4706 	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    59c0:	eac6 4925 	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    59c4:	f852 5b04 	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    59c8:	f854 6b04 	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    59cc:	eac5 4806 	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    59d0:	eac6 4a25 	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    59d4:	e8a0 0780 	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    59d8:	4583      	cmp	fp, r0
	bne .loopQuad
    59da:	d1eb      	bne.n	59b4 <.loopQuad>

	pop	{r4-r11}
    59dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    59e0:	4770      	bx	lr
    59e2:	bf00      	nop

000059e4 <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
    59e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    59e8:	f04f 0800 	mov.w	r8, #0
}

#endif

void AudioMixer4::update(void)
{
    59ec:	4606      	mov	r6, r0
    59ee:	f100 0518 	add.w	r5, r0, #24
	audio_block_t *in, *out=NULL;
    59f2:	4647      	mov	r7, r8
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    59f4:	4641      	mov	r1, r8
    59f6:	4630      	mov	r0, r6
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
    59f8:	2f00      	cmp	r7, #0
    59fa:	d04f      	beq.n	5a9c <AudioMixer4::update()+0xb8>
			if (out) {
				int32_t mult = multiplier[channel];
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
    59fc:	f007 fa36 	bl	ce6c <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    5a00:	b1f0      	cbz	r0, 5a40 <AudioMixer4::update()+0x5c>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    5a02:	682c      	ldr	r4, [r5, #0]
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
    5a04:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    5a08:	f107 0104 	add.w	r1, r7, #4
    5a0c:	f100 0e04 	add.w	lr, r0, #4

static void applyGainThenAdd(int16_t *data, const int16_t *in, int32_t mult)
{
	uint32_t *dst = (uint32_t *)data;
	const uint32_t *src = (uint32_t *)in;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    5a10:	f507 7c82 	add.w	ip, r7, #260	; 0x104

	if (mult == MULTI_UNITYGAIN) {
    5a14:	d027      	beq.n	5a66 <AudioMixer4::update()+0x82>
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
	} else {
		do {
			uint32_t tmp32 = *src++; // read 2 samples from *data
    5a16:	f85e 2b04 	ldr.w	r2, [lr], #4
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    5a1a:	fb34 f302 	smulwb	r3, r4, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    5a1e:	fb34 f912 	smulwt	r9, r4, r2
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    5a22:	f303 020f 	ssat	r2, #16, r3
    5a26:	f309 030f 	ssat	r3, #16, r9
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    5a2a:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
			int32_t val1 = signed_multiply_32x16b(mult, tmp32);
			int32_t val2 = signed_multiply_32x16t(mult, tmp32);
			val1 = signed_saturate_rshift(val1, 16, 0);
			val2 = signed_saturate_rshift(val2, 16, 0);
			tmp32 = pack_16b_16b(val2, val1);
			uint32_t tmp32b = *dst;
    5a2e:	680a      	ldr	r2, [r1, #0]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    5a30:	fa93 f312 	qadd16	r3, r3, r2
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    5a34:	f841 3b04 	str.w	r3, [r1], #4
		} while (dst < end);
    5a38:	458c      	cmp	ip, r1
    5a3a:	d8ec      	bhi.n	5a16 <AudioMixer4::update()+0x32>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
    5a3c:	f007 f9d2 	bl	cde4 <AudioStream::release(audio_block_struct*)>
void AudioMixer4::update(void)
{
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    5a40:	f108 0801 	add.w	r8, r8, #1
    5a44:	f1b8 0f04 	cmp.w	r8, #4
    5a48:	f105 0504 	add.w	r5, r5, #4
    5a4c:	d1d2      	bne.n	59f4 <AudioMixer4::update()+0x10>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
			}
		}
	}
	if (out) {
    5a4e:	2f00      	cmp	r7, #0
    5a50:	d040      	beq.n	5ad4 <AudioMixer4::update()+0xf0>
		transmit(out);
    5a52:	4630      	mov	r0, r6
    5a54:	4639      	mov	r1, r7
    5a56:	2200      	movs	r2, #0
    5a58:	f007 f9ee 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    5a5c:	4638      	mov	r0, r7
	}
}
    5a5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			}
		}
	}
	if (out) {
		transmit(out);
		release(out);
    5a62:	f007 b9bf 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
    5a66:	f107 010c 	add.w	r1, r7, #12
    5a6a:	f100 040c 	add.w	r4, r0, #12
    5a6e:	f851 3c08 	ldr.w	r3, [r1, #-8]
    5a72:	f854 2c08 	ldr.w	r2, [r4, #-8]
    5a76:	fa93 f312 	qadd16	r3, r3, r2
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);

	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    5a7a:	f841 3c08 	str.w	r3, [r1, #-8]
    5a7e:	f854 2c04 	ldr.w	r2, [r4, #-4]
    5a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5a86:	fa93 f312 	qadd16	r3, r3, r2
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
		} while (dst < end);
    5a8a:	458c      	cmp	ip, r1
	if (mult == MULTI_UNITYGAIN) {
		do {
			uint32_t tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
			tmp32 = *dst;
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    5a8c:	f841 3c04 	str.w	r3, [r1, #-4]
    5a90:	f104 0408 	add.w	r4, r4, #8
		} while (dst < end);
    5a94:	f101 0108 	add.w	r1, r1, #8
    5a98:	d8e9      	bhi.n	5a6e <AudioMixer4::update()+0x8a>
    5a9a:	e7cf      	b.n	5a3c <AudioMixer4::update()+0x58>
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
		if (!out) {
			out = receiveWritable(channel);
    5a9c:	f007 f9f2 	bl	ce84 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    5aa0:	4607      	mov	r7, r0
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d0cc      	beq.n	5a40 <AudioMixer4::update()+0x5c>
				int32_t mult = multiplier[channel];
    5aa6:	6828      	ldr	r0, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    5aa8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    5aac:	d0c8      	beq.n	5a40 <AudioMixer4::update()+0x5c>
    5aae:	1d39      	adds	r1, r7, #4
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    5ab0:	f507 7482 	add.w	r4, r7, #260	; 0x104

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
    5ab4:	680b      	ldr	r3, [r1, #0]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    5ab6:	fb30 f203 	smulwb	r2, r0, r3
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    5aba:	fb30 f313 	smulwt	r3, r0, r3
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    5abe:	f302 020f 	ssat	r2, #16, r2
    5ac2:	f303 030f 	ssat	r3, #16, r3
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined(KINETISK)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    5ac6:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
    5aca:	f841 3b04 	str.w	r3, [r1], #4
	} while (p < end);
    5ace:	428c      	cmp	r4, r1
    5ad0:	d8f0      	bhi.n	5ab4 <AudioMixer4::update()+0xd0>
    5ad2:	e7b5      	b.n	5a40 <AudioMixer4::update()+0x5c>
    5ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005ad8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE>:
bool AudioOutputADAT::update_responsibility = false;
//uint32_t  AudioOutputADAT::vucp = VUCP_VALID;

DMAMEM static uint32_t ADAT_tx_buffer[AUDIO_BLOCK_SAMPLES * 8]; //4 KB, AUDIO_BLOCK_SAMPLES is usually 128

DMAChannel AudioOutputADAT::dma(false);
    5ad8:	4a02      	ldr	r2, [pc, #8]	; (5ae4 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0xc>)
    5ada:	4903      	ldr	r1, [pc, #12]	; (5ae8 <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x10>)
    5adc:	4803      	ldr	r0, [pc, #12]	; (5aec <_GLOBAL__sub_I__ZN15AudioOutputADAT13block_ch1_1stE+0x14>)
    5ade:	f00c b93d 	b.w	11d5c <__aeabi_atexit>
    5ae2:	bf00      	nop
    5ae4:	1fff4930 	.word	0x1fff4930
    5ae8:	00005639 	.word	0x00005639
    5aec:	1fff633c 	.word	0x1fff633c

00005af0 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE>:

DMAMEM static uint16_t dac_buffer[AUDIO_BLOCK_SAMPLES*2];
audio_block_t * AudioOutputAnalog::block_left_1st = NULL;
audio_block_t * AudioOutputAnalog::block_left_2nd = NULL;
bool AudioOutputAnalog::update_responsibility = false;
DMAChannel AudioOutputAnalog::dma(false);
    5af0:	4a02      	ldr	r2, [pc, #8]	; (5afc <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0xc>)
    5af2:	4903      	ldr	r1, [pc, #12]	; (5b00 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x10>)
    5af4:	4803      	ldr	r0, [pc, #12]	; (5b04 <_GLOBAL__sub_I__ZN17AudioOutputAnalog14block_left_1stE+0x14>)
    5af6:	f00c b931 	b.w	11d5c <__aeabi_atexit>
    5afa:	bf00      	nop
    5afc:	1fff4930 	.word	0x1fff4930
    5b00:	00005639 	.word	0x00005639
    5b04:	1fff6344 	.word	0x1fff6344

00005b08 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE>:
audio_block_t * AudioOutputAnalogStereo::block_left_2nd = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_1st = NULL;
audio_block_t * AudioOutputAnalogStereo::block_right_2nd = NULL;
audio_block_t AudioOutputAnalogStereo::block_silent;
bool AudioOutputAnalogStereo::update_responsibility = false;
DMAChannel AudioOutputAnalogStereo::dma(false);
    5b08:	4a02      	ldr	r2, [pc, #8]	; (5b14 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0xc>)
    5b0a:	4903      	ldr	r1, [pc, #12]	; (5b18 <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x10>)
    5b0c:	4803      	ldr	r0, [pc, #12]	; (5b1c <_GLOBAL__sub_I__ZN23AudioOutputAnalogStereo14block_left_1stE+0x14>)
    5b0e:	f00c b925 	b.w	11d5c <__aeabi_atexit>
    5b12:	bf00      	nop
    5b14:	1fff4930 	.word	0x1fff4930
    5b18:	00005639 	.word	0x00005639
    5b1c:	1fff634c 	.word	0x1fff634c

00005b20 <AudioOutputI2S::isr()>:
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    5b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(KINETISK)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    5b24:	4b34      	ldr	r3, [pc, #208]	; (5bf8 <AudioOutputI2S::isr()+0xd8>)
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    5b26:	4835      	ldr	r0, [pc, #212]	; (5bfc <AudioOutputI2S::isr()+0xdc>)
#if defined(KINETISK)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    5b28:	681a      	ldr	r2, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    5b2a:	4935      	ldr	r1, [pc, #212]	; (5c00 <AudioOutputI2S::isr()+0xe0>)
    5b2c:	6812      	ldr	r2, [r2, #0]
    5b2e:	791b      	ldrb	r3, [r3, #4]
    5b30:	700b      	strb	r3, [r1, #0]
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    5b32:	4282      	cmp	r2, r0
    5b34:	d229      	bcs.n	5b8a <AudioOutputI2S::isr()+0x6a>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    5b36:	4b33      	ldr	r3, [pc, #204]	; (5c04 <AudioOutputI2S::isr()+0xe4>)
    5b38:	781b      	ldrb	r3, [r3, #0]
    5b3a:	bb4b      	cbnz	r3, 5b90 <AudioOutputI2S::isr()+0x70>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    5b3c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 5c14 <AudioOutputI2S::isr()+0xf4>
	blockR = AudioOutputI2S::block_right_1st;
    5b40:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 5c18 <AudioOutputI2S::isr()+0xf8>
	offsetL = AudioOutputI2S::block_left_offset;
    5b44:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 5c1c <AudioOutputI2S::isr()+0xfc>
	offsetR = AudioOutputI2S::block_right_offset;
    5b48:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 5c20 <AudioOutputI2S::isr()+0x100>
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
	}

	blockL = AudioOutputI2S::block_left_1st;
    5b4c:	f8da 6000 	ldr.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    5b50:	f8d9 7000 	ldr.w	r7, [r9]
	offsetL = AudioOutputI2S::block_left_offset;
    5b54:	f8b8 4000 	ldrh.w	r4, [r8]
	offsetR = AudioOutputI2S::block_right_offset;
    5b58:	f8bb 5000 	ldrh.w	r5, [fp]

	if (blockL && blockR) {
    5b5c:	2e00      	cmp	r6, #0
    5b5e:	d03b      	beq.n	5bd8 <AudioOutputI2S::isr()+0xb8>
    5b60:	b39f      	cbz	r7, 5bca <AudioOutputI2S::isr()+0xaa>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    5b62:	1d3a      	adds	r2, r7, #4
    5b64:	1d31      	adds	r1, r6, #4
    5b66:	eb02 0245 	add.w	r2, r2, r5, lsl #1
    5b6a:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    5b6e:	f7ff febd 	bl	58ec <memcpy_tointerleaveLR>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    5b72:	3540      	adds	r5, #64	; 0x40
	offsetL = AudioOutputI2S::block_left_offset;
	offsetR = AudioOutputI2S::block_right_offset;

	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    5b74:	3440      	adds	r4, #64	; 0x40
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
		return;
	}

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    5b76:	2c7f      	cmp	r4, #127	; 0x7f
    5b78:	d81b      	bhi.n	5bb2 <AudioOutputI2S::isr()+0x92>
		AudioOutputI2S::block_left_offset = offsetL;
    5b7a:	f8a8 4000 	strh.w	r4, [r8]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    5b7e:	2d7f      	cmp	r5, #127	; 0x7f
    5b80:	d80a      	bhi.n	5b98 <AudioOutputI2S::isr()+0x78>
		AudioOutputI2S::block_right_offset = offsetR;
    5b82:	f8ab 5000 	strh.w	r5, [fp]
    5b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
	} else {
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
    5b8a:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
    5b8e:	e7d5      	b.n	5b3c <AudioOutputI2S::isr()+0x1c>
    5b90:	4b1d      	ldr	r3, [pc, #116]	; (5c08 <AudioOutputI2S::isr()+0xe8>)
    5b92:	2201      	movs	r2, #1
    5b94:	601a      	str	r2, [r3, #0]
    5b96:	e7d1      	b.n	5b3c <AudioOutputI2S::isr()+0x1c>
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    5b98:	2400      	movs	r4, #0
		AudioStream::release(blockR);
    5b9a:	4638      	mov	r0, r7
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_right_offset = offsetR;
	} else {
		AudioOutputI2S::block_right_offset = 0;
    5b9c:	f8ab 4000 	strh.w	r4, [fp]
		AudioStream::release(blockR);
    5ba0:	f007 f920 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    5ba4:	4b19      	ldr	r3, [pc, #100]	; (5c0c <AudioOutputI2S::isr()+0xec>)
    5ba6:	681a      	ldr	r2, [r3, #0]
    5ba8:	f8c9 2000 	str.w	r2, [r9]
		AudioOutputI2S::block_right_2nd = NULL;
    5bac:	601c      	str	r4, [r3, #0]
    5bae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    5bb2:	2400      	movs	r4, #0
		AudioStream::release(blockL);
    5bb4:	4630      	mov	r0, r6
	}

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
		AudioOutputI2S::block_left_offset = offsetL;
	} else {
		AudioOutputI2S::block_left_offset = 0;
    5bb6:	f8a8 4000 	strh.w	r4, [r8]
		AudioStream::release(blockL);
    5bba:	f007 f913 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    5bbe:	4b14      	ldr	r3, [pc, #80]	; (5c10 <AudioOutputI2S::isr()+0xf0>)
    5bc0:	681a      	ldr	r2, [r3, #0]
    5bc2:	f8ca 2000 	str.w	r2, [sl]
		AudioOutputI2S::block_left_2nd = NULL;
    5bc6:	601c      	str	r4, [r3, #0]
    5bc8:	e7d9      	b.n	5b7e <AudioOutputI2S::isr()+0x5e>
	if (blockL && blockR) {
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    5bca:	1d31      	adds	r1, r6, #4
    5bcc:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    5bd0:	f7ff feab 	bl	592a <memcpy_tointerleaveL>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    5bd4:	3440      	adds	r4, #64	; 0x40
    5bd6:	e7ce      	b.n	5b76 <AudioOutputI2S::isr()+0x56>
	} else if (blockR) {
    5bd8:	b137      	cbz	r7, 5be8 <AudioOutputI2S::isr()+0xc8>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    5bda:	1d39      	adds	r1, r7, #4
    5bdc:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    5be0:	f7ff fec3 	bl	596a <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    5be4:	3540      	adds	r5, #64	; 0x40
    5be6:	e7c6      	b.n	5b76 <AudioOutputI2S::isr()+0x56>
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    5be8:	4639      	mov	r1, r7
    5bea:	f44f 7280 	mov.w	r2, #256	; 0x100
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    5bee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockR) {
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else {
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    5bf2:	f00c bd03 	b.w	125fc <memset>
    5bf6:	bf00      	nop
    5bf8:	1fff6358 	.word	0x1fff6358
    5bfc:	1fff41f0 	.word	0x1fff41f0
    5c00:	4000801f 	.word	0x4000801f
    5c04:	1fff6370 	.word	0x1fff6370
    5c08:	e000e208 	.word	0xe000e208
    5c0c:	1fff636c 	.word	0x1fff636c
    5c10:	1fff6374 	.word	0x1fff6374
    5c14:	1fff6368 	.word	0x1fff6368
    5c18:	1fff6360 	.word	0x1fff6360
    5c1c:	1fff6354 	.word	0x1fff6354
    5c20:	1fff6364 	.word	0x1fff6364

00005c24 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    5c24:	b570      	push	{r4, r5, r6, lr}
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    5c26:	2100      	movs	r1, #0




void AudioOutputI2S::update(void)
{
    5c28:	4604      	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    5c2a:	f007 f91f 	bl	ce6c <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    5c2e:	b180      	cbz	r0, 5c52 <AudioOutputI2S::update()+0x2e>
		__disable_irq();
    5c30:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    5c32:	4a1c      	ldr	r2, [pc, #112]	; (5ca4 <AudioOutputI2S::update()+0x80>)
    5c34:	6813      	ldr	r3, [r2, #0]
    5c36:	2b00      	cmp	r3, #0
    5c38:	d029      	beq.n	5c8e <AudioOutputI2S::update()+0x6a>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    5c3a:	491b      	ldr	r1, [pc, #108]	; (5ca8 <AudioOutputI2S::update()+0x84>)
    5c3c:	680d      	ldr	r5, [r1, #0]
    5c3e:	b305      	cbz	r5, 5c82 <AudioOutputI2S::update()+0x5e>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
			block_left_offset = 0;
    5c40:	4e1a      	ldr	r6, [pc, #104]	; (5cac <AudioOutputI2S::update()+0x88>)
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    5c42:	6015      	str	r5, [r2, #0]
			block_left_2nd = block;
			block_left_offset = 0;
    5c44:	2200      	movs	r2, #0
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
			block_left_2nd = block;
    5c46:	6008      	str	r0, [r1, #0]
			block_left_offset = 0;
    5c48:	8032      	strh	r2, [r6, #0]
			__enable_irq();
    5c4a:	b662      	cpsie	i
			release(tmp);
    5c4c:	4618      	mov	r0, r3
    5c4e:	f007 f8c9 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    5c52:	4620      	mov	r0, r4
    5c54:	2101      	movs	r1, #1
    5c56:	f007 f909 	bl	ce6c <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    5c5a:	b188      	cbz	r0, 5c80 <AudioOutputI2S::update()+0x5c>
		__disable_irq();
    5c5c:	b672      	cpsid	i
		if (block_right_1st == NULL) {
    5c5e:	4a14      	ldr	r2, [pc, #80]	; (5cb0 <AudioOutputI2S::update()+0x8c>)
    5c60:	6813      	ldr	r3, [r2, #0]
    5c62:	b1cb      	cbz	r3, 5c98 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    5c64:	4913      	ldr	r1, [pc, #76]	; (5cb4 <AudioOutputI2S::update()+0x90>)
    5c66:	680c      	ldr	r4, [r1, #0]
    5c68:	b174      	cbz	r4, 5c88 <AudioOutputI2S::update()+0x64>
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
    5c6a:	4d13      	ldr	r5, [pc, #76]	; (5cb8 <AudioOutputI2S::update()+0x94>)
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    5c6c:	6014      	str	r4, [r2, #0]
			block_right_2nd = block;
			block_right_offset = 0;
    5c6e:	2200      	movs	r2, #0
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
    5c70:	6008      	str	r0, [r1, #0]
			block_right_offset = 0;
    5c72:	802a      	strh	r2, [r5, #0]
			__enable_irq();
    5c74:	b662      	cpsie	i
			release(tmp);
    5c76:	4618      	mov	r0, r3
		}
	}
}
    5c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
			block_right_2nd = block;
			block_right_offset = 0;
			__enable_irq();
			release(tmp);
    5c7c:	f007 b8b2 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
    5c80:	bd70      	pop	{r4, r5, r6, pc}
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
			block_left_2nd = block;
    5c82:	6008      	str	r0, [r1, #0]
			__enable_irq();
    5c84:	b662      	cpsie	i
    5c86:	e7e4      	b.n	5c52 <AudioOutputI2S::update()+0x2e>
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
			block_right_2nd = block;
    5c88:	6008      	str	r0, [r1, #0]
			__enable_irq();
    5c8a:	b662      	cpsie	i
    5c8c:	bd70      	pop	{r4, r5, r6, pc}
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
			block_left_offset = 0;
    5c8e:	4907      	ldr	r1, [pc, #28]	; (5cac <AudioOutputI2S::update()+0x88>)
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
	if (block) {
		__disable_irq();
		if (block_left_1st == NULL) {
			block_left_1st = block;
    5c90:	6010      	str	r0, [r2, #0]
			block_left_offset = 0;
    5c92:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    5c94:	b662      	cpsie	i
    5c96:	e7dc      	b.n	5c52 <AudioOutputI2S::update()+0x2e>
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
			block_right_offset = 0;
    5c98:	4907      	ldr	r1, [pc, #28]	; (5cb8 <AudioOutputI2S::update()+0x94>)
	}
	block = receiveReadOnly(1); // input 1 = right channel
	if (block) {
		__disable_irq();
		if (block_right_1st == NULL) {
			block_right_1st = block;
    5c9a:	6010      	str	r0, [r2, #0]
			block_right_offset = 0;
    5c9c:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    5c9e:	b662      	cpsie	i
    5ca0:	bd70      	pop	{r4, r5, r6, pc}
    5ca2:	bf00      	nop
    5ca4:	1fff6368 	.word	0x1fff6368
    5ca8:	1fff6374 	.word	0x1fff6374
    5cac:	1fff6354 	.word	0x1fff6354
    5cb0:	1fff6360 	.word	0x1fff6360
    5cb4:	1fff636c 	.word	0x1fff636c
    5cb8:	1fff6364 	.word	0x1fff6364

00005cbc <AudioOutputI2S::begin()>:
bool AudioOutputI2S::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
DMAChannel AudioOutputI2S::dma(false);

void AudioOutputI2S::begin(void)
{
    5cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	dma.begin(true); // Allocate the DMA channel first
    5cbe:	2101      	movs	r1, #1
    5cc0:	484c      	ldr	r0, [pc, #304]	; (5df4 <AudioOutputI2S::begin()+0x138>)

	block_left_1st = NULL;
    5cc2:	4d4d      	ldr	r5, [pc, #308]	; (5df8 <AudioOutputI2S::begin()+0x13c>)
	block_right_1st = NULL;
    5cc4:	4c4d      	ldr	r4, [pc, #308]	; (5dfc <AudioOutputI2S::begin()+0x140>)
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
DMAChannel AudioOutputI2S::dma(false);

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first
    5cc6:	f007 fa0f 	bl	d0e8 <DMAChannel::begin(bool)>
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    5cca:	4b4d      	ldr	r3, [pc, #308]	; (5e00 <AudioOutputI2S::begin()+0x144>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    5ccc:	494d      	ldr	r1, [pc, #308]	; (5e04 <AudioOutputI2S::begin()+0x148>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    5cce:	484e      	ldr	r0, [pc, #312]	; (5e08 <AudioOutputI2S::begin()+0x14c>)

void AudioOutputI2S::begin(void)
{
	dma.begin(true); // Allocate the DMA channel first

	block_left_1st = NULL;
    5cd0:	2200      	movs	r2, #0
    5cd2:	602a      	str	r2, [r5, #0]
	block_right_1st = NULL;
    5cd4:	6022      	str	r2, [r4, #0]
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    5cd6:	681a      	ldr	r2, [r3, #0]
    5cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5cdc:	601a      	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    5cde:	680a      	ldr	r2, [r1, #0]
    5ce0:	f042 0202 	orr.w	r2, r2, #2
    5ce4:	600a      	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    5ce6:	681a      	ldr	r2, [r3, #0]
    5ce8:	f042 0202 	orr.w	r2, r2, #2
    5cec:	601a      	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    5cee:	6803      	ldr	r3, [r0, #0]
    5cf0:	2b00      	cmp	r3, #0
    5cf2:	db3c      	blt.n	5d6e <AudioOutputI2S::begin()+0xb2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    5cf4:	4b45      	ldr	r3, [pc, #276]	; (5e0c <AudioOutputI2S::begin()+0x150>)
    5cf6:	681b      	ldr	r3, [r3, #0]
    5cf8:	2b00      	cmp	r3, #0
    5cfa:	db38      	blt.n	5d6e <AudioOutputI2S::begin()+0xb2>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    5cfc:	4a44      	ldr	r2, [pc, #272]	; (5e10 <AudioOutputI2S::begin()+0x154>)
    5cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d02:	6013      	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    5d04:	6813      	ldr	r3, [r2, #0]
    5d06:	2b00      	cmp	r3, #0
    5d08:	dbfc      	blt.n	5d04 <AudioOutputI2S::begin()+0x48>
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    5d0a:	4c42      	ldr	r4, [pc, #264]	; (5e14 <AudioOutputI2S::begin()+0x158>)

	// configure transmitter
	I2S0_TMR = 0;
    5d0c:	4842      	ldr	r0, [pc, #264]	; (5e18 <AudioOutputI2S::begin()+0x15c>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    5d0e:	f8df e15c 	ldr.w	lr, [pc, #348]	; 5e6c <AudioOutputI2S::begin()+0x1b0>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    5d12:	4942      	ldr	r1, [pc, #264]	; (5e1c <AudioOutputI2S::begin()+0x160>)
	I2S0_TCR3 = I2S_TCR3_TCE;
    5d14:	4b42      	ldr	r3, [pc, #264]	; (5e20 <AudioOutputI2S::begin()+0x164>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    5d16:	4a43      	ldr	r2, [pc, #268]	; (5e24 <AudioOutputI2S::begin()+0x168>)
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    5d18:	4f43      	ldr	r7, [pc, #268]	; (5e28 <AudioOutputI2S::begin()+0x16c>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    5d1a:	4e44      	ldr	r6, [pc, #272]	; (5e2c <AudioOutputI2S::begin()+0x170>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    5d1c:	4d44      	ldr	r5, [pc, #272]	; (5e30 <AudioOutputI2S::begin()+0x174>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    5d1e:	f24f 0cfe 	movw	ip, #61694	; 0xf0fe
    5d22:	f8c4 c000 	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    5d26:	2400      	movs	r4, #0
    5d28:	6004      	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    5d2a:	2001      	movs	r0, #1
    5d2c:	f8ce 0000 	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    5d30:	f8df e13c 	ldr.w	lr, [pc, #316]	; 5e70 <AudioOutputI2S::begin()+0x1b4>
    5d34:	f8c1 e000 	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE;
    5d38:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    5d3c:	6019      	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    5d3e:	4b3d      	ldr	r3, [pc, #244]	; (5e34 <AudioOutputI2S::begin()+0x178>)
    5d40:	6013      	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    5d42:	f8df e130 	ldr.w	lr, [pc, #304]	; 5e74 <AudioOutputI2S::begin()+0x1b8>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
	I2S0_TCR3 = I2S_TCR3_TCE;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    5d46:	4a3c      	ldr	r2, [pc, #240]	; (5e38 <AudioOutputI2S::begin()+0x17c>)
    5d48:	603a      	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    5d4a:	6034      	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    5d4c:	6028      	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    5d4e:	f100 408e 	add.w	r0, r0, #1191182336	; 0x47000000
    5d52:	f8ce 0000 	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5d56:	4c39      	ldr	r4, [pc, #228]	; (5e3c <AudioOutputI2S::begin()+0x180>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
    5d58:	67b9      	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    5d5a:	4839      	ldr	r0, [pc, #228]	; (5e40 <AudioOutputI2S::begin()+0x184>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    5d5c:	4939      	ldr	r1, [pc, #228]	; (5e44 <AudioOutputI2S::begin()+0x188>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    5d5e:	f846 3c50 	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5d62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    5d66:	612a      	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5d68:	6023      	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    5d6a:	6003      	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    5d6c:	600b      	str	r3, [r1, #0]
	// TODO: should we set & clear the I2S_TCSR_SR bit here?
	config_i2s();
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
    5d6e:	4c21      	ldr	r4, [pc, #132]	; (5df4 <AudioOutputI2S::begin()+0x138>)
	block_left_1st = NULL;
	block_right_1st = NULL;

	// TODO: should we set & clear the I2S_TCSR_SR bit here?
	config_i2s();
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    5d70:	4b35      	ldr	r3, [pc, #212]	; (5e48 <AudioOutputI2S::begin()+0x18c>)

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
    5d72:	4a36      	ldr	r2, [pc, #216]	; (5e4c <AudioOutputI2S::begin()+0x190>)
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    5d74:	4936      	ldr	r1, [pc, #216]	; (5e50 <AudioOutputI2S::begin()+0x194>)
#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    5d76:	4e37      	ldr	r6, [pc, #220]	; (5e54 <AudioOutputI2S::begin()+0x198>)
	block_left_1st = NULL;
	block_right_1st = NULL;

	// TODO: should we set & clear the I2S_TCSR_SR bit here?
	config_i2s();
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0
    5d78:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    5d7c:	6018      	str	r0, [r3, #0]

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
    5d7e:	6823      	ldr	r3, [r4, #0]
	dma.TCD->SOFF = 2;
    5d80:	2502      	movs	r5, #2
	// TODO: should we set & clear the I2S_TCSR_SR bit here?
	config_i2s();
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
    5d82:	601a      	str	r2, [r3, #0]
	dma.TCD->SOFF = 2;
    5d84:	809d      	strh	r5, [r3, #4]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
    5d86:	7922      	ldrb	r2, [r4, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
    5d88:	6119      	str	r1, [r3, #16]
    5d8a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5d8e:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
	CORE_PIN22_CONFIG = PORT_PCR_MUX(6); // pin 22, PTC1, I2S0_TXD0

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    5d92:	f240 1101 	movw	r1, #257	; 0x101
    5d96:	80d9      	strh	r1, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    5d98:	60de      	str	r6, [r3, #12]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
    5d9a:	2100      	movs	r1, #0
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    5d9c:	f44f 7080 	mov.w	r0, #256	; 0x100
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    5da0:	2706      	movs	r7, #6
		*mux = 0;
		*mux = (source & 63) | DMAMUX_ENABLE;
    5da2:	268d      	movs	r6, #141	; 0x8d
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    5da4:	82d8      	strh	r0, [r3, #22]

#if defined(KINETISK)
	dma.TCD->SADDR = i2s_tx_buffer;
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
    5da6:	609d      	str	r5, [r3, #8]
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    5da8:	83d8      	strh	r0, [r3, #30]
	dma.TCD->SOFF = 2;
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
    5daa:	8299      	strh	r1, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    5dac:	839f      	strh	r7, [r3, #28]
	dma.TCD->NBYTES_MLNO = 2;
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
	dma.TCD->DADDR = (void *)((uint32_t)&I2S0_TDR0 + 2);
	dma.TCD->DOFF = 0;
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->DLASTSGA = 0;
    5dae:	6199      	str	r1, [r3, #24]

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
		*mux = 0;
    5db0:	7011      	strb	r1, [r2, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
    5db2:	7016      	strb	r6, [r2, #0]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);
	update_responsibility = update_setup();
    5db4:	f007 f93e 	bl	d034 <AudioStream::update_setup()>
    5db8:	7922      	ldrb	r2, [r4, #4]
    5dba:	4b27      	ldr	r3, [pc, #156]	; (5e58 <AudioOutputI2S::begin()+0x19c>)
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    5dbc:	4927      	ldr	r1, [pc, #156]	; (5e5c <AudioOutputI2S::begin()+0x1a0>)
    5dbe:	7018      	strb	r0, [r3, #0]
	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    5dc0:	1153      	asrs	r3, r2, #5
    5dc2:	009b      	lsls	r3, r3, #2
    5dc4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    5dc8:	700a      	strb	r2, [r1, #0]
	dma.enable();

	I2S0_TCSR = I2S_TCSR_SR;
    5dca:	4c0f      	ldr	r4, [pc, #60]	; (5e08 <AudioOutputI2S::begin()+0x14c>)

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    5dcc:	4d24      	ldr	r5, [pc, #144]	; (5e60 <AudioOutputI2S::begin()+0x1a4>)
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    5dce:	4f25      	ldr	r7, [pc, #148]	; (5e64 <AudioOutputI2S::begin()+0x1a8>)
    5dd0:	4e25      	ldr	r6, [pc, #148]	; (5e68 <AudioOutputI2S::begin()+0x1ac>)
    5dd2:	f102 0010 	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    5dd6:	2101      	movs	r1, #1
    5dd8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5ddc:	f002 021f 	and.w	r2, r2, #31
    5de0:	fa01 f202 	lsl.w	r2, r1, r2
#endif
	dma.triggerAtHardwareEvent(DMAMUX_SOURCE_I2S0_TX);
	update_responsibility = update_setup();
	dma.enable();

	I2S0_TCSR = I2S_TCSR_SR;
    5de4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    5de8:	6021      	str	r1, [r4, #0]
	I2S0_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    5dea:	6027      	str	r7, [r4, #0]

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    5dec:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    5df0:	601a      	str	r2, [r3, #0]
    5df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5df4:	1fff6358 	.word	0x1fff6358
    5df8:	1fff6368 	.word	0x1fff6368
    5dfc:	1fff6360 	.word	0x1fff6360
    5e00:	4004803c 	.word	0x4004803c
    5e04:	40048040 	.word	0x40048040
    5e08:	4002f000 	.word	0x4002f000
    5e0c:	4002f080 	.word	0x4002f080
    5e10:	4002f100 	.word	0x4002f100
    5e14:	4002f104 	.word	0x4002f104
    5e18:	4002f060 	.word	0x4002f060
    5e1c:	4002f008 	.word	0x4002f008
    5e20:	4002f00c 	.word	0x4002f00c
    5e24:	4002f010 	.word	0x4002f010
    5e28:	4002f014 	.word	0x4002f014
    5e2c:	4002f0e0 	.word	0x4002f0e0
    5e30:	4002f084 	.word	0x4002f084
    5e34:	00011f1b 	.word	0x00011f1b
    5e38:	1f1f1f00 	.word	0x1f1f1f00
    5e3c:	4004b008 	.word	0x4004b008
    5e40:	4004b00c 	.word	0x4004b00c
    5e44:	4004b018 	.word	0x4004b018
    5e48:	4004b004 	.word	0x4004b004
    5e4c:	1fff40f0 	.word	0x1fff40f0
    5e50:	4002f022 	.word	0x4002f022
    5e54:	fffffe00 	.word	0xfffffe00
    5e58:	1fff6370 	.word	0x1fff6370
    5e5c:	4000801b 	.word	0x4000801b
    5e60:	1fff4400 	.word	0x1fff4400
    5e64:	90000001 	.word	0x90000001
    5e68:	00005b21 	.word	0x00005b21
    5e6c:	4002f004 	.word	0x4002f004
    5e70:	07000001 	.word	0x07000001
    5e74:	4002f088 	.word	0x4002f088

00005e78 <AudioOutputI2S::config_i2s()>:
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    5e78:	4b28      	ldr	r3, [pc, #160]	; (5f1c <AudioOutputI2S::config_i2s()+0xa4>)
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    5e7a:	4929      	ldr	r1, [pc, #164]	; (5f20 <AudioOutputI2S::config_i2s()+0xa8>)
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    5e7c:	681a      	ldr	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    5e7e:	4829      	ldr	r0, [pc, #164]	; (5f24 <AudioOutputI2S::config_i2s()+0xac>)
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
	SIM_SCGC6 |= SIM_SCGC6_I2S;
    5e80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    5e84:	601a      	str	r2, [r3, #0]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    5e86:	680a      	ldr	r2, [r1, #0]
    5e88:	f042 0202 	orr.w	r2, r2, #2
    5e8c:	600a      	str	r2, [r1, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    5e8e:	681a      	ldr	r2, [r3, #0]
    5e90:	f042 0202 	orr.w	r2, r2, #2
    5e94:	601a      	str	r2, [r3, #0]

	// if either transmitter or receiver is enabled, do nothing
	if (I2S0_TCSR & I2S_TCSR_TE) return;
    5e96:	6803      	ldr	r3, [r0, #0]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	db3e      	blt.n	5f1a <AudioOutputI2S::config_i2s()+0xa2>
	if (I2S0_RCSR & I2S_RCSR_RE) return;
    5e9c:	4b22      	ldr	r3, [pc, #136]	; (5f28 <AudioOutputI2S::config_i2s()+0xb0>)
    5e9e:	681b      	ldr	r3, [r3, #0]
    5ea0:	2b00      	cmp	r3, #0
    5ea2:	db3a      	blt.n	5f1a <AudioOutputI2S::config_i2s()+0xa2>

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
    5ea4:	4a21      	ldr	r2, [pc, #132]	; (5f2c <AudioOutputI2S::config_i2s()+0xb4>)
    5ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5eaa:	6013      	str	r3, [r2, #0]
	while (I2S0_MCR & I2S_MCR_DUF) ;
    5eac:	6813      	ldr	r3, [r2, #0]
    5eae:	2b00      	cmp	r3, #0
    5eb0:	dbfc      	blt.n	5eac <AudioOutputI2S::config_i2s()+0x34>
  #define MCLK_SRC  0  // system clock
#endif
#endif

void AudioOutputI2S::config_i2s(void)
{
    5eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    5eb4:	4c1e      	ldr	r4, [pc, #120]	; (5f30 <AudioOutputI2S::config_i2s()+0xb8>)

	// configure transmitter
	I2S0_TMR = 0;
    5eb6:	481f      	ldr	r0, [pc, #124]	; (5f34 <AudioOutputI2S::config_i2s()+0xbc>)
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    5eb8:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 5f64 <AudioOutputI2S::config_i2s()+0xec>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    5ebc:	491e      	ldr	r1, [pc, #120]	; (5f38 <AudioOutputI2S::config_i2s()+0xc0>)
	I2S0_TCR3 = I2S_TCR3_TCE;
    5ebe:	4b1f      	ldr	r3, [pc, #124]	; (5f3c <AudioOutputI2S::config_i2s()+0xc4>)
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    5ec0:	4a1f      	ldr	r2, [pc, #124]	; (5f40 <AudioOutputI2S::config_i2s()+0xc8>)
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    5ec2:	4f20      	ldr	r7, [pc, #128]	; (5f44 <AudioOutputI2S::config_i2s()+0xcc>)

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    5ec4:	4e20      	ldr	r6, [pc, #128]	; (5f48 <AudioOutputI2S::config_i2s()+0xd0>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    5ec6:	4d21      	ldr	r5, [pc, #132]	; (5f4c <AudioOutputI2S::config_i2s()+0xd4>)
	if (I2S0_RCSR & I2S_RCSR_RE) return;

	// enable MCLK output
	I2S0_MCR = I2S_MCR_MICS(MCLK_SRC) | I2S_MCR_MOE;
	while (I2S0_MCR & I2S_MCR_DUF) ;
	I2S0_MDR = I2S_MDR_FRACT((MCLK_MULT-1)) | I2S_MDR_DIVIDE((MCLK_DIV-1));
    5ec8:	f24f 0cfe 	movw	ip, #61694	; 0xf0fe
    5ecc:	f8c4 c000 	str.w	ip, [r4]

	// configure transmitter
	I2S0_TMR = 0;
    5ed0:	2400      	movs	r4, #0
    5ed2:	6004      	str	r4, [r0, #0]
	I2S0_TCR1 = I2S_TCR1_TFW(1);  // watermark at half fifo size
    5ed4:	2001      	movs	r0, #1
    5ed6:	f8ce 0000 	str.w	r0, [lr]
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
    5eda:	f8df e08c 	ldr.w	lr, [pc, #140]	; 5f68 <AudioOutputI2S::config_i2s()+0xf0>
    5ede:	f8c1 e000 	str.w	lr, [r1]
	I2S0_TCR3 = I2S_TCR3_TCE;
    5ee2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    5ee6:	6019      	str	r1, [r3, #0]
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
    5ee8:	4b19      	ldr	r3, [pc, #100]	; (5f50 <AudioOutputI2S::config_i2s()+0xd8>)
    5eea:	6013      	str	r3, [r2, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    5eec:	f8df e07c 	ldr.w	lr, [pc, #124]	; 5f6c <AudioOutputI2S::config_i2s()+0xf4>
	I2S0_TCR2 = I2S_TCR2_SYNC(0) | I2S_TCR2_BCP | I2S_TCR2_MSEL(1)
		| I2S_TCR2_BCD | I2S_TCR2_DIV(1);
	I2S0_TCR3 = I2S_TCR3_TCE;
	I2S0_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(31) | I2S_TCR4_MF
		| I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD;
	I2S0_TCR5 = I2S_TCR5_WNW(31) | I2S_TCR5_W0W(31) | I2S_TCR5_FBT(31);
    5ef0:	4a18      	ldr	r2, [pc, #96]	; (5f54 <AudioOutputI2S::config_i2s()+0xdc>)
    5ef2:	603a      	str	r2, [r7, #0]

	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
    5ef4:	6034      	str	r4, [r6, #0]
	I2S0_RCR1 = I2S_RCR1_RFW(1);
    5ef6:	6028      	str	r0, [r5, #0]
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
    5ef8:	f100 408e 	add.w	r0, r0, #1191182336	; 0x47000000
    5efc:	f8ce 0000 	str.w	r0, [lr]
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5f00:	4c15      	ldr	r4, [pc, #84]	; (5f58 <AudioOutputI2S::config_i2s()+0xe0>)
	// configure receiver (sync'd to transmitter clocks)
	I2S0_RMR = 0;
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
    5f02:	67b9      	str	r1, [r7, #120]	; 0x78
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    5f04:	4815      	ldr	r0, [pc, #84]	; (5f5c <AudioOutputI2S::config_i2s()+0xe4>)
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    5f06:	4916      	ldr	r1, [pc, #88]	; (5f60 <AudioOutputI2S::config_i2s()+0xe8>)
	I2S0_RCR1 = I2S_RCR1_RFW(1);
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
    5f08:	f846 3c50 	str.w	r3, [r6, #-80]
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5f0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
	I2S0_RCR2 = I2S_RCR2_SYNC(1) | I2S_TCR2_BCP | I2S_RCR2_MSEL(1)
		| I2S_RCR2_BCD | I2S_RCR2_DIV(1);
	I2S0_RCR3 = I2S_RCR3_RCE;
	I2S0_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S0_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);
    5f10:	612a      	str	r2, [r5, #16]

	// configure pin mux for 3 clock signals
	CORE_PIN23_CONFIG = PORT_PCR_MUX(6); // pin 23, PTC2, I2S0_TX_FS (LRCLK)
    5f12:	6023      	str	r3, [r4, #0]
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK
    5f14:	6003      	str	r3, [r0, #0]
	CORE_PIN11_CONFIG = PORT_PCR_MUX(6); // pin 11, PTC6, I2S0_MCLK
    5f16:	600b      	str	r3, [r1, #0]
    5f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f1a:	4770      	bx	lr
    5f1c:	4004803c 	.word	0x4004803c
    5f20:	40048040 	.word	0x40048040
    5f24:	4002f000 	.word	0x4002f000
    5f28:	4002f080 	.word	0x4002f080
    5f2c:	4002f100 	.word	0x4002f100
    5f30:	4002f104 	.word	0x4002f104
    5f34:	4002f060 	.word	0x4002f060
    5f38:	4002f008 	.word	0x4002f008
    5f3c:	4002f00c 	.word	0x4002f00c
    5f40:	4002f010 	.word	0x4002f010
    5f44:	4002f014 	.word	0x4002f014
    5f48:	4002f0e0 	.word	0x4002f0e0
    5f4c:	4002f084 	.word	0x4002f084
    5f50:	00011f1b 	.word	0x00011f1b
    5f54:	1f1f1f00 	.word	0x1f1f1f00
    5f58:	4004b008 	.word	0x4004b008
    5f5c:	4004b00c 	.word	0x4004b00c
    5f60:	4004b018 	.word	0x4004b018
    5f64:	4002f004 	.word	0x4002f004
    5f68:	07000001 	.word	0x07000001
    5f6c:	4002f088 	.word	0x4002f088

00005f70 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
audio_block_t * AudioOutputI2S::block_right_2nd = NULL;
uint16_t  AudioOutputI2S::block_left_offset = 0;
uint16_t  AudioOutputI2S::block_right_offset = 0;
bool AudioOutputI2S::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
DMAChannel AudioOutputI2S::dma(false);
    5f70:	4a02      	ldr	r2, [pc, #8]	; (5f7c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    5f72:	4903      	ldr	r1, [pc, #12]	; (5f80 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    5f74:	4803      	ldr	r0, [pc, #12]	; (5f84 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    5f76:	f00b bef1 	b.w	11d5c <__aeabi_atexit>
    5f7a:	bf00      	nop
    5f7c:	1fff4930 	.word	0x1fff4930
    5f80:	00005639 	.word	0x00005639
    5f84:	1fff6358 	.word	0x1fff6358

00005f88 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
//audio_block_t * AudioOutputI2SQuad::inputQueueArray[4];
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    5f88:	4a02      	ldr	r2, [pc, #8]	; (5f94 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    5f8a:	4903      	ldr	r1, [pc, #12]	; (5f98 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    5f8c:	4803      	ldr	r0, [pc, #12]	; (5f9c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    5f8e:	f00b bee5 	b.w	11d5c <__aeabi_atexit>
    5f92:	bf00      	nop
    5f94:	1fff4930 	.word	0x1fff4930
    5f98:	00005639 	.word	0x00005639
    5f9c:	1fff6378 	.word	0x1fff6378

00005fa0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
	DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
	DMAMEM static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    5fa0:	4a02      	ldr	r2, [pc, #8]	; (5fac <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    5fa2:	4903      	ldr	r1, [pc, #12]	; (5fb0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    5fa4:	4803      	ldr	r0, [pc, #12]	; (5fb4 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    5fa6:	f00b bed9 	b.w	11d5c <__aeabi_atexit>
    5faa:	bf00      	nop
    5fac:	1fff4930 	.word	0x1fff4930
    5fb0:	00005639 	.word	0x00005639
    5fb4:	1fff6380 	.word	0x1fff6380

00005fb8 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE>:
uint32_t  AudioOutputPWM::block_offset = 0;
bool AudioOutputPWM::update_responsibility = false;
uint8_t AudioOutputPWM::interrupt_count = 0;

DMAMEM uint32_t pwm_dma_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputPWM::dma(false);
    5fb8:	4a02      	ldr	r2, [pc, #8]	; (5fc4 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0xc>)
    5fba:	4903      	ldr	r1, [pc, #12]	; (5fc8 <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x10>)
    5fbc:	4803      	ldr	r0, [pc, #12]	; (5fcc <_GLOBAL__sub_I__ZN14AudioOutputPWM9block_1stE+0x14>)
    5fbe:	f00b becd 	b.w	11d5c <__aeabi_atexit>
    5fc2:	bf00      	nop
    5fc4:	1fff4930 	.word	0x1fff4930
    5fc8:	00005639 	.word	0x00005639
    5fcc:	1fff6388 	.word	0x1fff6388

00005fd0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
bool AudioOutputSPDIF::update_responsibility = false;
uint32_t  AudioOutputSPDIF::vucp = VUCP_VALID;

DMAMEM static uint32_t SPDIF_tx_buffer[AUDIO_BLOCK_SAMPLES * 4]; //2 KB

DMAChannel AudioOutputSPDIF::dma(false);
    5fd0:	4a02      	ldr	r2, [pc, #8]	; (5fdc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    5fd2:	4903      	ldr	r1, [pc, #12]	; (5fe0 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    5fd4:	4803      	ldr	r0, [pc, #12]	; (5fe4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    5fd6:	f00b bec1 	b.w	11d5c <__aeabi_atexit>
    5fda:	bf00      	nop
    5fdc:	1fff4930 	.word	0x1fff4930
    5fe0:	00005639 	.word	0x00005639
    5fe4:	1fff6390 	.word	0x1fff6390

00005fe8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
	NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
};
bool AudioOutputTDM::update_responsibility = false;
static uint32_t zeros[AUDIO_BLOCK_SAMPLES/2];
DMAMEM static uint32_t tdm_tx_buffer[AUDIO_BLOCK_SAMPLES*16];
DMAChannel AudioOutputTDM::dma(false);
    5fe8:	4a02      	ldr	r2, [pc, #8]	; (5ff4 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    5fea:	4903      	ldr	r1, [pc, #12]	; (5ff8 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    5fec:	4803      	ldr	r0, [pc, #12]	; (5ffc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    5fee:	f00b beb5 	b.w	11d5c <__aeabi_atexit>
    5ff2:	bf00      	nop
    5ff4:	1fff4930 	.word	0x1fff4930
    5ff8:	00005639 	.word	0x00005639
    5ffc:	1fff6398 	.word	0x1fff6398

00006000 <AudioPlaySdWav::begin()>:
#define STATE_PARSE4			11 // ignoring unknown chunk after "fmt "
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
    6000:	b538      	push	{r3, r4, r5, lr}
    6002:	4604      	mov	r4, r0
	state = STATE_STOP;
	state_play = STATE_STOP;
	data_length = 0;
	if (block_left) {
    6004:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
    6006:	230d      	movs	r3, #13
	state_play = STATE_STOP;
	data_length = 0;
    6008:	2500      	movs	r5, #0
#define STATE_PARSE5			12 // ignoring unknown chunk before "fmt "
#define STATE_STOP			13

void AudioPlaySdWav::begin(void)
{
	state = STATE_STOP;
    600a:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	state_play = STATE_STOP;
    600e:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
	data_length = 0;
    6012:	6625      	str	r5, [r4, #96]	; 0x60
	if (block_left) {
    6014:	b110      	cbz	r0, 601c <AudioPlaySdWav::begin()+0x1c>
		release(block_left);
    6016:	f006 fee5 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    601a:	66e5      	str	r5, [r4, #108]	; 0x6c
	}
	if (block_right) {
    601c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    601e:	b118      	cbz	r0, 6028 <AudioPlaySdWav::begin()+0x28>
		release(block_right);
    6020:	f006 fee0 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    6024:	2300      	movs	r3, #0
    6026:	6723      	str	r3, [r4, #112]	; 0x70
    6028:	bd38      	pop	{r3, r4, r5, pc}
    602a:	bf00      	nop

0000602c <AudioPlaySdWav::consume(unsigned long)>:

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
    602c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
    6030:	f8b0 6276 	ldrh.w	r6, [r0, #630]	; 0x276
    6034:	f100 0776 	add.w	r7, r0, #118	; 0x76

// https://ccrma.stanford.edu/courses/422/projects/WaveFormat/

// Consume already buffered data.  Returns true if audio transmitted.
bool AudioPlaySdWav::consume(uint32_t size)
{
    6038:	b083      	sub	sp, #12
	uint32_t len;
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
    603a:	443e      	add	r6, r7
start:
	if (size == 0) return false;
    603c:	b1e1      	cbz	r1, 6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
    603e:	f8df 944c 	ldr.w	r9, [pc, #1100]	; 648c <AudioPlaySdWav::consume(unsigned long)+0x460>
		header_offset += len;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    6042:	f8df a44c 	ldr.w	sl, [pc, #1100]	; 6490 <AudioPlaySdWav::consume(unsigned long)+0x464>
    6046:	f8df b44c 	ldr.w	fp, [pc, #1100]	; 6494 <AudioPlaySdWav::consume(unsigned long)+0x468>
    604a:	4604      	mov	r4, r0
    604c:	460d      	mov	r5, r1
	Serial.print(", space = ");
	Serial.print((AUDIO_BLOCK_SAMPLES - block_offset) * 2);
	Serial.print(", state = ");
	Serial.println(state);
#endif
	switch (state) {
    604e:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    6052:	2b0d      	cmp	r3, #13
    6054:	d836      	bhi.n	60c4 <AudioPlaySdWav::consume(unsigned long)+0x98>
    6056:	e8df f013 	tbh	[pc, r3, lsl #1]
    605a:	000f      	.short	0x000f
    605c:	00cc000f 	.word	0x00cc000f
    6060:	000f0097 	.word	0x000f0097
    6064:	000f000f 	.word	0x000f000f
    6068:	010f000f 	.word	0x010f000f
    606c:	003e0013 	.word	0x003e0013
    6070:	0081006a 	.word	0x0081006a
    6074:	000f      	.short	0x000f
	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
    6076:	6622      	str	r2, [r4, #96]	; 0x60
		state = STATE_PARSE1;
		goto start;

	  // playing mono at native sample rate
	  case STATE_DIRECT_8BIT_MONO:
		return false;
    6078:	2000      	movs	r0, #0
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    607a:	b003      	add	sp, #12
    607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//Serial.println("unknown WAV header");
		break;

	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
    6080:	6e22      	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    6082:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    6086:	42aa      	cmp	r2, r5
    6088:	f104 0038 	add.w	r0, r4, #56	; 0x38
    608c:	bf28      	it	cs
    608e:	462a      	movcs	r2, r5
    6090:	4418      	add	r0, r3
    6092:	4631      	mov	r1, r6
    6094:	4690      	mov	r8, r2
    6096:	f008 faf1 	bl	e67c <memcpy>
		header_offset += len;
    609a:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    609e:	f8b4 2276 	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    60a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    60a4:	4441      	add	r1, r8
		buffer_offset += len;
    60a6:	4442      	add	r2, r8
		data_length -= len;
    60a8:	ebc8 0303 	rsb	r3, r8, r3
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    60ac:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    60b0:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    60b4:	6623      	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    60b6:	2b00      	cmp	r3, #0
    60b8:	d1de      	bne.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
	uint16_t format;
	uint16_t channels;
	uint32_t rate, b2m;
	uint16_t bits;

	format = header[0];
    60ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;
    60bc:	b291      	uxth	r1, r2
    60be:	2901      	cmp	r1, #1
    60c0:	f000 8120 	beq.w	6304 <AudioPlaySdWav::consume(unsigned long)+0x2d8>

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    60c4:	230d      	movs	r3, #13
	state = STATE_STOP;
	return false;
    60c6:	2000      	movs	r0, #0

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    60c8:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    60cc:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	return false;
}
    60d0:	b003      	add	sp, #12
    60d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//Serial.println("unknown audio format");
		break;

	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
    60d6:	6e22      	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    60d8:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    60dc:	42aa      	cmp	r2, r5
    60de:	f104 0038 	add.w	r0, r4, #56	; 0x38
    60e2:	bf28      	it	cs
    60e4:	462a      	movcs	r2, r5
    60e6:	4418      	add	r0, r3
    60e8:	4631      	mov	r1, r6
    60ea:	4690      	mov	r8, r2
    60ec:	f008 fac6 	bl	e67c <memcpy>
		header_offset += len;
    60f0:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    60f4:	f8b4 2276 	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    60f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    60fa:	4441      	add	r1, r8
		buffer_offset += len;
    60fc:	4442      	add	r2, r8
		data_length -= len;
    60fe:	ebc8 0303 	rsb	r3, r8, r3
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    6102:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    6106:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    610a:	6623      	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    610c:	2b00      	cmp	r3, #0
    610e:	d1b3      	bne.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
    6110:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
    6112:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6114:	6622      	str	r2, [r4, #96]	; 0x60
		if (header[0] == 0x61746164) {
    6116:	4549      	cmp	r1, r9
		if (data_length > 0) return false;
		//Serial.print("chunk id = ");
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
    6118:	4446      	add	r6, r8
		size -= len;
    611a:	ebc8 0505 	rsb	r5, r8, r5
		data_length = header[1];
		if (header[0] == 0x61746164) {
    611e:	f000 8131 	beq.w	6384 <AudioPlaySdWav::consume(unsigned long)+0x358>
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
		} else {
			state = STATE_PARSE4;
    6122:	230b      	movs	r3, #11
    6124:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    6128:	2d00      	cmp	r5, #0
    612a:	d190      	bne.n	604e <AudioPlaySdWav::consume(unsigned long)+0x22>
    612c:	e7a4      	b.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    612e:	6e23      	ldr	r3, [r4, #96]	; 0x60
			data_length -= size;
			buffer_offset += size;
    6130:	f8b4 2276 	ldrh.w	r2, [r4, #630]	; 0x276
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    6134:	429d      	cmp	r5, r3
    6136:	f0c0 8195 	bcc.w	6464 <AudioPlaySdWav::consume(unsigned long)+0x438>
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    613a:	441a      	add	r2, r3
		data_length = 8;
    613c:	2008      	movs	r0, #8
		if (size < data_length) {
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
    613e:	441e      	add	r6, r3
		size -= data_length;
    6140:	1aed      	subs	r5, r5, r3
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
    6142:	2100      	movs	r1, #0
		state = STATE_PARSE3;
    6144:	230a      	movs	r3, #10
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    6146:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
		data_length = 8;
    614a:	6620      	str	r0, [r4, #96]	; 0x60
		header_offset = 0;
    614c:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		state = STATE_PARSE3;
    6150:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    6154:	2d00      	cmp	r5, #0
    6156:	f47f af7a 	bne.w	604e <AudioPlaySdWav::consume(unsigned long)+0x22>
    615a:	e78d      	b.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		//Serial.println("consumed unknown chunk");
		goto start;

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
    615c:	6e22      	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		buffer_offset += len;
    615e:	f8b4 1276 	ldrh.w	r1, [r4, #630]	; 0x276
    6162:	4295      	cmp	r5, r2
    6164:	462b      	mov	r3, r5
    6166:	bf28      	it	cs
    6168:	4613      	movcs	r3, r2
    616a:	4419      	add	r1, r3
		data_length -= len;
		if (data_length > 0) return false;
    616c:	1ad2      	subs	r2, r2, r3

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
    616e:	f8a4 1276 	strh.w	r1, [r4, #630]	; 0x276
		data_length -= len;
		if (data_length > 0) return false;
    6172:	d180      	bne.n	6076 <AudioPlaySdWav::consume(unsigned long)+0x4a>
		p += len;
		size -= len;
		data_length = 8;
    6174:	2208      	movs	r2, #8
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
		size -= len;
    6176:	1aed      	subs	r5, r5, r3
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
    6178:	441e      	add	r6, r3
		size -= len;
		data_length = 8;
    617a:	6622      	str	r2, [r4, #96]	; 0x60
		state = STATE_PARSE1;
    617c:	f884 227b 	strb.w	r2, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    6180:	2d00      	cmp	r5, #0
    6182:	f47f af64 	bne.w	604e <AudioPlaySdWav::consume(unsigned long)+0x22>
    6186:	e777      	b.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		state = STATE_STOP;
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
    6188:	6e23      	ldr	r3, [r4, #96]	; 0x60
		data_length -= size;
		if (leftover_bytes) {
    618a:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    618e:	429d      	cmp	r5, r3
    6190:	bf28      	it	cs
    6192:	461d      	movcs	r5, r3
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
    6194:	1b5a      	subs	r2, r3, r5
    6196:	6622      	str	r2, [r4, #96]	; 0x60
		if (leftover_bytes) {
    6198:	2900      	cmp	r1, #0
    619a:	f000 80a5 	beq.w	62e8 <AudioPlaySdWav::consume(unsigned long)+0x2bc>
			block_left->data[block_offset] = header[0];
    619e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    61a0:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    61a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    61a6:	eb01 0c43 	add.w	ip, r1, r3, lsl #1
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    61aa:	f04f 0e00 	mov.w	lr, #0
	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
		if (leftover_bytes) {
			block_left->data[block_offset] = header[0];
    61ae:	f8ac 0004 	strh.w	r0, [ip, #4]
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    61b2:	f884 e27d 	strb.w	lr, [r4, #637]	; 0x27d
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    61b6:	6f20      	ldr	r0, [r4, #112]	; 0x70
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
    61b8:	f896 c001 	ldrb.w	ip, [r6, #1]
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
    61bc:	f816 eb02 	ldrb.w	lr, [r6], #2
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    61c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    61c4:	3301      	adds	r3, #1
    61c6:	b29b      	uxth	r3, r3
    61c8:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    61cc:	2b7f      	cmp	r3, #127	; 0x7f
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    61ce:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
    61d2:	f1a5 0502 	sub.w	r5, r5, #2
			block_right->data[block_offset++] = (msb << 8) | lsb;
    61d6:	f8a0 e004 	strh.w	lr, [r0, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    61da:	f200 8117 	bhi.w	640c <AudioPlaySdWav::consume(unsigned long)+0x3e0>
				data_length += size;
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    61de:	2d00      	cmp	r5, #0
    61e0:	f040 8082 	bne.w	62e8 <AudioPlaySdWav::consume(unsigned long)+0x2bc>
				if (data_length == 0) break;
    61e4:	2a00      	cmp	r2, #0
    61e6:	f000 8086 	beq.w	62f6 <AudioPlaySdWav::consume(unsigned long)+0x2ca>
				leftover_bytes = 0;
    61ea:	f884 527d 	strb.w	r5, [r4, #637]	; 0x27d
				return false;
    61ee:	4628      	mov	r0, r5
    61f0:	e743      	b.n	607a <AudioPlaySdWav::consume(unsigned long)+0x4e>
	  case STATE_DIRECT_8BIT_STEREO:
		return false;

	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
    61f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    61f4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    61f6:	429d      	cmp	r5, r3
    61f8:	bf28      	it	cs
    61fa:	461d      	movcs	r5, r3
		data_length -= size;
    61fc:	ebc5 0c03 	rsb	ip, r5, r3
    6200:	3602      	adds	r6, #2
    6202:	f8c4 c060 	str.w	ip, [r4, #96]	; 0x60
    6206:	e003      	b.n	6210 <AudioPlaySdWav::consume(unsigned long)+0x1e4>
    6208:	3602      	adds	r6, #2
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    620a:	2d00      	cmp	r5, #0
    620c:	f000 80d3 	beq.w	63b6 <AudioPlaySdWav::consume(unsigned long)+0x38a>
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    6210:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
    6214:	f816 0c02 	ldrb.w	r0, [r6, #-2]
			msb = *p++;
    6218:	f816 ec01 	ldrb.w	lr, [r6, #-1]
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    621c:	1c53      	adds	r3, r2, #1
    621e:	b29b      	uxth	r3, r3
    6220:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    6224:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    6228:	2b7f      	cmp	r3, #127	; 0x7f
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    622a:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
    622e:	f1a5 0502 	sub.w	r5, r5, #2
			block_left->data[block_offset++] = (msb << 8) | lsb;
    6232:	8090      	strh	r0, [r2, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    6234:	d9e8      	bls.n	6208 <AudioPlaySdWav::consume(unsigned long)+0x1dc>
				transmit(block_left, 0);
    6236:	2200      	movs	r2, #0
    6238:	4620      	mov	r0, r4
    623a:	f006 fdfd 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				transmit(block_left, 1);
    623e:	2201      	movs	r2, #1
    6240:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    6242:	4620      	mov	r0, r4
    6244:	f006 fdf8 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
    6248:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    624a:	f006 fdcb 	bl	cde4 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				data_length += size;
    624e:	6e23      	ldr	r3, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    6250:	6f20      	ldr	r0, [r4, #112]	; 0x70
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    6252:	441d      	add	r5, r3
				buffer_offset = p - buffer;
    6254:	1bf6      	subs	r6, r6, r7
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    6256:	2300      	movs	r3, #0
				data_length += size;
				buffer_offset = p - buffer;
    6258:	f8a4 6276 	strh.w	r6, [r4, #630]	; 0x276
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    625c:	6625      	str	r5, [r4, #96]	; 0x60
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    625e:	66e3      	str	r3, [r4, #108]	; 0x6c
				data_length += size;
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    6260:	b110      	cbz	r0, 6268 <AudioPlaySdWav::consume(unsigned long)+0x23c>
    6262:	f006 fdbf 	bl	cde4 <AudioStream::release(audio_block_struct*)>
    6266:	6e25      	ldr	r5, [r4, #96]	; 0x60
				if (data_length == 0) state = STATE_STOP;
    6268:	b915      	cbnz	r5, 6270 <AudioPlaySdWav::consume(unsigned long)+0x244>
    626a:	230d      	movs	r3, #13
    626c:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
				return true;
    6270:	2001      	movs	r0, #1
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    6272:	b003      	add	sp, #12
    6274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Serial.println(state);
#endif
	switch (state) {
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
    6278:	6e22      	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    627a:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    627e:	42aa      	cmp	r2, r5
    6280:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6284:	bf28      	it	cs
    6286:	462a      	movcs	r2, r5
    6288:	4418      	add	r0, r3
    628a:	4631      	mov	r1, r6
    628c:	4690      	mov	r8, r2
    628e:	f008 f9f5 	bl	e67c <memcpy>
		header_offset += len;
    6292:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    6296:	f8b4 2276 	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    629a:	6e23      	ldr	r3, [r4, #96]	; 0x60
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    629c:	4441      	add	r1, r8
		buffer_offset += len;
    629e:	4442      	add	r2, r8
		data_length -= len;
    62a0:	ebc8 0303 	rsb	r3, r8, r3
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    62a4:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    62a8:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    62ac:	6623      	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    62ae:	2b00      	cmp	r3, #0
    62b0:	f47f aee2 	bne.w	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    62b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    62b6:	4552      	cmp	r2, sl
    62b8:	f47f af04 	bne.w	60c4 <AudioPlaySdWav::consume(unsigned long)+0x98>
    62bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    62be:	455a      	cmp	r2, fp
    62c0:	f47f af00 	bne.w	60c4 <AudioPlaySdWav::consume(unsigned long)+0x98>
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
    62c4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    62c6:	496b      	ldr	r1, [pc, #428]	; (6474 <AudioPlaySdWav::consume(unsigned long)+0x448>)
    62c8:	428a      	cmp	r2, r1
    62ca:	d068      	beq.n	639e <AudioPlaySdWav::consume(unsigned long)+0x372>
				// first chuck is something other than "fmt "
				//Serial.print("skipping \"");
				//Serial.printf("\" (%08X), ", __builtin_bswap32(header[3]));
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
    62cc:	230c      	movs	r3, #12
    62ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    62d0:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE5;
    62d4:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
			}
			p += len;
			size -= len;
    62d8:	ebc8 0505 	rsb	r5, r8, r5
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
				state = STATE_PARSE5;
			}
			p += len;
    62dc:	4446      	add	r6, r8
			size -= len;
			data_length = header[4];
    62de:	6622      	str	r2, [r4, #96]	; 0x60
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    62e0:	2d00      	cmp	r5, #0
    62e2:	f47f aeb4 	bne.w	604e <AudioPlaySdWav::consume(unsigned long)+0x22>
    62e6:	e6c7      	b.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
    62e8:	3d02      	subs	r5, #2
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
    62ea:	7830      	ldrb	r0, [r6, #0]
			msb = *p++;
    62ec:	f896 e001 	ldrb.w	lr, [r6, #1]
			size -= 2;
			if (size == 0) {
    62f0:	d166      	bne.n	63c0 <AudioPlaySdWav::consume(unsigned long)+0x394>
				if (data_length == 0) break;
    62f2:	2a00      	cmp	r2, #0
    62f4:	d16f      	bne.n	63d6 <AudioPlaySdWav::consume(unsigned long)+0x3aa>
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    62f6:	230d      	movs	r3, #13
		return false;
    62f8:	2000      	movs	r0, #0
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    62fa:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
	state = STATE_STOP;
	return false;
}
    62fe:	b003      	add	sp, #12
    6300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	format = header[0];
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;

	rate = header[1];
    6304:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
    6306:	f64a 4e44 	movw	lr, #44100	; 0xac44
    630a:	4570      	cmp	r0, lr
    630c:	f000 809d 	beq.w	644a <AudioPlaySdWav::consume(unsigned long)+0x41e>
		b2m = B2M_44100;
	} else if (rate == 22050) {
    6310:	f245 6322 	movw	r3, #22050	; 0x5622
    6314:	4298      	cmp	r0, r3
    6316:	d06d      	beq.n	63f4 <AudioPlaySdWav::consume(unsigned long)+0x3c8>
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
    6318:	f642 3311 	movw	r3, #11025	; 0x2b11
    631c:	4298      	cmp	r0, r3
    631e:	f47f aed1 	bne.w	60c4 <AudioPlaySdWav::consume(unsigned long)+0x98>
    6322:	2306      	movs	r3, #6
    6324:	9301      	str	r3, [sp, #4]
    6326:	f8df c15c 	ldr.w	ip, [pc, #348]	; 6484 <AudioPlaySdWav::consume(unsigned long)+0x458>
    632a:	4b53      	ldr	r3, [pc, #332]	; (6478 <AudioPlaySdWav::consume(unsigned long)+0x44c>)
		b2m = B2M_11025;
    632c:	4853      	ldr	r0, [pc, #332]	; (647c <AudioPlaySdWav::consume(unsigned long)+0x450>)
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
    632e:	9300      	str	r3, [sp, #0]
    6330:	f04f 0e07 	mov.w	lr, #7
    6334:	2105      	movs	r1, #5
		b2m = B2M_11025;
		num |= 4;
    6336:	2304      	movs	r3, #4
	} else {
		return false;
	}

	channels = header[0] >> 16;
    6338:	0c12      	lsrs	r2, r2, #16
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
    633a:	2a01      	cmp	r2, #1
    633c:	f000 808f 	beq.w	645e <AudioPlaySdWav::consume(unsigned long)+0x432>
	} else if (channels == 2) {
    6340:	2a02      	cmp	r2, #2
    6342:	f47f aebf 	bne.w	60c4 <AudioPlaySdWav::consume(unsigned long)+0x98>
		b2m >>= 1;
    6346:	4660      	mov	r0, ip

	channels = header[0] >> 16;
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
	} else if (channels == 2) {
    6348:	f8dd c000 	ldr.w	ip, [sp]
		b2m >>= 1;
		num |= 1;
    634c:	460b      	mov	r3, r1
	} else {
		return false;
	}

	bits = header[3] >> 16;
    634e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
	//Serial.print("  bits = ");
	//Serial.println(bits);
	if (bits == 8) {
    6352:	2a08      	cmp	r2, #8
    6354:	d004      	beq.n	6360 <AudioPlaySdWav::consume(unsigned long)+0x334>
	} else if (bits == 16) {
    6356:	2a10      	cmp	r2, #16
    6358:	f47f aeb4 	bne.w	60c4 <AudioPlaySdWav::consume(unsigned long)+0x98>
		b2m >>= 1;
    635c:	4660      	mov	r0, ip
		num |= 2;
    635e:	4673      	mov	r3, lr
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
    6360:	2108      	movs	r1, #8
			header_offset = 0;
    6362:	2200      	movs	r2, #0

	// we're not checking the byte rate and block align fields
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
    6364:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
    6368:	ebc8 0505 	rsb	r5, r8, r5
			data_length = 8;
			header_offset = 0;
			state = STATE_PARSE3;
    636c:	230a      	movs	r3, #10
		num |= 2;
	} else {
		return false;
	}

	bytes2millis = b2m;
    636e:	66a0      	str	r0, [r4, #104]	; 0x68
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
    6370:	4446      	add	r6, r8
			size -= len;
			data_length = 8;
    6372:	6621      	str	r1, [r4, #96]	; 0x60
			header_offset = 0;
    6374:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
			state = STATE_PARSE3;
    6378:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    637c:	2d00      	cmp	r5, #0
    637e:	f47f ae66 	bne.w	604e <AudioPlaySdWav::consume(unsigned long)+0x22>
    6382:	e679      	b.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    6384:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
			//Serial.print("wav: found data chunk, len=");
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
    6388:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
			state = state_play;
			if (state & 1) {
    638c:	07cb      	lsls	r3, r1, #31
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    638e:	f884 127b 	strb.w	r1, [r4, #635]	; 0x27b
			if (state & 1) {
    6392:	d427      	bmi.n	63e4 <AudioPlaySdWav::consume(unsigned long)+0x3b8>
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
    6394:	6662      	str	r2, [r4, #100]	; 0x64
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    6396:	2d00      	cmp	r5, #0
    6398:	f47f ae59 	bne.w	604e <AudioPlaySdWav::consume(unsigned long)+0x22>
    639c:	e66c      	b.n	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
				// "fmt " header
				if (header[4] < 16) {
    639e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    63a0:	f1a2 0110 	sub.w	r1, r2, #16
    63a4:	2918      	cmp	r1, #24
    63a6:	f63f ae8d 	bhi.w	60c4 <AudioPlaySdWav::consume(unsigned long)+0x98>
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
				state = STATE_PARSE2;
    63aa:	2109      	movs	r1, #9
					// size of header[] should accomodate them...
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
    63ac:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE2;
    63b0:	f884 127b 	strb.w	r1, [r4, #635]	; 0x27b
    63b4:	e790      	b.n	62d8 <AudioPlaySdWav::consume(unsigned long)+0x2ac>
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
				if (data_length == 0) break;
    63b6:	f1bc 0f00 	cmp.w	ip, #0
    63ba:	f47f ae5d 	bne.w	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
    63be:	e79a      	b.n	62f6 <AudioPlaySdWav::consume(unsigned long)+0x2ca>
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    63c0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    63c2:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    63c6:	eb01 0c43 	add.w	ip, r1, r3, lsl #1
    63ca:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
    63ce:	3602      	adds	r6, #2
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    63d0:	f8ac 0004 	strh.w	r0, [ip, #4]
    63d4:	e6ef      	b.n	61b6 <AudioPlaySdWav::consume(unsigned long)+0x18a>
    63d6:	8833      	ldrh	r3, [r6, #0]
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
    63d8:	63a3      	str	r3, [r4, #56]	; 0x38
				leftover_bytes = 2;
    63da:	2302      	movs	r3, #2
				return false;
    63dc:	4628      	mov	r0, r5
			msb = *p++;
			size -= 2;
			if (size == 0) {
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
    63de:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
				return false;
    63e2:	e64a      	b.n	607a <AudioPlaySdWav::consume(unsigned long)+0x4e>
			leftover_bytes = 0;
			state = state_play;
			if (state & 1) {
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
    63e4:	f006 fcaa 	bl	cd3c <AudioStream::allocate()>
    63e8:	6720      	str	r0, [r4, #112]	; 0x70
				if (!block_right) return false;
    63ea:	2800      	cmp	r0, #0
    63ec:	f43f ae44 	beq.w	6078 <AudioPlaySdWav::consume(unsigned long)+0x4c>
    63f0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    63f2:	e7cf      	b.n	6394 <AudioPlaySdWav::consume(unsigned long)+0x368>
	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
    63f4:	4b22      	ldr	r3, [pc, #136]	; (6480 <AudioPlaySdWav::consume(unsigned long)+0x454>)
    63f6:	9300      	str	r3, [sp, #0]
    63f8:	2306      	movs	r3, #6
    63fa:	9301      	str	r3, [sp, #4]
    63fc:	f8df c078 	ldr.w	ip, [pc, #120]	; 6478 <AudioPlaySdWav::consume(unsigned long)+0x44c>
		b2m = B2M_22050;
    6400:	4820      	ldr	r0, [pc, #128]	; (6484 <AudioPlaySdWav::consume(unsigned long)+0x458>)
	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
    6402:	f04f 0e07 	mov.w	lr, #7
    6406:	2105      	movs	r1, #5
		b2m = B2M_22050;
		num |= 4;
    6408:	2304      	movs	r3, #4
    640a:	e795      	b.n	6338 <AudioPlaySdWav::consume(unsigned long)+0x30c>
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
    640c:	2200      	movs	r2, #0
    640e:	4620      	mov	r0, r4
    6410:	f006 fd12 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
				block_left = NULL;
    6414:	f04f 0800 	mov.w	r8, #0
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
    6418:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    641a:	f006 fce3 	bl	cde4 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				transmit(block_right, 1);
    641e:	2201      	movs	r2, #1
    6420:	6f21      	ldr	r1, [r4, #112]	; 0x70
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
    6422:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
				transmit(block_right, 1);
    6426:	4620      	mov	r0, r4
    6428:	f006 fd06 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_right);
    642c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    642e:	f006 fcd9 	bl	cde4 <AudioStream::release(audio_block_struct*)>
				block_right = NULL;
				data_length += size;
    6432:	6e20      	ldr	r0, [r4, #96]	; 0x60
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
    6434:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
				data_length += size;
				buffer_offset = p - buffer;
    6438:	1bf6      	subs	r6, r6, r7
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    643a:	4428      	add	r0, r5
				buffer_offset = p - buffer;
    643c:	f8a4 6276 	strh.w	r6, [r4, #630]	; 0x276
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    6440:	6620      	str	r0, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
    6442:	2800      	cmp	r0, #0
    6444:	f43f af11 	beq.w	626a <AudioPlaySdWav::consume(unsigned long)+0x23e>
    6448:	e712      	b.n	6270 <AudioPlaySdWav::consume(unsigned long)+0x244>
	if (format != 1) return false;

	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
    644a:	2002      	movs	r0, #2
    644c:	9001      	str	r0, [sp, #4]
    644e:	480e      	ldr	r0, [pc, #56]	; (6488 <AudioPlaySdWav::consume(unsigned long)+0x45c>)
    6450:	9000      	str	r0, [sp, #0]
    6452:	f04f 0e03 	mov.w	lr, #3
    6456:	f8df c028 	ldr.w	ip, [pc, #40]	; 6480 <AudioPlaySdWav::consume(unsigned long)+0x454>
		b2m = B2M_44100;
    645a:	4807      	ldr	r0, [pc, #28]	; (6478 <AudioPlaySdWav::consume(unsigned long)+0x44c>)
    645c:	e76c      	b.n	6338 <AudioPlaySdWav::consume(unsigned long)+0x30c>
	}

	channels = header[0] >> 16;
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
    645e:	f8dd e004 	ldr.w	lr, [sp, #4]
    6462:	e774      	b.n	634e <AudioPlaySdWav::consume(unsigned long)+0x322>
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    6464:	1b5b      	subs	r3, r3, r5
			buffer_offset += size;
    6466:	4415      	add	r5, r2
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    6468:	6623      	str	r3, [r4, #96]	; 0x60
			buffer_offset += size;
    646a:	f8a4 5276 	strh.w	r5, [r4, #630]	; 0x276
			return false;
    646e:	2000      	movs	r0, #0
    6470:	e603      	b.n	607a <AudioPlaySdWav::consume(unsigned long)+0x4e>
    6472:	bf00      	nop
    6474:	20746d66 	.word	0x20746d66
    6478:	05cd7b8d 	.word	0x05cd7b8d
    647c:	1735ee34 	.word	0x1735ee34
    6480:	02e6bdc6 	.word	0x02e6bdc6
    6484:	0b9af71a 	.word	0x0b9af71a
    6488:	01735ee3 	.word	0x01735ee3
    648c:	61746164 	.word	0x61746164
    6490:	46464952 	.word	0x46464952
    6494:	45564157 	.word	0x45564157

00006498 <AudioPlaySdWav::update()>:
void AudioPlaySdWav::update(void)
{
	int32_t n;

	// only update if we're playing
	if (state == STATE_STOP) return;
    6498:	f890 327b 	ldrb.w	r3, [r0, #635]	; 0x27b
    649c:	2b0d      	cmp	r3, #13
    649e:	f000 8124 	beq.w	66ea <AudioPlaySdWav::update()+0x252>
	}
}


void AudioPlaySdWav::update(void)
{
    64a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    64a6:	b083      	sub	sp, #12
    64a8:	4604      	mov	r4, r0

	// only update if we're playing
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
    64aa:	f006 fc47 	bl	cd3c <AudioStream::allocate()>
    64ae:	66e0      	str	r0, [r4, #108]	; 0x6c
	if (block_left == NULL) return;
    64b0:	2800      	cmp	r0, #0
    64b2:	f000 80a1 	beq.w	65f8 <AudioPlaySdWav::update()+0x160>
	if (state < 8 && (state & 1) == 1) {
    64b6:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    64ba:	2b07      	cmp	r3, #7
    64bc:	d94b      	bls.n	6556 <AudioPlaySdWav::update()+0xbe>
			return;
		}
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
    64be:	2300      	movs	r3, #0
    64c0:	6723      	str	r3, [r4, #112]	; 0x70
	block_offset = 0;

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    64c2:	f8b4 3278 	ldrh.w	r3, [r4, #632]	; 0x278
    64c6:	f8b4 1276 	ldrh.w	r1, [r4, #630]	; 0x276
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    64ca:	2200      	movs	r2, #0

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
    64cc:	1a59      	subs	r1, r3, r1
	if (n > 0) {
    64ce:	4291      	cmp	r1, r2
	} else {
		// if we're playing mono or just parsing
		// the WAV file header, no right-side block
		block_right = NULL;
	}
	block_offset = 0;
    64d0:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74

	//Serial.println("update");

	// is there buffered data?
	n = buffer_length - buffer_offset;
	if (n > 0) {
    64d4:	dd05      	ble.n	64e2 <AudioPlaySdWav::update()+0x4a>
		// we have buffered data
		if (consume(n)) return; // it was enough to transmit audio
    64d6:	4620      	mov	r0, r4
    64d8:	f7ff fda8 	bl	602c <AudioPlaySdWav::consume(unsigned long)>
    64dc:	2800      	cmp	r0, #0
    64de:	f040 808b 	bne.w	65f8 <AudioPlaySdWav::update()+0x160>
	}

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
    64e2:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    64e6:	2b0d      	cmp	r3, #13
    64e8:	f104 0b18 	add.w	fp, r4, #24
    64ec:	f000 80af 	beq.w	664e <AudioPlaySdWav::update()+0x1b6>
    64f0:	4658      	mov	r0, fp
    64f2:	f000 fcf9 	bl	6ee8 <SDLib::File::available()>
    64f6:	2800      	cmp	r0, #0
    64f8:	f000 80a9 	beq.w	664e <AudioPlaySdWav::update()+0x1b6>
    64fc:	f104 0876 	add.w	r8, r4, #118	; 0x76
		header_offset += len;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    6500:	f8df a484 	ldr.w	sl, [pc, #1156]	; 6988 <AudioPlaySdWav::update()+0x4f0>
    6504:	46d9      	mov	r9, fp
    6506:	46c3      	mov	fp, r8

	// we only get to this point when buffer[512] is empty
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
    6508:	f44f 7200 	mov.w	r2, #512	; 0x200
    650c:	4659      	mov	r1, fp
    650e:	4648      	mov	r0, r9
    6510:	f000 fda2 	bl	7058 <SDLib::File::read(void*, unsigned short)>
    6514:	b280      	uxth	r0, r0
    6516:	f8a4 0278 	strh.w	r0, [r4, #632]	; 0x278
		if (buffer_length == 0) goto end;
    651a:	2800      	cmp	r0, #0
    651c:	f000 8280 	beq.w	6a20 <AudioPlaySdWav::update()+0x588>
		buffer_offset = 0;
		bool parsing = (state >= 8);
    6520:	f894 727b 	ldrb.w	r7, [r4, #635]	; 0x27b
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
    6524:	2200      	movs	r2, #0
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
    6526:	4605      	mov	r5, r0
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    6528:	463b      	mov	r3, r7
	if (state != STATE_STOP && wavfile.available()) {
		// we can read more data from the file...
		readagain:
		buffer_length = wavfile.read(buffer, 512);
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
    652a:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    652e:	465e      	mov	r6, fp
	Serial.print(", space = ");
	Serial.print((AUDIO_BLOCK_SAMPLES - block_offset) * 2);
	Serial.print(", state = ");
	Serial.println(state);
#endif
	switch (state) {
    6530:	2b0d      	cmp	r3, #13
    6532:	f200 8086 	bhi.w	6642 <AudioPlaySdWav::update()+0x1aa>
    6536:	e8df f013 	tbh	[pc, r3, lsl #1]
    653a:	00e9      	.short	0x00e9
    653c:	001b00e9 	.word	0x001b00e9
    6540:	00e90144 	.word	0x00e90144
    6544:	00e900e9 	.word	0x00e900e9
    6548:	010600e9 	.word	0x010600e9
    654c:	01790062 	.word	0x01790062
    6550:	00f201a7 	.word	0x00f201a7
    6554:	00e9      	.short	0x00e9
	if (state == STATE_STOP) return;

	// allocate the audio blocks to transmit
	block_left = allocate();
	if (block_left == NULL) return;
	if (state < 8 && (state & 1) == 1) {
    6556:	07dd      	lsls	r5, r3, #31
    6558:	d5b1      	bpl.n	64be <AudioPlaySdWav::update()+0x26>
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
    655a:	f006 fbef 	bl	cd3c <AudioStream::allocate()>
    655e:	6720      	str	r0, [r4, #112]	; 0x70
		if (block_right == NULL) {
    6560:	2800      	cmp	r0, #0
    6562:	d1ae      	bne.n	64c2 <AudioPlaySdWav::update()+0x2a>
			release(block_left);
    6564:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
			transmit(block_right, 1);
		}
		release(block_right);
		block_right = NULL;
	}
}
    6566:	b003      	add	sp, #12
    6568:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (state < 8 && (state & 1) == 1) {
		// if we're playing stereo, allocate another
		// block for the right channel output
		block_right = allocate();
		if (block_right == NULL) {
			release(block_left);
    656c:	f006 bc3a 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
	  case STATE_DIRECT_8BIT_STEREO:
		return false;

	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
    6570:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6572:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    6574:	4285      	cmp	r5, r0
    6576:	bf28      	it	cs
    6578:	4605      	movcs	r5, r0
		data_length -= size;
    657a:	1b40      	subs	r0, r0, r5
    657c:	3602      	adds	r6, #2
    657e:	6620      	str	r0, [r4, #96]	; 0x60
    6580:	e003      	b.n	658a <AudioPlaySdWav::update()+0xf2>
    6582:	3602      	adds	r6, #2
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    6584:	2d00      	cmp	r5, #0
    6586:	f000 81a4 	beq.w	68d2 <AudioPlaySdWav::update()+0x43a>
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    658a:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
	  // playing mono at native sample rate
	  case STATE_DIRECT_16BIT_MONO:
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
    658e:	f816 ec02 	ldrb.w	lr, [r6, #-2]
			msb = *p++;
    6592:	f816 cc01 	ldrb.w	ip, [r6, #-1]
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    6596:	1c53      	adds	r3, r2, #1
    6598:	b29b      	uxth	r3, r3
    659a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    659e:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    65a2:	2b7f      	cmp	r3, #127	; 0x7f
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_left->data[block_offset++] = (msb << 8) | lsb;
    65a4:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
		if (size > data_length) size = data_length;
		data_length -= size;
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
    65a8:	f1a5 0502 	sub.w	r5, r5, #2
			block_left->data[block_offset++] = (msb << 8) | lsb;
    65ac:	f8a2 e004 	strh.w	lr, [r2, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    65b0:	d9e7      	bls.n	6582 <AudioPlaySdWav::update()+0xea>
				transmit(block_left, 0);
    65b2:	2200      	movs	r2, #0
    65b4:	4620      	mov	r0, r4
    65b6:	f006 fc3f 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				transmit(block_left, 1);
    65ba:	2201      	movs	r2, #1
    65bc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    65be:	4620      	mov	r0, r4
    65c0:	f006 fc3a 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
    65c4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    65c6:	f006 fc0d 	bl	cde4 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				data_length += size;
    65ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    65cc:	6f20      	ldr	r0, [r4, #112]	; 0x70
    65ce:	46d8      	mov	r8, fp
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    65d0:	441d      	add	r5, r3
				buffer_offset = p - buffer;
    65d2:	ebc8 0606 	rsb	r6, r8, r6
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    65d6:	2300      	movs	r3, #0
    65d8:	46cb      	mov	fp, r9
				data_length += size;
				buffer_offset = p - buffer;
    65da:	f8a4 6276 	strh.w	r6, [r4, #630]	; 0x276
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
				data_length += size;
    65de:	6625      	str	r5, [r4, #96]	; 0x60
			block_left->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				transmit(block_left, 1);
				release(block_left);
				block_left = NULL;
    65e0:	66e3      	str	r3, [r4, #108]	; 0x6c
				data_length += size;
				buffer_offset = p - buffer;
				if (block_right) release(block_right);
    65e2:	b110      	cbz	r0, 65ea <AudioPlaySdWav::update()+0x152>
    65e4:	f006 fbfe 	bl	cde4 <AudioStream::release(audio_block_struct*)>
    65e8:	6e25      	ldr	r5, [r4, #96]	; 0x60
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
    65ea:	2d00      	cmp	r5, #0
    65ec:	f000 811a 	beq.w	6824 <AudioPlaySdWav::update()+0x38c>
		if (buffer_length == 0) goto end;
		buffer_offset = 0;
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
			if (state != STATE_STOP) return;
    65f0:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    65f4:	2b0d      	cmp	r3, #13
    65f6:	d02a      	beq.n	664e <AudioPlaySdWav::update()+0x1b6>
			transmit(block_right, 1);
		}
		release(block_right);
		block_right = NULL;
	}
}
    65f8:	b003      	add	sp, #12
    65fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//Serial.println("unknown WAV header");
		break;

	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
    65fe:	6e22      	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    6600:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    6604:	42aa      	cmp	r2, r5
    6606:	f104 0038 	add.w	r0, r4, #56	; 0x38
    660a:	bf28      	it	cs
    660c:	462a      	movcs	r2, r5
    660e:	4418      	add	r0, r3
    6610:	4631      	mov	r1, r6
    6612:	4690      	mov	r8, r2
    6614:	f008 f832 	bl	e67c <memcpy>
		header_offset += len;
    6618:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    661c:	f8b4 2276 	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    6620:	6e23      	ldr	r3, [r4, #96]	; 0x60
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    6622:	4441      	add	r1, r8
		buffer_offset += len;
    6624:	4442      	add	r2, r8
		data_length -= len;
    6626:	ebc8 0303 	rsb	r3, r8, r3
	  // check & extract key audio parameters
	  case STATE_PARSE2:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    662a:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    662e:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    6632:	6623      	str	r3, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    6634:	2b00      	cmp	r3, #0
    6636:	d167      	bne.n	6708 <AudioPlaySdWav::update()+0x270>
	uint16_t format;
	uint16_t channels;
	uint32_t rate, b2m;
	uint16_t bits;

	format = header[0];
    6638:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;
    663a:	b291      	uxth	r1, r2
    663c:	2901      	cmp	r1, #1
    663e:	f000 814c 	beq.w	68da <AudioPlaySdWav::update()+0x442>

	  // this is not supposed to happen!
	  //default:
		//Serial.println("AudioPlaySdWav, unknown state");
	}
	state_play = STATE_STOP;
    6642:	230d      	movs	r3, #13
    6644:	46cb      	mov	fp, r9
    6646:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    664a:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
				else goto cleanup;
			}
		}
	}
end:	// end of file reached or other reason to stop
	wavfile.close();
    664e:	4658      	mov	r0, fp
    6650:	f000 fd14 	bl	707c <SDLib::File::close()>
#if defined(HAS_KINETIS_SDHC)	
	if (!(SIM_SCGC3 & SIM_SCGC3_SDHC)) AudioStopUsingSPI();
    6654:	4bc5      	ldr	r3, [pc, #788]	; (696c <AudioPlaySdWav::update()+0x4d4>)
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	039a      	lsls	r2, r3, #14
    665a:	f140 812c 	bpl.w	68b6 <AudioPlaySdWav::update()+0x41e>
#else 	
	AudioStopUsingSPI();
#endif	
	state_play = STATE_STOP;
    665e:	230d      	movs	r3, #13
    6660:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
	state = STATE_STOP;
    6664:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
cleanup:
	if (block_left) {
    6668:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
    666a:	b1fd      	cbz	r5, 66ac <AudioPlaySdWav::update()+0x214>
		if (block_offset > 0) {
    666c:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    6670:	b1bb      	cbz	r3, 66a2 <AudioPlaySdWav::update()+0x20a>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    6672:	2b7f      	cmp	r3, #127	; 0x7f
    6674:	d808      	bhi.n	6688 <AudioPlaySdWav::update()+0x1f0>
    6676:	005a      	lsls	r2, r3, #1
    6678:	eb05 0043 	add.w	r0, r5, r3, lsl #1
    667c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
    6680:	3004      	adds	r0, #4
    6682:	2100      	movs	r1, #0
    6684:	f00b ffba 	bl	125fc <memset>
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
    6688:	4629      	mov	r1, r5
    668a:	2200      	movs	r2, #0
    668c:	4620      	mov	r0, r4
    668e:	f006 fbd3 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
			if (state < 8 && (state & 1) == 0) {
    6692:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    6696:	2b07      	cmp	r3, #7
    6698:	d802      	bhi.n	66a0 <AudioPlaySdWav::update()+0x208>
    669a:	07db      	lsls	r3, r3, #31
    669c:	f140 81b0 	bpl.w	6a00 <AudioPlaySdWav::update()+0x568>
    66a0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
				transmit(block_left, 1);
			}
		}
		release(block_left);
    66a2:	4628      	mov	r0, r5
    66a4:	f006 fb9e 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		block_left = NULL;
    66a8:	2300      	movs	r3, #0
    66aa:	66e3      	str	r3, [r4, #108]	; 0x6c
	}
	if (block_right) {
    66ac:	6f25      	ldr	r5, [r4, #112]	; 0x70
    66ae:	2d00      	cmp	r5, #0
    66b0:	d0a2      	beq.n	65f8 <AudioPlaySdWav::update()+0x160>
		if (block_offset > 0) {
    66b2:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
    66b6:	b183      	cbz	r3, 66da <AudioPlaySdWav::update()+0x242>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
    66b8:	2b7f      	cmp	r3, #127	; 0x7f
    66ba:	d808      	bhi.n	66ce <AudioPlaySdWav::update()+0x236>
    66bc:	005a      	lsls	r2, r3, #1
    66be:	eb05 0043 	add.w	r0, r5, r3, lsl #1
    66c2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
    66c6:	3004      	adds	r0, #4
    66c8:	2100      	movs	r1, #0
    66ca:	f00b ff97 	bl	125fc <memset>
				block_right->data[i] = 0;
			}
			transmit(block_right, 1);
    66ce:	4629      	mov	r1, r5
    66d0:	2201      	movs	r2, #1
    66d2:	4620      	mov	r0, r4
    66d4:	f006 fbb0 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    66d8:	6f25      	ldr	r5, [r4, #112]	; 0x70
		}
		release(block_right);
    66da:	4628      	mov	r0, r5
    66dc:	f006 fb82 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		block_right = NULL;
    66e0:	2300      	movs	r3, #0
    66e2:	6723      	str	r3, [r4, #112]	; 0x70
	}
}
    66e4:	b003      	add	sp, #12
    66e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66ea:	4770      	bx	lr
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
			size -= 2;
			if (size == 0) {
    66ec:	3d02      	subs	r5, #2
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
    66ee:	7832      	ldrb	r2, [r6, #0]
			msb = *p++;
    66f0:	f896 e001 	ldrb.w	lr, [r6, #1]
			size -= 2;
			if (size == 0) {
    66f4:	f040 812f 	bne.w	6956 <AudioPlaySdWav::update()+0x4be>
				if (data_length == 0) break;
    66f8:	2b00      	cmp	r3, #0
    66fa:	f000 8092 	beq.w	6822 <AudioPlaySdWav::update()+0x38a>
    66fe:	8833      	ldrh	r3, [r6, #0]
				header[0] = (msb << 8) | lsb;
    6700:	63a3      	str	r3, [r4, #56]	; 0x38
				leftover_bytes = 2;
    6702:	2302      	movs	r3, #2
    6704:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
    6708:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
		bool parsing = (state >= 8);
		bool txok = consume(buffer_length);
		if (txok) {
			if (state != STATE_STOP) return;
		} else {
			if (state != STATE_STOP) {
    670c:	2b0d      	cmp	r3, #13
    670e:	f000 8187 	beq.w	6a20 <AudioPlaySdWav::update()+0x588>
				if (parsing && state < 8) goto readagain;
    6712:	2f07      	cmp	r7, #7
    6714:	d9a8      	bls.n	6668 <AudioPlaySdWav::update()+0x1d0>
    6716:	2b07      	cmp	r3, #7
    6718:	f67f aef6 	bls.w	6508 <AudioPlaySdWav::update()+0x70>
    671c:	e7a4      	b.n	6668 <AudioPlaySdWav::update()+0x1d0>
		//Serial.println("consumed unknown chunk");
		goto start;

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
    671e:	6e23      	ldr	r3, [r4, #96]	; 0x60
		if (size < len) len = size;
		buffer_offset += len;
    6720:	f8b4 1276 	ldrh.w	r1, [r4, #630]	; 0x276
    6724:	42ab      	cmp	r3, r5
    6726:	461a      	mov	r2, r3
    6728:	bf28      	it	cs
    672a:	462a      	movcs	r2, r5
    672c:	4411      	add	r1, r2
		data_length -= len;
		if (data_length > 0) return false;
    672e:	1a9b      	subs	r3, r3, r2

	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
    6730:	f8a4 1276 	strh.w	r1, [r4, #630]	; 0x276
		data_length -= len;
		if (data_length > 0) return false;
    6734:	f040 8195 	bne.w	6a62 <AudioPlaySdWav::update()+0x5ca>
		p += len;
		size -= len;
		data_length = 8;
    6738:	2308      	movs	r3, #8
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    673a:	1aad      	subs	r5, r5, r2
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		p += len;
    673c:	4416      	add	r6, r2
		size -= len;
		data_length = 8;
    673e:	6623      	str	r3, [r4, #96]	; 0x60
		state = STATE_PARSE1;
    6740:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    6744:	d0e5      	beq.n	6712 <AudioPlaySdWav::update()+0x27a>
	Serial.println(state);
#endif
	switch (state) {
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
    6746:	6e22      	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    6748:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    674c:	42aa      	cmp	r2, r5
    674e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6752:	bf28      	it	cs
    6754:	462a      	movcs	r2, r5
    6756:	4418      	add	r0, r3
    6758:	4631      	mov	r1, r6
    675a:	4690      	mov	r8, r2
    675c:	f007 ff8e 	bl	e67c <memcpy>
		header_offset += len;
    6760:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    6764:	f8b4 2276 	ldrh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    6768:	6e23      	ldr	r3, [r4, #96]	; 0x60
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    676a:	4441      	add	r1, r8
		buffer_offset += len;
    676c:	4442      	add	r2, r8
		data_length -= len;
    676e:	ebc8 0003 	rsb	r0, r8, r3
	  // parse wav file header, is this really a .wav file?
	  case STATE_PARSE1:
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    6772:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    6776:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
		data_length -= len;
    677a:	6620      	str	r0, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    677c:	2800      	cmp	r0, #0
    677e:	d1c3      	bne.n	6708 <AudioPlaySdWav::update()+0x270>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
    6780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6782:	4553      	cmp	r3, sl
    6784:	f47f af5d 	bne.w	6642 <AudioPlaySdWav::update()+0x1aa>
    6788:	6c23      	ldr	r3, [r4, #64]	; 0x40
    678a:	4a79      	ldr	r2, [pc, #484]	; (6970 <AudioPlaySdWav::update()+0x4d8>)
    678c:	4293      	cmp	r3, r2
    678e:	f47f af58 	bne.w	6642 <AudioPlaySdWav::update()+0x1aa>
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
    6792:	f102 425b 	add.w	r2, r2, #3674210304	; 0xdb000000
    6796:	6c63      	ldr	r3, [r4, #68]	; 0x44
    6798:	f502 12f1 	add.w	r2, r2, #1974272	; 0x1e2000
    679c:	f602 420f 	addw	r2, r2, #3087	; 0xc0f
    67a0:	4293      	cmp	r3, r2
    67a2:	f000 8102 	beq.w	69aa <AudioPlaySdWav::update()+0x512>
				// first chuck is something other than "fmt "
				//Serial.print("skipping \"");
				//Serial.printf("\" (%08X), ", __builtin_bswap32(header[3]));
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
    67a6:	230c      	movs	r3, #12
    67a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    67aa:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
				state = STATE_PARSE5;
    67ae:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
			}
			p += len;
			size -= len;
    67b2:	ebc8 0505 	rsb	r5, r8, r5
				//Serial.print(header[4]);
				//Serial.println(" bytes");
				header_offset = 12;
				state = STATE_PARSE5;
			}
			p += len;
    67b6:	4446      	add	r6, r8
			size -= len;
			data_length = header[4];
    67b8:	6622      	str	r2, [r4, #96]	; 0x60
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    67ba:	2d00      	cmp	r5, #0
    67bc:	f47f aeb8 	bne.w	6530 <AudioPlaySdWav::update()+0x98>
    67c0:	e7a4      	b.n	670c <AudioPlaySdWav::update()+0x274>
		state = STATE_STOP;
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
    67c2:	6e23      	ldr	r3, [r4, #96]	; 0x60
		data_length -= size;
		if (leftover_bytes) {
    67c4:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    67c8:	429d      	cmp	r5, r3
    67ca:	bf28      	it	cs
    67cc:	461d      	movcs	r5, r3
		return false;

	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
    67ce:	1b5b      	subs	r3, r3, r5
    67d0:	6623      	str	r3, [r4, #96]	; 0x60
		if (leftover_bytes) {
    67d2:	2a00      	cmp	r2, #0
    67d4:	d08a      	beq.n	66ec <AudioPlaySdWav::update()+0x254>
			block_left->data[block_offset] = header[0];
    67d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    67d8:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    67dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    67de:	eb01 0c40 	add.w	ip, r1, r0, lsl #1
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    67e2:	f04f 0e00 	mov.w	lr, #0
	  // playing stereo at native sample rate
	  case STATE_DIRECT_16BIT_STEREO:
		if (size > data_length) size = data_length;
		data_length -= size;
		if (leftover_bytes) {
			block_left->data[block_offset] = header[0];
    67e6:	f8ac 2004 	strh.w	r2, [ip, #4]
//PAH fix problem with left+right channels being swapped
			leftover_bytes = 0;
    67ea:	f884 e27d 	strb.w	lr, [r4, #637]	; 0x27d
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    67ee:	6f22      	ldr	r2, [r4, #112]	; 0x70
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
    67f0:	f896 c001 	ldrb.w	ip, [r6, #1]
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
    67f4:	f816 eb02 	ldrb.w	lr, [r6], #2
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    67f8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    67fc:	3001      	adds	r0, #1
    67fe:	b280      	uxth	r0, r0
    6800:	ea4e 2e0c 	orr.w	lr, lr, ip, lsl #8
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    6804:	287f      	cmp	r0, #127	; 0x7f
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
    6806:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
			right16:
			lsb = *p++;
			msb = *p++;
			size -= 2;
    680a:	f1a5 0502 	sub.w	r5, r5, #2
			block_right->data[block_offset++] = (msb << 8) | lsb;
    680e:	f8a2 e004 	strh.w	lr, [r2, #4]
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
    6812:	f200 80d6 	bhi.w	69c2 <AudioPlaySdWav::update()+0x52a>
				data_length += size;
				buffer_offset = p - buffer;
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
    6816:	2d00      	cmp	r5, #0
    6818:	f47f af68 	bne.w	66ec <AudioPlaySdWav::update()+0x254>
				if (data_length == 0) break;
    681c:	2b00      	cmp	r3, #0
    681e:	f040 80ec 	bne.w	69fa <AudioPlaySdWav::update()+0x562>
    6822:	46cb      	mov	fp, r9
		//Serial.println("end of file reached");
		// end of file reached
		if (block_offset > 0) {
			// TODO: fill remainder of last block with zero and transmit
		}
		state = STATE_STOP;
    6824:	230d      	movs	r3, #13
    6826:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    682a:	e710      	b.n	664e <AudioPlaySdWav::update()+0x1b6>
		//Serial.println("unknown audio format");
		break;

	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
    682c:	6e22      	ldr	r2, [r4, #96]	; 0x60
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
    682e:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    6832:	42aa      	cmp	r2, r5
    6834:	f104 0038 	add.w	r0, r4, #56	; 0x38
    6838:	bf28      	it	cs
    683a:	462a      	movcs	r2, r5
    683c:	4418      	add	r0, r3
    683e:	4631      	mov	r1, r6
    6840:	4690      	mov	r8, r2
    6842:	f007 ff1b 	bl	e67c <memcpy>
		header_offset += len;
    6846:	f894 127a 	ldrb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    684a:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
		data_length -= len;
    684e:	6e22      	ldr	r2, [r4, #96]	; 0x60
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    6850:	4441      	add	r1, r8
		buffer_offset += len;
    6852:	4443      	add	r3, r8
		data_length -= len;
    6854:	ebc8 0202 	rsb	r2, r8, r2
	  // find the data chunk
	  case STATE_PARSE3: // 10
		len = data_length;
		if (size < len) len = size;
		memcpy((uint8_t *)header + header_offset, p, len);
		header_offset += len;
    6858:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		buffer_offset += len;
    685c:	f8a4 3276 	strh.w	r3, [r4, #630]	; 0x276
		data_length -= len;
    6860:	6622      	str	r2, [r4, #96]	; 0x60
		if (data_length > 0) return false;
    6862:	2a00      	cmp	r2, #0
    6864:	f47f af50 	bne.w	6708 <AudioPlaySdWav::update()+0x270>
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
		if (header[0] == 0x61746164) {
    6868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    686a:	4842      	ldr	r0, [pc, #264]	; (6974 <AudioPlaySdWav::update()+0x4dc>)
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
		size -= len;
		data_length = header[1];
    686c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    686e:	6621      	str	r1, [r4, #96]	; 0x60
		if (header[0] == 0x61746164) {
    6870:	4283      	cmp	r3, r0
		if (data_length > 0) return false;
		//Serial.print("chunk id = ");
		//Serial.print(header[0], HEX);
		//Serial.print(", length = ");
		//Serial.println(header[1]);
		p += len;
    6872:	4446      	add	r6, r8
		size -= len;
    6874:	ebc8 0505 	rsb	r5, r8, r5
		data_length = header[1];
		if (header[0] == 0x61746164) {
    6878:	f000 808a 	beq.w	6990 <AudioPlaySdWav::update()+0x4f8>
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
		} else {
			state = STATE_PARSE4;
    687c:	230b      	movs	r3, #11
    687e:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    6882:	2d00      	cmp	r5, #0
    6884:	f43f af45 	beq.w	6712 <AudioPlaySdWav::update()+0x27a>
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    6888:	6e23      	ldr	r3, [r4, #96]	; 0x60
			data_length -= size;
			buffer_offset += size;
    688a:	f8b4 2276 	ldrh.w	r2, [r4, #630]	; 0x276
		}
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
    688e:	42ab      	cmp	r3, r5
    6890:	f200 80e1 	bhi.w	6a56 <AudioPlaySdWav::update()+0x5be>
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    6894:	441a      	add	r2, r3
		data_length = 8;
    6896:	2008      	movs	r0, #8
		if (size < data_length) {
			data_length -= size;
			buffer_offset += size;
			return false;
		}
		p += data_length;
    6898:	441e      	add	r6, r3
		size -= data_length;
    689a:	1aed      	subs	r5, r5, r3
		buffer_offset += data_length;
		data_length = 8;
		header_offset = 0;
    689c:	2100      	movs	r1, #0
		state = STATE_PARSE3;
    689e:	230a      	movs	r3, #10
			buffer_offset += size;
			return false;
		}
		p += data_length;
		size -= data_length;
		buffer_offset += data_length;
    68a0:	f8a4 2276 	strh.w	r2, [r4, #630]	; 0x276
		data_length = 8;
    68a4:	6620      	str	r0, [r4, #96]	; 0x60
		header_offset = 0;
    68a6:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
		state = STATE_PARSE3;
    68aa:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    68ae:	2d00      	cmp	r5, #0
    68b0:	d1bc      	bne.n	682c <AudioPlaySdWav::update()+0x394>
    68b2:	230a      	movs	r3, #10
    68b4:	e72d      	b.n	6712 <AudioPlaySdWav::update()+0x27a>
	SPI.usingInterrupt(IRQ_SOFTWARE);
	AudioUsingSPICount++;
}

static inline void AudioStopUsingSPI(void) {
	if (AudioUsingSPICount == 0 || --AudioUsingSPICount == 0)
    68b6:	4a30      	ldr	r2, [pc, #192]	; (6978 <AudioPlaySdWav::update()+0x4e0>)
    68b8:	8813      	ldrh	r3, [r2, #0]
    68ba:	b12b      	cbz	r3, 68c8 <AudioPlaySdWav::update()+0x430>
    68bc:	3b01      	subs	r3, #1
    68be:	b29b      	uxth	r3, r3
    68c0:	8013      	strh	r3, [r2, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	f47f aecb 	bne.w	665e <AudioPlaySdWav::update()+0x1c6>
		SPI.notUsingInterrupt(IRQ_SOFTWARE);
    68c8:	2140      	movs	r1, #64	; 0x40
    68ca:	482c      	ldr	r0, [pc, #176]	; (697c <AudioPlaySdWav::update()+0x4e4>)
    68cc:	f000 fa38 	bl	6d40 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>
    68d0:	e6c5      	b.n	665e <AudioPlaySdWav::update()+0x1c6>
				if (block_right) release(block_right);
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
				if (data_length == 0) break;
    68d2:	2800      	cmp	r0, #0
    68d4:	f47f af18 	bne.w	6708 <AudioPlaySdWav::update()+0x270>
    68d8:	e7a3      	b.n	6822 <AudioPlaySdWav::update()+0x38a>
	format = header[0];
	//Serial.print("  format = ");
	//Serial.println(format);
	if (format != 1) return false;

	rate = header[1];
    68da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
    68dc:	f64a 4e44 	movw	lr, #44100	; 0xac44
    68e0:	4570      	cmp	r0, lr
    68e2:	f000 8093 	beq.w	6a0c <AudioPlaySdWav::update()+0x574>
		b2m = B2M_44100;
	} else if (rate == 22050) {
    68e6:	f245 6322 	movw	r3, #22050	; 0x5622
    68ea:	4298      	cmp	r0, r3
    68ec:	f000 80a4 	beq.w	6a38 <AudioPlaySdWav::update()+0x5a0>
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
    68f0:	f642 3311 	movw	r3, #11025	; 0x2b11
    68f4:	4298      	cmp	r0, r3
    68f6:	f47f aea4 	bne.w	6642 <AudioPlaySdWav::update()+0x1aa>
    68fa:	2306      	movs	r3, #6
    68fc:	9301      	str	r3, [sp, #4]
    68fe:	f8df c08c 	ldr.w	ip, [pc, #140]	; 698c <AudioPlaySdWav::update()+0x4f4>
    6902:	4b1f      	ldr	r3, [pc, #124]	; (6980 <AudioPlaySdWav::update()+0x4e8>)
		b2m = B2M_11025;
    6904:	481f      	ldr	r0, [pc, #124]	; (6984 <AudioPlaySdWav::update()+0x4ec>)
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
		b2m = B2M_22050;
		num |= 4;
	} else if (rate == 11025) {
    6906:	9300      	str	r3, [sp, #0]
    6908:	f04f 0e07 	mov.w	lr, #7
    690c:	2105      	movs	r1, #5
		b2m = B2M_11025;
		num |= 4;
    690e:	2304      	movs	r3, #4
	} else {
		return false;
	}

	channels = header[0] >> 16;
    6910:	0c12      	lsrs	r2, r2, #16
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
    6912:	2a01      	cmp	r2, #1
    6914:	f000 809c 	beq.w	6a50 <AudioPlaySdWav::update()+0x5b8>
	} else if (channels == 2) {
    6918:	2a02      	cmp	r2, #2
    691a:	f47f ae92 	bne.w	6642 <AudioPlaySdWav::update()+0x1aa>
		b2m >>= 1;
    691e:	4660      	mov	r0, ip

	channels = header[0] >> 16;
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
	} else if (channels == 2) {
    6920:	f8dd c000 	ldr.w	ip, [sp]
		b2m >>= 1;
		num |= 1;
    6924:	460b      	mov	r3, r1
	} else {
		return false;
	}

	bits = header[3] >> 16;
    6926:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
	//Serial.print("  bits = ");
	//Serial.println(bits);
	if (bits == 8) {
    692a:	2a08      	cmp	r2, #8
    692c:	d004      	beq.n	6938 <AudioPlaySdWav::update()+0x4a0>
	} else if (bits == 16) {
    692e:	2a10      	cmp	r2, #16
    6930:	f47f ae87 	bne.w	6642 <AudioPlaySdWav::update()+0x1aa>
		b2m >>= 1;
    6934:	4660      	mov	r0, ip
		num |= 2;
    6936:	4673      	mov	r3, lr
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
    6938:	2108      	movs	r1, #8
			header_offset = 0;
    693a:	2200      	movs	r2, #0

	// we're not checking the byte rate and block align fields
	// if they're not the expected values, all we could do is
	// return false.  Do any real wav files have unexpected
	// values in these other fields?
	state_play = num;
    693c:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
			//Serial.println("audio format ok");
			p += len;
			size -= len;
			data_length = 8;
			header_offset = 0;
			state = STATE_PARSE3;
    6940:	230a      	movs	r3, #10
		num |= 2;
	} else {
		return false;
	}

	bytes2millis = b2m;
    6942:	66a0      	str	r0, [r4, #104]	; 0x68
		buffer_offset += len;
		data_length -= len;
		if (data_length > 0) return false;
		if (parse_format()) {
			//Serial.println("audio format ok");
			p += len;
    6944:	4446      	add	r6, r8
			size -= len;
    6946:	ebc8 0505 	rsb	r5, r8, r5
			data_length = 8;
    694a:	6621      	str	r1, [r4, #96]	; 0x60
			header_offset = 0;
    694c:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
			state = STATE_PARSE3;
    6950:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    6954:	e7ab      	b.n	68ae <AudioPlaySdWav::update()+0x416>
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    6956:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    6958:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    695c:	eb01 0c40 	add.w	ip, r1, r0, lsl #1
    6960:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
			leftover_bytes = 0;
			goto right16;
		}
		while (1) {
			lsb = *p++;
			msb = *p++;
    6964:	3602      	adds	r6, #2
				if (data_length == 0) break;
				header[0] = (msb << 8) | lsb;
				leftover_bytes = 2;
				return false;
			}
			block_left->data[block_offset] = (msb << 8) | lsb;
    6966:	f8ac 2004 	strh.w	r2, [ip, #4]
    696a:	e740      	b.n	67ee <AudioPlaySdWav::update()+0x356>
    696c:	40048030 	.word	0x40048030
    6970:	45564157 	.word	0x45564157
    6974:	61746164 	.word	0x61746164
    6978:	1fff63a0 	.word	0x1fff63a0
    697c:	1fff4948 	.word	0x1fff4948
    6980:	05cd7b8d 	.word	0x05cd7b8d
    6984:	1735ee34 	.word	0x1735ee34
    6988:	46464952 	.word	0x46464952
    698c:	0b9af71a 	.word	0x0b9af71a
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    6990:	f894 327c 	ldrb.w	r3, [r4, #636]	; 0x27c
			//Serial.print("wav: found data chunk, len=");
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
    6994:	f884 227d 	strb.w	r2, [r4, #637]	; 0x27d
			state = state_play;
			if (state & 1) {
    6998:	07d8      	lsls	r0, r3, #31
			//Serial.println(data_length);
			// TODO: verify offset in file is an even number
			// as required by WAV format.  abort if odd.  Code
			// below will depend upon this and fail if not even.
			leftover_bytes = 0;
			state = state_play;
    699a:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
			if (state & 1) {
    699e:	d441      	bmi.n	6a24 <AudioPlaySdWav::update()+0x58c>
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
				if (!block_right) return false;
			}
			total_length = data_length;
    69a0:	6661      	str	r1, [r4, #100]	; 0x64
	uint8_t lsb, msb;
	const uint8_t *p;

	p = buffer + buffer_offset;
start:
	if (size == 0) return false;
    69a2:	2d00      	cmp	r5, #0
    69a4:	f47f adc4 	bne.w	6530 <AudioPlaySdWav::update()+0x98>
    69a8:	e6b0      	b.n	670c <AudioPlaySdWav::update()+0x274>
		// parse the header...
		if (header[0] == 0x46464952 && header[2] == 0x45564157) {
			//Serial.println("is wav file");
			if (header[3] == 0x20746D66) {
				// "fmt " header
				if (header[4] < 16) {
    69aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    69ac:	f1a2 0310 	sub.w	r3, r2, #16
    69b0:	2b18      	cmp	r3, #24
    69b2:	f63f ae46 	bhi.w	6642 <AudioPlaySdWav::update()+0x1aa>
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
				state = STATE_PARSE2;
    69b6:	2309      	movs	r3, #9
					// size of header[] should accomodate them...
					//Serial.println("WAVEFORMATEXTENSIBLE too long");
					break;
				}
				//Serial.println("header ok");
				header_offset = 0;
    69b8:	f884 027a 	strb.w	r0, [r4, #634]	; 0x27a
				state = STATE_PARSE2;
    69bc:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    69c0:	e6f7      	b.n	67b2 <AudioPlaySdWav::update()+0x31a>
			lsb = *p++;
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
    69c2:	2200      	movs	r2, #0
    69c4:	4620      	mov	r0, r4
    69c6:	f006 fa37 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_left);
				block_left = NULL;
    69ca:	2700      	movs	r7, #0
			msb = *p++;
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
    69cc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    69ce:	f006 fa09 	bl	cde4 <AudioStream::release(audio_block_struct*)>
				block_left = NULL;
				transmit(block_right, 1);
    69d2:	2201      	movs	r2, #1
    69d4:	6f21      	ldr	r1, [r4, #112]	; 0x70
			size -= 2;
			block_right->data[block_offset++] = (msb << 8) | lsb;
			if (block_offset >= AUDIO_BLOCK_SAMPLES) {
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
    69d6:	66e7      	str	r7, [r4, #108]	; 0x6c
				transmit(block_right, 1);
    69d8:	4620      	mov	r0, r4
    69da:	f006 fa2d 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
				release(block_right);
    69de:	6f20      	ldr	r0, [r4, #112]	; 0x70
    69e0:	f006 fa00 	bl	cde4 <AudioStream::release(audio_block_struct*)>
				block_right = NULL;
				data_length += size;
    69e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
				transmit(block_left, 0);
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
    69e6:	6727      	str	r7, [r4, #112]	; 0x70
    69e8:	46d8      	mov	r8, fp
				data_length += size;
				buffer_offset = p - buffer;
    69ea:	ebc8 0606 	rsb	r6, r8, r6
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    69ee:	441d      	add	r5, r3
    69f0:	46cb      	mov	fp, r9
				buffer_offset = p - buffer;
    69f2:	f8a4 6276 	strh.w	r6, [r4, #630]	; 0x276
				release(block_left);
				block_left = NULL;
				transmit(block_right, 1);
				release(block_right);
				block_right = NULL;
				data_length += size;
    69f6:	6625      	str	r5, [r4, #96]	; 0x60
    69f8:	e5f7      	b.n	65ea <AudioPlaySdWav::update()+0x152>
				if (data_length == 0) state = STATE_STOP;
				return true;
			}
			if (size == 0) {
				if (data_length == 0) break;
				leftover_bytes = 0;
    69fa:	f884 527d 	strb.w	r5, [r4, #637]	; 0x27d
    69fe:	e683      	b.n	6708 <AudioPlaySdWav::update()+0x270>
			for (uint32_t i=block_offset; i < AUDIO_BLOCK_SAMPLES; i++) {
				block_left->data[i] = 0;
			}
			transmit(block_left, 0);
			if (state < 8 && (state & 1) == 0) {
				transmit(block_left, 1);
    6a00:	2201      	movs	r2, #1
    6a02:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    6a04:	4620      	mov	r0, r4
    6a06:	f006 fa17 	bl	ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>
    6a0a:	e649      	b.n	66a0 <AudioPlaySdWav::update()+0x208>
	if (format != 1) return false;

	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
    6a0c:	2002      	movs	r0, #2
    6a0e:	9001      	str	r0, [sp, #4]
    6a10:	4815      	ldr	r0, [pc, #84]	; (6a68 <AudioPlaySdWav::update()+0x5d0>)
    6a12:	9000      	str	r0, [sp, #0]
    6a14:	f04f 0e03 	mov.w	lr, #3
    6a18:	f8df c054 	ldr.w	ip, [pc, #84]	; 6a70 <AudioPlaySdWav::update()+0x5d8>
		b2m = B2M_44100;
    6a1c:	4813      	ldr	r0, [pc, #76]	; (6a6c <AudioPlaySdWav::update()+0x5d4>)
    6a1e:	e777      	b.n	6910 <AudioPlaySdWav::update()+0x478>
    6a20:	46cb      	mov	fp, r9
    6a22:	e614      	b.n	664e <AudioPlaySdWav::update()+0x1b6>
			leftover_bytes = 0;
			state = state_play;
			if (state & 1) {
				// if we're going to start stereo
				// better allocate another output block
				block_right = allocate();
    6a24:	f006 f98a 	bl	cd3c <AudioStream::allocate()>
    6a28:	6720      	str	r0, [r4, #112]	; 0x70
				if (!block_right) return false;
    6a2a:	2800      	cmp	r0, #0
    6a2c:	f43f ae6c 	beq.w	6708 <AudioPlaySdWav::update()+0x270>
    6a30:	6e21      	ldr	r1, [r4, #96]	; 0x60
    6a32:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    6a36:	e7b3      	b.n	69a0 <AudioPlaySdWav::update()+0x508>
	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
    6a38:	4b0d      	ldr	r3, [pc, #52]	; (6a70 <AudioPlaySdWav::update()+0x5d8>)
    6a3a:	9300      	str	r3, [sp, #0]
    6a3c:	2306      	movs	r3, #6
    6a3e:	9301      	str	r3, [sp, #4]
    6a40:	f8df c028 	ldr.w	ip, [pc, #40]	; 6a6c <AudioPlaySdWav::update()+0x5d4>
		b2m = B2M_22050;
    6a44:	480b      	ldr	r0, [pc, #44]	; (6a74 <AudioPlaySdWav::update()+0x5dc>)
	rate = header[1];
	//Serial.print("  rate = ");
	//Serial.println(rate);
	if (rate == 44100) {
		b2m = B2M_44100;
	} else if (rate == 22050) {
    6a46:	f04f 0e07 	mov.w	lr, #7
    6a4a:	2105      	movs	r1, #5
		b2m = B2M_22050;
		num |= 4;
    6a4c:	2304      	movs	r3, #4
    6a4e:	e75f      	b.n	6910 <AudioPlaySdWav::update()+0x478>
	}

	channels = header[0] >> 16;
	//Serial.print("  channels = ");
	//Serial.println(channels);
	if (channels == 1) {
    6a50:	f8dd e004 	ldr.w	lr, [sp, #4]
    6a54:	e767      	b.n	6926 <AudioPlaySdWav::update()+0x48e>
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    6a56:	1b5b      	subs	r3, r3, r5
			buffer_offset += size;
    6a58:	4415      	add	r5, r2
		goto start;

	  // ignore any extra unknown chunks (title & artist info)
	  case STATE_PARSE4: // 11
		if (size < data_length) {
			data_length -= size;
    6a5a:	6623      	str	r3, [r4, #96]	; 0x60
			buffer_offset += size;
    6a5c:	f8a4 5276 	strh.w	r5, [r4, #630]	; 0x276
    6a60:	e602      	b.n	6668 <AudioPlaySdWav::update()+0x1d0>
	  // skip past "junk" data before "fmt " header
	  case STATE_PARSE5:
		len = data_length;
		if (size < len) len = size;
		buffer_offset += len;
		data_length -= len;
    6a62:	6623      	str	r3, [r4, #96]	; 0x60
    6a64:	e600      	b.n	6668 <AudioPlaySdWav::update()+0x1d0>
    6a66:	bf00      	nop
    6a68:	01735ee3 	.word	0x01735ee3
    6a6c:	05cd7b8d 	.word	0x05cd7b8d
    6a70:	02e6bdc6 	.word	0x02e6bdc6
    6a74:	0b9af71a 	.word	0x0b9af71a

00006a78 <AudioRecordQueue::update()>:
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
    6a78:	b510      	push	{r4, lr}
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
    6a7a:	2100      	movs	r1, #0
	release(userblock);
	userblock = NULL;
}

void AudioRecordQueue::update(void)
{
    6a7c:	4604      	mov	r4, r0
	audio_block_t *block;
	uint32_t h;

	block = receiveReadOnly();
    6a7e:	f006 f9f5 	bl	ce6c <AudioStream::receiveReadOnly(unsigned int)>
	if (!block) return;
    6a82:	b198      	cbz	r0, 6aac <AudioRecordQueue::update()+0x34>
	if (!enabled) {
    6a84:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
    6a88:	b18b      	cbz	r3, 6aae <AudioRecordQueue::update()+0x36>
		release(block);
		return;
	}
	h = head + 1;
    6a8a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
	if (h >= 53) h = 0;
	if (h == tail) {
    6a8e:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
	if (!block) return;
	if (!enabled) {
		release(block);
		return;
	}
	h = head + 1;
    6a92:	3301      	adds	r3, #1
    6a94:	2b34      	cmp	r3, #52	; 0x34
    6a96:	bfc8      	it	gt
    6a98:	2300      	movgt	r3, #0
	if (h >= 53) h = 0;
	if (h == tail) {
    6a9a:	4293      	cmp	r3, r2
    6a9c:	d007      	beq.n	6aae <AudioRecordQueue::update()+0x36>
		release(block);
	} else {
		queue[h] = block;
    6a9e:	1d9a      	adds	r2, r3, #6
    6aa0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		head = h;
    6aa4:	b2db      	uxtb	r3, r3
	h = head + 1;
	if (h >= 53) h = 0;
	if (h == tail) {
		release(block);
	} else {
		queue[h] = block;
    6aa6:	6050      	str	r0, [r2, #4]
		head = h;
    6aa8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    6aac:	bd10      	pop	{r4, pc}
	}
}
    6aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;
	}
	h = head + 1;
	if (h >= 53) h = 0;
	if (h == tail) {
		release(block);
    6ab2:	f006 b997 	b.w	cde4 <AudioStream::release(audio_block_struct*)>
    6ab6:	bf00      	nop

00006ab8 <AudioRecordQueue::available()>:

int AudioRecordQueue::available(void)
{
	uint32_t h, t;

	h = head;
    6ab8:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
	t = tail;
    6abc:	f890 30f5 	ldrb.w	r3, [r0, #245]	; 0xf5

int AudioRecordQueue::available(void)
{
	uint32_t h, t;

	h = head;
    6ac0:	b2d0      	uxtb	r0, r2
	t = tail;
    6ac2:	b2db      	uxtb	r3, r3
	if (h >= t) return h - t;
    6ac4:	4298      	cmp	r0, r3
	return 53 + h - t;
    6ac6:	bf38      	it	cc
    6ac8:	3035      	addcc	r0, #53	; 0x35
    6aca:	1ac0      	subs	r0, r0, r3
}
    6acc:	4770      	bx	lr
    6ace:	bf00      	nop

00006ad0 <AudioRecordQueue::clear()>:

void AudioRecordQueue::clear(void)
{
    6ad0:	b538      	push	{r3, r4, r5, lr}
    6ad2:	4605      	mov	r5, r0
	uint32_t t;

	if (userblock) {
    6ad4:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
    6ad8:	b120      	cbz	r0, 6ae4 <AudioRecordQueue::clear()+0x14>
		release(userblock);
    6ada:	f006 f983 	bl	cde4 <AudioStream::release(audio_block_struct*)>
		userblock = NULL;
    6ade:	2300      	movs	r3, #0
    6ae0:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
	}
	t = tail;
    6ae4:	f895 40f5 	ldrb.w	r4, [r5, #245]	; 0xf5
	while (t != head) {
    6ae8:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4

	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
    6aec:	b2e4      	uxtb	r4, r4
	while (t != head) {
    6aee:	b2db      	uxtb	r3, r3
    6af0:	429c      	cmp	r4, r3
    6af2:	d00e      	beq.n	6b12 <AudioRecordQueue::clear()+0x42>
		if (++t >= 53) t = 0;
    6af4:	3401      	adds	r4, #1
    6af6:	2c35      	cmp	r4, #53	; 0x35
    6af8:	bf28      	it	cs
    6afa:	2400      	movcs	r4, #0
		release(queue[t]);
    6afc:	1da3      	adds	r3, r4, #6
    6afe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    6b02:	6858      	ldr	r0, [r3, #4]
    6b04:	f006 f96e 	bl	cde4 <AudioStream::release(audio_block_struct*)>
	if (userblock) {
		release(userblock);
		userblock = NULL;
	}
	t = tail;
	while (t != head) {
    6b08:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
    6b0c:	b2db      	uxtb	r3, r3
    6b0e:	429c      	cmp	r4, r3
    6b10:	d1f0      	bne.n	6af4 <AudioRecordQueue::clear()+0x24>
		if (++t >= 53) t = 0;
		release(queue[t]);
	}
	tail = t;
    6b12:	b2db      	uxtb	r3, r3
    6b14:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
    6b18:	bd38      	pop	{r3, r4, r5, pc}
    6b1a:	bf00      	nop

00006b1c <AudioRecordQueue::readBuffer()>:
}

int16_t * AudioRecordQueue::readBuffer(void)
{
    6b1c:	4602      	mov	r2, r0
	uint32_t t;

	if (userblock) return NULL;
    6b1e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
    6b22:	b9b0      	cbnz	r0, 6b52 <AudioRecordQueue::readBuffer()+0x36>
	t = tail;
    6b24:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
	if (t == head) return NULL;
    6b28:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
int16_t * AudioRecordQueue::readBuffer(void)
{
	uint32_t t;

	if (userblock) return NULL;
	t = tail;
    6b2c:	b2db      	uxtb	r3, r3
	if (t == head) return NULL;
    6b2e:	428b      	cmp	r3, r1
    6b30:	d010      	beq.n	6b54 <AudioRecordQueue::readBuffer()+0x38>
	if (++t >= 53) t = 0;
    6b32:	3301      	adds	r3, #1
    6b34:	2b34      	cmp	r3, #52	; 0x34
    6b36:	bf86      	itte	hi
    6b38:	4601      	movhi	r1, r0
    6b3a:	460b      	movhi	r3, r1
    6b3c:	b2d9      	uxtbls	r1, r3
	userblock = queue[t];
    6b3e:	3306      	adds	r3, #6
    6b40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6b44:	6858      	ldr	r0, [r3, #4]
    6b46:	f8c2 00f0 	str.w	r0, [r2, #240]	; 0xf0
	tail = t;
    6b4a:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
	return userblock->data;
    6b4e:	3004      	adds	r0, #4
    6b50:	4770      	bx	lr

int16_t * AudioRecordQueue::readBuffer(void)
{
	uint32_t t;

	if (userblock) return NULL;
    6b52:	2000      	movs	r0, #0
	if (t == head) return NULL;
	if (++t >= 53) t = 0;
	userblock = queue[t];
	tail = t;
	return userblock->data;
}
    6b54:	4770      	bx	lr
    6b56:	bf00      	nop

00006b58 <AudioRecordQueue::freeBuffer()>:

void AudioRecordQueue::freeBuffer(void)
{
	if (userblock == NULL) return;
    6b58:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
    6b5c:	b143      	cbz	r3, 6b70 <AudioRecordQueue::freeBuffer()+0x18>
	tail = t;
	return userblock->data;
}

void AudioRecordQueue::freeBuffer(void)
{
    6b5e:	b510      	push	{r4, lr}
    6b60:	4604      	mov	r4, r0
	if (userblock == NULL) return;
	release(userblock);
    6b62:	4618      	mov	r0, r3
    6b64:	f006 f93e 	bl	cde4 <AudioStream::release(audio_block_struct*)>
	userblock = NULL;
    6b68:	2300      	movs	r3, #0
    6b6a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
    6b6e:	bd10      	pop	{r4, pc}
    6b70:	4770      	bx	lr
    6b72:	bf00      	nop

00006b74 <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    6b74:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6b76:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6b78:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6b7a:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6b7c:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6b7e:	d003      	beq.n	6b88 <EventResponder::triggerEvent(int, void*)+0x14>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    6b80:	f85d 4b04 	ldr.w	r4, [sp], #4
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6b84:	f006 bb6a 	b.w	d25c <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6b88:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    6b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6b8e:	4718      	bx	r3

00006b90 <_spi_dma_rxISR0()>:
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6b90:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    6b92:	4b46      	ldr	r3, [pc, #280]	; (6cac <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    6b94:	4a46      	ldr	r2, [pc, #280]	; (6cb0 <_spi_dma_rxISR0()+0x120>)
    6b96:	6b98      	ldr	r0, [r3, #56]	; 0x38
    6b98:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    6b9a:	7901      	ldrb	r1, [r0, #4]
    6b9c:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    6b9e:	4945      	ldr	r1, [pc, #276]	; (6cb4 <_spi_dma_rxISR0()+0x124>)
    6ba0:	7922      	ldrb	r2, [r4, #4]
    6ba2:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    6ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    6ba6:	7900      	ldrb	r0, [r0, #4]
    6ba8:	7008      	strb	r0, [r1, #0]
    6baa:	2a00      	cmp	r2, #0
    6bac:	d046      	beq.n	6c3c <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    6bae:	6859      	ldr	r1, [r3, #4]
    6bb0:	68c9      	ldr	r1, [r1, #12]
    6bb2:	428a      	cmp	r2, r1
    6bb4:	d83e      	bhi.n	6c34 <_spi_dma_rxISR0()+0xa4>
    6bb6:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6bb8:	8bcc      	ldrh	r4, [r1, #30]
    6bba:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    6bbc:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6bc0:	d465      	bmi.n	6c8e <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    6bc2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    6bc6:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6bc8:	8bc8      	ldrh	r0, [r1, #30]
    6bca:	b280      	uxth	r0, r0
    6bcc:	82c8      	strh	r0, [r1, #22]
    6bce:	6b99      	ldr	r1, [r3, #56]	; 0x38
    6bd0:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    6bd2:	8bc8      	ldrh	r0, [r1, #30]
    6bd4:	0400      	lsls	r0, r0, #16
    6bd6:	d452      	bmi.n	6c7e <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    6bd8:	f3c2 000e 	ubfx	r0, r2, #0, #15
    6bdc:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6bde:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    6be0:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6be2:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    6be4:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    6be8:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    6bea:	bf18      	it	ne
    6bec:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    6bee:	631c      	str	r4, [r3, #48]	; 0x30
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    6bf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
    6bf2:	482e      	ldr	r0, [pc, #184]	; (6cac <_spi_dma_rxISR0()+0x11c>)
    6bf4:	6809      	ldr	r1, [r1, #0]
    6bf6:	680d      	ldr	r5, [r1, #0]
    6bf8:	f100 042c 	add.w	r4, r0, #44	; 0x2c
    6bfc:	42a5      	cmp	r5, r4
    6bfe:	d036      	beq.n	6c6e <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    6c00:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    6c02:	68c4      	ldr	r4, [r0, #12]
    6c04:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    6c08:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    6c0a:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    6c0c:	bf15      	itete	ne
    6c0e:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    6c10:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    6c12:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    6c14:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6c16:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    6c1a:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6c1c:	6344      	str	r4, [r0, #52]	; 0x34
    6c1e:	6b99      	ldr	r1, [r3, #56]	; 0x38
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    6c20:	4b25      	ldr	r3, [pc, #148]	; (6cb8 <_spi_dma_rxISR0()+0x128>)
    6c22:	7909      	ldrb	r1, [r1, #4]
    6c24:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    6c26:	4921      	ldr	r1, [pc, #132]	; (6cac <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    6c28:	b112      	cbz	r2, 6c30 <_spi_dma_rxISR0()+0xa0>
    6c2a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    6c2c:	7912      	ldrb	r2, [r2, #4]
    6c2e:	701a      	strb	r2, [r3, #0]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6c30:	bcf0      	pop	{r4, r5, r6, r7}
    6c32:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    6c34:	1a52      	subs	r2, r2, r1
    6c36:	631a      	str	r2, [r3, #48]	; 0x30
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    6c38:	2201      	movs	r2, #1
    6c3a:	e7d9      	b.n	6bf0 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6c3c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    6c3e:	6819      	ldr	r1, [r3, #0]
    6c40:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    6c42:	4c1e      	ldr	r4, [pc, #120]	; (6cbc <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    6c44:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    6c46:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    6c48:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6c4a:	682d      	ldr	r5, [r5, #0]
    6c4c:	4e1c      	ldr	r6, [pc, #112]	; (6cc0 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    6c4e:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6c52:	2703      	movs	r7, #3
    6c54:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    6c56:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    6c58:	f883 702d 	strb.w	r7, [r3, #45]	; 0x2d
    6c5c:	d11f      	bne.n	6c9e <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    6c5e:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    6c60:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    6c62:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    6c64:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    6c66:	d01e      	beq.n	6ca6 <_spi_dma_rxISR0()+0x116>
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6c68:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    6c6a:	f006 baf7 	b.w	d25c <EventResponder::triggerEventNotImmediate()>
    6c6e:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6c70:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    6c74:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    6c76:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    6c7a:	6348      	str	r0, [r1, #52]	; 0x34
    6c7c:	e7cf      	b.n	6c1e <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    6c7e:	8bcc      	ldrh	r4, [r1, #30]
    6c80:	f3c2 0008 	ubfx	r0, r2, #0, #9
    6c84:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6c88:	4320      	orrs	r0, r4
    6c8a:	83c8      	strh	r0, [r1, #30]
    6c8c:	e7a7      	b.n	6bde <_spi_dma_rxISR0()+0x4e>
    6c8e:	8bcc      	ldrh	r4, [r1, #30]
    6c90:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6c94:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    6c98:	4320      	orrs	r0, r4
    6c9a:	83c8      	strh	r0, [r1, #30]
    6c9c:	e794      	b.n	6bc8 <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6c9e:	462b      	mov	r3, r5
    6ca0:	4611      	mov	r1, r2
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6ca2:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    6ca4:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    6ca6:	6883      	ldr	r3, [r0, #8]
};
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);

#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    6ca8:	bcf0      	pop	{r4, r5, r6, r7}
    6caa:	4718      	bx	r3
    6cac:	1fff4948 	.word	0x1fff4948
    6cb0:	4000801f 	.word	0x4000801f
    6cb4:	4000801c 	.word	0x4000801c
    6cb8:	4000801b 	.word	0x4000801b
    6cbc:	ff0f0000 	.word	0xff0f0000
    6cc0:	00006b75 	.word	0x00006b75

00006cc4 <SPIClass::begin()>:
    6cc4:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    6cc8:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    6cca:	681c      	ldr	r4, [r3, #0]
    6ccc:	6859      	ldr	r1, [r3, #4]
    6cce:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    6cd0:	4f16      	ldr	r7, [pc, #88]	; (6d2c <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    6cd2:	4e17      	ldr	r6, [pc, #92]	; (6d30 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    6cd4:	4329      	orrs	r1, r5
    6cd6:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    6cd8:	4d16      	ldr	r5, [pc, #88]	; (6d34 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    6cda:	4917      	ldr	r1, [pc, #92]	; (6d38 <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    6cdc:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    6cde:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    6ce0:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    6ce2:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6ce4:	7a41      	ldrb	r1, [r0, #9]
    6ce6:	4a15      	ldr	r2, [pc, #84]	; (6d3c <SPIClass::begin()+0x78>)
    6ce8:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    6cea:	310c      	adds	r1, #12
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6cec:	f894 402c 	ldrb.w	r4, [r4, #44]	; 0x2c
	*reg = hardware().mosi_mux[mosi_pin_index];
    6cf0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6cf4:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    6cf8:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    6cfa:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    6cfc:	7a01      	ldrb	r1, [r0, #8]
    6cfe:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    6d00:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    6d04:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    6d06:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    6d08:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    6d0c:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    6d0e:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    6d10:	7a81      	ldrb	r1, [r0, #10]
    6d12:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    6d14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    6d18:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
	*reg = hardware().sck_mux[sck_pin_index];
    6d1c:	6c59      	ldr	r1, [r3, #68]	; 0x44
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    6d1e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    6d22:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    6d24:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    6d26:	6019      	str	r1, [r3, #0]
}
    6d28:	4770      	bx	lr
    6d2a:	bf00      	nop
    6d2c:	001f4001 	.word	0x001f4001
    6d30:	38001001 	.word	0x38001001
    6d34:	78001001 	.word	0x78001001
    6d38:	801f0000 	.word	0x801f0000
    6d3c:	0001778c 	.word	0x0001778c

00006d40 <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)>:
}

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
    6d40:	2963      	cmp	r1, #99	; 0x63
    6d42:	d813      	bhi.n	6d6c <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2c>
	//Serial.printf("interruptMask[1] = %08X\n", interruptMask[1]);
	//Serial.printf("interruptMask[2] = %08X\n", interruptMask[2]);
}

void SPIClass::notUsingInterrupt(IRQ_NUMBER_t interruptName)
{
    6d44:	b430      	push	{r4, r5}
	uint32_t n = (uint32_t)interruptName;
	if (n >= NVIC_NUM_INTERRUPTS) return;
	interruptMask[n >> 5] &= ~(1 << (n & 0x1F));
    6d46:	094d      	lsrs	r5, r1, #5
    6d48:	eb00 0485 	add.w	r4, r0, r5, lsl #2
    6d4c:	f001 011f 	and.w	r1, r1, #31
    6d50:	68e3      	ldr	r3, [r4, #12]
    6d52:	2201      	movs	r2, #1
    6d54:	fa02 f101 	lsl.w	r1, r2, r1
    6d58:	ea23 0101 	bic.w	r1, r3, r1
    6d5c:	60e1      	str	r1, [r4, #12]
	if (interruptMask[n >> 5] == 0) {
    6d5e:	b921      	cbnz	r1, 6d6a <SPIClass::notUsingInterrupt(IRQ_NUMBER_t)+0x2a>
		interruptMasksUsed &= ~(1 << (n >> 5));
    6d60:	7ac3      	ldrb	r3, [r0, #11]
    6d62:	40aa      	lsls	r2, r5
    6d64:	ea23 0202 	bic.w	r2, r3, r2
    6d68:	72c2      	strb	r2, [r0, #11]
	}
}
    6d6a:	bc30      	pop	{r4, r5}
    6d6c:	4770      	bx	lr
    6d6e:	bf00      	nop

00006d70 <SPIClass::setMOSI(unsigned char)>:
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    6d70:	4a2c      	ldr	r2, [pc, #176]	; (6e24 <SPIClass::setMOSI(unsigned char)+0xb4>)
    6d72:	6843      	ldr	r3, [r0, #4]
    6d74:	429a      	cmp	r2, r3
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    6d76:	b470      	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    6d78:	d019      	beq.n	6dae <SPIClass::setMOSI(unsigned char)+0x3e>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    6d7a:	7a42      	ldrb	r2, [r0, #9]
    6d7c:	441a      	add	r2, r3
    6d7e:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
    6d82:	4291      	cmp	r1, r2
    6d84:	d011      	beq.n	6daa <SPIClass::setMOSI(unsigned char)+0x3a>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    6d86:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
    6d8a:	428c      	cmp	r4, r1
    6d8c:	d045      	beq.n	6e1a <SPIClass::setMOSI(unsigned char)+0xaa>
    6d8e:	f893 402d 	ldrb.w	r4, [r3, #45]	; 0x2d
    6d92:	428c      	cmp	r4, r1
    6d94:	d043      	beq.n	6e1e <SPIClass::setMOSI(unsigned char)+0xae>
    6d96:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
    6d9a:	428c      	cmp	r4, r1
    6d9c:	d01d      	beq.n	6dda <SPIClass::setMOSI(unsigned char)+0x6a>
    6d9e:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
    6da2:	428c      	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    6da4:	bf08      	it	eq
    6da6:	2103      	moveq	r1, #3
			if  (pin == hardware().mosi_pin[i]) {
    6da8:	d018      	beq.n	6ddc <SPIClass::setMOSI(unsigned char)+0x6c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    6daa:	bc70      	pop	{r4, r5, r6}
    6dac:	4770      	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    6dae:	290b      	cmp	r1, #11
    6db0:	d02d      	beq.n	6e0e <SPIClass::setMOSI(unsigned char)+0x9e>
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    6db2:	2907      	cmp	r1, #7
    6db4:	d009      	beq.n	6dca <SPIClass::setMOSI(unsigned char)+0x5a>
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
    6db6:	291c      	cmp	r1, #28
    6db8:	d1df      	bne.n	6d7a <SPIClass::setMOSI(unsigned char)+0xa>
    6dba:	4c1b      	ldr	r4, [pc, #108]	; (6e28 <SPIClass::setMOSI(unsigned char)+0xb8>)
    6dbc:	7822      	ldrb	r2, [r4, #0]
    6dbe:	f022 0203 	bic.w	r2, r2, #3
    6dc2:	f042 0202 	orr.w	r2, r2, #2
    6dc6:	7022      	strb	r2, [r4, #0]
    6dc8:	e7d7      	b.n	6d7a <SPIClass::setMOSI(unsigned char)+0xa>
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
    6dca:	4c17      	ldr	r4, [pc, #92]	; (6e28 <SPIClass::setMOSI(unsigned char)+0xb8>)
    6dcc:	7822      	ldrb	r2, [r4, #0]
    6dce:	f022 0203 	bic.w	r2, r2, #3
    6dd2:	f042 0201 	orr.w	r2, r2, #1
    6dd6:	7022      	strb	r2, [r4, #0]
    6dd8:	e7cf      	b.n	6d7a <SPIClass::setMOSI(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    6dda:	2102      	movs	r1, #2
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    6ddc:	681d      	ldr	r5, [r3, #0]
    6dde:	685c      	ldr	r4, [r3, #4]
    6de0:	682d      	ldr	r5, [r5, #0]
    6de2:	4225      	tst	r5, r4
    6de4:	d010      	beq.n	6e08 <SPIClass::setMOSI(unsigned char)+0x98>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6de6:	4c11      	ldr	r4, [pc, #68]	; (6e2c <SPIClass::setMOSI(unsigned char)+0xbc>)
    6de8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    6dec:	2600      	movs	r6, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    6dee:	6855      	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    6df0:	185a      	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    6df2:	602e      	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    6df4:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
    6df8:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
					*reg = hardware().mosi_mux[i];
    6dfc:	f101 020c 	add.w	r2, r1, #12
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    6e00:	6864      	ldr	r4, [r4, #4]
					*reg = hardware().mosi_mux[i];
    6e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6e06:	6023      	str	r3, [r4, #0]
				}	
				mosi_pin_index = i;
    6e08:	7241      	strb	r1, [r0, #9]
				return;
			}
		}
	}
}
    6e0a:	bc70      	pop	{r4, r5, r6}
    6e0c:	4770      	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setMOSI_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
    6e0e:	4c06      	ldr	r4, [pc, #24]	; (6e28 <SPIClass::setMOSI(unsigned char)+0xb8>)
    6e10:	7822      	ldrb	r2, [r4, #0]
    6e12:	f022 0203 	bic.w	r2, r2, #3
    6e16:	7022      	strb	r2, [r4, #0]
    6e18:	e7af      	b.n	6d7a <SPIClass::setMOSI(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    6e1a:	2100      	movs	r1, #0
    6e1c:	e7de      	b.n	6ddc <SPIClass::setMOSI(unsigned char)+0x6c>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    6e1e:	2101      	movs	r1, #1
    6e20:	e7dc      	b.n	6ddc <SPIClass::setMOSI(unsigned char)+0x6c>
    6e22:	bf00      	nop
    6e24:	000174c4 	.word	0x000174c4
    6e28:	1fff6801 	.word	0x1fff6801
    6e2c:	0001778c 	.word	0x0001778c

00006e30 <SPIClass::setSCK(unsigned char)>:
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    6e30:	4a28      	ldr	r2, [pc, #160]	; (6ed4 <SPIClass::setSCK(unsigned char)+0xa4>)
    6e32:	6843      	ldr	r3, [r0, #4]
    6e34:	429a      	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    6e36:	b470      	push	{r4, r5, r6}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    6e38:	d015      	beq.n	6e66 <SPIClass::setSCK(unsigned char)+0x36>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    6e3a:	7a82      	ldrb	r2, [r0, #10]
    6e3c:	441a      	add	r2, r3
    6e3e:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    6e42:	4291      	cmp	r1, r2
    6e44:	d00d      	beq.n	6e62 <SPIClass::setSCK(unsigned char)+0x32>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    6e46:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    6e4a:	428c      	cmp	r4, r1
    6e4c:	d03f      	beq.n	6ece <SPIClass::setSCK(unsigned char)+0x9e>
    6e4e:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
    6e52:	428c      	cmp	r4, r1
    6e54:	d01d      	beq.n	6e92 <SPIClass::setSCK(unsigned char)+0x62>
    6e56:	f893 4042 	ldrb.w	r4, [r3, #66]	; 0x42
    6e5a:	428c      	cmp	r4, r1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    6e5c:	bf08      	it	eq
    6e5e:	2102      	moveq	r1, #2
			if  (pin == hardware().sck_pin[i]) {
    6e60:	d018      	beq.n	6e94 <SPIClass::setSCK(unsigned char)+0x64>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    6e62:	bc70      	pop	{r4, r5, r6}
    6e64:	4770      	bx	lr
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    6e66:	290d      	cmp	r1, #13
    6e68:	d02b      	beq.n	6ec2 <SPIClass::setSCK(unsigned char)+0x92>
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    6e6a:	290e      	cmp	r1, #14
    6e6c:	d009      	beq.n	6e82 <SPIClass::setSCK(unsigned char)+0x52>
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
    6e6e:	291b      	cmp	r1, #27
    6e70:	d1e3      	bne.n	6e3a <SPIClass::setSCK(unsigned char)+0xa>
    6e72:	4c19      	ldr	r4, [pc, #100]	; (6ed8 <SPIClass::setSCK(unsigned char)+0xa8>)
    6e74:	7822      	ldrb	r2, [r4, #0]
    6e76:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    6e7a:	f042 0220 	orr.w	r2, r2, #32
    6e7e:	7022      	strb	r2, [r4, #0]
    6e80:	e7db      	b.n	6e3a <SPIClass::setSCK(unsigned char)+0xa>
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
    6e82:	4c15      	ldr	r4, [pc, #84]	; (6ed8 <SPIClass::setSCK(unsigned char)+0xa8>)
    6e84:	7822      	ldrb	r2, [r4, #0]
    6e86:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    6e8a:	f042 0210 	orr.w	r2, r2, #16
    6e8e:	7022      	strb	r2, [r4, #0]
    6e90:	e7d3      	b.n	6e3a <SPIClass::setSCK(unsigned char)+0xa>
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    6e92:	2101      	movs	r1, #1
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    6e94:	681d      	ldr	r5, [r3, #0]
    6e96:	685c      	ldr	r4, [r3, #4]
    6e98:	682d      	ldr	r5, [r5, #0]
    6e9a:	4225      	tst	r5, r4
    6e9c:	d00f      	beq.n	6ebe <SPIClass::setSCK(unsigned char)+0x8e>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    6e9e:	4c0f      	ldr	r4, [pc, #60]	; (6edc <SPIClass::setSCK(unsigned char)+0xac>)
    6ea0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
					*reg = 0;
    6ea4:	2600      	movs	r6, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    6ea6:	6855      	ldr	r5, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    6ea8:	185a      	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    6eaa:	602e      	str	r6, [r5, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    6eac:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    6eb0:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
					*reg = hardware().sck_mux[i];
    6eb4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    6eb8:	6862      	ldr	r2, [r4, #4]
					*reg = hardware().sck_mux[i];
    6eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6ebc:	6013      	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    6ebe:	7281      	strb	r1, [r0, #10]
				return;
    6ec0:	e7cf      	b.n	6e62 <SPIClass::setSCK(unsigned char)+0x32>
		pinout = newpinout;
#endif
	}
	inline void setSCK_soft(uint8_t pin) __attribute__((always_inline)) {
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
    6ec2:	4c05      	ldr	r4, [pc, #20]	; (6ed8 <SPIClass::setSCK(unsigned char)+0xa8>)
    6ec4:	7822      	ldrb	r2, [r4, #0]
    6ec6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    6eca:	7022      	strb	r2, [r4, #0]
    6ecc:	e7b5      	b.n	6e3a <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    6ece:	2100      	movs	r1, #0
    6ed0:	e7e0      	b.n	6e94 <SPIClass::setSCK(unsigned char)+0x64>
    6ed2:	bf00      	nop
    6ed4:	000174c4 	.word	0x000174c4
    6ed8:	1fff6801 	.word	0x1fff6801
    6edc:	0001778c 	.word	0x0001778c

00006ee0 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    6ee0:	2000      	movs	r0, #0
    6ee2:	4770      	bx	lr

00006ee4 <Print::flush()>:
	virtual void flush()				{ }
    6ee4:	4770      	bx	lr
    6ee6:	bf00      	nop

00006ee8 <SDLib::File::available()>:
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    6ee8:	69c0      	ldr	r0, [r0, #28]
    6eea:	b138      	cbz	r0, 6efc <SDLib::File::available()+0x14>

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
    6eec:	6983      	ldr	r3, [r0, #24]
    6eee:	68c0      	ldr	r0, [r0, #12]
    6ef0:	f647 72ff 	movw	r2, #32767	; 0x7fff
    6ef4:	1a18      	subs	r0, r3, r0
    6ef6:	4290      	cmp	r0, r2
    6ef8:	bf28      	it	cs
    6efa:	4610      	movcs	r0, r2
}
    6efc:	4770      	bx	lr
    6efe:	bf00      	nop

00006f00 <SDLib::File::write(unsigned char const*, unsigned int)>:
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    6f00:	69c3      	ldr	r3, [r0, #28]

size_t File::write(uint8_t val) {
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
    6f02:	b510      	push	{r4, lr}
    6f04:	4604      	mov	r4, r0
  size_t t;
  if (!_file) {
    6f06:	b143      	cbz	r3, 6f1a <SDLib::File::write(unsigned char const*, unsigned int)+0x1a>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    6f08:	2000      	movs	r0, #0
    6f0a:	7118      	strb	r0, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    6f0c:	b292      	uxth	r2, r2
    6f0e:	69e0      	ldr	r0, [r4, #28]
    6f10:	f002 f856 	bl	8fc0 <SdFile::write(void const*, unsigned short)>
    6f14:	69e3      	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    6f16:	791b      	ldrb	r3, [r3, #4]
    6f18:	b11b      	cbz	r3, 6f22 <SDLib::File::write(unsigned char const*, unsigned int)+0x22>
    6f1a:	2301      	movs	r3, #1
    6f1c:	7123      	strb	r3, [r4, #4]

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    6f1e:	2000      	movs	r0, #0
    6f20:	bd10      	pop	{r4, pc}
  if (_file->getWriteError()) {
    setWriteError();
    return 0;
  }
  return t;
}
    6f22:	bd10      	pop	{r4, pc}

00006f24 <SDLib::File::read()>:
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
  if (_file) 
    6f24:	69c0      	ldr	r0, [r0, #28]
    6f26:	b178      	cbz	r0, 6f48 <SDLib::File::read()+0x24>
  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}

int File::read() {
    6f28:	b500      	push	{lr}
    6f2a:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    6f2c:	2201      	movs	r2, #1
    6f2e:	f10d 0107 	add.w	r1, sp, #7
    6f32:	f001 fc53 	bl	87dc <SdFile::read(void*, unsigned short)>
    6f36:	2801      	cmp	r0, #1
    6f38:	bf0c      	ite	eq
    6f3a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    6f3e:	f04f 30ff 	movne.w	r0, #4294967295
  if (_file) 
    return _file->read();
  return -1;
}
    6f42:	b003      	add	sp, #12
    6f44:	f85d fb04 	ldr.w	pc, [sp], #4
}

int File::read() {
  if (_file) 
    return _file->read();
  return -1;
    6f48:	f04f 30ff 	mov.w	r0, #4294967295
    6f4c:	4770      	bx	lr
    6f4e:	bf00      	nop

00006f50 <SDLib::File::peek()>:
  }
  return t;
}

int File::peek() {
  if (! _file) 
    6f50:	69c3      	ldr	r3, [r0, #28]
    6f52:	b1c3      	cbz	r3, 6f86 <SDLib::File::peek()+0x36>
    return 0;
  }
  return t;
}

int File::peek() {
    6f54:	b510      	push	{r4, lr}
    6f56:	b082      	sub	sp, #8
    6f58:	4604      	mov	r4, r0
    6f5a:	2201      	movs	r2, #1
    6f5c:	4618      	mov	r0, r3
    6f5e:	f10d 0107 	add.w	r1, sp, #7
    6f62:	f001 fc3b 	bl	87dc <SdFile::read(void*, unsigned short)>
    6f66:	2801      	cmp	r0, #1
    6f68:	d003      	beq.n	6f72 <SDLib::File::peek()+0x22>
    6f6a:	f04f 30ff 	mov.w	r0, #4294967295
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6f6e:	b002      	add	sp, #8
    6f70:	bd10      	pop	{r4, pc}
int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
    6f72:	69e0      	ldr	r0, [r4, #28]
    6f74:	f89d 4007 	ldrb.w	r4, [sp, #7]
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
    return seekSet(curPosition_ + pos);
    6f78:	68c1      	ldr	r1, [r0, #12]
    6f7a:	3901      	subs	r1, #1
    6f7c:	f001 ffb6 	bl	8eec <SdFile::seekSet(unsigned long)>

int File::peek() {
  if (! _file) 
    return 0;

  int c = _file->read();
    6f80:	4620      	mov	r0, r4
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6f82:	b002      	add	sp, #8
    6f84:	bd10      	pop	{r4, pc}
  return t;
}

int File::peek() {
  if (! _file) 
    return 0;
    6f86:	4618      	mov	r0, r3

  int c = _file->read();
  if (c != -1) _file->seekCur(-1);
  return c;
}
    6f88:	4770      	bx	lr
    6f8a:	bf00      	nop

00006f8c <SDLib::File::flush()>:

  return n > 0X7FFF ? 0X7FFF : n;
}

void File::flush() {
  if (_file)
    6f8c:	69c0      	ldr	r0, [r0, #28]
    6f8e:	b108      	cbz	r0, 6f94 <SDLib::File::flush()+0x8>
    _file->sync();
    6f90:	f001 bfde 	b.w	8f50 <SdFile::sync()>
    6f94:	4770      	bx	lr
    6f96:	bf00      	nop

00006f98 <SDLib::File::write(unsigned char)>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    6f98:	b510      	push	{r4, lr}
  return write(&val, 1);
    6f9a:	6803      	ldr	r3, [r0, #0]
    6f9c:	4a0f      	ldr	r2, [pc, #60]	; (6fdc <SDLib::File::write(unsigned char)+0x44>)
    6f9e:	685b      	ldr	r3, [r3, #4]
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
    6fa0:	b082      	sub	sp, #8
    6fa2:	4293      	cmp	r3, r2
    6fa4:	f88d 1007 	strb.w	r1, [sp, #7]
    6fa8:	d112      	bne.n	6fd0 <SDLib::File::write(unsigned char)+0x38>
  return write(&val, 1);
}

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    6faa:	69c3      	ldr	r3, [r0, #28]
    6fac:	4604      	mov	r4, r0
    6fae:	b153      	cbz	r3, 6fc6 <SDLib::File::write(unsigned char)+0x2e>
    6fb0:	2200      	movs	r2, #0
    6fb2:	711a      	strb	r2, [r3, #4]
    setWriteError();
    return 0;
  }
  _file->clearWriteError();
  t = _file->write(buf, size);
    6fb4:	69c0      	ldr	r0, [r0, #28]
    6fb6:	2201      	movs	r2, #1
    6fb8:	f10d 0107 	add.w	r1, sp, #7
    6fbc:	f002 f800 	bl	8fc0 <SdFile::write(void const*, unsigned short)>
    6fc0:	69e3      	ldr	r3, [r4, #28]
  if (_file->getWriteError()) {
    6fc2:	791b      	ldrb	r3, [r3, #4]
    6fc4:	b113      	cbz	r3, 6fcc <SDLib::File::write(unsigned char)+0x34>
    6fc6:	2301      	movs	r3, #1
    6fc8:	7123      	strb	r3, [r4, #4]

size_t File::write(const uint8_t *buf, size_t size) {
  size_t t;
  if (!_file) {
    setWriteError();
    return 0;
    6fca:	2000      	movs	r0, #0
}


size_t File::write(uint8_t val) {
  return write(&val, 1);
}
    6fcc:	b002      	add	sp, #8
    6fce:	bd10      	pop	{r4, pc}
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
  return write(&val, 1);
    6fd0:	2201      	movs	r2, #1
    6fd2:	f10d 0107 	add.w	r1, sp, #7
    6fd6:	4798      	blx	r3
}
    6fd8:	b002      	add	sp, #8
    6fda:	bd10      	pop	{r4, pc}
    6fdc:	00006f01 	.word	0x00006f01

00006fe0 <SDLib::File::File(SdFile, char const*)>:

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    6fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6fe4:	4605      	mov	r5, r0
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    6fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6fea:	4813      	ldr	r0, [pc, #76]	; (7038 <SDLib::File::File(SdFile, char const*)+0x58>)
    6fec:	60ab      	str	r3, [r5, #8]
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    6fee:	2300      	movs	r3, #0
    6ff0:	6028      	str	r0, [r5, #0]
    6ff2:	712b      	strb	r3, [r5, #4]
    6ff4:	732b      	strb	r3, [r5, #12]
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    6ff6:	2024      	movs	r0, #36	; 0x24

/* for debugging file open/close leaks
   uint8_t nfilecount=0;
*/

File::File(SdFile f, const char *n) {
    6ff8:	460c      	mov	r4, r1
    6ffa:	4690      	mov	r8, r2
  // oh man you are kidding me, new() doesnt exist? Ok we do it by hand!
  _file = (SdFile *)malloc(sizeof(SdFile)); 
    6ffc:	f00a ff36 	bl	11e6c <malloc>
    7000:	61e8      	str	r0, [r5, #28]
  if (_file) {
    7002:	b1b0      	cbz	r0, 7032 <SDLib::File::File(SdFile, char const*)+0x52>
    memcpy(_file, &f, sizeof(SdFile));
    7004:	4606      	mov	r6, r0
    7006:	f104 0e20 	add.w	lr, r4, #32
    700a:	6820      	ldr	r0, [r4, #0]
    700c:	6861      	ldr	r1, [r4, #4]
    700e:	68a2      	ldr	r2, [r4, #8]
    7010:	68e3      	ldr	r3, [r4, #12]
    7012:	4637      	mov	r7, r6
    7014:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    7016:	3410      	adds	r4, #16
    7018:	4574      	cmp	r4, lr
    701a:	463e      	mov	r6, r7
    701c:	d1f5      	bne.n	700a <SDLib::File::File(SdFile, char const*)+0x2a>
    701e:	6820      	ldr	r0, [r4, #0]
    7020:	6038      	str	r0, [r7, #0]
    
    strncpy(_name, n, 12);
    7022:	4641      	mov	r1, r8
    7024:	220c      	movs	r2, #12
    7026:	f105 000d 	add.w	r0, r5, #13
    702a:	f00c f817 	bl	1305c <strncpy>
    _name[12] = 0;
    702e:	2300      	movs	r3, #0
    7030:	766b      	strb	r3, [r5, #25]
       Serial.print(n);
       Serial.print("\": ");
       Serial.println(nfilecount, DEC);
    */
  }
}
    7032:	4628      	mov	r0, r5
    7034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7038:	00017560 	.word	0x00017560

0000703c <SDLib::File::File()>:
    703c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

File::File(void) {
    7040:	4904      	ldr	r1, [pc, #16]	; (7054 <SDLib::File::File()+0x18>)
    7042:	6082      	str	r2, [r0, #8]
    7044:	2200      	movs	r2, #0
    7046:	6001      	str	r1, [r0, #0]
    7048:	7102      	strb	r2, [r0, #4]
    704a:	7302      	strb	r2, [r0, #12]
  _file = 0;
    704c:	61c2      	str	r2, [r0, #28]
  _name[0] = 0;
    704e:	7342      	strb	r2, [r0, #13]
  //Serial.print("Created empty file object");
}
    7050:	4770      	bx	lr
    7052:	bf00      	nop
    7054:	00017560 	.word	0x00017560

00007058 <SDLib::File::read(void*, unsigned short)>:
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    7058:	69c0      	ldr	r0, [r0, #28]
    705a:	b118      	cbz	r0, 7064 <SDLib::File::read(void*, unsigned short)+0xc>
    return _file->read();
  return -1;
}

// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
    705c:	b508      	push	{r3, lr}
  if (_file) 
    return _file->read(buf, nbyte);
    705e:	f001 fbbd 	bl	87dc <SdFile::read(void*, unsigned short)>
  return 0;
}
    7062:	bd08      	pop	{r3, pc}
    7064:	4770      	bx	lr
    7066:	bf00      	nop

00007068 <SDLib::File::seek(unsigned long)>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
    7068:	69c0      	ldr	r0, [r0, #28]
    706a:	b130      	cbz	r0, 707a <SDLib::File::seek(unsigned long)+0x12>
void File::flush() {
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
    706c:	b508      	push	{r3, lr}
  if (! _file) return false;

  return _file->seekSet(pos);
    706e:	f001 ff3d 	bl	8eec <SdFile::seekSet(unsigned long)>
    7072:	3000      	adds	r0, #0
    7074:	bf18      	it	ne
    7076:	2001      	movne	r0, #1
}
    7078:	bd08      	pop	{r3, pc}
    707a:	4770      	bx	lr

0000707c <SDLib::File::close()>:
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
  if (_file) {
    707c:	69c3      	ldr	r3, [r0, #28]
    707e:	b153      	cbz	r3, 7096 <SDLib::File::close()+0x1a>
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    7080:	b510      	push	{r4, lr}
    7082:	4604      	mov	r4, r0
  if (_file) {
    _file->close();
    7084:	4618      	mov	r0, r3
    7086:	f001 fabd 	bl	8604 <SdFile::close()>
    free(_file); 
    708a:	69e0      	ldr	r0, [r4, #28]
    708c:	f00a fef6 	bl	11e7c <free>
    _file = 0;
    7090:	2300      	movs	r3, #0
    7092:	61e3      	str	r3, [r4, #28]
    7094:	bd10      	pop	{r4, pc}
    7096:	4770      	bx	lr

00007098 <SDLib::File::operator bool()>:
    */
  }
}

File::operator bool() {
  if (_file) 
    7098:	69c0      	ldr	r0, [r0, #28]
    709a:	b118      	cbz	r0, 70a4 <SDLib::File::operator bool()+0xc>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    709c:	7980      	ldrb	r0, [r0, #6]
    709e:	3000      	adds	r0, #0
    70a0:	bf18      	it	ne
    70a2:	2001      	movne	r0, #1
    return  _file->isOpen();
  return false;
}
    70a4:	4770      	bx	lr
    70a6:	bf00      	nop

000070a8 <SDLib::SDClass::begin(unsigned char)>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    70a8:	b538      	push	{r3, r4, r5, lr}
  if(root.isOpen()) root.close();
    70aa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    70ae:	4604      	mov	r4, r0
    70b0:	460d      	mov	r5, r1
  if(root.isOpen()) root.close();
    70b2:	b9c3      	cbnz	r3, 70e6 <SDLib::SDClass::begin(unsigned char)+0x3e>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    70b4:	462a      	mov	r2, r5
    70b6:	2101      	movs	r1, #1
    70b8:	4620      	mov	r0, r4
    70ba:	f000 fde5 	bl	7c88 <Sd2Card::init(unsigned char, unsigned char)>
         volume.init(card) &&
    70be:	b908      	cbnz	r0, 70c4 <SDLib::SDClass::begin(unsigned char)+0x1c>
    70c0:	2000      	movs	r0, #0
    70c2:	bd38      	pop	{r3, r4, r5, pc}
    70c4:	f104 0510 	add.w	r5, r4, #16
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    70c8:	4628      	mov	r0, r5
    70ca:	2201      	movs	r2, #1
    70cc:	4621      	mov	r1, r4
    70ce:	f002 fd2b 	bl	9b28 <SdVolume::init(Sd2Card*, unsigned char)>
    70d2:	b160      	cbz	r0, 70ee <SDLib::SDClass::begin(unsigned char)+0x46>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    70d4:	4629      	mov	r1, r5
    70d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
    70da:	f001 fb57 	bl	878c <SdFile::openRoot(SdVolume*)>
    70de:	3000      	adds	r0, #0
    70e0:	bf18      	it	ne
    70e2:	2001      	movne	r0, #1
    70e4:	bd38      	pop	{r3, r4, r5, pc}
/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
  if(root.isOpen()) root.close();
    70e6:	3038      	adds	r0, #56	; 0x38
    70e8:	f001 fa8c 	bl	8604 <SdFile::close()>
    70ec:	e7e2      	b.n	70b4 <SDLib::SDClass::begin(unsigned char)+0xc>
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    70ee:	4602      	mov	r2, r0
    70f0:	4621      	mov	r1, r4
    70f2:	4628      	mov	r0, r5
    70f4:	f002 fd18 	bl	9b28 <SdVolume::init(Sd2Card*, unsigned char)>
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    70f8:	2800      	cmp	r0, #0
    70fa:	d1eb      	bne.n	70d4 <SDLib::SDClass::begin(unsigned char)+0x2c>
         volume.init(card) &&
    70fc:	2000      	movs	r0, #0
    70fe:	bd38      	pop	{r3, r4, r5, pc}

00007100 <SDLib::SDClass::getParentDir(char const*, int*)>:
{
  root.close();
}

// this little helper is used to traverse paths
SdFile SDClass::getParentDir(const char *filepath, int *index) {
    7100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7104:	b099      	sub	sp, #100	; 0x64
    7106:	f04f 0800 	mov.w	r8, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    710a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 71f4 <SDLib::SDClass::getParentDir(char const*, int*)+0xf4>
    710e:	f88d 801c 	strb.w	r8, [sp, #28]
    7112:	4681      	mov	r9, r0
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    7114:	3110      	adds	r1, #16
    7116:	a806      	add	r0, sp, #24
    7118:	4693      	mov	fp, r2
    711a:	9301      	str	r3, [sp, #4]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    711c:	f88d 801e 	strb.w	r8, [sp, #30]
    7120:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
    7124:	f88d 8042 	strb.w	r8, [sp, #66]	; 0x42
    7128:	f8cd a018 	str.w	sl, [sp, #24]
    712c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    7130:	f001 fb2c 	bl	878c <SdFile::openRoot(SdVolume*)>
  SdFile d2;

  d1.openRoot(volume); // start with the mostparent, root!

  // we'll use the pointers to swap between the two objects
  SdFile *parent = &d1;
    7134:	ae06      	add	r6, sp, #24
    7136:	465d      	mov	r5, fp
  SdFile *subdir = &d2;
    7138:	af0f      	add	r7, sp, #60	; 0x3c
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    713a:	212f      	movs	r1, #47	; 0x2f
    713c:	4628      	mov	r0, r5
    713e:	f00b fcdf 	bl	12b00 <strchr>
      // it was in the root directory, so leave now
      break;
    }

    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    7142:	1b44      	subs	r4, r0, r5
    7144:	b2e4      	uxtb	r4, r4
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    7146:	4629      	mov	r1, r5
  SdFile *parent = &d1;
  SdFile *subdir = &d2;
  
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {
    7148:	b308      	cbz	r0, 718e <SDLib::SDClass::getParentDir(char const*, int*)+0x8e>

    // get rid of leading /'s
    if (filepath[0] == '/') {
    714a:	782b      	ldrb	r3, [r5, #0]
    714c:	2b2f      	cmp	r3, #47	; 0x2f
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    714e:	a802      	add	r0, sp, #8
  const char *origpath = filepath;

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
    7150:	d01b      	beq.n	718a <SDLib::SDClass::getParentDir(char const*, int*)+0x8a>
    7152:	2c0c      	cmp	r4, #12
    7154:	bf28      	it	cs
    7156:	240c      	movcs	r4, #12
    // extract just the name of the next subdirectory
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    7158:	4622      	mov	r2, r4
    715a:	f00b ff7f 	bl	1305c <strncpy>
    subdirname[idx] = 0;
    715e:	ab18      	add	r3, sp, #96	; 0x60
    7160:	4423      	add	r3, r4

    // close the subdir (we reuse them) if open
    subdir->close();
    7162:	4638      	mov	r0, r7
    uint8_t idx = strchr(filepath, '/') - filepath;
    if (idx > 12)
      idx = 12;    // dont let them specify long names
    char subdirname[13];
    strncpy(subdirname, filepath, idx);
    subdirname[idx] = 0;
    7164:	f803 8c58 	strb.w	r8, [r3, #-88]

    // close the subdir (we reuse them) if open
    subdir->close();
    7168:	f001 fa4c 	bl	8604 <SdFile::close()>
    if (! subdir->open(parent, subdirname, O_READ)) {
    716c:	2301      	movs	r3, #1
    716e:	aa02      	add	r2, sp, #8
    7170:	4631      	mov	r1, r6
    7172:	4638      	mov	r0, r7
    7174:	f001 fe2a 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
    7178:	b388      	cbz	r0, 71de <SDLib::SDClass::getParentDir(char const*, int*)+0xde>
    }
    // move forward to the next subdirectory
    filepath += idx;

    // we reuse the objects, close it.
    parent->close();
    717a:	4630      	mov	r0, r6
    717c:	f001 fa42 	bl	8604 <SdFile::close()>
    7180:	4633      	mov	r3, r6
    if (! subdir->open(parent, subdirname, O_READ)) {
      // failed to open one of the subdirectories
      return SdFile();
    }
    // move forward to the next subdirectory
    filepath += idx;
    7182:	4425      	add	r5, r4
    // we reuse the objects, close it.
    parent->close();

    // swap the pointers
    SdFile *t = parent;
    parent = subdir;
    7184:	463e      	mov	r6, r7
    7186:	461f      	mov	r7, r3
    7188:	e7d7      	b.n	713a <SDLib::SDClass::getParentDir(char const*, int*)+0x3a>

  while (strchr(filepath, '/')) {

    // get rid of leading /'s
    if (filepath[0] == '/') {
      filepath++;
    718a:	3501      	adds	r5, #1
    718c:	e7d5      	b.n	713a <SDLib::SDClass::getParentDir(char const*, int*)+0x3a>
    SdFile *t = parent;
    parent = subdir;
    subdir = t;
  }

  *index = (int)(filepath - origpath);
    718e:	9801      	ldr	r0, [sp, #4]
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    7190:	7931      	ldrb	r1, [r6, #4]
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    7192:	7972      	ldrb	r2, [r6, #5]
    7194:	79b3      	ldrb	r3, [r6, #6]
    7196:	68b4      	ldr	r4, [r6, #8]
    7198:	7d37      	ldrb	r7, [r6, #20]
    719a:	ebcb 0505 	rsb	r5, fp, r5
    719e:	6005      	str	r5, [r0, #0]
    71a0:	68f0      	ldr	r0, [r6, #12]
    71a2:	6935      	ldr	r5, [r6, #16]
    71a4:	f889 1004 	strb.w	r1, [r9, #4]
    71a8:	f889 2005 	strb.w	r2, [r9, #5]
    71ac:	69b1      	ldr	r1, [r6, #24]
    71ae:	f889 3006 	strb.w	r3, [r9, #6]
    71b2:	69f2      	ldr	r2, [r6, #28]
    71b4:	6a33      	ldr	r3, [r6, #32]
    71b6:	f8c9 000c 	str.w	r0, [r9, #12]
  // parent is now the parent diretory of the file!
  return *parent;
}
    71ba:	4648      	mov	r0, r9
    71bc:	f8c9 a000 	str.w	sl, [r9]
    71c0:	f8c9 4008 	str.w	r4, [r9, #8]
    71c4:	f8c9 5010 	str.w	r5, [r9, #16]
    71c8:	f889 7014 	strb.w	r7, [r9, #20]
    71cc:	f8c9 1018 	str.w	r1, [r9, #24]
    71d0:	f8c9 201c 	str.w	r2, [r9, #28]
    71d4:	f8c9 3020 	str.w	r3, [r9, #32]
    71d8:	b019      	add	sp, #100	; 0x64
    71da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
  public:
	constexpr Print() : write_error(0) {}
    71de:	f889 0004 	strb.w	r0, [r9, #4]
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    71e2:	f889 0006 	strb.w	r0, [r9, #6]
    71e6:	4648      	mov	r0, r9
    71e8:	f8c9 a000 	str.w	sl, [r9]
    71ec:	b019      	add	sp, #100	; 0x64
    71ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71f2:	bf00      	nop
    71f4:	00017588 	.word	0x00017588

000071f8 <SDLib::SDClass::open(char const*, unsigned char)>:


File SDClass::open(const char *filepath, uint8_t mode) {
    71f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    71fa:	b09d      	sub	sp, #116	; 0x74
    71fc:	4605      	mov	r5, r0
    71fe:	461e      	mov	r6, r3
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    7200:	a801      	add	r0, sp, #4
    7202:	466b      	mov	r3, sp
  // parent is now the parent diretory of the file!
  return *parent;
}


File SDClass::open(const char *filepath, uint8_t mode) {
    7204:	4614      	mov	r4, r2
   */

  int pathidx;

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
    7206:	f7ff ff7b 	bl	7100 <SDLib::SDClass::getParentDir(char const*, int*)>
  // no more subdirs!

  filepath += pathidx;
    720a:	9a00      	ldr	r2, [sp, #0]

  if (! filepath[0]) {
    720c:	5ca3      	ldrb	r3, [r4, r2]

  // do the interative search
  SdFile parentdir = getParentDir(filepath, &pathidx);
  // no more subdirs!

  filepath += pathidx;
    720e:	4414      	add	r4, r2

  if (! filepath[0]) {
    7210:	2b00      	cmp	r3, #0
    7212:	d043      	beq.n	729c <SDLib::SDClass::open(char const*, unsigned char)+0xa4>

  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    7214:	f89d 200a 	ldrb.w	r2, [sp, #10]
    7218:	4f2f      	ldr	r7, [pc, #188]	; (72d8 <SDLib::SDClass::open(char const*, unsigned char)+0xe0>)
    721a:	970a      	str	r7, [sp, #40]	; 0x28
    721c:	2300      	movs	r3, #0
    721e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    7222:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    7226:	2a00      	cmp	r2, #0
    7228:	d032      	beq.n	7290 <SDLib::SDClass::open(char const*, unsigned char)+0x98>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    722a:	a80a      	add	r0, sp, #40	; 0x28
    722c:	4633      	mov	r3, r6
    722e:	4622      	mov	r2, r4
    7230:	a901      	add	r1, sp, #4
    7232:	f001 fdcb 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
    return File();

  if ( ! file.open(parentdir, filepath, mode)) {
    7236:	b358      	cbz	r0, 7290 <SDLib::SDClass::open(char const*, unsigned char)+0x98>
    return File();
  }
  // close the parent
  parentdir.close();
    7238:	a801      	add	r0, sp, #4

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    723a:	f006 0606 	and.w	r6, r6, #6

  if ( ! file.open(parentdir, filepath, mode)) {
    return File();
  }
  // close the parent
  parentdir.close();
    723e:	f001 f9e1 	bl	8604 <SdFile::close()>

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    7242:	2e06      	cmp	r6, #6
    7244:	d043      	beq.n	72ce <SDLib::SDClass::open(char const*, unsigned char)+0xd6>
//------------------------------------------------------------------------------
/**
 * \class SdFile
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
    7246:	f89d 602d 	ldrb.w	r6, [sp, #45]	; 0x2d
    724a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
//#define BYTE 0
//#endif

class __FlashStringHelper;

class Print
    724c:	f89d e02c 	ldrb.w	lr, [sp, #44]	; 0x2c
    7250:	9713      	str	r7, [sp, #76]	; 0x4c
    file.seekSet(file.fileSize());
  return File(file, filepath);
    7252:	4622      	mov	r2, r4
    7254:	f89d 402e 	ldrb.w	r4, [sp, #46]	; 0x2e
    7258:	f88d 6051 	strb.w	r6, [sp, #81]	; 0x51
    725c:	f88d 4052 	strb.w	r4, [sp, #82]	; 0x52
    7260:	9315      	str	r3, [sp, #84]	; 0x54
    7262:	990d      	ldr	r1, [sp, #52]	; 0x34
    7264:	980e      	ldr	r0, [sp, #56]	; 0x38
    7266:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
    726a:	9e10      	ldr	r6, [sp, #64]	; 0x40
    726c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    726e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7270:	f88d e050 	strb.w	lr, [sp, #80]	; 0x50
    7274:	9116      	str	r1, [sp, #88]	; 0x58
    7276:	9017      	str	r0, [sp, #92]	; 0x5c
    7278:	a913      	add	r1, sp, #76	; 0x4c
    727a:	4628      	mov	r0, r5
    727c:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
    7280:	9619      	str	r6, [sp, #100]	; 0x64
    7282:	941a      	str	r4, [sp, #104]	; 0x68
    7284:	931b      	str	r3, [sp, #108]	; 0x6c
    7286:	f7ff feab 	bl	6fe0 <SDLib::File::File(SdFile, char const*)>
}
    728a:	4628      	mov	r0, r5
    728c:	b01d      	add	sp, #116	; 0x74
    728e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  // Open the file itself
  SdFile file;

  // failed to open a subdir!
  if (!parentdir.isOpen())
    return File();
    7290:	4628      	mov	r0, r5
    7292:	f7ff fed3 	bl	703c <SDLib::File::File()>
  parentdir.close();

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    file.seekSet(file.fileSize());
  return File(file, filepath);
}
    7296:	4628      	mov	r0, r5
    7298:	b01d      	add	sp, #116	; 0x74
    729a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    729c:	f89d 7008 	ldrb.w	r7, [sp, #8]
    72a0:	4e0d      	ldr	r6, [pc, #52]	; (72d8 <SDLib::SDClass::open(char const*, unsigned char)+0xe0>)
    72a2:	f89d 4009 	ldrb.w	r4, [sp, #9]
    72a6:	f89d 300a 	ldrb.w	r3, [sp, #10]
    72aa:	9a03      	ldr	r2, [sp, #12]
    72ac:	f88d 7050 	strb.w	r7, [sp, #80]	; 0x50
    72b0:	9613      	str	r6, [sp, #76]	; 0x4c
    72b2:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
    72b6:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    72ba:	9215      	str	r2, [sp, #84]	; 0x54
    72bc:	9904      	ldr	r1, [sp, #16]
    72be:	9805      	ldr	r0, [sp, #20]
    72c0:	f89d 7018 	ldrb.w	r7, [sp, #24]
    72c4:	9e07      	ldr	r6, [sp, #28]
    72c6:	9c08      	ldr	r4, [sp, #32]
    72c8:	9b09      	ldr	r3, [sp, #36]	; 0x24

  filepath += pathidx;

  if (! filepath[0]) {
    // it was the directory itself!
    return File(parentdir, "/");
    72ca:	4a04      	ldr	r2, [pc, #16]	; (72dc <SDLib::SDClass::open(char const*, unsigned char)+0xe4>)
    72cc:	e7d2      	b.n	7274 <SDLib::SDClass::open(char const*, unsigned char)+0x7c>
  }
  // close the parent
  parentdir.close();

  if ((mode & (O_APPEND | O_WRITE)) == (O_APPEND | O_WRITE))
    file.seekSet(file.fileSize());
    72ce:	a80a      	add	r0, sp, #40	; 0x28
    72d0:	9910      	ldr	r1, [sp, #64]	; 0x40
    72d2:	f001 fe0b 	bl	8eec <SdFile::seekSet(unsigned long)>
    72d6:	e7b6      	b.n	7246 <SDLib::SDClass::open(char const*, unsigned char)+0x4e>
    72d8:	00017588 	.word	0x00017588
    72dc:	0001757c 	.word	0x0001757c

000072e0 <SDLib::SDClass::exists(char const*)>:
//   */
//  file.close();
//}


boolean SDClass::exists(const char *filepath) {
    72e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    72e4:	b0a1      	sub	sp, #132	; 0x84
{
  public:
	constexpr Print() : write_error(0) {}
    72e6:	2300      	movs	r3, #0
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    72e8:	f8df 928c 	ldr.w	r9, [pc, #652]	; 7578 <SDLib::SDClass::exists(char const*)+0x298>
    72ec:	f88d 3018 	strb.w	r3, [sp, #24]
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    72f0:	f100 0838 	add.w	r8, r0, #56	; 0x38
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    72f4:	469b      	mov	fp, r3
//   */
//  file.close();
//}


boolean SDClass::exists(const char *filepath) {
    72f6:	460c      	mov	r4, r1
    72f8:	f88d 301a 	strb.w	r3, [sp, #26]
    72fc:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
    7300:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    7304:	461f      	mov	r7, r3
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    7306:	4645      	mov	r5, r8
    7308:	f8cd 9014 	str.w	r9, [sp, #20]
    730c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    7310:	ae05      	add	r6, sp, #20
  int bufferOffset = 0;

  int offset = *p_offset;

  // Skip root or other separator
  if (path[offset] == '/') {
    7312:	f814 300b 	ldrb.w	r3, [r4, fp]
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    7316:	465a      	mov	r2, fp

  // Skip root or other separator
  if (path[offset] == '/') {
    7318:	2b2f      	cmp	r3, #47	; 0x2f
    offset++;
    731a:	bf08      	it	eq
    731c:	3201      	addeq	r2, #1
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    731e:	f814 e002 	ldrb.w	lr, [r4, r2]
    7322:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
    7326:	f000 80c3 	beq.w	74b0 <SDLib::SDClass::exists(char const*)+0x1d0>
	 && (path[offset] != '\0')) {
    732a:	f1be 0f00 	cmp.w	lr, #0
    732e:	f000 80c7 	beq.w	74c0 <SDLib::SDClass::exists(char const*)+0x1e0>
    buffer[bufferOffset++] = path[offset++];
    7332:	1c53      	adds	r3, r2, #1
    7334:	f88d e004 	strb.w	lr, [sp, #4]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7338:	5ce1      	ldrb	r1, [r4, r3]
    733a:	292f      	cmp	r1, #47	; 0x2f
    733c:	f000 80a6 	beq.w	748c <SDLib::SDClass::exists(char const*)+0x1ac>
	 && (path[offset] != '\0')) {
    7340:	2900      	cmp	r1, #0
    7342:	f000 80d7 	beq.w	74f4 <SDLib::SDClass::exists(char const*)+0x214>
    buffer[bufferOffset++] = path[offset++];
    7346:	1c93      	adds	r3, r2, #2
    7348:	f88d 1005 	strb.w	r1, [sp, #5]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    734c:	5ce1      	ldrb	r1, [r4, r3]
    734e:	292f      	cmp	r1, #47	; 0x2f
    7350:	f000 80e8 	beq.w	7524 <SDLib::SDClass::exists(char const*)+0x244>
	 && (path[offset] != '\0')) {
    7354:	2900      	cmp	r1, #0
    7356:	f000 80e7 	beq.w	7528 <SDLib::SDClass::exists(char const*)+0x248>
    buffer[bufferOffset++] = path[offset++];
    735a:	1cd3      	adds	r3, r2, #3
    735c:	f88d 1006 	strb.w	r1, [sp, #6]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7360:	5ce1      	ldrb	r1, [r4, r3]
    7362:	292f      	cmp	r1, #47	; 0x2f
    7364:	f000 80e2 	beq.w	752c <SDLib::SDClass::exists(char const*)+0x24c>
	 && (path[offset] != '\0')) {
    7368:	2900      	cmp	r1, #0
    736a:	f000 80e3 	beq.w	7534 <SDLib::SDClass::exists(char const*)+0x254>
    buffer[bufferOffset++] = path[offset++];
    736e:	1d13      	adds	r3, r2, #4
    7370:	f88d 1007 	strb.w	r1, [sp, #7]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7374:	5ce1      	ldrb	r1, [r4, r3]
    7376:	292f      	cmp	r1, #47	; 0x2f
    7378:	f000 80da 	beq.w	7530 <SDLib::SDClass::exists(char const*)+0x250>
	 && (path[offset] != '\0')) {
    737c:	2900      	cmp	r1, #0
    737e:	f000 80db 	beq.w	7538 <SDLib::SDClass::exists(char const*)+0x258>
    buffer[bufferOffset++] = path[offset++];
    7382:	1d53      	adds	r3, r2, #5
    7384:	f88d 1008 	strb.w	r1, [sp, #8]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7388:	5ce1      	ldrb	r1, [r4, r3]
    738a:	292f      	cmp	r1, #47	; 0x2f
    738c:	f000 80d6 	beq.w	753c <SDLib::SDClass::exists(char const*)+0x25c>
	 && (path[offset] != '\0')) {
    7390:	2900      	cmp	r1, #0
    7392:	f000 80d5 	beq.w	7540 <SDLib::SDClass::exists(char const*)+0x260>
    buffer[bufferOffset++] = path[offset++];
    7396:	1d93      	adds	r3, r2, #6
    7398:	f88d 1009 	strb.w	r1, [sp, #9]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    739c:	5ce1      	ldrb	r1, [r4, r3]
    739e:	292f      	cmp	r1, #47	; 0x2f
    73a0:	f000 80d0 	beq.w	7544 <SDLib::SDClass::exists(char const*)+0x264>
	 && (path[offset] != '\0')) {
    73a4:	2900      	cmp	r1, #0
    73a6:	f000 80d1 	beq.w	754c <SDLib::SDClass::exists(char const*)+0x26c>
    buffer[bufferOffset++] = path[offset++];
    73aa:	1dd3      	adds	r3, r2, #7
    73ac:	f88d 100a 	strb.w	r1, [sp, #10]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    73b0:	5ce1      	ldrb	r1, [r4, r3]
    73b2:	292f      	cmp	r1, #47	; 0x2f
    73b4:	f000 80c8 	beq.w	7548 <SDLib::SDClass::exists(char const*)+0x268>
	 && (path[offset] != '\0')) {
    73b8:	2900      	cmp	r1, #0
    73ba:	f000 80c9 	beq.w	7550 <SDLib::SDClass::exists(char const*)+0x270>
    buffer[bufferOffset++] = path[offset++];
    73be:	f102 0308 	add.w	r3, r2, #8
    73c2:	f88d 100b 	strb.w	r1, [sp, #11]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    73c6:	5ce1      	ldrb	r1, [r4, r3]
    73c8:	292f      	cmp	r1, #47	; 0x2f
    73ca:	f000 80c3 	beq.w	7554 <SDLib::SDClass::exists(char const*)+0x274>
	 && (path[offset] != '\0')) {
    73ce:	2900      	cmp	r1, #0
    73d0:	f000 80c4 	beq.w	755c <SDLib::SDClass::exists(char const*)+0x27c>
    buffer[bufferOffset++] = path[offset++];
    73d4:	f102 0309 	add.w	r3, r2, #9
    73d8:	f88d 100c 	strb.w	r1, [sp, #12]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    73dc:	5ce1      	ldrb	r1, [r4, r3]
    73de:	292f      	cmp	r1, #47	; 0x2f
    73e0:	f000 80ba 	beq.w	7558 <SDLib::SDClass::exists(char const*)+0x278>
	 && (path[offset] != '\0')) {
    73e4:	2900      	cmp	r1, #0
    73e6:	f000 80bd 	beq.w	7564 <SDLib::SDClass::exists(char const*)+0x284>
    buffer[bufferOffset++] = path[offset++];
    73ea:	f102 030a 	add.w	r3, r2, #10
    73ee:	f88d 100d 	strb.w	r1, [sp, #13]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    73f2:	5ce1      	ldrb	r1, [r4, r3]
    73f4:	292f      	cmp	r1, #47	; 0x2f
    73f6:	f000 80b3 	beq.w	7560 <SDLib::SDClass::exists(char const*)+0x280>
	 && (path[offset] != '\0')) {
    73fa:	2900      	cmp	r1, #0
    73fc:	f000 80b4 	beq.w	7568 <SDLib::SDClass::exists(char const*)+0x288>
    buffer[bufferOffset++] = path[offset++];
    7400:	f102 030b 	add.w	r3, r2, #11
    7404:	f88d 100e 	strb.w	r1, [sp, #14]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7408:	5ce1      	ldrb	r1, [r4, r3]
    740a:	292f      	cmp	r1, #47	; 0x2f
    740c:	f000 80ae 	beq.w	756c <SDLib::SDClass::exists(char const*)+0x28c>
	 && (path[offset] != '\0')) {
    7410:	2900      	cmp	r1, #0
    7412:	f000 80ad 	beq.w	7570 <SDLib::SDClass::exists(char const*)+0x290>
    buffer[bufferOffset++] = path[offset++];
    7416:	f102 030c 	add.w	r3, r2, #12
    741a:	f88d 100f 	strb.w	r1, [sp, #15]
    741e:	f814 a003 	ldrb.w	sl, [r4, r3]
  }

  buffer[bufferOffset] = '\0';
    7422:	f88d 7010 	strb.w	r7, [sp, #16]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    7426:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
    742a:	d034      	beq.n	7496 <SDLib::SDClass::exists(char const*)+0x1b6>
    742c:	469b      	mov	fp, r3
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    742e:	2301      	movs	r3, #1
    7430:	aa01      	add	r2, sp, #4
    7432:	4629      	mov	r1, r5
    7434:	a817      	add	r0, sp, #92	; 0x5c
    7436:	f88d 7060 	strb.w	r7, [sp, #96]	; 0x60
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    743a:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    743e:	f88d 7062 	strb.w	r7, [sp, #98]	; 0x62
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    7442:	f001 fcc3 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
    7446:	b940      	cbnz	r0, 745a <SDLib::SDClass::exists(char const*)+0x17a>

    if (!shouldContinue) {
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    7448:	45a8      	cmp	r8, r5
    744a:	d029      	beq.n	74a0 <SDLib::SDClass::exists(char const*)+0x1c0>
        (*p_parent).close();
    744c:	4628      	mov	r0, r5
    744e:	f001 f8d9 	bl	8604 <SdFile::close()>
      }
      return false;
    7452:	2000      	movs	r0, #0

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
}
    7454:	b021      	add	sp, #132	; 0x84
    7456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
     child.close(); 
    745a:	a817      	add	r0, sp, #92	; 0x5c
    745c:	f001 f8d2 	bl	8604 <SdFile::close()>
        (*p_parent).close();
      }
      return false;
    }
    
    if (!moreComponents) {
    7460:	f1ba 0f00 	cmp.w	sl, #0
    7464:	d03f      	beq.n	74e6 <SDLib::SDClass::exists(char const*)+0x206>
    7466:	2301      	movs	r3, #1
    7468:	aa01      	add	r2, sp, #4
    746a:	4629      	mov	r1, r5
    746c:	4630      	mov	r0, r6
    746e:	f001 fcad 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    7472:	45a8      	cmp	r8, r5
    7474:	4682      	mov	sl, r0
    7476:	d017      	beq.n	74a8 <SDLib::SDClass::exists(char const*)+0x1c8>
      (*p_parent).close();
    7478:	4628      	mov	r0, r5
    747a:	f001 f8c3 	bl	8604 <SdFile::close()>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    747e:	f1ba 0f00 	cmp.w	sl, #0
    7482:	d00d      	beq.n	74a0 <SDLib::SDClass::exists(char const*)+0x1c0>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    7484:	462b      	mov	r3, r5
    7486:	4635      	mov	r5, r6
    7488:	461e      	mov	r6, r3
    748a:	e742      	b.n	7312 <SDLib::SDClass::exists(char const*)+0x32>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    748c:	2201      	movs	r2, #1
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    748e:	a920      	add	r1, sp, #128	; 0x80
    7490:	440a      	add	r2, r1
    7492:	f802 7c7c 	strb.w	r7, [r2, #-124]
    7496:	3301      	adds	r3, #1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    offset++;
    7498:	469b      	mov	fp, r3
    749a:	f814 a003 	ldrb.w	sl, [r4, r3]
    749e:	e7c6      	b.n	742e <SDLib::SDClass::exists(char const*)+0x14e>

      p_tmp_sdfile = p_parent;
      p_parent = p_child;
      p_child = p_tmp_sdfile;
    } else {
      return false;
    74a0:	2000      	movs	r0, #0

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
}
    74a2:	b021      	add	sp, #132	; 0x84
    74a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p_parent != &parentDir) {
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    74a8:	2800      	cmp	r0, #0
    74aa:	d0f9      	beq.n	74a0 <SDLib::SDClass::exists(char const*)+0x1c0>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    74ac:	ad0e      	add	r5, sp, #56	; 0x38
    74ae:	e7e9      	b.n	7484 <SDLib::SDClass::exists(char const*)+0x1a4>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    74b0:	4613      	mov	r3, r2
    74b2:	3301      	adds	r3, #1
    74b4:	f88d 7004 	strb.w	r7, [sp, #4]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    offset++;
    74b8:	469b      	mov	fp, r3
    74ba:	f814 a003 	ldrb.w	sl, [r4, r3]
    74be:	e7b6      	b.n	742e <SDLib::SDClass::exists(char const*)+0x14e>
    74c0:	aa01      	add	r2, sp, #4
    74c2:	2301      	movs	r3, #1
    74c4:	4629      	mov	r1, r5
    74c6:	a817      	add	r0, sp, #92	; 0x5c
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    74c8:	f88d e004 	strb.w	lr, [sp, #4]
    74cc:	f88d e060 	strb.w	lr, [sp, #96]	; 0x60
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    74d0:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    74d4:	f88d e062 	strb.w	lr, [sp, #98]	; 0x62
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    74d8:	f001 fc78 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
    74dc:	2800      	cmp	r0, #0
    74de:	d0b3      	beq.n	7448 <SDLib::SDClass::exists(char const*)+0x168>
     child.close(); 
    74e0:	a817      	add	r0, sp, #92	; 0x5c
    74e2:	f001 f88f 	bl	8604 <SdFile::close()>
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    74e6:	45a8      	cmp	r8, r5
    74e8:	d044      	beq.n	7574 <SDLib::SDClass::exists(char const*)+0x294>
    (*p_parent).close(); // TODO: Return/ handle different?
    74ea:	4628      	mov	r0, r5
    74ec:	f001 f88a 	bl	8604 <SdFile::close()>
  }

  return true;
    74f0:	2001      	movs	r0, #1
    74f2:	e7af      	b.n	7454 <SDLib::SDClass::exists(char const*)+0x174>
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    74f4:	2601      	movs	r6, #1
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    74f6:	ab20      	add	r3, sp, #128	; 0x80
    74f8:	441e      	add	r6, r3
    74fa:	2400      	movs	r4, #0
    74fc:	aa01      	add	r2, sp, #4
    74fe:	2301      	movs	r3, #1
    7500:	4629      	mov	r1, r5
    7502:	a817      	add	r0, sp, #92	; 0x5c
    7504:	f806 4c7c 	strb.w	r4, [r6, #-124]
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7508:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
    750c:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    7510:	f88d 4062 	strb.w	r4, [sp, #98]	; 0x62
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    7514:	f001 fc5a 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
    7518:	2800      	cmp	r0, #0
    751a:	d095      	beq.n	7448 <SDLib::SDClass::exists(char const*)+0x168>
     child.close(); 
    751c:	a817      	add	r0, sp, #92	; 0x5c
    751e:	f001 f871 	bl	8604 <SdFile::close()>
    7522:	e7e0      	b.n	74e6 <SDLib::SDClass::exists(char const*)+0x206>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7524:	2202      	movs	r2, #2
    7526:	e7b2      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
	 && (path[offset] != '\0')) {
    7528:	2602      	movs	r6, #2
    752a:	e7e4      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    752c:	2203      	movs	r2, #3
    752e:	e7ae      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
    7530:	2204      	movs	r2, #4
    7532:	e7ac      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
	 && (path[offset] != '\0')) {
    7534:	2603      	movs	r6, #3
    7536:	e7de      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    7538:	2604      	movs	r6, #4
    753a:	e7dc      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    753c:	2205      	movs	r2, #5
    753e:	e7a6      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
	 && (path[offset] != '\0')) {
    7540:	2605      	movs	r6, #5
    7542:	e7d8      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7544:	2206      	movs	r2, #6
    7546:	e7a2      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
    7548:	2207      	movs	r2, #7
    754a:	e7a0      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
	 && (path[offset] != '\0')) {
    754c:	2606      	movs	r6, #6
    754e:	e7d2      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    7550:	2607      	movs	r6, #7
    7552:	e7d0      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7554:	2208      	movs	r2, #8
    7556:	e79a      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
    7558:	2209      	movs	r2, #9
    755a:	e798      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
	 && (path[offset] != '\0')) {
    755c:	2608      	movs	r6, #8
    755e:	e7ca      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7560:	220a      	movs	r2, #10
    7562:	e794      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
	 && (path[offset] != '\0')) {
    7564:	2609      	movs	r6, #9
    7566:	e7c6      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    7568:	260a      	movs	r6, #10
    756a:	e7c4      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    756c:	220b      	movs	r2, #11
    756e:	e78e      	b.n	748e <SDLib::SDClass::exists(char const*)+0x1ae>
	 && (path[offset] != '\0')) {
    7570:	260b      	movs	r6, #11
    7572:	e7c0      	b.n	74f6 <SDLib::SDClass::exists(char const*)+0x216>
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    7574:	2001      	movs	r0, #1
  /*

     Returns true if the supplied file path exists.

   */
  return walkPath(filepath, root, callback_pathExists);
    7576:	e76d      	b.n	7454 <SDLib::SDClass::exists(char const*)+0x174>
    7578:	00017588 	.word	0x00017588

0000757c <SDLib::SDClass::mkdir(char const*)>:
//   */
//  return walkPath(filepath, parentDir, callback_pathExists);
//}


boolean SDClass::mkdir(const char *filepath) {
    757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7580:	b0ab      	sub	sp, #172	; 0xac
    7582:	2300      	movs	r3, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7584:	f8df 8274 	ldr.w	r8, [pc, #628]	; 77fc <SDLib::SDClass::mkdir(char const*)+0x280>
    7588:	f88d 301c 	strb.w	r3, [sp, #28]
    Makes a single directory or a heirarchy of directories.

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
    758c:	f100 0938 	add.w	r9, r0, #56	; 0x38
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    7590:	469b      	mov	fp, r3
//   */
//  return walkPath(filepath, parentDir, callback_pathExists);
//}


boolean SDClass::mkdir(const char *filepath) {
    7592:	460c      	mov	r4, r1
    7594:	f88d 301e 	strb.w	r3, [sp, #30]
    7598:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    759c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    75a0:	461e      	mov	r6, r3
    Makes a single directory or a heirarchy of directories.

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
    75a2:	464d      	mov	r5, r9
    75a4:	f8cd 8018 	str.w	r8, [sp, #24]
    75a8:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    75ac:	af06      	add	r7, sp, #24
  int bufferOffset = 0;

  int offset = *p_offset;

  // Skip root or other separator
  if (path[offset] == '/') {
    75ae:	f814 300b 	ldrb.w	r3, [r4, fp]
  // TODO: Have buffer local to this function, so we know it's the
  //       correct length?

  int bufferOffset = 0;

  int offset = *p_offset;
    75b2:	465a      	mov	r2, fp

  // Skip root or other separator
  if (path[offset] == '/') {
    75b4:	2b2f      	cmp	r3, #47	; 0x2f
    offset++;
    75b6:	bf08      	it	eq
    75b8:	3201      	addeq	r2, #1
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    75ba:	5ca1      	ldrb	r1, [r4, r2]
    75bc:	292f      	cmp	r1, #47	; 0x2f
    75be:	f000 80dc 	beq.w	777a <SDLib::SDClass::mkdir(char const*)+0x1fe>
	 && (path[offset] != '\0')) {
    75c2:	2900      	cmp	r1, #0
    75c4:	f000 80e1 	beq.w	778a <SDLib::SDClass::mkdir(char const*)+0x20e>
    buffer[bufferOffset++] = path[offset++];
    75c8:	1c53      	adds	r3, r2, #1
    75ca:	f88d 1008 	strb.w	r1, [sp, #8]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    75ce:	5ce1      	ldrb	r1, [r4, r3]
    75d0:	292f      	cmp	r1, #47	; 0x2f
    75d2:	f000 80b6 	beq.w	7742 <SDLib::SDClass::mkdir(char const*)+0x1c6>
	 && (path[offset] != '\0')) {
    75d6:	2900      	cmp	r1, #0
    75d8:	f000 80dc 	beq.w	7794 <SDLib::SDClass::mkdir(char const*)+0x218>
    buffer[bufferOffset++] = path[offset++];
    75dc:	1c93      	adds	r3, r2, #2
    75de:	f88d 1009 	strb.w	r1, [sp, #9]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    75e2:	5ce1      	ldrb	r1, [r4, r3]
    75e4:	292f      	cmp	r1, #47	; 0x2f
    75e6:	f000 80de 	beq.w	77a6 <SDLib::SDClass::mkdir(char const*)+0x22a>
	 && (path[offset] != '\0')) {
    75ea:	2900      	cmp	r1, #0
    75ec:	f000 80dd 	beq.w	77aa <SDLib::SDClass::mkdir(char const*)+0x22e>
    buffer[bufferOffset++] = path[offset++];
    75f0:	1cd3      	adds	r3, r2, #3
    75f2:	f88d 100a 	strb.w	r1, [sp, #10]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    75f6:	5ce1      	ldrb	r1, [r4, r3]
    75f8:	292f      	cmp	r1, #47	; 0x2f
    75fa:	f000 80d8 	beq.w	77ae <SDLib::SDClass::mkdir(char const*)+0x232>
	 && (path[offset] != '\0')) {
    75fe:	2900      	cmp	r1, #0
    7600:	f000 80d9 	beq.w	77b6 <SDLib::SDClass::mkdir(char const*)+0x23a>
    buffer[bufferOffset++] = path[offset++];
    7604:	1d13      	adds	r3, r2, #4
    7606:	f88d 100b 	strb.w	r1, [sp, #11]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    760a:	5ce1      	ldrb	r1, [r4, r3]
    760c:	292f      	cmp	r1, #47	; 0x2f
    760e:	f000 80d0 	beq.w	77b2 <SDLib::SDClass::mkdir(char const*)+0x236>
	 && (path[offset] != '\0')) {
    7612:	2900      	cmp	r1, #0
    7614:	f000 80d1 	beq.w	77ba <SDLib::SDClass::mkdir(char const*)+0x23e>
    buffer[bufferOffset++] = path[offset++];
    7618:	1d53      	adds	r3, r2, #5
    761a:	f88d 100c 	strb.w	r1, [sp, #12]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    761e:	5ce1      	ldrb	r1, [r4, r3]
    7620:	292f      	cmp	r1, #47	; 0x2f
    7622:	f000 80cc 	beq.w	77be <SDLib::SDClass::mkdir(char const*)+0x242>
	 && (path[offset] != '\0')) {
    7626:	2900      	cmp	r1, #0
    7628:	f000 80cb 	beq.w	77c2 <SDLib::SDClass::mkdir(char const*)+0x246>
    buffer[bufferOffset++] = path[offset++];
    762c:	1d93      	adds	r3, r2, #6
    762e:	f88d 100d 	strb.w	r1, [sp, #13]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7632:	5ce1      	ldrb	r1, [r4, r3]
    7634:	292f      	cmp	r1, #47	; 0x2f
    7636:	f000 80c6 	beq.w	77c6 <SDLib::SDClass::mkdir(char const*)+0x24a>
	 && (path[offset] != '\0')) {
    763a:	2900      	cmp	r1, #0
    763c:	f000 80c7 	beq.w	77ce <SDLib::SDClass::mkdir(char const*)+0x252>
    buffer[bufferOffset++] = path[offset++];
    7640:	1dd3      	adds	r3, r2, #7
    7642:	f88d 100e 	strb.w	r1, [sp, #14]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7646:	5ce1      	ldrb	r1, [r4, r3]
    7648:	292f      	cmp	r1, #47	; 0x2f
    764a:	f000 80be 	beq.w	77ca <SDLib::SDClass::mkdir(char const*)+0x24e>
	 && (path[offset] != '\0')) {
    764e:	2900      	cmp	r1, #0
    7650:	f000 80bf 	beq.w	77d2 <SDLib::SDClass::mkdir(char const*)+0x256>
    buffer[bufferOffset++] = path[offset++];
    7654:	f102 0308 	add.w	r3, r2, #8
    7658:	f88d 100f 	strb.w	r1, [sp, #15]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    765c:	5ce1      	ldrb	r1, [r4, r3]
    765e:	292f      	cmp	r1, #47	; 0x2f
    7660:	f000 80b9 	beq.w	77d6 <SDLib::SDClass::mkdir(char const*)+0x25a>
	 && (path[offset] != '\0')) {
    7664:	2900      	cmp	r1, #0
    7666:	f000 80ba 	beq.w	77de <SDLib::SDClass::mkdir(char const*)+0x262>
    buffer[bufferOffset++] = path[offset++];
    766a:	f102 0309 	add.w	r3, r2, #9
    766e:	f88d 1010 	strb.w	r1, [sp, #16]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7672:	5ce1      	ldrb	r1, [r4, r3]
    7674:	292f      	cmp	r1, #47	; 0x2f
    7676:	f000 80b0 	beq.w	77da <SDLib::SDClass::mkdir(char const*)+0x25e>
	 && (path[offset] != '\0')) {
    767a:	2900      	cmp	r1, #0
    767c:	f000 80b3 	beq.w	77e6 <SDLib::SDClass::mkdir(char const*)+0x26a>
    buffer[bufferOffset++] = path[offset++];
    7680:	f102 030a 	add.w	r3, r2, #10
    7684:	f88d 1011 	strb.w	r1, [sp, #17]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7688:	5ce1      	ldrb	r1, [r4, r3]
    768a:	292f      	cmp	r1, #47	; 0x2f
    768c:	f000 80a9 	beq.w	77e2 <SDLib::SDClass::mkdir(char const*)+0x266>
	 && (path[offset] != '\0')) {
    7690:	2900      	cmp	r1, #0
    7692:	f000 80aa 	beq.w	77ea <SDLib::SDClass::mkdir(char const*)+0x26e>
    buffer[bufferOffset++] = path[offset++];
    7696:	f102 030b 	add.w	r3, r2, #11
    769a:	f88d 1012 	strb.w	r1, [sp, #18]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    769e:	5ce1      	ldrb	r1, [r4, r3]
    76a0:	292f      	cmp	r1, #47	; 0x2f
    76a2:	f000 80a4 	beq.w	77ee <SDLib::SDClass::mkdir(char const*)+0x272>
	 && (path[offset] != '\0')) {
    76a6:	2900      	cmp	r1, #0
    76a8:	f000 80a3 	beq.w	77f2 <SDLib::SDClass::mkdir(char const*)+0x276>
    buffer[bufferOffset++] = path[offset++];
    76ac:	f102 030c 	add.w	r3, r2, #12
    76b0:	f88d 1013 	strb.w	r1, [sp, #19]
    76b4:	f814 a003 	ldrb.w	sl, [r4, r3]
  }

  buffer[bufferOffset] = '\0';
    76b8:	f88d 6014 	strb.w	r6, [sp, #20]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    76bc:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
    76c0:	d044      	beq.n	774c <SDLib::SDClass::mkdir(char const*)+0x1d0>
    76c2:	469b      	mov	fp, r3
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    76c4:	2301      	movs	r3, #1
    76c6:	aa02      	add	r2, sp, #8
    76c8:	4629      	mov	r1, r5
    76ca:	a821      	add	r0, sp, #132	; 0x84
    76cc:	f88d 6064 	strb.w	r6, [sp, #100]	; 0x64
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    76d0:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
    76d4:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    76d8:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
    76dc:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
    76e0:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    76e4:	f001 fb72 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
  */
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
    76e8:	b9e0      	cbnz	r0, 7724 <SDLib::SDClass::mkdir(char const*)+0x1a8>
  uint8_t dirEntry(dir_t& dir) {return dirEntry(&dir);}  // NOLINT
  /** \deprecated Use:
   * uint8_t SdFile::makeDir(SdFile* dir, const char* dirName);
   */
  uint8_t makeDir(SdFile& dir, const char* dirName) {  // NOLINT
    return makeDir(&dir, dirName);
    76ea:	aa02      	add	r2, sp, #8
    76ec:	4629      	mov	r1, r5
    76ee:	a818      	add	r0, sp, #96	; 0x60
    76f0:	f001 fa90 	bl	8c14 <SdFile::makeDir(SdFile*, char const*)>

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);

    if (!shouldContinue) {
    76f4:	4603      	mov	r3, r0
    76f6:	b3a8      	cbz	r0, 7764 <SDLib::SDClass::mkdir(char const*)+0x1e8>
        (*p_parent).close();
      }
      return false;
    }
    
    if (!moreComponents) {
    76f8:	f1ba 0f00 	cmp.w	sl, #0
    76fc:	d018      	beq.n	7730 <SDLib::SDClass::mkdir(char const*)+0x1b4>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    76fe:	2301      	movs	r3, #1
    7700:	aa02      	add	r2, sp, #8
    7702:	4629      	mov	r1, r5
    7704:	4638      	mov	r0, r7
    7706:	f001 fb61 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    770a:	45a9      	cmp	r9, r5
    770c:	4682      	mov	sl, r0
    770e:	d022      	beq.n	7756 <SDLib::SDClass::mkdir(char const*)+0x1da>
      (*p_parent).close();
    7710:	4628      	mov	r0, r5
    7712:	f000 ff77 	bl	8604 <SdFile::close()>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    7716:	f1ba 0f00 	cmp.w	sl, #0
    771a:	d01f      	beq.n	775c <SDLib::SDClass::mkdir(char const*)+0x1e0>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    771c:	462b      	mov	r3, r5
    771e:	463d      	mov	r5, r7
    7720:	461f      	mov	r7, r3
    7722:	e744      	b.n	75ae <SDLib::SDClass::mkdir(char const*)+0x32>
  SdFile child;

  boolean exists = child.open(parentDir, filePathComponent, O_RDONLY);
  
  if (exists) {
     child.close(); 
    7724:	a821      	add	r0, sp, #132	; 0x84
    7726:	f000 ff6d 	bl	8604 <SdFile::close()>
        (*p_parent).close();
      }
      return false;
    }
    
    if (!moreComponents) {
    772a:	f1ba 0f00 	cmp.w	sl, #0
    772e:	d1e6      	bne.n	76fe <SDLib::SDClass::mkdir(char const*)+0x182>
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    7730:	45a9      	cmp	r9, r5
    7732:	d060      	beq.n	77f6 <SDLib::SDClass::mkdir(char const*)+0x27a>
    (*p_parent).close(); // TODO: Return/ handle different?
    7734:	4628      	mov	r0, r5
    7736:	f000 ff65 	bl	8604 <SdFile::close()>
  }

  return true;
    773a:	2001      	movs	r0, #1

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
}
    773c:	b02b      	add	sp, #172	; 0xac
    773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7742:	2201      	movs	r2, #1
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    7744:	a92a      	add	r1, sp, #168	; 0xa8
    7746:	440a      	add	r2, r1
    7748:	f802 6ca0 	strb.w	r6, [r2, #-160]
    774c:	3301      	adds	r3, #1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    offset++;
    774e:	469b      	mov	fp, r3
    7750:	f814 a003 	ldrb.w	sl, [r4, r3]
    7754:	e7b6      	b.n	76c4 <SDLib::SDClass::mkdir(char const*)+0x148>
    if (p_parent != &parentDir) {
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    7756:	b108      	cbz	r0, 775c <SDLib::SDClass::mkdir(char const*)+0x1e0>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    7758:	ad0f      	add	r5, sp, #60	; 0x3c
    775a:	e7df      	b.n	771c <SDLib::SDClass::mkdir(char const*)+0x1a0>
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
        (*p_parent).close();
      }
      return false;
    775c:	2000      	movs	r0, #0

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
}
    775e:	b02b      	add	sp, #172	; 0xac
    7760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    if (!shouldContinue) {
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    7764:	45a9      	cmp	r9, r5
    7766:	d0f9      	beq.n	775c <SDLib::SDClass::mkdir(char const*)+0x1e0>
        (*p_parent).close();
    7768:	4628      	mov	r0, r5
    776a:	9301      	str	r3, [sp, #4]
    776c:	f000 ff4a 	bl	8604 <SdFile::close()>
      }
      return false;
    7770:	9b01      	ldr	r3, [sp, #4]
    7772:	4618      	mov	r0, r3

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
}
    7774:	b02b      	add	sp, #172	; 0xac
    7776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    777a:	4613      	mov	r3, r2
    777c:	3301      	adds	r3, #1
    777e:	f88d 6008 	strb.w	r6, [sp, #8]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    offset++;
    7782:	469b      	mov	fp, r3
    7784:	f814 a003 	ldrb.w	sl, [r4, r3]
    7788:	e79c      	b.n	76c4 <SDLib::SDClass::mkdir(char const*)+0x148>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    778a:	f88d 1008 	strb.w	r1, [sp, #8]
    778e:	4693      	mov	fp, r2
    7790:	468a      	mov	sl, r1
    7792:	e797      	b.n	76c4 <SDLib::SDClass::mkdir(char const*)+0x148>
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    7794:	2201      	movs	r2, #1
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    7796:	a92a      	add	r1, sp, #168	; 0xa8
    7798:	440a      	add	r2, r1
    779a:	469b      	mov	fp, r3
    779c:	f802 6ca0 	strb.w	r6, [r2, #-160]
    77a0:	f04f 0a00 	mov.w	sl, #0
    77a4:	e78e      	b.n	76c4 <SDLib::SDClass::mkdir(char const*)+0x148>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    77a6:	2202      	movs	r2, #2
    77a8:	e7cc      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
	 && (path[offset] != '\0')) {
    77aa:	2202      	movs	r2, #2
    77ac:	e7f3      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    77ae:	2203      	movs	r2, #3
    77b0:	e7c8      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
    77b2:	2204      	movs	r2, #4
    77b4:	e7c6      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
	 && (path[offset] != '\0')) {
    77b6:	2203      	movs	r2, #3
    77b8:	e7ed      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    77ba:	2204      	movs	r2, #4
    77bc:	e7eb      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    77be:	2205      	movs	r2, #5
    77c0:	e7c0      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
	 && (path[offset] != '\0')) {
    77c2:	2205      	movs	r2, #5
    77c4:	e7e7      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    77c6:	2206      	movs	r2, #6
    77c8:	e7bc      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
    77ca:	2207      	movs	r2, #7
    77cc:	e7ba      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
	 && (path[offset] != '\0')) {
    77ce:	2206      	movs	r2, #6
    77d0:	e7e1      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    77d2:	2207      	movs	r2, #7
    77d4:	e7df      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    77d6:	2208      	movs	r2, #8
    77d8:	e7b4      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
    77da:	2209      	movs	r2, #9
    77dc:	e7b2      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
	 && (path[offset] != '\0')) {
    77de:	2208      	movs	r2, #8
    77e0:	e7d9      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    77e2:	220a      	movs	r2, #10
    77e4:	e7ae      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
	 && (path[offset] != '\0')) {
    77e6:	2209      	movs	r2, #9
    77e8:	e7d5      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    77ea:	220a      	movs	r2, #10
    77ec:	e7d3      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    77ee:	220b      	movs	r2, #11
    77f0:	e7a8      	b.n	7744 <SDLib::SDClass::mkdir(char const*)+0x1c8>
	 && (path[offset] != '\0')) {
    77f2:	220b      	movs	r2, #11
    77f4:	e7cf      	b.n	7796 <SDLib::SDClass::mkdir(char const*)+0x21a>
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    77f6:	2001      	movs	r0, #1
    Makes a single directory or a heirarchy of directories.

    A rough equivalent to `mkdir -p`.
  
   */
  return walkPath(filepath, root, callback_makeDirPath);
    77f8:	e7b1      	b.n	775e <SDLib::SDClass::mkdir(char const*)+0x1e2>
    77fa:	bf00      	nop
    77fc:	00017588 	.word	0x00017588

00007800 <SDLib::SDClass::remove(char const*)>:
  
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
    7800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7804:	b096      	sub	sp, #88	; 0x58
    7806:	2300      	movs	r3, #0
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7808:	4a89      	ldr	r2, [pc, #548]	; (7a30 <SDLib::SDClass::remove(char const*)+0x230>)
    780a:	f88d 3014 	strb.w	r3, [sp, #20]
  return walkPath(filepath, root, callback_remove);
    780e:	f100 0738 	add.w	r7, r0, #56	; 0x38
  SdFile subfile1;
  SdFile subfile2;

  char buffer[PATH_COMPONENT_BUFFER_LEN]; 

  unsigned int offset = 0;
    7812:	4699      	mov	r9, r3
  
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
    7814:	460c      	mov	r4, r1
    7816:	f88d 3016 	strb.w	r3, [sp, #22]
    781a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    781e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    7822:	4698      	mov	r8, r3
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
  return walkPath(filepath, root, callback_remove);
    7824:	463d      	mov	r5, r7
    7826:	9204      	str	r2, [sp, #16]
    7828:	920d      	str	r2, [sp, #52]	; 0x34
  SdFile *p_parent;
  SdFile *p_child;

  SdFile *p_tmp_sdfile;  
  
  p_child = &subfile1;
    782a:	ae04      	add	r6, sp, #16
  int bufferOffset = 0;

  int offset = *p_offset;

  // Skip root or other separator
  if (path[offset] == '/') {
    782c:	f814 3009 	ldrb.w	r3, [r4, r9]
    7830:	2b2f      	cmp	r3, #47	; 0x2f
    offset++;
    7832:	bf08      	it	eq
    7834:	f109 0901 	addeq.w	r9, r9, #1
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7838:	f814 2009 	ldrb.w	r2, [r4, r9]
    783c:	2a2f      	cmp	r2, #47	; 0x2f
    783e:	f000 80be 	beq.w	79be <SDLib::SDClass::remove(char const*)+0x1be>
	 && (path[offset] != '\0')) {
    7842:	2a00      	cmp	r2, #0
    7844:	f000 80c9 	beq.w	79da <SDLib::SDClass::remove(char const*)+0x1da>
    buffer[bufferOffset++] = path[offset++];
    7848:	f109 0301 	add.w	r3, r9, #1
    784c:	f88d 2000 	strb.w	r2, [sp]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7850:	5ce2      	ldrb	r2, [r4, r3]
    7852:	2a2f      	cmp	r2, #47	; 0x2f
    7854:	f000 80a1 	beq.w	799a <SDLib::SDClass::remove(char const*)+0x19a>
	 && (path[offset] != '\0')) {
    7858:	2a00      	cmp	r2, #0
    785a:	f000 8089 	beq.w	7970 <SDLib::SDClass::remove(char const*)+0x170>
    buffer[bufferOffset++] = path[offset++];
    785e:	f109 0302 	add.w	r3, r9, #2
    7862:	f88d 2001 	strb.w	r2, [sp, #1]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7866:	5ce2      	ldrb	r2, [r4, r3]
    7868:	2a2f      	cmp	r2, #47	; 0x2f
    786a:	f000 80b9 	beq.w	79e0 <SDLib::SDClass::remove(char const*)+0x1e0>
	 && (path[offset] != '\0')) {
    786e:	2a00      	cmp	r2, #0
    7870:	f000 80b8 	beq.w	79e4 <SDLib::SDClass::remove(char const*)+0x1e4>
    buffer[bufferOffset++] = path[offset++];
    7874:	f109 0303 	add.w	r3, r9, #3
    7878:	f88d 2002 	strb.w	r2, [sp, #2]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    787c:	5ce2      	ldrb	r2, [r4, r3]
    787e:	2a2f      	cmp	r2, #47	; 0x2f
    7880:	f000 80b2 	beq.w	79e8 <SDLib::SDClass::remove(char const*)+0x1e8>
	 && (path[offset] != '\0')) {
    7884:	2a00      	cmp	r2, #0
    7886:	f000 80b3 	beq.w	79f0 <SDLib::SDClass::remove(char const*)+0x1f0>
    buffer[bufferOffset++] = path[offset++];
    788a:	f109 0304 	add.w	r3, r9, #4
    788e:	f88d 2003 	strb.w	r2, [sp, #3]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7892:	5ce2      	ldrb	r2, [r4, r3]
    7894:	2a2f      	cmp	r2, #47	; 0x2f
    7896:	f000 80a9 	beq.w	79ec <SDLib::SDClass::remove(char const*)+0x1ec>
	 && (path[offset] != '\0')) {
    789a:	2a00      	cmp	r2, #0
    789c:	f000 80aa 	beq.w	79f4 <SDLib::SDClass::remove(char const*)+0x1f4>
    buffer[bufferOffset++] = path[offset++];
    78a0:	f109 0305 	add.w	r3, r9, #5
    78a4:	f88d 2004 	strb.w	r2, [sp, #4]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    78a8:	5ce2      	ldrb	r2, [r4, r3]
    78aa:	2a2f      	cmp	r2, #47	; 0x2f
    78ac:	f000 80a4 	beq.w	79f8 <SDLib::SDClass::remove(char const*)+0x1f8>
	 && (path[offset] != '\0')) {
    78b0:	2a00      	cmp	r2, #0
    78b2:	f000 80a3 	beq.w	79fc <SDLib::SDClass::remove(char const*)+0x1fc>
    buffer[bufferOffset++] = path[offset++];
    78b6:	f109 0306 	add.w	r3, r9, #6
    78ba:	f88d 2005 	strb.w	r2, [sp, #5]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    78be:	5ce2      	ldrb	r2, [r4, r3]
    78c0:	2a2f      	cmp	r2, #47	; 0x2f
    78c2:	f000 809d 	beq.w	7a00 <SDLib::SDClass::remove(char const*)+0x200>
	 && (path[offset] != '\0')) {
    78c6:	2a00      	cmp	r2, #0
    78c8:	f000 809e 	beq.w	7a08 <SDLib::SDClass::remove(char const*)+0x208>
    buffer[bufferOffset++] = path[offset++];
    78cc:	f109 0307 	add.w	r3, r9, #7
    78d0:	f88d 2006 	strb.w	r2, [sp, #6]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    78d4:	5ce2      	ldrb	r2, [r4, r3]
    78d6:	2a2f      	cmp	r2, #47	; 0x2f
    78d8:	f000 8094 	beq.w	7a04 <SDLib::SDClass::remove(char const*)+0x204>
	 && (path[offset] != '\0')) {
    78dc:	2a00      	cmp	r2, #0
    78de:	f000 8095 	beq.w	7a0c <SDLib::SDClass::remove(char const*)+0x20c>
    buffer[bufferOffset++] = path[offset++];
    78e2:	f109 0308 	add.w	r3, r9, #8
    78e6:	f88d 2007 	strb.w	r2, [sp, #7]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    78ea:	5ce2      	ldrb	r2, [r4, r3]
    78ec:	2a2f      	cmp	r2, #47	; 0x2f
    78ee:	f000 808f 	beq.w	7a10 <SDLib::SDClass::remove(char const*)+0x210>
	 && (path[offset] != '\0')) {
    78f2:	2a00      	cmp	r2, #0
    78f4:	f000 8090 	beq.w	7a18 <SDLib::SDClass::remove(char const*)+0x218>
    buffer[bufferOffset++] = path[offset++];
    78f8:	f109 0309 	add.w	r3, r9, #9
    78fc:	f88d 2008 	strb.w	r2, [sp, #8]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7900:	5ce2      	ldrb	r2, [r4, r3]
    7902:	2a2f      	cmp	r2, #47	; 0x2f
    7904:	f000 8086 	beq.w	7a14 <SDLib::SDClass::remove(char const*)+0x214>
	 && (path[offset] != '\0')) {
    7908:	2a00      	cmp	r2, #0
    790a:	f000 8089 	beq.w	7a20 <SDLib::SDClass::remove(char const*)+0x220>
    buffer[bufferOffset++] = path[offset++];
    790e:	f109 030a 	add.w	r3, r9, #10
    7912:	f88d 2009 	strb.w	r2, [sp, #9]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7916:	5ce2      	ldrb	r2, [r4, r3]
    7918:	2a2f      	cmp	r2, #47	; 0x2f
    791a:	d07f      	beq.n	7a1c <SDLib::SDClass::remove(char const*)+0x21c>
	 && (path[offset] != '\0')) {
    791c:	2a00      	cmp	r2, #0
    791e:	f000 8081 	beq.w	7a24 <SDLib::SDClass::remove(char const*)+0x224>
    buffer[bufferOffset++] = path[offset++];
    7922:	f109 030b 	add.w	r3, r9, #11
    7926:	f88d 200a 	strb.w	r2, [sp, #10]
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    792a:	5ce2      	ldrb	r2, [r4, r3]
    792c:	2a2f      	cmp	r2, #47	; 0x2f
    792e:	d07b      	beq.n	7a28 <SDLib::SDClass::remove(char const*)+0x228>
	 && (path[offset] != '\0')) {
    7930:	2a00      	cmp	r2, #0
    7932:	d07b      	beq.n	7a2c <SDLib::SDClass::remove(char const*)+0x22c>
    buffer[bufferOffset++] = path[offset++];
    7934:	f109 030c 	add.w	r3, r9, #12
    7938:	f88d 200b 	strb.w	r2, [sp, #11]
    793c:	5ce2      	ldrb	r2, [r4, r3]
  }

  buffer[bufferOffset] = '\0';
    793e:	f88d 800c 	strb.w	r8, [sp, #12]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    7942:	2a2f      	cmp	r2, #47	; 0x2f
    7944:	d02e      	beq.n	79a4 <SDLib::SDClass::remove(char const*)+0x1a4>
    7946:	4699      	mov	r9, r3



boolean callback_remove(SdFile& parentDir, const char *filePathComponent, 
			boolean isLastComponent, void * /* object */) {
  if (isLastComponent) {
    7948:	b1c2      	cbz	r2, 797c <SDLib::SDClass::remove(char const*)+0x17c>
  /** \deprecated Use:
   * uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag);
   */
  uint8_t open(SdFile& dirFile, // NOLINT
    const char* fileName, uint8_t oflag) {
    return open(&dirFile, fileName, oflag);
    794a:	2301      	movs	r3, #1
    794c:	466a      	mov	r2, sp
    794e:	4629      	mov	r1, r5
    7950:	4630      	mov	r0, r6
    7952:	f001 fa3b 	bl	8dcc <SdFile::open(SdFile*, char const*, unsigned char)>
    
    boolean exists = (*p_child).open(*p_parent, buffer, O_RDONLY);

    // If it's one we've created then we
    // don't need the parent handle anymore.
    if (p_parent != &parentDir) {
    7956:	42af      	cmp	r7, r5
    7958:	4682      	mov	sl, r0
    795a:	d027      	beq.n	79ac <SDLib::SDClass::remove(char const*)+0x1ac>
      (*p_parent).close();
    795c:	4628      	mov	r0, r5
    795e:	f000 fe51 	bl	8604 <SdFile::close()>
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    7962:	f1ba 0f00 	cmp.w	sl, #0
    7966:	d024      	beq.n	79b2 <SDLib::SDClass::remove(char const*)+0x1b2>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    7968:	462b      	mov	r3, r5
    796a:	4635      	mov	r5, r6
    796c:	461e      	mov	r6, r3
    796e:	e75d      	b.n	782c <SDLib::SDClass::remove(char const*)+0x2c>
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    7970:	2301      	movs	r3, #1
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    7972:	aa16      	add	r2, sp, #88	; 0x58
    7974:	4413      	add	r3, r2
    7976:	2200      	movs	r2, #0
    7978:	f803 2c58 	strb.w	r2, [r3, #-88]
  int8_t readDir(dir_t& dir) {return readDir(&dir);}  // NOLINT
  /** \deprecated Use:
   * static uint8_t SdFile::remove(SdFile* dirFile, const char* fileName);
   */
  static uint8_t remove(SdFile& dirFile, const char* fileName) {  // NOLINT
    return remove(&dirFile, fileName);
    797c:	4669      	mov	r1, sp
    797e:	4628      	mov	r0, r5
    7980:	f001 fa30 	bl	8de4 <SdFile::remove(SdFile*, char const*)>

    boolean moreComponents = getNextPathComponent(filepath, &offset, buffer);

    boolean shouldContinue = callback((*p_parent), buffer, !moreComponents, object);

    if (!shouldContinue) {
    7984:	4604      	mov	r4, r0
    7986:	b308      	cbz	r0, 79cc <SDLib::SDClass::remove(char const*)+0x1cc>
    } else {
      return false;
    }
  }
  
  if (p_parent != &parentDir) {
    7988:	42af      	cmp	r7, r5
    798a:	d016      	beq.n	79ba <SDLib::SDClass::remove(char const*)+0x1ba>
    (*p_parent).close(); // TODO: Return/ handle different?
    798c:	4628      	mov	r0, r5
    798e:	f000 fe39 	bl	8604 <SdFile::close()>
  }

  return true;
    7992:	2001      	movs	r0, #1
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
  return walkPath(filepath, root, callback_remove);
}
    7994:	b016      	add	sp, #88	; 0x58
    7996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    799a:	2201      	movs	r2, #1
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    799c:	a916      	add	r1, sp, #88	; 0x58
    799e:	440a      	add	r2, r1
    79a0:	f802 8c58 	strb.w	r8, [r2, #-88]
    79a4:	3301      	adds	r3, #1

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    offset++;
    79a6:	4699      	mov	r9, r3
    79a8:	5ce2      	ldrb	r2, [r4, r3]
    79aa:	e7cd      	b.n	7948 <SDLib::SDClass::remove(char const*)+0x148>
    if (p_parent != &parentDir) {
      (*p_parent).close();
    }
    
    // Handle case when it doesn't exist and we can't continue...
    if (exists) {
    79ac:	b108      	cbz	r0, 79b2 <SDLib::SDClass::remove(char const*)+0x1b2>
      // We alternate between two file handles as we go down
      // the path.
      if (p_parent == &parentDir) {
        p_parent = &subfile2;
    79ae:	ad0d      	add	r5, sp, #52	; 0x34
    79b0:	e7da      	b.n	7968 <SDLib::SDClass::remove(char const*)+0x168>
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
        (*p_parent).close();
      }
      return false;
    79b2:	2000      	movs	r0, #0
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
  return walkPath(filepath, root, callback_remove);
}
    79b4:	b016      	add	sp, #88	; 0x58
    79b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  
  if (p_parent != &parentDir) {
    (*p_parent).close(); // TODO: Return/ handle different?
  }

  return true;
    79ba:	2001      	movs	r0, #1
   */
  return walkPath(filepath, root, callback_rmdir);
}

boolean SDClass::remove(const char *filepath) {
  return walkPath(filepath, root, callback_remove);
    79bc:	e7ea      	b.n	7994 <SDLib::SDClass::remove(char const*)+0x194>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    79be:	464b      	mov	r3, r9
    79c0:	3301      	adds	r3, #1
    79c2:	f88d 8000 	strb.w	r8, [sp]

  // Skip trailing separator so we can determine if this
  // is the last component in the path or not.
  if (path[offset] == '/') {
    offset++;
    79c6:	4699      	mov	r9, r3
    79c8:	5ce2      	ldrb	r2, [r4, r3]
    79ca:	e7bd      	b.n	7948 <SDLib::SDClass::remove(char const*)+0x148>

    if (!shouldContinue) {
      // TODO: Don't repeat this code?
      // If it's one we've created then we
      // don't need the parent handle anymore.
      if (p_parent != &parentDir) {
    79cc:	42af      	cmp	r7, r5
    79ce:	d0f0      	beq.n	79b2 <SDLib::SDClass::remove(char const*)+0x1b2>
        (*p_parent).close();
    79d0:	4628      	mov	r0, r5
    79d2:	f000 fe17 	bl	8604 <SdFile::close()>
      }
      return false;
    79d6:	4620      	mov	r0, r4
    79d8:	e7dc      	b.n	7994 <SDLib::SDClass::remove(char const*)+0x194>
	 && (path[offset] != '/')
	 && (path[offset] != '\0')) {
    buffer[bufferOffset++] = path[offset++];
  }

  buffer[bufferOffset] = '\0';
    79da:	f88d 2000 	strb.w	r2, [sp]
    79de:	e7cd      	b.n	797c <SDLib::SDClass::remove(char const*)+0x17c>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    79e0:	2202      	movs	r2, #2
    79e2:	e7db      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
	 && (path[offset] != '\0')) {
    79e4:	2302      	movs	r3, #2
    79e6:	e7c4      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    79e8:	2203      	movs	r2, #3
    79ea:	e7d7      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
    79ec:	2204      	movs	r2, #4
    79ee:	e7d5      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
	 && (path[offset] != '\0')) {
    79f0:	2303      	movs	r3, #3
    79f2:	e7be      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    79f4:	2304      	movs	r3, #4
    79f6:	e7bc      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    79f8:	2205      	movs	r2, #5
    79fa:	e7cf      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
	 && (path[offset] != '\0')) {
    79fc:	2305      	movs	r3, #5
    79fe:	e7b8      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7a00:	2206      	movs	r2, #6
    7a02:	e7cb      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
    7a04:	2207      	movs	r2, #7
    7a06:	e7c9      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
	 && (path[offset] != '\0')) {
    7a08:	2306      	movs	r3, #6
    7a0a:	e7b2      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    7a0c:	2307      	movs	r3, #7
    7a0e:	e7b0      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7a10:	2208      	movs	r2, #8
    7a12:	e7c3      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
    7a14:	2209      	movs	r2, #9
    7a16:	e7c1      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
	 && (path[offset] != '\0')) {
    7a18:	2308      	movs	r3, #8
    7a1a:	e7aa      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7a1c:	220a      	movs	r2, #10
    7a1e:	e7bd      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
	 && (path[offset] != '\0')) {
    7a20:	2309      	movs	r3, #9
    7a22:	e7a6      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    7a24:	230a      	movs	r3, #10
    7a26:	e7a4      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    offset++;
  }
  
  // Copy the next next path segment
  while (bufferOffset < MAX_COMPONENT_LEN
	 && (path[offset] != '/')
    7a28:	220b      	movs	r2, #11
    7a2a:	e7b7      	b.n	799c <SDLib::SDClass::remove(char const*)+0x19c>
	 && (path[offset] != '\0')) {
    7a2c:	230b      	movs	r3, #11
    7a2e:	e7a0      	b.n	7972 <SDLib::SDClass::remove(char const*)+0x172>
    7a30:	00017588 	.word	0x00017588

00007a34 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    7a34:	4b08      	ldr	r3, [pc, #32]	; (7a58 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x24>)
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7a36:	4a09      	ldr	r2, [pc, #36]	; (7a5c <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc+0x28>)
    7a38:	639a      	str	r2, [r3, #56]	; 0x38
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    7a3a:	2102      	movs	r1, #2
    7a3c:	2200      	movs	r2, #0
    7a3e:	6119      	str	r1, [r3, #16]
    7a40:	715a      	strb	r2, [r3, #5]
    7a42:	719a      	strb	r2, [r3, #6]
    7a44:	729a      	strb	r2, [r3, #10]
    7a46:	731a      	strb	r2, [r3, #12]
    7a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    7a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    7a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    7a54:	4770      	bx	lr
    7a56:	bf00      	nop
    7a58:	1fff63a4 	.word	0x1fff63a4
    7a5c:	00017588 	.word	0x00017588

00007a60 <Sd2Card::readEnd() [clone .part.6]>:
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    7a60:	8903      	ldrh	r3, [r0, #8]
    7a62:	f240 2201 	movw	r2, #513	; 0x201
    7a66:	1c59      	adds	r1, r3, #1
    7a68:	4293      	cmp	r3, r2
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    7a6a:	b570      	push	{r4, r5, r6, lr}
    7a6c:	4606      	mov	r6, r0
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
    7a6e:	8101      	strh	r1, [r0, #8]
    7a70:	d814      	bhi.n	7a9c <Sd2Card::readEnd() [clone .part.6]+0x3c>
    7a72:	4b1e      	ldr	r3, [pc, #120]	; (7aec <Sd2Card::readEnd() [clone .part.6]+0x8c>)
    7a74:	681a      	ldr	r2, [r3, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7a76:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
    7a7a:	24ff      	movs	r4, #255	; 0xff
    7a7c:	f240 2002 	movw	r0, #514	; 0x202
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7a80:	62d5      	str	r5, [r2, #44]	; 0x2c
		port().PUSHR = data;
    7a82:	6354      	str	r4, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7a84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7a86:	2b00      	cmp	r3, #0
    7a88:	dafc      	bge.n	7a84 <Sd2Card::readEnd() [clone .part.6]+0x24>
    7a8a:	b28b      	uxth	r3, r1
    7a8c:	4283      	cmp	r3, r0
		return port().POPR;
    7a8e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    7a90:	d001      	beq.n	7a96 <Sd2Card::readEnd() [clone .part.6]+0x36>
    7a92:	1c59      	adds	r1, r3, #1
    7a94:	e7f4      	b.n	7a80 <Sd2Card::readEnd() [clone .part.6]+0x20>
    7a96:	f240 2303 	movw	r3, #515	; 0x203
    7a9a:	8133      	strh	r3, [r6, #8]
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    7a9c:	2101      	movs	r1, #1
    7a9e:	7930      	ldrb	r0, [r6, #4]
    7aa0:	f007 fa3c 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    7aa4:	4a12      	ldr	r2, [pc, #72]	; (7af0 <Sd2Card::readEnd() [clone .part.6]+0x90>)
    7aa6:	7813      	ldrb	r3, [r2, #0]
    7aa8:	b1e3      	cbz	r3, 7ae4 <Sd2Card::readEnd() [clone .part.6]+0x84>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7aaa:	4910      	ldr	r1, [pc, #64]	; (7aec <Sd2Card::readEnd() [clone .part.6]+0x8c>)
    7aac:	7acb      	ldrb	r3, [r1, #11]
    chip_select_asserted = 0;
    7aae:	2400      	movs	r4, #0
    7ab0:	4618      	mov	r0, r3
    7ab2:	7014      	strb	r4, [r2, #0]
    7ab4:	b1b3      	cbz	r3, 7ae4 <Sd2Card::readEnd() [clone .part.6]+0x84>
			if (interruptMasksUsed & 0x01) {
    7ab6:	07dd      	lsls	r5, r3, #31
    7ab8:	d503      	bpl.n	7ac2 <Sd2Card::readEnd() [clone .part.6]+0x62>
				NVIC_ISER0 = interruptSave[0];
    7aba:	4a0e      	ldr	r2, [pc, #56]	; (7af4 <Sd2Card::readEnd() [clone .part.6]+0x94>)
    7abc:	69c8      	ldr	r0, [r1, #28]
    7abe:	6010      	str	r0, [r2, #0]
    7ac0:	4618      	mov	r0, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7ac2:	079c      	lsls	r4, r3, #30
    7ac4:	d503      	bpl.n	7ace <Sd2Card::readEnd() [clone .part.6]+0x6e>
				NVIC_ISER1 = interruptSave[1];
    7ac6:	4b0c      	ldr	r3, [pc, #48]	; (7af8 <Sd2Card::readEnd() [clone .part.6]+0x98>)
    7ac8:	6a0a      	ldr	r2, [r1, #32]
    7aca:	7ac8      	ldrb	r0, [r1, #11]
    7acc:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7ace:	0742      	lsls	r2, r0, #29
    7ad0:	d503      	bpl.n	7ada <Sd2Card::readEnd() [clone .part.6]+0x7a>
				NVIC_ISER2 = interruptSave[2];
    7ad2:	4b0a      	ldr	r3, [pc, #40]	; (7afc <Sd2Card::readEnd() [clone .part.6]+0x9c>)
    7ad4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    7ad6:	7ac8      	ldrb	r0, [r1, #11]
    7ad8:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    7ada:	0703      	lsls	r3, r0, #28
    7adc:	d502      	bpl.n	7ae4 <Sd2Card::readEnd() [clone .part.6]+0x84>
				NVIC_ISER3 = interruptSave[3];
    7ade:	4b08      	ldr	r3, [pc, #32]	; (7b00 <Sd2Card::readEnd() [clone .part.6]+0xa0>)
    7ae0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    7ae2:	601a      	str	r2, [r3, #0]
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    inBlock_ = 0;
    7ae4:	2300      	movs	r3, #0
    7ae6:	71b3      	strb	r3, [r6, #6]
    7ae8:	bd70      	pop	{r4, r5, r6, pc}
    7aea:	bf00      	nop
    7aec:	1fff4948 	.word	0x1fff4948
    7af0:	1fff6408 	.word	0x1fff6408
    7af4:	e000e100 	.word	0xe000e100
    7af8:	e000e104 	.word	0xe000e104
    7afc:	e000e108 	.word	0xe000e108
    7b00:	e000e10c 	.word	0xe000e10c

00007b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    7b04:	b5f0      	push	{r4, r5, r6, r7, lr}
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
  if (inBlock_) {
    7b06:	7983      	ldrb	r3, [r0, #6]
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    7b08:	b083      	sub	sp, #12
    7b0a:	4604      	mov	r4, r0
    7b0c:	460d      	mov	r5, r1
    7b0e:	4616      	mov	r6, r2
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
  if (inBlock_) {
    7b10:	2b00      	cmp	r3, #0
    7b12:	f040 809b 	bne.w	7c4c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x148>
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    7b16:	4b52      	ldr	r3, [pc, #328]	; (7c60 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x15c>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7b18:	4f52      	ldr	r7, [pc, #328]	; (7c64 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x160>)
    7b1a:	781a      	ldrb	r2, [r3, #0]
    7b1c:	2a00      	cmp	r2, #0
    7b1e:	d05d      	beq.n	7bdc <Sd2Card::cardCommand(unsigned char, unsigned long)+0xd8>
    chip_select_asserted = 1;
    SDCARD_SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    7b20:	7920      	ldrb	r0, [r4, #4]
    7b22:	2100      	movs	r1, #0
    7b24:	f007 f9fa 	bl	ef1c <digitalWrite>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b28:	484f      	ldr	r0, [pc, #316]	; (7c68 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x164>)
    7b2a:	683b      	ldr	r3, [r7, #0]
    7b2c:	6802      	ldr	r2, [r0, #0]
    7b2e:	9201      	str	r2, [sp, #4]
	return ret;
    7b30:	f8dd c004 	ldr.w	ip, [sp, #4]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7b34:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
		port().PUSHR = data;
    7b38:	27ff      	movs	r7, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7b3a:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
		port().PUSHR = data;
    7b3e:	635f      	str	r7, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7b42:	2900      	cmp	r1, #0
    7b44:	dafc      	bge.n	7b40 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3c>
		return port().POPR;
    7b46:	6b99      	ldr	r1, [r3, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    7b48:	b2c9      	uxtb	r1, r1
    7b4a:	29ff      	cmp	r1, #255	; 0xff
    7b4c:	d007      	beq.n	7b5e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x5a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b4e:	6802      	ldr	r2, [r0, #0]
    7b50:	9200      	str	r2, [sp, #0]
	return ret;
    7b52:	9900      	ldr	r1, [sp, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    7b54:	ebcc 0101 	rsb	r1, ip, r1
    7b58:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    7b5c:	d3ed      	bcc.n	7b3a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x36>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7b5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    7b62:	f045 0240 	orr.w	r2, r5, #64	; 0x40
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7b66:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    7b68:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7b6c:	2a00      	cmp	r2, #0
    7b6e:	dafc      	bge.n	7b6a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x66>
		return port().POPR;
    7b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7b72:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    7b76:	2218      	movs	r2, #24
    7b78:	fa26 f102 	lsr.w	r1, r6, r2
    7b7c:	b2c9      	uxtb	r1, r1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7b7e:	62d8      	str	r0, [r3, #44]	; 0x2c
		port().PUSHR = data;
    7b80:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7b82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7b84:	2900      	cmp	r1, #0
    7b86:	dafc      	bge.n	7b82 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x7e>
    7b88:	3a08      	subs	r2, #8

  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    7b8a:	f112 0f08 	cmn.w	r2, #8
		return port().POPR;
    7b8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    7b90:	d1f2      	bne.n	7b78 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x74>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    7b92:	b30d      	cbz	r5, 7bd8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xd4>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    7b94:	2d08      	cmp	r5, #8
    7b96:	bf0c      	ite	eq
    7b98:	2287      	moveq	r2, #135	; 0x87
    7b9a:	22ff      	movne	r2, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7b9c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    7ba0:	62d9      	str	r1, [r3, #44]	; 0x2c
		port().PUSHR = data;
    7ba2:	635a      	str	r2, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ba6:	2a00      	cmp	r2, #0
    7ba8:	dafc      	bge.n	7ba4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xa0>
		return port().POPR;
    7baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7bac:	2600      	movs	r6, #0
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7bae:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
    7bb2:	21ff      	movs	r1, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7bb4:	62dd      	str	r5, [r3, #44]	; 0x2c
		port().PUSHR = data;
    7bb6:	6359      	str	r1, [r3, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7bba:	2a00      	cmp	r2, #0
    7bbc:	dafc      	bge.n	7bb8 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb4>
		return port().POPR;
    7bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7bc0:	b2d0      	uxtb	r0, r2
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    7bc2:	0612      	lsls	r2, r2, #24
    7bc4:	72e0      	strb	r0, [r4, #11]
    7bc6:	d401      	bmi.n	7bcc <Sd2Card::cardCommand(unsigned char, unsigned long)+0xc8>
    ;
  return status_;
}
    7bc8:	b003      	add	sp, #12
    7bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bcc:	3601      	adds	r6, #1
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
  spiSend(crc);

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
    7bce:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    7bd2:	d1ef      	bne.n	7bb4 <Sd2Card::cardCommand(unsigned char, unsigned long)+0xb0>
    ;
  return status_;
}
    7bd4:	b003      	add	sp, #12
    7bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bd8:	2295      	movs	r2, #149	; 0x95
    7bda:	e7df      	b.n	7b9c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x98>
    7bdc:	4a23      	ldr	r2, [pc, #140]	; (7c6c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x168>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7bde:	7af9      	ldrb	r1, [r7, #11]
    7be0:	6812      	ldr	r2, [r2, #0]
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    7be2:	2001      	movs	r0, #1
    7be4:	7018      	strb	r0, [r3, #0]
    7be6:	b319      	cbz	r1, 7c30 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x12c>
			__disable_irq();
    7be8:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7bea:	7af9      	ldrb	r1, [r7, #11]
    7bec:	07c8      	lsls	r0, r1, #31
    7bee:	460b      	mov	r3, r1
    7bf0:	d509      	bpl.n	7c06 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x102>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7bf2:	f8df e090 	ldr.w	lr, [pc, #144]	; 7c84 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x180>
    7bf6:	68fb      	ldr	r3, [r7, #12]
    7bf8:	f8de 0000 	ldr.w	r0, [lr]
    7bfc:	4018      	ands	r0, r3
    7bfe:	61f8      	str	r0, [r7, #28]
    7c00:	460b      	mov	r3, r1
				NVIC_ICER0 = interruptSave[0];
    7c02:	f8ce 0000 	str.w	r0, [lr]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7c06:	0789      	lsls	r1, r1, #30
    7c08:	d506      	bpl.n	7c18 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x114>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7c0a:	4919      	ldr	r1, [pc, #100]	; (7c70 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x16c>)
    7c0c:	693b      	ldr	r3, [r7, #16]
    7c0e:	6808      	ldr	r0, [r1, #0]
    7c10:	4003      	ands	r3, r0
    7c12:	623b      	str	r3, [r7, #32]
				NVIC_ICER1 = interruptSave[1];
    7c14:	600b      	str	r3, [r1, #0]
    7c16:	7afb      	ldrb	r3, [r7, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7c18:	0758      	lsls	r0, r3, #29
    7c1a:	d506      	bpl.n	7c2a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x126>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7c1c:	4915      	ldr	r1, [pc, #84]	; (7c74 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x170>)
    7c1e:	697b      	ldr	r3, [r7, #20]
    7c20:	6808      	ldr	r0, [r1, #0]
    7c22:	4003      	ands	r3, r0
    7c24:	627b      	str	r3, [r7, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    7c26:	600b      	str	r3, [r1, #0]
    7c28:	7afb      	ldrb	r3, [r7, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    7c2a:	0719      	lsls	r1, r3, #28
    7c2c:	d411      	bmi.n	7c52 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x14e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    7c2e:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    7c30:	683b      	ldr	r3, [r7, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    7c32:	68d9      	ldr	r1, [r3, #12]
    7c34:	4291      	cmp	r1, r2
    7c36:	f43f af73 	beq.w	7b20 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x1c>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    7c3a:	480f      	ldr	r0, [pc, #60]	; (7c78 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x174>)
    7c3c:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7c3e:	490f      	ldr	r1, [pc, #60]	; (7c7c <Sd2Card::cardCommand(unsigned char, unsigned long)+0x178>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    7c40:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    7c42:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    7c46:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7c48:	6019      	str	r1, [r3, #0]
    7c4a:	e769      	b.n	7b20 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x1c>
    7c4c:	f7ff ff08 	bl	7a60 <Sd2Card::readEnd() [clone .part.6]>
    7c50:	e761      	b.n	7b16 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x12>
				NVIC_ICER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7c52:	490b      	ldr	r1, [pc, #44]	; (7c80 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x17c>)
    7c54:	69bb      	ldr	r3, [r7, #24]
    7c56:	6808      	ldr	r0, [r1, #0]
    7c58:	4003      	ands	r3, r0
    7c5a:	62bb      	str	r3, [r7, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    7c5c:	600b      	str	r3, [r1, #0]
    7c5e:	e7e6      	b.n	7c2e <Sd2Card::cardCommand(unsigned char, unsigned long)+0x12a>
    7c60:	1fff6408 	.word	0x1fff6408
    7c64:	1fff4948 	.word	0x1fff4948
    7c68:	1fff6804 	.word	0x1fff6804
    7c6c:	1fff6404 	.word	0x1fff6404
    7c70:	e000e184 	.word	0xe000e184
    7c74:	e000e188 	.word	0xe000e188
    7c78:	003f4001 	.word	0x003f4001
    7c7c:	803f0000 	.word	0x803f0000
    7c80:	e000e18c 	.word	0xe000e18c
    7c84:	e000e180 	.word	0xe000e180

00007c88 <Sd2Card::init(unsigned char, unsigned char)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c8c:	4da0      	ldr	r5, [pc, #640]	; (7f10 <Sd2Card::init(unsigned char, unsigned char)+0x288>)
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
  chipSelectPin_ = chipSelectPin;
    7c8e:	7102      	strb	r2, [r0, #4]
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7c90:	b087      	sub	sp, #28
    7c92:	4683      	mov	fp, r0
    7c94:	682b      	ldr	r3, [r5, #0]
    7c96:	9303      	str	r3, [sp, #12]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    7c98:	2400      	movs	r4, #0
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    7c9a:	4610      	mov	r0, r2
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    7c9c:	4f9d      	ldr	r7, [pc, #628]	; (7f14 <Sd2Card::init(unsigned char, unsigned char)+0x28c>)
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7c9e:	9101      	str	r1, [sp, #4]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    7ca0:	f88b 400c 	strb.w	r4, [fp, #12]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    7ca4:	2101      	movs	r1, #1
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    7ca6:	f88b 400a 	strb.w	r4, [fp, #10]
    7caa:	f88b 4006 	strb.w	r4, [fp, #6]
    7cae:	f88b 4005 	strb.w	r4, [fp, #5]
	return ret;
    7cb2:	9e03      	ldr	r6, [sp, #12]
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    7cb4:	f8df 9294 	ldr.w	r9, [pc, #660]	; 7f4c <Sd2Card::init(unsigned char, unsigned char)+0x2c4>
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    7cb8:	f007 f962 	bl	ef80 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
    7cbc:	f89b 0004 	ldrb.w	r0, [fp, #4]
    7cc0:	2101      	movs	r1, #1
    7cc2:	f007 f92b 	bl	ef1c <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin();
    7cc6:	4638      	mov	r0, r7
    7cc8:	f7fe fffc 	bl	6cc4 <SPIClass::begin()>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7ccc:	7afb      	ldrb	r3, [r7, #11]
  settings = SPISettings(250000, MSBFIRST, SPI_MODE0);
    7cce:	4a92      	ldr	r2, [pc, #584]	; (7f18 <Sd2Card::init(unsigned char, unsigned char)+0x290>)
    7cd0:	f8c9 2000 	str.w	r2, [r9]
    7cd4:	2b00      	cmp	r3, #0
    7cd6:	d027      	beq.n	7d28 <Sd2Card::init(unsigned char, unsigned char)+0xa0>
			__disable_irq();
    7cd8:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7cda:	7af9      	ldrb	r1, [r7, #11]
    7cdc:	07cb      	lsls	r3, r1, #31
    7cde:	460a      	mov	r2, r1
    7ce0:	d506      	bpl.n	7cf0 <Sd2Card::init(unsigned char, unsigned char)+0x68>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7ce2:	488e      	ldr	r0, [pc, #568]	; (7f1c <Sd2Card::init(unsigned char, unsigned char)+0x294>)
    7ce4:	68fa      	ldr	r2, [r7, #12]
    7ce6:	6804      	ldr	r4, [r0, #0]
    7ce8:	4022      	ands	r2, r4
    7cea:	61fa      	str	r2, [r7, #28]
				NVIC_ICER0 = interruptSave[0];
    7cec:	6002      	str	r2, [r0, #0]
    7cee:	460a      	mov	r2, r1
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7cf0:	078c      	lsls	r4, r1, #30
    7cf2:	d506      	bpl.n	7d02 <Sd2Card::init(unsigned char, unsigned char)+0x7a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7cf4:	488a      	ldr	r0, [pc, #552]	; (7f20 <Sd2Card::init(unsigned char, unsigned char)+0x298>)
    7cf6:	6939      	ldr	r1, [r7, #16]
    7cf8:	6804      	ldr	r4, [r0, #0]
    7cfa:	7afa      	ldrb	r2, [r7, #11]
    7cfc:	4021      	ands	r1, r4
    7cfe:	6239      	str	r1, [r7, #32]
				NVIC_ICER1 = interruptSave[1];
    7d00:	6001      	str	r1, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7d02:	0750      	lsls	r0, r2, #29
    7d04:	d506      	bpl.n	7d14 <Sd2Card::init(unsigned char, unsigned char)+0x8c>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7d06:	4887      	ldr	r0, [pc, #540]	; (7f24 <Sd2Card::init(unsigned char, unsigned char)+0x29c>)
    7d08:	6979      	ldr	r1, [r7, #20]
    7d0a:	6804      	ldr	r4, [r0, #0]
    7d0c:	7afa      	ldrb	r2, [r7, #11]
    7d0e:	4021      	ands	r1, r4
    7d10:	6279      	str	r1, [r7, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    7d12:	6001      	str	r1, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    7d14:	0711      	lsls	r1, r2, #28
    7d16:	d505      	bpl.n	7d24 <Sd2Card::init(unsigned char, unsigned char)+0x9c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7d18:	4983      	ldr	r1, [pc, #524]	; (7f28 <Sd2Card::init(unsigned char, unsigned char)+0x2a0>)
    7d1a:	69ba      	ldr	r2, [r7, #24]
    7d1c:	6808      	ldr	r0, [r1, #0]
    7d1e:	4002      	ands	r2, r0
    7d20:	62ba      	str	r2, [r7, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    7d22:	600a      	str	r2, [r1, #0]
			}
			#endif
			__enable_irq();
    7d24:	b662      	cpsie	i
    7d26:	7afb      	ldrb	r3, [r7, #11]
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    7d28:	6839      	ldr	r1, [r7, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    7d2a:	4a7b      	ldr	r2, [pc, #492]	; (7f18 <Sd2Card::init(unsigned char, unsigned char)+0x290>)
    7d2c:	68c8      	ldr	r0, [r1, #12]
    7d2e:	4290      	cmp	r0, r2
    7d30:	d006      	beq.n	7d40 <Sd2Card::init(unsigned char, unsigned char)+0xb8>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    7d32:	487e      	ldr	r0, [pc, #504]	; (7f2c <Sd2Card::init(unsigned char, unsigned char)+0x2a4>)
    7d34:	6008      	str	r0, [r1, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    7d36:	4c7e      	ldr	r4, [pc, #504]	; (7f30 <Sd2Card::init(unsigned char, unsigned char)+0x2a8>)
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7d38:	487e      	ldr	r0, [pc, #504]	; (7f34 <Sd2Card::init(unsigned char, unsigned char)+0x2ac>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    7d3a:	60ca      	str	r2, [r1, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    7d3c:	610c      	str	r4, [r1, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7d3e:	6008      	str	r0, [r1, #0]
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    7d40:	240a      	movs	r4, #10
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7d42:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
		port().PUSHR = data;
    7d46:	20ff      	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7d48:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
		port().PUSHR = data;
    7d4c:	6348      	str	r0, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7d4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    7d50:	2a00      	cmp	r2, #0
    7d52:	dafc      	bge.n	7d4e <Sd2Card::init(unsigned char, unsigned char)+0xc6>
    7d54:	3c01      	subs	r4, #1

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction(settings);
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    7d56:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		return port().POPR;
    7d5a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    7d5c:	d1f4      	bne.n	7d48 <Sd2Card::init(unsigned char, unsigned char)+0xc0>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7d5e:	b19b      	cbz	r3, 7d88 <Sd2Card::init(unsigned char, unsigned char)+0x100>
			if (interruptMasksUsed & 0x01) {
    7d60:	07da      	lsls	r2, r3, #31
    7d62:	d503      	bpl.n	7d6c <Sd2Card::init(unsigned char, unsigned char)+0xe4>
				NVIC_ISER0 = interruptSave[0];
    7d64:	4874      	ldr	r0, [pc, #464]	; (7f38 <Sd2Card::init(unsigned char, unsigned char)+0x2b0>)
    7d66:	69fa      	ldr	r2, [r7, #28]
    7d68:	7afb      	ldrb	r3, [r7, #11]
    7d6a:	6002      	str	r2, [r0, #0]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7d6c:	0798      	lsls	r0, r3, #30
    7d6e:	d503      	bpl.n	7d78 <Sd2Card::init(unsigned char, unsigned char)+0xf0>
				NVIC_ISER1 = interruptSave[1];
    7d70:	4872      	ldr	r0, [pc, #456]	; (7f3c <Sd2Card::init(unsigned char, unsigned char)+0x2b4>)
    7d72:	6a3a      	ldr	r2, [r7, #32]
    7d74:	7afb      	ldrb	r3, [r7, #11]
    7d76:	6002      	str	r2, [r0, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7d78:	075a      	lsls	r2, r3, #29
    7d7a:	f100 8134 	bmi.w	7fe6 <Sd2Card::init(unsigned char, unsigned char)+0x35e>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    7d7e:	071b      	lsls	r3, r3, #28
    7d80:	d502      	bpl.n	7d88 <Sd2Card::init(unsigned char, unsigned char)+0x100>
				NVIC_ISER3 = interruptSave[3];
    7d82:	4a6f      	ldr	r2, [pc, #444]	; (7f40 <Sd2Card::init(unsigned char, unsigned char)+0x2b8>)
    7d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7d86:	6010      	str	r0, [r2, #0]
#endif
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    7d88:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 7f44 <Sd2Card::init(unsigned char, unsigned char)+0x2bc>
    7d8c:	f89a 2000 	ldrb.w	r2, [sl]
    7d90:	2a00      	cmp	r2, #0
    7d92:	d072      	beq.n	7e7a <Sd2Card::init(unsigned char, unsigned char)+0x1f2>
    chip_select_asserted = 1;
    SDCARD_SPI.beginTransaction(settings);
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
    7d94:	2100      	movs	r1, #0
    7d96:	f89b 0004 	ldrb.w	r0, [fp, #4]
    7d9a:	f007 f8bf 	bl	ef1c <digitalWrite>
    7d9e:	e007      	b.n	7db0 <Sd2Card::init(unsigned char, unsigned char)+0x128>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7da0:	682a      	ldr	r2, [r5, #0]
    7da2:	9204      	str	r2, [sp, #16]
	return ret;
    7da4:	9a04      	ldr	r2, [sp, #16]
  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    7da6:	1b92      	subs	r2, r2, r6
    7da8:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
    7dac:	f200 80d0 	bhi.w	7f50 <Sd2Card::init(unsigned char, unsigned char)+0x2c8>
#endif

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    7db0:	2200      	movs	r2, #0
    7db2:	4611      	mov	r1, r2
    7db4:	4658      	mov	r0, fp
    7db6:	f7ff fea5 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7dba:	2801      	cmp	r0, #1
    7dbc:	4680      	mov	r8, r0
    7dbe:	f88b 000b 	strb.w	r0, [fp, #11]
    7dc2:	d1ed      	bne.n	7da0 <Sd2Card::init(unsigned char, unsigned char)+0x118>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    7dc4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
    7dc8:	2108      	movs	r1, #8
    7dca:	4658      	mov	r0, fp
    7dcc:	f7ff fe9a 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    7dd0:	0743      	lsls	r3, r0, #29
    7dd2:	f140 80ee 	bpl.w	7fb2 <Sd2Card::init(unsigned char, unsigned char)+0x32a>
  void error(uint8_t code) {errorCode_ = code;}
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    7dd6:	f88b 800c 	strb.w	r8, [fp, #12]
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7dda:	f04f 0800 	mov.w	r8, #0
    7dde:	e007      	b.n	7df0 <Sd2Card::init(unsigned char, unsigned char)+0x168>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7de0:	682a      	ldr	r2, [r5, #0]
    7de2:	9205      	str	r2, [sp, #20]
	return ret;
    7de4:	9a05      	ldr	r2, [sp, #20]

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    // check for timeout
    unsigned int d = millis() - t0;
    if (d > SD_INIT_TIMEOUT) {
    7de6:	1b92      	subs	r2, r2, r6
    7de8:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
    7dec:	f200 8100 	bhi.w	7ff0 <Sd2Card::init(unsigned char, unsigned char)+0x368>
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    7df0:	2200      	movs	r2, #0
    7df2:	2137      	movs	r1, #55	; 0x37
    7df4:	4658      	mov	r0, fp
    7df6:	f7ff fe85 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
    7dfa:	4642      	mov	r2, r8
    7dfc:	2129      	movs	r1, #41	; 0x29
    7dfe:	4658      	mov	r0, fp
    7e00:	f7ff fe80 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    7e04:	f88b 000b 	strb.w	r0, [fp, #11]
    7e08:	2800      	cmp	r0, #0
    7e0a:	d1e9      	bne.n	7de0 <Sd2Card::init(unsigned char, unsigned char)+0x158>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    7e0c:	f89b 200c 	ldrb.w	r2, [fp, #12]
    7e10:	2a02      	cmp	r2, #2
    7e12:	f000 80f4 	beq.w	7ffe <Sd2Card::init(unsigned char, unsigned char)+0x376>
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    7e16:	2101      	movs	r1, #1
    7e18:	f89b 0004 	ldrb.w	r0, [fp, #4]
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    7e1c:	4c49      	ldr	r4, [pc, #292]	; (7f44 <Sd2Card::init(unsigned char, unsigned char)+0x2bc>)
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    7e1e:	f007 f87d 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    7e22:	f89a 2000 	ldrb.w	r2, [sl]
    7e26:	b1e2      	cbz	r2, 7e62 <Sd2Card::init(unsigned char, unsigned char)+0x1da>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7e28:	7af9      	ldrb	r1, [r7, #11]
    7e2a:	483a      	ldr	r0, [pc, #232]	; (7f14 <Sd2Card::init(unsigned char, unsigned char)+0x28c>)
    chip_select_asserted = 0;
    7e2c:	2500      	movs	r5, #0
    7e2e:	460a      	mov	r2, r1
    7e30:	7025      	strb	r5, [r4, #0]
    7e32:	b1b1      	cbz	r1, 7e62 <Sd2Card::init(unsigned char, unsigned char)+0x1da>
			if (interruptMasksUsed & 0x01) {
    7e34:	07cc      	lsls	r4, r1, #31
    7e36:	d503      	bpl.n	7e40 <Sd2Card::init(unsigned char, unsigned char)+0x1b8>
				NVIC_ISER0 = interruptSave[0];
    7e38:	4a3f      	ldr	r2, [pc, #252]	; (7f38 <Sd2Card::init(unsigned char, unsigned char)+0x2b0>)
    7e3a:	69c0      	ldr	r0, [r0, #28]
    7e3c:	6010      	str	r0, [r2, #0]
    7e3e:	460a      	mov	r2, r1
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7e40:	0788      	lsls	r0, r1, #30
    7e42:	d503      	bpl.n	7e4c <Sd2Card::init(unsigned char, unsigned char)+0x1c4>
				NVIC_ISER1 = interruptSave[1];
    7e44:	493d      	ldr	r1, [pc, #244]	; (7f3c <Sd2Card::init(unsigned char, unsigned char)+0x2b4>)
    7e46:	6a38      	ldr	r0, [r7, #32]
    7e48:	7afa      	ldrb	r2, [r7, #11]
    7e4a:	6008      	str	r0, [r1, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7e4c:	0751      	lsls	r1, r2, #29
    7e4e:	d503      	bpl.n	7e58 <Sd2Card::init(unsigned char, unsigned char)+0x1d0>
				NVIC_ISER2 = interruptSave[2];
    7e50:	493d      	ldr	r1, [pc, #244]	; (7f48 <Sd2Card::init(unsigned char, unsigned char)+0x2c0>)
    7e52:	6a78      	ldr	r0, [r7, #36]	; 0x24
    7e54:	7afa      	ldrb	r2, [r7, #11]
    7e56:	6008      	str	r0, [r1, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    7e58:	0713      	lsls	r3, r2, #28
    7e5a:	d502      	bpl.n	7e62 <Sd2Card::init(unsigned char, unsigned char)+0x1da>
				NVIC_ISER3 = interruptSave[3];
    7e5c:	4a38      	ldr	r2, [pc, #224]	; (7f40 <Sd2Card::init(unsigned char, unsigned char)+0x2b8>)
    7e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    7e60:	6011      	str	r1, [r2, #0]
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
  if (sckRateID > 6) {
    7e62:	9b01      	ldr	r3, [sp, #4]
    7e64:	2b06      	cmp	r3, #6
    7e66:	f240 80d4 	bls.w	8012 <Sd2Card::init(unsigned char, unsigned char)+0x38a>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    7e6a:	2216      	movs	r2, #22
    7e6c:	f88b 2005 	strb.w	r2, [fp, #5]
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
    7e70:	2400      	movs	r4, #0
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    7e72:	4620      	mov	r0, r4
    7e74:	b007      	add	sp, #28
    7e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    7e7a:	7afb      	ldrb	r3, [r7, #11]
    7e7c:	f8d9 2000 	ldr.w	r2, [r9]
    7e80:	4824      	ldr	r0, [pc, #144]	; (7f14 <Sd2Card::init(unsigned char, unsigned char)+0x28c>)
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
    chip_select_asserted = 1;
    7e82:	f04f 0c01 	mov.w	ip, #1
    7e86:	f88a c000 	strb.w	ip, [sl]
    7e8a:	2b00      	cmp	r3, #0
    7e8c:	d033      	beq.n	7ef6 <Sd2Card::init(unsigned char, unsigned char)+0x26e>
			__disable_irq();
    7e8e:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    7e90:	f890 e00b 	ldrb.w	lr, [r0, #11]
    7e94:	f01e 0f01 	tst.w	lr, #1
    7e98:	4671      	mov	r1, lr
    7e9a:	d009      	beq.n	7eb0 <Sd2Card::init(unsigned char, unsigned char)+0x228>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    7e9c:	f8df c07c 	ldr.w	ip, [pc, #124]	; 7f1c <Sd2Card::init(unsigned char, unsigned char)+0x294>
    7ea0:	68c3      	ldr	r3, [r0, #12]
    7ea2:	f8dc 1000 	ldr.w	r1, [ip]
    7ea6:	4019      	ands	r1, r3
    7ea8:	61c1      	str	r1, [r0, #28]
				NVIC_ICER0 = interruptSave[0];
    7eaa:	f8cc 1000 	str.w	r1, [ip]
    7eae:	4671      	mov	r1, lr
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7eb0:	f01e 0f02 	tst.w	lr, #2
    7eb4:	d009      	beq.n	7eca <Sd2Card::init(unsigned char, unsigned char)+0x242>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    7eb6:	f8df e068 	ldr.w	lr, [pc, #104]	; 7f20 <Sd2Card::init(unsigned char, unsigned char)+0x298>
    7eba:	693b      	ldr	r3, [r7, #16]
    7ebc:	f8de 0000 	ldr.w	r0, [lr]
    7ec0:	7af9      	ldrb	r1, [r7, #11]
    7ec2:	4018      	ands	r0, r3
    7ec4:	6238      	str	r0, [r7, #32]
				NVIC_ICER1 = interruptSave[1];
    7ec6:	f8ce 0000 	str.w	r0, [lr]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7eca:	0748      	lsls	r0, r1, #29
    7ecc:	d509      	bpl.n	7ee2 <Sd2Card::init(unsigned char, unsigned char)+0x25a>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    7ece:	f8df e054 	ldr.w	lr, [pc, #84]	; 7f24 <Sd2Card::init(unsigned char, unsigned char)+0x29c>
    7ed2:	697b      	ldr	r3, [r7, #20]
    7ed4:	f8de 0000 	ldr.w	r0, [lr]
    7ed8:	7af9      	ldrb	r1, [r7, #11]
    7eda:	4018      	ands	r0, r3
    7edc:	6278      	str	r0, [r7, #36]	; 0x24
				NVIC_ICER2 = interruptSave[2];
    7ede:	f8ce 0000 	str.w	r0, [lr]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    7ee2:	0709      	lsls	r1, r1, #28
    7ee4:	d505      	bpl.n	7ef2 <Sd2Card::init(unsigned char, unsigned char)+0x26a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    7ee6:	4810      	ldr	r0, [pc, #64]	; (7f28 <Sd2Card::init(unsigned char, unsigned char)+0x2a0>)
    7ee8:	69b9      	ldr	r1, [r7, #24]
    7eea:	6803      	ldr	r3, [r0, #0]
    7eec:	4019      	ands	r1, r3
    7eee:	62b9      	str	r1, [r7, #40]	; 0x28
				NVIC_ICER3 = interruptSave[3];
    7ef0:	6001      	str	r1, [r0, #0]
			}
			#endif
			__enable_irq();
    7ef2:	b662      	cpsie	i
    7ef4:	6839      	ldr	r1, [r7, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    7ef6:	68c8      	ldr	r0, [r1, #12]
    7ef8:	4290      	cmp	r0, r2
    7efa:	f43f af4b 	beq.w	7d94 <Sd2Card::init(unsigned char, unsigned char)+0x10c>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    7efe:	4b0b      	ldr	r3, [pc, #44]	; (7f2c <Sd2Card::init(unsigned char, unsigned char)+0x2a4>)
    7f00:	600b      	str	r3, [r1, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7f02:	480c      	ldr	r0, [pc, #48]	; (7f34 <Sd2Card::init(unsigned char, unsigned char)+0x2ac>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    7f04:	60ca      	str	r2, [r1, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    7f06:	f042 4380 	orr.w	r3, r2, #1073741824	; 0x40000000
    7f0a:	610b      	str	r3, [r1, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    7f0c:	6008      	str	r0, [r1, #0]
    7f0e:	e741      	b.n	7d94 <Sd2Card::init(unsigned char, unsigned char)+0x10c>
    7f10:	1fff6804 	.word	0x1fff6804
    7f14:	1fff4948 	.word	0x1fff4948
    7f18:	38006007 	.word	0x38006007
    7f1c:	e000e180 	.word	0xe000e180
    7f20:	e000e184 	.word	0xe000e184
    7f24:	e000e188 	.word	0xe000e188
    7f28:	e000e18c 	.word	0xe000e18c
    7f2c:	003f4001 	.word	0x003f4001
    7f30:	78006007 	.word	0x78006007
    7f34:	803f0000 	.word	0x803f0000
    7f38:	e000e100 	.word	0xe000e100
    7f3c:	e000e104 	.word	0xe000e104
    7f40:	e000e10c 	.word	0xe000e10c
    7f44:	1fff6408 	.word	0x1fff6408
    7f48:	e000e108 	.word	0xe000e108
    7f4c:	1fff6404 	.word	0x1fff6404
    7f50:	2201      	movs	r2, #1
    7f52:	f88b 2005 	strb.w	r2, [fp, #5]
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    7f56:	2101      	movs	r1, #1
    7f58:	f89b 0004 	ldrb.w	r0, [fp, #4]
    7f5c:	f006 ffde 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    7f60:	f89a 3000 	ldrb.w	r3, [sl]
    7f64:	4950      	ldr	r1, [pc, #320]	; (80a8 <Sd2Card::init(unsigned char, unsigned char)+0x420>)
    7f66:	2b00      	cmp	r3, #0
    7f68:	d083      	beq.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    7f6a:	7afb      	ldrb	r3, [r7, #11]
    7f6c:	4d4f      	ldr	r5, [pc, #316]	; (80ac <Sd2Card::init(unsigned char, unsigned char)+0x424>)
    chip_select_asserted = 0;
    7f6e:	2000      	movs	r0, #0
    7f70:	461a      	mov	r2, r3
    7f72:	7008      	strb	r0, [r1, #0]
    7f74:	2b00      	cmp	r3, #0
    7f76:	f43f af7c 	beq.w	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
			if (interruptMasksUsed & 0x01) {
    7f7a:	07de      	lsls	r6, r3, #31
    7f7c:	d503      	bpl.n	7f86 <Sd2Card::init(unsigned char, unsigned char)+0x2fe>
				NVIC_ISER0 = interruptSave[0];
    7f7e:	4a4c      	ldr	r2, [pc, #304]	; (80b0 <Sd2Card::init(unsigned char, unsigned char)+0x428>)
    7f80:	69e9      	ldr	r1, [r5, #28]
    7f82:	6011      	str	r1, [r2, #0]
    7f84:	461a      	mov	r2, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    7f86:	0798      	lsls	r0, r3, #30
    7f88:	d503      	bpl.n	7f92 <Sd2Card::init(unsigned char, unsigned char)+0x30a>
				NVIC_ISER1 = interruptSave[1];
    7f8a:	4b4a      	ldr	r3, [pc, #296]	; (80b4 <Sd2Card::init(unsigned char, unsigned char)+0x42c>)
    7f8c:	6a39      	ldr	r1, [r7, #32]
    7f8e:	7afa      	ldrb	r2, [r7, #11]
    7f90:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    7f92:	0751      	lsls	r1, r2, #29
    7f94:	d503      	bpl.n	7f9e <Sd2Card::init(unsigned char, unsigned char)+0x316>
				NVIC_ISER2 = interruptSave[2];
    7f96:	4b48      	ldr	r3, [pc, #288]	; (80b8 <Sd2Card::init(unsigned char, unsigned char)+0x430>)
    7f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7f9a:	7afa      	ldrb	r2, [r7, #11]
    7f9c:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    7f9e:	0713      	lsls	r3, r2, #28
    7fa0:	f57f af67 	bpl.w	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
				NVIC_ISER3 = interruptSave[3];
    7fa4:	4b45      	ldr	r3, [pc, #276]	; (80bc <Sd2Card::init(unsigned char, unsigned char)+0x434>)
    7fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7fa8:	601a      	str	r2, [r3, #0]
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    7faa:	4620      	mov	r0, r4
    7fac:	b007      	add	sp, #28
    7fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fb2:	6839      	ldr	r1, [r7, #0]
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    7fb4:	2004      	movs	r0, #4
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7fb6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
		port().PUSHR = data;
    7fba:	23ff      	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    7fbc:	f8c1 c02c 	str.w	ip, [r1, #44]	; 0x2c
		port().PUSHR = data;
    7fc0:	634b      	str	r3, [r1, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    7fc2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    7fc4:	2a00      	cmp	r2, #0
    7fc6:	dafc      	bge.n	7fc2 <Sd2Card::init(unsigned char, unsigned char)+0x33a>
		return port().POPR;
    7fc8:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    7fca:	3801      	subs	r0, #1
    7fcc:	b2d2      	uxtb	r2, r2
    type(SD_CARD_TYPE_SD1);
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    7fce:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    7fd2:	f88b 200b 	strb.w	r2, [fp, #11]
    7fd6:	d1f1      	bne.n	7fbc <Sd2Card::init(unsigned char, unsigned char)+0x334>
    if (status_ != 0XAA) {
    7fd8:	2aaa      	cmp	r2, #170	; 0xaa
    7fda:	f04f 0202 	mov.w	r2, #2
    7fde:	d009      	beq.n	7ff4 <Sd2Card::init(unsigned char, unsigned char)+0x36c>
    7fe0:	f88b 2005 	strb.w	r2, [fp, #5]
    7fe4:	e7b7      	b.n	7f56 <Sd2Card::init(unsigned char, unsigned char)+0x2ce>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    7fe6:	4834      	ldr	r0, [pc, #208]	; (80b8 <Sd2Card::init(unsigned char, unsigned char)+0x430>)
    7fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7fea:	7afb      	ldrb	r3, [r7, #11]
    7fec:	6002      	str	r2, [r0, #0]
    7fee:	e6c6      	b.n	7d7e <Sd2Card::init(unsigned char, unsigned char)+0xf6>
    7ff0:	2208      	movs	r2, #8
    7ff2:	e7f5      	b.n	7fe0 <Sd2Card::init(unsigned char, unsigned char)+0x358>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    7ff4:	f88b 200c 	strb.w	r2, [fp, #12]
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    7ff8:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    7ffc:	e6f8      	b.n	7df0 <Sd2Card::init(unsigned char, unsigned char)+0x168>
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
    7ffe:	4602      	mov	r2, r0
    8000:	213a      	movs	r1, #58	; 0x3a
    8002:	4658      	mov	r0, fp
    8004:	f7ff fd7e 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8008:	b340      	cbz	r0, 805c <Sd2Card::init(unsigned char, unsigned char)+0x3d4>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    800a:	2206      	movs	r2, #6
    800c:	f88b 2005 	strb.w	r2, [fp, #5]
    8010:	e7a1      	b.n	7f56 <Sd2Card::init(unsigned char, unsigned char)+0x2ce>
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    8012:	2b05      	cmp	r3, #5
    8014:	d842      	bhi.n	809c <Sd2Card::init(unsigned char, unsigned char)+0x414>
    8016:	e8df f003 	tbb	[pc, r3]
    801a:	171c      	.short	0x171c
    801c:	03080d12 	.word	0x03080d12
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    8020:	4b27      	ldr	r3, [pc, #156]	; (80c0 <Sd2Card::init(unsigned char, unsigned char)+0x438>)
    8022:	f8c9 3000 	str.w	r3, [r9]
    8026:	2401      	movs	r4, #1
    8028:	e723      	b.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    802a:	4b26      	ldr	r3, [pc, #152]	; (80c4 <Sd2Card::init(unsigned char, unsigned char)+0x43c>)
    802c:	f8c9 3000 	str.w	r3, [r9]
    8030:	2401      	movs	r4, #1
    8032:	e71e      	b.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
#else // USE_SPI_LIB
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    8034:	4b24      	ldr	r3, [pc, #144]	; (80c8 <Sd2Card::init(unsigned char, unsigned char)+0x440>)
    8036:	f8c9 3000 	str.w	r3, [r9]
    803a:	2401      	movs	r4, #1
    803c:	e719      	b.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    803e:	4b23      	ldr	r3, [pc, #140]	; (80cc <Sd2Card::init(unsigned char, unsigned char)+0x444>)
    8040:	f8c9 3000 	str.w	r3, [r9]
    8044:	2401      	movs	r4, #1
    8046:	e714      	b.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    8048:	4b21      	ldr	r3, [pc, #132]	; (80d0 <Sd2Card::init(unsigned char, unsigned char)+0x448>)
    804a:	f8c9 3000 	str.w	r3, [r9]
    804e:	2401      	movs	r4, #1
    8050:	e70f      	b.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
#else // USE_SPI_LIB
  switch (sckRateID) {
    case 0:  settings = SPISettings(25000000, MSBFIRST, SPI_MODE0); break;
    8052:	4b20      	ldr	r3, [pc, #128]	; (80d4 <Sd2Card::init(unsigned char, unsigned char)+0x44c>)
    8054:	f8c9 3000 	str.w	r3, [r9]
    8058:	2401      	movs	r4, #1
    805a:	e70a      	b.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    805c:	683a      	ldr	r2, [r7, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    805e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data;
    8062:	21ff      	movs	r1, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8064:	62d0      	str	r0, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8066:	6351      	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8068:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    806a:	2900      	cmp	r1, #0
    806c:	dafc      	bge.n	8068 <Sd2Card::init(unsigned char, unsigned char)+0x3e0>
		return port().POPR;
    806e:	6b91      	ldr	r1, [r2, #56]	; 0x38
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    8070:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8074:	29c0      	cmp	r1, #192	; 0xc0
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    8076:	bf04      	itt	eq
    8078:	2103      	moveq	r1, #3
    807a:	f88b 100c 	strbeq.w	r1, [fp, #12]
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    807e:	2003      	movs	r0, #3
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8080:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
		port().PUSHR = data;
    8084:	24ff      	movs	r4, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8086:	62d5      	str	r5, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8088:	6354      	str	r4, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    808a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    808c:	2900      	cmp	r1, #0
    808e:	dafc      	bge.n	808a <Sd2Card::init(unsigned char, unsigned char)+0x402>
    8090:	3801      	subs	r0, #1
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    8092:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
		return port().POPR;
    8096:	6b91      	ldr	r1, [r2, #56]	; 0x38
    8098:	d1f5      	bne.n	8086 <Sd2Card::init(unsigned char, unsigned char)+0x3fe>
    809a:	e6bc      	b.n	7e16 <Sd2Card::init(unsigned char, unsigned char)+0x18e>
    case 1:  settings = SPISettings(4000000, MSBFIRST, SPI_MODE0); break;
    case 2:  settings = SPISettings(2000000, MSBFIRST, SPI_MODE0); break;
    case 3:  settings = SPISettings(1000000, MSBFIRST, SPI_MODE0); break;
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);
    809c:	4b0e      	ldr	r3, [pc, #56]	; (80d8 <Sd2Card::init(unsigned char, unsigned char)+0x450>)
    809e:	f8c9 3000 	str.w	r3, [r9]
    80a2:	2401      	movs	r4, #1
    80a4:	e6e5      	b.n	7e72 <Sd2Card::init(unsigned char, unsigned char)+0x1ea>
    80a6:	bf00      	nop
    80a8:	1fff6408 	.word	0x1fff6408
    80ac:	1fff4948 	.word	0x1fff4948
    80b0:	e000e100 	.word	0xe000e100
    80b4:	e000e104 	.word	0xe000e104
    80b8:	e000e108 	.word	0xe000e108
    80bc:	e000e10c 	.word	0xe000e10c
    80c0:	38006007 	.word	0x38006007
    80c4:	38005006 	.word	0x38005006
    80c8:	38004005 	.word	0x38004005
    80cc:	38003004 	.word	0x38003004
    80d0:	38002003 	.word	0x38002003
    80d4:	b8010000 	.word	0xb8010000
    80d8:	38007008 	.word	0x38007008

000080dc <Sd2Card::waitStartBlock()>:
  while (d < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    80dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    80de:	4926      	ldr	r1, [pc, #152]	; (8178 <Sd2Card::waitStartBlock()+0x9c>)
    80e0:	4c26      	ldr	r4, [pc, #152]	; (817c <Sd2Card::waitStartBlock()+0xa0>)
    80e2:	680b      	ldr	r3, [r1, #0]
    80e4:	6822      	ldr	r2, [r4, #0]
    80e6:	b083      	sub	sp, #12
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    80e8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    80ec:	9300      	str	r3, [sp, #0]
	return ret;
    80ee:	9f00      	ldr	r7, [sp, #0]
		port().PUSHR = data;
    80f0:	25ff      	movs	r5, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    80f2:	62d6      	str	r6, [r2, #44]	; 0x2c
		port().PUSHR = data;
    80f4:	6355      	str	r5, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    80f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    80f8:	2b00      	cmp	r3, #0
    80fa:	dafc      	bge.n	80f6 <Sd2Card::waitStartBlock()+0x1a>
		return port().POPR;
    80fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
    80fe:	b2db      	uxtb	r3, r3
  unsigned int t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    8100:	2bff      	cmp	r3, #255	; 0xff
    8102:	72c3      	strb	r3, [r0, #11]
    8104:	d12b      	bne.n	815e <Sd2Card::waitStartBlock()+0x82>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8106:	680b      	ldr	r3, [r1, #0]
    8108:	9301      	str	r3, [sp, #4]
	return ret;
    810a:	9b01      	ldr	r3, [sp, #4]
    unsigned int d = millis() - t0;
    if (d > SD_READ_TIMEOUT) {
    810c:	1bdb      	subs	r3, r3, r7
    810e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8112:	d9ee      	bls.n	80f2 <Sd2Card::waitStartBlock()+0x16>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    8114:	230f      	movs	r3, #15
    8116:	7143      	strb	r3, [r0, #5]
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    8118:	7900      	ldrb	r0, [r0, #4]
    811a:	2101      	movs	r1, #1
    811c:	f006 fefe 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    8120:	4b17      	ldr	r3, [pc, #92]	; (8180 <Sd2Card::waitStartBlock()+0xa4>)
    8122:	781a      	ldrb	r2, [r3, #0]
    8124:	b1c2      	cbz	r2, 8158 <Sd2Card::waitStartBlock()+0x7c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8126:	7ae2      	ldrb	r2, [r4, #11]
    8128:	4d14      	ldr	r5, [pc, #80]	; (817c <Sd2Card::waitStartBlock()+0xa0>)
    chip_select_asserted = 0;
    812a:	2000      	movs	r0, #0
    812c:	4611      	mov	r1, r2
    812e:	7018      	strb	r0, [r3, #0]
    8130:	b192      	cbz	r2, 8158 <Sd2Card::waitStartBlock()+0x7c>
			if (interruptMasksUsed & 0x01) {
    8132:	07d6      	lsls	r6, r2, #31
    8134:	d503      	bpl.n	813e <Sd2Card::waitStartBlock()+0x62>
				NVIC_ISER0 = interruptSave[0];
    8136:	4b13      	ldr	r3, [pc, #76]	; (8184 <Sd2Card::waitStartBlock()+0xa8>)
    8138:	69e9      	ldr	r1, [r5, #28]
    813a:	6019      	str	r1, [r3, #0]
    813c:	4611      	mov	r1, r2
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    813e:	0790      	lsls	r0, r2, #30
    8140:	d503      	bpl.n	814a <Sd2Card::waitStartBlock()+0x6e>
				NVIC_ISER1 = interruptSave[1];
    8142:	4b11      	ldr	r3, [pc, #68]	; (8188 <Sd2Card::waitStartBlock()+0xac>)
    8144:	6a22      	ldr	r2, [r4, #32]
    8146:	7ae1      	ldrb	r1, [r4, #11]
    8148:	601a      	str	r2, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    814a:	074a      	lsls	r2, r1, #29
    814c:	d40c      	bmi.n	8168 <Sd2Card::waitStartBlock()+0x8c>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    814e:	070b      	lsls	r3, r1, #28
    8150:	d502      	bpl.n	8158 <Sd2Card::waitStartBlock()+0x7c>
				NVIC_ISER3 = interruptSave[3];
    8152:	4b0e      	ldr	r3, [pc, #56]	; (818c <Sd2Card::waitStartBlock()+0xb0>)
    8154:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    8156:	601a      	str	r2, [r3, #0]
  }
  return true;

 fail:
  chipSelectHigh();
  return false;
    8158:	2000      	movs	r0, #0
}
    815a:	b003      	add	sp, #12
    815c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (d > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    815e:	2bfe      	cmp	r3, #254	; 0xfe
    8160:	d007      	beq.n	8172 <Sd2Card::waitStartBlock()+0x96>
    8162:	230d      	movs	r3, #13
    8164:	7143      	strb	r3, [r0, #5]
    8166:	e7d7      	b.n	8118 <Sd2Card::waitStartBlock()+0x3c>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    8168:	4b09      	ldr	r3, [pc, #36]	; (8190 <Sd2Card::waitStartBlock()+0xb4>)
    816a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    816c:	7ae1      	ldrb	r1, [r4, #11]
    816e:	601a      	str	r2, [r3, #0]
    8170:	e7ed      	b.n	814e <Sd2Card::waitStartBlock()+0x72>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
    8172:	2001      	movs	r0, #1

 fail:
  chipSelectHigh();
  return false;
}
    8174:	b003      	add	sp, #12
    8176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8178:	1fff6804 	.word	0x1fff6804
    817c:	1fff4948 	.word	0x1fff4948
    8180:	1fff6408 	.word	0x1fff6408
    8184:	e000e100 	.word	0xe000e100
    8188:	e000e104 	.word	0xe000e104
    818c:	e000e10c 	.word	0xe000e10c
    8190:	e000e108 	.word	0xe000e108

00008194 <Sd2Card::readBlock(unsigned long, unsigned char*)>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    8194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    8196:	7983      	ldrb	r3, [r0, #6]
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    8198:	4604      	mov	r4, r0
    819a:	4615      	mov	r5, r2
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    819c:	b113      	cbz	r3, 81a4 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x10>
    819e:	6803      	ldr	r3, [r0, #0]
    81a0:	4299      	cmp	r1, r3
    81a2:	d05b      	beq.n	825c <Sd2Card::readBlock(unsigned long, unsigned char*)+0xc8>
    block_ = block;
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    81a4:	7b23      	ldrb	r3, [r4, #12]
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    block_ = block;
    81a6:	6021      	str	r1, [r4, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    81a8:	2b03      	cmp	r3, #3
    81aa:	bf18      	it	ne
    81ac:	0249      	lslne	r1, r1, #9
    if (cardCommand(CMD17, block)) {
    81ae:	460a      	mov	r2, r1
    81b0:	4620      	mov	r0, r4
    81b2:	2111      	movs	r1, #17
    81b4:	f7ff fca6 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    81b8:	4606      	mov	r6, r0
    81ba:	b338      	cbz	r0, 820c <Sd2Card::readBlock(unsigned long, unsigned char*)+0x78>
    81bc:	2303      	movs	r3, #3
    81be:	7163      	strb	r3, [r4, #5]
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    81c0:	7920      	ldrb	r0, [r4, #4]
    81c2:	2101      	movs	r1, #1
    81c4:	f006 feaa 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    81c8:	4a29      	ldr	r2, [pc, #164]	; (8270 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xdc>)
    81ca:	7813      	ldrb	r3, [r2, #0]
    81cc:	b1e3      	cbz	r3, 8208 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x74>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    81ce:	4829      	ldr	r0, [pc, #164]	; (8274 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xe0>)
    81d0:	7ac3      	ldrb	r3, [r0, #11]
    chip_select_asserted = 0;
    81d2:	2400      	movs	r4, #0
    81d4:	4619      	mov	r1, r3
    81d6:	7014      	strb	r4, [r2, #0]
    81d8:	b1b3      	cbz	r3, 8208 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x74>
			if (interruptMasksUsed & 0x01) {
    81da:	07dd      	lsls	r5, r3, #31
    81dc:	d503      	bpl.n	81e6 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x52>
				NVIC_ISER0 = interruptSave[0];
    81de:	4a26      	ldr	r2, [pc, #152]	; (8278 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xe4>)
    81e0:	69c1      	ldr	r1, [r0, #28]
    81e2:	6011      	str	r1, [r2, #0]
    81e4:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    81e6:	079c      	lsls	r4, r3, #30
    81e8:	d503      	bpl.n	81f2 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x5e>
				NVIC_ISER1 = interruptSave[1];
    81ea:	4b24      	ldr	r3, [pc, #144]	; (827c <Sd2Card::readBlock(unsigned long, unsigned char*)+0xe8>)
    81ec:	6a02      	ldr	r2, [r0, #32]
    81ee:	601a      	str	r2, [r3, #0]
    81f0:	7ac1      	ldrb	r1, [r0, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    81f2:	074a      	lsls	r2, r1, #29
    81f4:	d503      	bpl.n	81fe <Sd2Card::readBlock(unsigned long, unsigned char*)+0x6a>
				NVIC_ISER2 = interruptSave[2];
    81f6:	4b22      	ldr	r3, [pc, #136]	; (8280 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xec>)
    81f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
    81fa:	601a      	str	r2, [r3, #0]
    81fc:	7ac1      	ldrb	r1, [r0, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    81fe:	070b      	lsls	r3, r1, #28
    8200:	d502      	bpl.n	8208 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x74>
				NVIC_ISER3 = interruptSave[3];
    8202:	4b20      	ldr	r3, [pc, #128]	; (8284 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xf0>)
    8204:	6a82      	ldr	r2, [r0, #40]	; 0x28
    8206:	601a      	str	r2, [r3, #0]
  }
  return true;

 fail:
  chipSelectHigh();
  return false;
    8208:	2000      	movs	r0, #0
    820a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    if (cardCommand(CMD17, block)) {
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    820c:	4620      	mov	r0, r4
    820e:	f7ff ff65 	bl	80dc <Sd2Card::waitStartBlock()>
    8212:	2800      	cmp	r0, #0
    8214:	d0d4      	beq.n	81c0 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x2c>
      goto fail;
    }
    offset_ = 0;
    inBlock_ = 1;
    8216:	2301      	movs	r3, #1
      goto fail;
    }
    if (!waitStartBlock()) {
      goto fail;
    }
    offset_ = 0;
    8218:	8126      	strh	r6, [r4, #8]
    inBlock_ = 1;
    821a:	71a3      	strb	r3, [r4, #6]
    821c:	4815      	ldr	r0, [pc, #84]	; (8274 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xe0>)
    821e:	1e69      	subs	r1, r5, #1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8220:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    8224:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
		port().PUSHR = data;
    8228:	26ff      	movs	r6, #255	; 0xff
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    822a:	6802      	ldr	r2, [r0, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    822c:	62d7      	str	r7, [r2, #44]	; 0x2c
		port().PUSHR = data;
    822e:	6356      	str	r6, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8230:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8232:	2b00      	cmp	r3, #0
    8234:	dafc      	bge.n	8230 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x9c>
		return port().POPR;
    8236:	6b93      	ldr	r3, [r2, #56]	; 0x38
  for (;offset_ < offset; offset_++) {
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
    8238:	f801 3f01 	strb.w	r3, [r1, #1]!
  // skip data before offset
  for (;offset_ < offset; offset_++) {
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    823c:	42a9      	cmp	r1, r5
    823e:	d1f4      	bne.n	822a <Sd2Card::readBlock(unsigned long, unsigned char*)+0x96>
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    8240:	8923      	ldrh	r3, [r4, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    8242:	7aa2      	ldrb	r2, [r4, #10]
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    8244:	f503 7300 	add.w	r3, r3, #512	; 0x200
    8248:	b29b      	uxth	r3, r3
    824a:	8123      	strh	r3, [r4, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    824c:	b112      	cbz	r2, 8254 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xc0>
    824e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8252:	d301      	bcc.n	8258 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xc4>
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
  if (inBlock_) {
    8254:	79a3      	ldrb	r3, [r4, #6]
    8256:	b92b      	cbnz	r3, 8264 <Sd2Card::readBlock(unsigned long, unsigned char*)+0xd0>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    8258:	2001      	movs	r0, #1
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
  return readData(block, 0, 512, dst);
}
    825a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    825c:	8903      	ldrh	r3, [r0, #8]
    825e:	2b00      	cmp	r3, #0
    8260:	d0dc      	beq.n	821c <Sd2Card::readBlock(unsigned long, unsigned char*)+0x88>
    8262:	e79f      	b.n	81a4 <Sd2Card::readBlock(unsigned long, unsigned char*)+0x10>
    8264:	4620      	mov	r0, r4
    8266:	f7ff fbfb 	bl	7a60 <Sd2Card::readEnd() [clone .part.6]>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    826a:	2001      	movs	r0, #1
    826c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    826e:	bf00      	nop
    8270:	1fff6408 	.word	0x1fff6408
    8274:	1fff4948 	.word	0x1fff4948
    8278:	e000e100 	.word	0xe000e100
    827c:	e000e104 	.word	0xe000e104
    8280:	e000e108 	.word	0xe000e108
    8284:	e000e10c 	.word	0xe000e10c

00008288 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
    8288:	2b00      	cmp	r3, #0
    828a:	d041      	beq.n	8310 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x88>
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    828e:	461e      	mov	r6, r3
  if (count == 0) return true;
  if ((count + offset) > 512) {
    8290:	4413      	add	r3, r2
    8292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8296:	4605      	mov	r5, r0
    8298:	4617      	mov	r7, r2
    829a:	dc13      	bgt.n	82c4 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x3c>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    829c:	7983      	ldrb	r3, [r0, #6]
    829e:	b113      	cbz	r3, 82a6 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x1e>
    82a0:	6803      	ldr	r3, [r0, #0]
    82a2:	4299      	cmp	r1, r3
    82a4:	d036      	beq.n	8314 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x8c>
    block_ = block;
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    82a6:	7b2b      	ldrb	r3, [r5, #12]
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    block_ = block;
    82a8:	6029      	str	r1, [r5, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    82aa:	2b03      	cmp	r3, #3
    82ac:	bf18      	it	ne
    82ae:	0249      	lslne	r1, r1, #9
    if (cardCommand(CMD17, block)) {
    82b0:	460a      	mov	r2, r1
    82b2:	4628      	mov	r0, r5
    82b4:	2111      	movs	r1, #17
    82b6:	f7ff fc25 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    82ba:	4604      	mov	r4, r0
    82bc:	2800      	cmp	r0, #0
    82be:	d054      	beq.n	836a <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0xe2>
    82c0:	2303      	movs	r3, #3
    82c2:	716b      	strb	r3, [r5, #5]
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    82c4:	2101      	movs	r1, #1
    82c6:	7928      	ldrb	r0, [r5, #4]
    82c8:	f006 fe28 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    82cc:	4935      	ldr	r1, [pc, #212]	; (83a4 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x11c>)
    82ce:	780b      	ldrb	r3, [r1, #0]
    82d0:	b1e3      	cbz	r3, 830c <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x84>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    82d2:	4b35      	ldr	r3, [pc, #212]	; (83a8 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x120>)
    82d4:	7ada      	ldrb	r2, [r3, #11]
    chip_select_asserted = 0;
    82d6:	2400      	movs	r4, #0
    82d8:	4610      	mov	r0, r2
    82da:	700c      	strb	r4, [r1, #0]
    82dc:	b1b2      	cbz	r2, 830c <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x84>
			if (interruptMasksUsed & 0x01) {
    82de:	07d5      	lsls	r5, r2, #31
    82e0:	d503      	bpl.n	82ea <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x62>
				NVIC_ISER0 = interruptSave[0];
    82e2:	4932      	ldr	r1, [pc, #200]	; (83ac <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x124>)
    82e4:	69d8      	ldr	r0, [r3, #28]
    82e6:	6008      	str	r0, [r1, #0]
    82e8:	4610      	mov	r0, r2
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    82ea:	0794      	lsls	r4, r2, #30
    82ec:	d503      	bpl.n	82f6 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x6e>
				NVIC_ISER1 = interruptSave[1];
    82ee:	4a30      	ldr	r2, [pc, #192]	; (83b0 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x128>)
    82f0:	6a19      	ldr	r1, [r3, #32]
    82f2:	6011      	str	r1, [r2, #0]
    82f4:	7ad8      	ldrb	r0, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    82f6:	0741      	lsls	r1, r0, #29
    82f8:	d503      	bpl.n	8302 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x7a>
				NVIC_ISER2 = interruptSave[2];
    82fa:	4a2e      	ldr	r2, [pc, #184]	; (83b4 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x12c>)
    82fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
    82fe:	6011      	str	r1, [r2, #0]
    8300:	7ad8      	ldrb	r0, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8302:	0702      	lsls	r2, r0, #28
    8304:	d502      	bpl.n	830c <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x84>
				NVIC_ISER3 = interruptSave[3];
    8306:	4a2c      	ldr	r2, [pc, #176]	; (83b8 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x130>)
    8308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    830a:	6013      	str	r3, [r2, #0]
  }
  return true;

 fail:
  chipSelectHigh();
  return false;
    830c:	2000      	movs	r0, #0
    830e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
    8310:	2001      	movs	r0, #1
  return true;

 fail:
  chipSelectHigh();
  return false;
}
    8312:	4770      	bx	lr
        uint16_t offset, uint16_t count, uint8_t* dst) {
  if (count == 0) return true;
  if ((count + offset) > 512) {
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    8314:	8900      	ldrh	r0, [r0, #8]
    8316:	4282      	cmp	r2, r0
    8318:	d3c5      	bcc.n	82a6 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x1e>
    831a:	4b23      	ldr	r3, [pc, #140]	; (83a8 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x120>)
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    831c:	4287      	cmp	r7, r0
    831e:	681a      	ldr	r2, [r3, #0]
    8320:	d90e      	bls.n	8340 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0xb8>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8322:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
		port().PUSHR = data;
    8326:	24ff      	movs	r4, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8328:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
		port().PUSHR = data;
    832c:	6354      	str	r4, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    832e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8330:	2900      	cmp	r1, #0
    8332:	dafc      	bge.n	832e <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0xa6>
    8334:	3001      	adds	r0, #1
    8336:	b280      	uxth	r0, r0
    8338:	4287      	cmp	r7, r0
		return port().POPR;
    833a:	6b91      	ldr	r1, [r2, #56]	; 0x38
    833c:	d1f4      	bne.n	8328 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0xa0>
    833e:	812f      	strh	r7, [r5, #8]
    8340:	9906      	ldr	r1, [sp, #24]
    8342:	1e74      	subs	r4, r6, #1
    8344:	fa11 f484 	uxtah	r4, r1, r4
    8348:	1e48      	subs	r0, r1, #1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    834a:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
		port().PUSHR = data;
    834e:	27ff      	movs	r7, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8350:	f8c2 e02c 	str.w	lr, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8354:	6357      	str	r7, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8356:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    8358:	2900      	cmp	r1, #0
    835a:	dafc      	bge.n	8356 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0xce>
		return port().POPR;
    835c:	6b92      	ldr	r2, [r2, #56]	; 0x38
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
    835e:	f800 2f01 	strb.w	r2, [r0, #1]!
  // skip data before offset
  for (;offset_ < offset; offset_++) {
    spiRec();
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
    8362:	42a0      	cmp	r0, r4
    8364:	d00b      	beq.n	837e <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0xf6>
    8366:	681a      	ldr	r2, [r3, #0]
    8368:	e7f2      	b.n	8350 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0xc8>
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    if (cardCommand(CMD17, block)) {
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    836a:	4628      	mov	r0, r5
    836c:	f7ff feb6 	bl	80dc <Sd2Card::waitStartBlock()>
    8370:	2800      	cmp	r0, #0
    8372:	d0a7      	beq.n	82c4 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x3c>
      goto fail;
    }
    offset_ = 0;
    inBlock_ = 1;
    8374:	2301      	movs	r3, #1
      goto fail;
    }
    if (!waitStartBlock()) {
      goto fail;
    }
    offset_ = 0;
    8376:	812c      	strh	r4, [r5, #8]
    inBlock_ = 1;
    8378:	4620      	mov	r0, r4
    837a:	71ab      	strb	r3, [r5, #6]
    837c:	e7cd      	b.n	831a <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x92>
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    837e:	892b      	ldrh	r3, [r5, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    8380:	7aaa      	ldrb	r2, [r5, #10]
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    8382:	4433      	add	r3, r6
    8384:	b29b      	uxth	r3, r3
    8386:	812b      	strh	r3, [r5, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
    8388:	b91a      	cbnz	r2, 8392 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x10a>
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
  if (inBlock_) {
    838a:	79ab      	ldrb	r3, [r5, #6]
    838c:	b92b      	cbnz	r3, 839a <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x112>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    838e:	2001      	movs	r0, #1
    8390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    8392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    8396:	d2f8      	bcs.n	838a <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x102>
    8398:	e7f9      	b.n	838e <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x106>
    839a:	4628      	mov	r0, r5
    839c:	f7ff fb60 	bl	7a60 <Sd2Card::readEnd() [clone .part.6]>
    83a0:	e7f5      	b.n	838e <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)+0x106>
    83a2:	bf00      	nop
    83a4:	1fff6408 	.word	0x1fff6408
    83a8:	1fff4948 	.word	0x1fff4948
    83ac:	e000e100 	.word	0xe000e100
    83b0:	e000e104 	.word	0xe000e104
    83b4:	e000e108 	.word	0xe000e108
    83b8:	e000e10c 	.word	0xe000e10c

000083bc <Sd2Card::writeData(unsigned char, unsigned char const*)>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    83bc:	b570      	push	{r4, r5, r6, lr}
    83be:	4e32      	ldr	r6, [pc, #200]	; (8488 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xcc>)
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    83c0:	6834      	ldr	r4, [r6, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    83c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    83c6:	62e3      	str	r3, [r4, #44]	; 0x2c
		port().PUSHR = data;
    83c8:	6361      	str	r1, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    83ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    83cc:	2b00      	cmp	r3, #0
    83ce:	dafc      	bge.n	83ca <Sd2Card::writeData(unsigned char, unsigned char const*)+0xe>
		return port().POPR;
    83d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    83d2:	1e51      	subs	r1, r2, #1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    83d4:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
    83d8:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
    83dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    83e0:	62e5      	str	r5, [r4, #44]	; 0x2c
		port().PUSHR = data;
    83e2:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    83e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    83e6:	2b00      	cmp	r3, #0
    83e8:	dafc      	bge.n	83e4 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x28>
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    83ea:	4291      	cmp	r1, r2
		return port().POPR;
    83ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    83ee:	d1f5      	bne.n	83dc <Sd2Card::writeData(unsigned char, unsigned char const*)+0x20>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    83f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    83f4:	23ff      	movs	r3, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    83f6:	62e2      	str	r2, [r4, #44]	; 0x2c
		port().PUSHR = data;
    83f8:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    83fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    83fc:	2b00      	cmp	r3, #0
    83fe:	dafc      	bge.n	83fa <Sd2Card::writeData(unsigned char, unsigned char const*)+0x3e>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8400:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    8404:	23ff      	movs	r3, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    8406:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8408:	62e2      	str	r2, [r4, #44]	; 0x2c
		port().PUSHR = data;
    840a:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    840c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    840e:	2b00      	cmp	r3, #0
    8410:	dafc      	bge.n	840c <Sd2Card::writeData(unsigned char, unsigned char const*)+0x50>
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		port().PUSHR = data;
    8416:	23ff      	movs	r3, #255	; 0xff
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    8418:	6ba1      	ldr	r1, [r4, #56]	; 0x38
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    841a:	62e2      	str	r2, [r4, #44]	; 0x2c
		port().PUSHR = data;
    841c:	6363      	str	r3, [r4, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    841e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8420:	2b00      	cmp	r3, #0
    8422:	dafc      	bge.n	841e <Sd2Card::writeData(unsigned char, unsigned char const*)+0x62>
		return port().POPR;
    8424:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8426:	b2db      	uxtb	r3, r3
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8428:	f003 021f 	and.w	r2, r3, #31
    842c:	2a05      	cmp	r2, #5
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
  spiSend(0xff);  // dummy crc

  status_ = spiRec();
    842e:	72c3      	strb	r3, [r0, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8430:	d027      	beq.n	8482 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc6>
    8432:	2311      	movs	r3, #17
    8434:	7143      	strb	r3, [r0, #5]
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    8436:	2101      	movs	r1, #1
    8438:	7900      	ldrb	r0, [r0, #4]
    843a:	f006 fd6f 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    843e:	4913      	ldr	r1, [pc, #76]	; (848c <Sd2Card::writeData(unsigned char, unsigned char const*)+0xd0>)
    8440:	780b      	ldrb	r3, [r1, #0]
    8442:	b1e3      	cbz	r3, 847e <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc2>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8444:	7af2      	ldrb	r2, [r6, #11]
    8446:	4810      	ldr	r0, [pc, #64]	; (8488 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xcc>)
    chip_select_asserted = 0;
    8448:	2400      	movs	r4, #0
    844a:	4613      	mov	r3, r2
    844c:	700c      	strb	r4, [r1, #0]
    844e:	b1b2      	cbz	r2, 847e <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc2>
			if (interruptMasksUsed & 0x01) {
    8450:	07d4      	lsls	r4, r2, #31
    8452:	d503      	bpl.n	845c <Sd2Card::writeData(unsigned char, unsigned char const*)+0xa0>
				NVIC_ISER0 = interruptSave[0];
    8454:	4b0e      	ldr	r3, [pc, #56]	; (8490 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xd4>)
    8456:	69c1      	ldr	r1, [r0, #28]
    8458:	6019      	str	r1, [r3, #0]
    845a:	4613      	mov	r3, r2
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    845c:	0791      	lsls	r1, r2, #30
    845e:	d503      	bpl.n	8468 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xac>
				NVIC_ISER1 = interruptSave[1];
    8460:	4a0c      	ldr	r2, [pc, #48]	; (8494 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xd8>)
    8462:	6a31      	ldr	r1, [r6, #32]
    8464:	7af3      	ldrb	r3, [r6, #11]
    8466:	6011      	str	r1, [r2, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    8468:	075a      	lsls	r2, r3, #29
    846a:	d503      	bpl.n	8474 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xb8>
				NVIC_ISER2 = interruptSave[2];
    846c:	4a0a      	ldr	r2, [pc, #40]	; (8498 <Sd2Card::writeData(unsigned char, unsigned char const*)+0xdc>)
    846e:	6a71      	ldr	r1, [r6, #36]	; 0x24
    8470:	7af3      	ldrb	r3, [r6, #11]
    8472:	6011      	str	r1, [r2, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    8474:	071b      	lsls	r3, r3, #28
    8476:	d502      	bpl.n	847e <Sd2Card::writeData(unsigned char, unsigned char const*)+0xc2>
				NVIC_ISER3 = interruptSave[3];
    8478:	4b08      	ldr	r3, [pc, #32]	; (849c <Sd2Card::writeData(unsigned char, unsigned char const*)+0xe0>)
    847a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    847c:	601a      	str	r2, [r3, #0]

  status_ = spiRec();
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    return false;
    847e:	2000      	movs	r0, #0
    8480:	bd70      	pop	{r4, r5, r6, pc}
  }
  return true;
    8482:	2001      	movs	r0, #1
}
    8484:	bd70      	pop	{r4, r5, r6, pc}
    8486:	bf00      	nop
    8488:	1fff4948 	.word	0x1fff4948
    848c:	1fff6408 	.word	0x1fff6408
    8490:	e000e100 	.word	0xe000e100
    8494:	e000e104 	.word	0xe000e104
    8498:	e000e108 	.word	0xe000e108
    849c:	e000e10c 	.word	0xe000e10c

000084a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    84a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    84a2:	4604      	mov	r4, r0
    84a4:	b083      	sub	sp, #12
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    84a6:	bb21      	cbnz	r1, 84f2 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x52>
    84a8:	2312      	movs	r3, #18
    84aa:	7143      	strb	r3, [r0, #5]
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    84ac:	7920      	ldrb	r0, [r4, #4]
    84ae:	2101      	movs	r1, #1
    84b0:	f006 fd34 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    84b4:	4a48      	ldr	r2, [pc, #288]	; (85d8 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x138>)
    84b6:	7813      	ldrb	r3, [r2, #0]
    84b8:	b1c3      	cbz	r3, 84ec <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x4c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    84ba:	4e48      	ldr	r6, [pc, #288]	; (85dc <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x13c>)
    84bc:	7af3      	ldrb	r3, [r6, #11]
    chip_select_asserted = 0;
    84be:	2000      	movs	r0, #0
    84c0:	4619      	mov	r1, r3
    84c2:	7010      	strb	r0, [r2, #0]
    84c4:	b193      	cbz	r3, 84ec <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x4c>
			if (interruptMasksUsed & 0x01) {
    84c6:	07dc      	lsls	r4, r3, #31
    84c8:	d503      	bpl.n	84d2 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x32>
				NVIC_ISER0 = interruptSave[0];
    84ca:	4a45      	ldr	r2, [pc, #276]	; (85e0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x140>)
    84cc:	69f1      	ldr	r1, [r6, #28]
    84ce:	6011      	str	r1, [r2, #0]
    84d0:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    84d2:	0798      	lsls	r0, r3, #30
    84d4:	d503      	bpl.n	84de <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x3e>
				NVIC_ISER1 = interruptSave[1];
    84d6:	4b43      	ldr	r3, [pc, #268]	; (85e4 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x144>)
    84d8:	6a32      	ldr	r2, [r6, #32]
    84da:	601a      	str	r2, [r3, #0]
    84dc:	7af1      	ldrb	r1, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    84de:	074a      	lsls	r2, r1, #29
    84e0:	d414      	bmi.n	850c <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x6c>
				NVIC_ISER2 = interruptSave[2];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    84e2:	070b      	lsls	r3, r1, #28
    84e4:	d502      	bpl.n	84ec <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x4c>
				NVIC_ISER3 = interruptSave[3];
    84e6:	4b40      	ldr	r3, [pc, #256]	; (85e8 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x148>)
    84e8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    84ea:	601a      	str	r2, [r3, #0]
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
  return false;
    84ec:	2000      	movs	r0, #0
}
    84ee:	b003      	add	sp, #12
    84f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    84f2:	7b03      	ldrb	r3, [r0, #12]
    84f4:	2b03      	cmp	r3, #3
    84f6:	bf18      	it	ne
    84f8:	0249      	lslne	r1, r1, #9
    84fa:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
    84fc:	460a      	mov	r2, r1
    84fe:	2118      	movs	r1, #24
    8500:	f7ff fb00 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    8504:	b138      	cbz	r0, 8516 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x76>
    8506:	2304      	movs	r3, #4
    8508:	7163      	strb	r3, [r4, #5]
    850a:	e7cf      	b.n	84ac <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0xc>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				NVIC_ISER2 = interruptSave[2];
    850c:	4b37      	ldr	r3, [pc, #220]	; (85ec <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x14c>)
    850e:	6a72      	ldr	r2, [r6, #36]	; 0x24
    8510:	601a      	str	r2, [r3, #0]
    8512:	7af1      	ldrb	r1, [r6, #11]
    8514:	e7e5      	b.n	84e2 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x42>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    8516:	462a      	mov	r2, r5
    8518:	21fe      	movs	r1, #254	; 0xfe
    851a:	4620      	mov	r0, r4
    851c:	f7ff ff4e 	bl	83bc <Sd2Card::writeData(unsigned char, unsigned char const*)>
    8520:	2800      	cmp	r0, #0
    8522:	d0c3      	beq.n	84ac <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0xc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8524:	4932      	ldr	r1, [pc, #200]	; (85f0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x150>)
    8526:	4e2d      	ldr	r6, [pc, #180]	; (85dc <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x13c>)
    8528:	680b      	ldr	r3, [r1, #0]
    852a:	9301      	str	r3, [sp, #4]
	return ret;
    852c:	f8dd e004 	ldr.w	lr, [sp, #4]
    8530:	6832      	ldr	r2, [r6, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8532:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
		port().PUSHR = data;
    8536:	20ff      	movs	r0, #255	; 0xff
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8538:	62d7      	str	r7, [r2, #44]	; 0x2c
		port().PUSHR = data;
    853a:	6350      	str	r0, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    853c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    853e:	2b00      	cmp	r3, #0
    8540:	dafc      	bge.n	853c <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x9c>
		return port().POPR;
    8542:	6b95      	ldr	r5, [r2, #56]	; 0x38
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
  unsigned int t0 = millis();
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
    8544:	b2ed      	uxtb	r5, r5
    8546:	2dff      	cmp	r5, #255	; 0xff
    8548:	d00a      	beq.n	8560 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0xc0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    854a:	680b      	ldr	r3, [r1, #0]
    854c:	9300      	str	r3, [sp, #0]
	return ret;
    854e:	9b00      	ldr	r3, [sp, #0]
    d = millis() - t0;
  }
  while (d < timeoutMillis);
    8550:	ebce 0303 	rsb	r3, lr, r3
    8554:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    8558:	d3ee      	bcc.n	8538 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x98>
    855a:	2315      	movs	r3, #21
    855c:	7163      	strb	r3, [r4, #5]
    855e:	e7a5      	b.n	84ac <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0xc>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    8560:	2200      	movs	r2, #0
    8562:	210d      	movs	r1, #13
    8564:	4620      	mov	r0, r4
    8566:	f7ff facd 	bl	7b04 <Sd2Card::cardCommand(unsigned char, unsigned long)>
    856a:	2800      	cmp	r0, #0
    856c:	d130      	bne.n	85d0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x130>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    856e:	6832      	ldr	r2, [r6, #0]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    8570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    8574:	62d3      	str	r3, [r2, #44]	; 0x2c
		port().PUSHR = data;
    8576:	6355      	str	r5, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    8578:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    857a:	2b00      	cmp	r3, #0
    857c:	dafc      	bge.n	8578 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0xd8>
		return port().POPR;
    857e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8580:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    8584:	d124      	bne.n	85d0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x130>
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    8586:	7920      	ldrb	r0, [r4, #4]
    8588:	2101      	movs	r1, #1
    858a:	f006 fcc7 	bl	ef1c <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
    858e:	4b12      	ldr	r3, [pc, #72]	; (85d8 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x138>)
    8590:	781a      	ldrb	r2, [r3, #0]
    8592:	b1da      	cbz	r2, 85cc <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x12c>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8594:	7af2      	ldrb	r2, [r6, #11]
    chip_select_asserted = 0;
    8596:	701d      	strb	r5, [r3, #0]
    8598:	4910      	ldr	r1, [pc, #64]	; (85dc <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x13c>)
    859a:	4613      	mov	r3, r2
    859c:	b1b2      	cbz	r2, 85cc <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x12c>
			if (interruptMasksUsed & 0x01) {
    859e:	07d0      	lsls	r0, r2, #31
    85a0:	d503      	bpl.n	85aa <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x10a>
				NVIC_ISER0 = interruptSave[0];
    85a2:	4b0f      	ldr	r3, [pc, #60]	; (85e0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x140>)
    85a4:	69c9      	ldr	r1, [r1, #28]
    85a6:	6019      	str	r1, [r3, #0]
    85a8:	4613      	mov	r3, r2
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    85aa:	0792      	lsls	r2, r2, #30
    85ac:	d503      	bpl.n	85b6 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x116>
				NVIC_ISER1 = interruptSave[1];
    85ae:	4b0d      	ldr	r3, [pc, #52]	; (85e4 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x144>)
    85b0:	6a32      	ldr	r2, [r6, #32]
    85b2:	601a      	str	r2, [r3, #0]
    85b4:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    85b6:	075f      	lsls	r7, r3, #29
    85b8:	d503      	bpl.n	85c2 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x122>
				NVIC_ISER2 = interruptSave[2];
    85ba:	4b0c      	ldr	r3, [pc, #48]	; (85ec <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x14c>)
    85bc:	6a72      	ldr	r2, [r6, #36]	; 0x24
    85be:	601a      	str	r2, [r3, #0]
    85c0:	7af3      	ldrb	r3, [r6, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 96 && defined(NVIC_ISER3)
			if (interruptMasksUsed & 0x08) {
    85c2:	071d      	lsls	r5, r3, #28
    85c4:	d502      	bpl.n	85cc <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x12c>
				NVIC_ISER3 = interruptSave[3];
    85c6:	4b08      	ldr	r3, [pc, #32]	; (85e8 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x148>)
    85c8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    85ca:	601a      	str	r2, [r3, #0]
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
  return true;
    85cc:	2001      	movs	r0, #1
    85ce:	e78e      	b.n	84ee <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x4e>
    85d0:	2314      	movs	r3, #20
    85d2:	7163      	strb	r3, [r4, #5]
    85d4:	e76a      	b.n	84ac <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0xc>
    85d6:	bf00      	nop
    85d8:	1fff6408 	.word	0x1fff6408
    85dc:	1fff4948 	.word	0x1fff4948
    85e0:	e000e100 	.word	0xe000e100
    85e4:	e000e104 	.word	0xe000e104
    85e8:	e000e10c 	.word	0xe000e10c
    85ec:	e000e108 	.word	0xe000e108
    85f0:	1fff6804 	.word	0x1fff6804

000085f4 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    85f4:	4b01      	ldr	r3, [pc, #4]	; (85fc <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0x8>)
    85f6:	4a02      	ldr	r2, [pc, #8]	; (8600 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm+0xc>)
    85f8:	601a      	str	r2, [r3, #0]
    85fa:	4770      	bx	lr
    85fc:	1fff6404 	.word	0x1fff6404
    8600:	38002003 	.word	0x38002003

00008604 <SdFile::close()>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
    8604:	b538      	push	{r3, r4, r5, lr}
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    8606:	7983      	ldrb	r3, [r0, #6]
    8608:	b90b      	cbnz	r3, 860e <SdFile::close()+0xa>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    860a:	2000      	movs	r0, #0
  type_ = FAT_FILE_TYPE_CLOSED;
  return true;
}
    860c:	bd38      	pop	{r3, r4, r5, pc}
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    860e:	f990 3005 	ldrsb.w	r3, [r0, #5]
    8612:	2b00      	cmp	r3, #0
    8614:	4604      	mov	r4, r0
    8616:	db07      	blt.n	8628 <SdFile::close()+0x24>
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    8618:	f001 f818 	bl	964c <SdVolume::cacheFlush()>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include no file is open or an I/O error.
 */
uint8_t SdFile::close(void) {
  if (!sync())return false;
    861c:	2800      	cmp	r0, #0
    861e:	d0f4      	beq.n	860a <SdFile::close()+0x6>
  type_ = FAT_FILE_TYPE_CLOSED;
    8620:	2300      	movs	r3, #0
    8622:	71a3      	strb	r3, [r4, #6]
  return true;
    8624:	2001      	movs	r0, #1
    8626:	bd38      	pop	{r3, r4, r5, pc}
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8628:	2101      	movs	r1, #1
    862a:	6900      	ldr	r0, [r0, #16]
    862c:	f001 f838 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8630:	2800      	cmp	r0, #0
    8632:	d0ea      	beq.n	860a <SdFile::close()+0x6>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8634:	7d25      	ldrb	r5, [r4, #20]
    8636:	4b0e      	ldr	r3, [pc, #56]	; (8670 <SdFile::close()+0x6c>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    8638:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    863c:	d0e5      	beq.n	860a <SdFile::close()+0x6>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    863e:	79a3      	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8640:	4a0c      	ldr	r2, [pc, #48]	; (8674 <SdFile::close()+0x70>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8642:	2b01      	cmp	r3, #1
    8644:	bf9c      	itt	ls
    8646:	69a3      	ldrls	r3, [r4, #24]
    8648:	61eb      	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    864a:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    864c:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    864e:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    8650:	0c1b      	lsrs	r3, r3, #16
    8652:	82ab      	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8654:	b132      	cbz	r2, 8664 <SdFile::close()+0x60>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    8656:	f105 0116 	add.w	r1, r5, #22
    865a:	f105 0018 	add.w	r0, r5, #24
    865e:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    8660:	8b2b      	ldrh	r3, [r5, #24]
    8662:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    8664:	7963      	ldrb	r3, [r4, #5]
    8666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    866a:	7163      	strb	r3, [r4, #5]
    866c:	e7d4      	b.n	8618 <SdFile::close()+0x14>
    866e:	bf00      	nop
    8670:	1fff6418 	.word	0x1fff6418
    8674:	1fff640c 	.word	0x1fff640c

00008678 <SdFile::openCachedEntry(unsigned char, unsigned char)>:
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    8678:	b5f0      	push	{r4, r5, r6, r7, lr}
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
    867a:	4f41      	ldr	r7, [pc, #260]	; (8780 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x108>)
    867c:	eb07 1341 	add.w	r3, r7, r1, lsl #5
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
}
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
    8680:	b083      	sub	sp, #12
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    8682:	7add      	ldrb	r5, [r3, #11]
    8684:	f015 0f11 	tst.w	r5, #17
    8688:	d002      	beq.n	8690 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x18>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
    868a:	f012 0f42 	tst.w	r2, #66	; 0x42
    868e:	d12e      	bne.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>
    8690:	4615      	mov	r5, r2
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
  dirBlock_ = SdVolume::cacheBlockNumber_;
    8692:	4a3c      	ldr	r2, [pc, #240]	; (8784 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x10c>)
  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
    if (oflag & (O_WRITE | O_TRUNC)) return false;
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
    8694:	7501      	strb	r1, [r0, #20]
  dirBlock_ = SdVolume::cacheBlockNumber_;
    8696:	6812      	ldr	r2, [r2, #0]
    8698:	6102      	str	r2, [r0, #16]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
  firstCluster_ |= p->firstClusterLow;
    869a:	8b5a      	ldrh	r2, [r3, #26]
    869c:	8a99      	ldrh	r1, [r3, #20]
    869e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    86a2:	61c1      	str	r1, [r0, #28]
    86a4:	7ada      	ldrb	r2, [r3, #11]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    86a6:	f012 0218 	ands.w	r2, r2, #24
    86aa:	4604      	mov	r4, r0
    86ac:	d10d      	bne.n	86ca <SdFile::openCachedEntry(unsigned char, unsigned char)+0x52>
    fileSize_ = p->fileSize;
    86ae:	69d8      	ldr	r0, [r3, #28]
    86b0:	61a0      	str	r0, [r4, #24]
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    86b2:	f005 030f 	and.w	r3, r5, #15
  firstCluster_ |= p->firstClusterLow;

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
    86b6:	2601      	movs	r6, #1
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    86b8:	7163      	strb	r3, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    86ba:	066b      	lsls	r3, r5, #25
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    86bc:	60a2      	str	r2, [r4, #8]
  curPosition_ = 0;
    86be:	60e2      	str	r2, [r4, #12]
  firstCluster_ |= p->firstClusterLow;

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
    86c0:	71a6      	strb	r6, [r4, #6]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    86c2:	d417      	bmi.n	86f4 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x7c>
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
    86c4:	2001      	movs	r0, #1
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
  return true;
}
    86c6:	b003      	add	sp, #12
    86c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    86ca:	2a10      	cmp	r2, #16
    86cc:	d10f      	bne.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    86ce:	f100 0218 	add.w	r2, r0, #24
    86d2:	6a00      	ldr	r0, [r0, #32]
    86d4:	f001 f860 	bl	9798 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    86d8:	b148      	cbz	r0, 86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>
    type_ = FAT_FILE_TYPE_SUBDIR;
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    86da:	f005 020f 	and.w	r2, r5, #15

  // set to start of file
  curCluster_ = 0;
    86de:	2300      	movs	r3, #0
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    type_ = FAT_FILE_TYPE_SUBDIR;
    86e0:	2104      	movs	r1, #4
  } else {
    return false;
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
    86e2:	7162      	strb	r2, [r4, #5]
  // set to start of file
  curCluster_ = 0;
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    86e4:	066a      	lsls	r2, r5, #25
  if (DIR_IS_FILE(p)) {
    fileSize_ = p->fileSize;
    type_ = FAT_FILE_TYPE_NORMAL;
  } else if (DIR_IS_SUBDIR(p)) {
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
    type_ = FAT_FILE_TYPE_SUBDIR;
    86e6:	71a1      	strb	r1, [r4, #6]
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);

  // set to start of file
  curCluster_ = 0;
    86e8:	60a3      	str	r3, [r4, #8]
  curPosition_ = 0;
    86ea:	60e3      	str	r3, [r4, #12]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
    86ec:	d5ea      	bpl.n	86c4 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x4c>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    86ee:	2000      	movs	r0, #0
  curPosition_ = 0;

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
  return true;
}
    86f0:	b003      	add	sp, #12
    86f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    86f4:	07ab      	lsls	r3, r5, #30
    86f6:	d5fa      	bpl.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    86f8:	2800      	cmp	r0, #0
    86fa:	d0e3      	beq.n	86c4 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x4c>
  // position to last cluster in truncated file
  if (!seekSet(length)) return false;

  if (length == 0) {
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    86fc:	6a20      	ldr	r0, [r4, #32]
    86fe:	9201      	str	r2, [sp, #4]
    8700:	f001 f934 	bl	996c <SdVolume::freeChain(unsigned long)>
    8704:	2800      	cmp	r0, #0
    8706:	d0f2      	beq.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    8708:	7963      	ldrb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    870a:	79a1      	ldrb	r1, [r4, #6]
  if (!seekSet(length)) return false;

  if (length == 0) {
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
    870c:	9a01      	ldr	r2, [sp, #4]
    870e:	61e2      	str	r2, [r4, #28]
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    8710:	f063 037f 	orn	r3, r3, #127	; 0x7f

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    8714:	61a2      	str	r2, [r4, #24]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    8716:	7163      	strb	r3, [r4, #5]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    8718:	2900      	cmp	r1, #0
    871a:	d0e8      	beq.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    871c:	4631      	mov	r1, r6
    871e:	6920      	ldr	r0, [r4, #16]
    8720:	f000 ffbe 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8724:	2800      	cmp	r0, #0
    8726:	d0e2      	beq.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8728:	7d23      	ldrb	r3, [r4, #20]
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    872a:	eb17 1743 	adds.w	r7, r7, r3, lsl #5
    872e:	d0de      	beq.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8730:	79a3      	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8732:	4a15      	ldr	r2, [pc, #84]	; (8788 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x110>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8734:	2b01      	cmp	r3, #1
    8736:	bf9c      	itt	ls
    8738:	69a3      	ldrls	r3, [r4, #24]
    873a:	61fb      	strls	r3, [r7, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    873c:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    873e:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8740:	837b      	strh	r3, [r7, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    8742:	0c1b      	lsrs	r3, r3, #16
    8744:	82bb      	strh	r3, [r7, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8746:	b132      	cbz	r2, 8756 <SdFile::openCachedEntry(unsigned char, unsigned char)+0xde>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    8748:	f107 0116 	add.w	r1, r7, #22
    874c:	f107 0018 	add.w	r0, r7, #24
    8750:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    8752:	8b3b      	ldrh	r3, [r7, #24]
    8754:	827b      	strh	r3, [r7, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    8756:	7963      	ldrb	r3, [r4, #5]
    8758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    875c:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
    875e:	f000 ff75 	bl	964c <SdVolume::cacheFlush()>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    8762:	2800      	cmp	r0, #0
    8764:	d0c3      	beq.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>
    8766:	79a3      	ldrb	r3, [r4, #6]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    8768:	2b00      	cmp	r3, #0
    876a:	d0c0      	beq.n	86ee <SdFile::openCachedEntry(unsigned char, unsigned char)+0x76>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    876c:	2b02      	cmp	r3, #2
    876e:	d003      	beq.n	8778 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x100>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    8770:	2300      	movs	r3, #0
    8772:	60a3      	str	r3, [r4, #8]
    curPosition_ = 0;
    8774:	60e3      	str	r3, [r4, #12]
    8776:	e7a5      	b.n	86c4 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x4c>
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    8778:	2300      	movs	r3, #0
    877a:	60e3      	str	r3, [r4, #12]
    return true;
    877c:	2001      	movs	r0, #1
    877e:	e7b7      	b.n	86f0 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x78>
    8780:	1fff6418 	.word	0x1fff6418
    8784:	1fff4988 	.word	0x1fff4988
    8788:	1fff640c 	.word	0x1fff640c

0000878c <SdFile::openRoot(SdVolume*)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    878c:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) return false;
    878e:	7983      	ldrb	r3, [r0, #6]
    8790:	b93b      	cbnz	r3, 87a2 <SdFile::openRoot(SdVolume*)+0x16>
    8792:	f891 2020 	ldrb.w	r2, [r1, #32]

  if (vol->fatType() == 16) {
    8796:	2a10      	cmp	r2, #16
    8798:	460d      	mov	r5, r1
    879a:	4604      	mov	r4, r0
    879c:	d003      	beq.n	87a6 <SdFile::openRoot(SdVolume*)+0x1a>
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    879e:	2a20      	cmp	r2, #32
    87a0:	d010      	beq.n	87c4 <SdFile::openRoot(SdVolume*)+0x38>
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;
    87a2:	2000      	movs	r0, #0
    87a4:	bd38      	pop	{r3, r4, r5, pc}

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    87a6:	2202      	movs	r2, #2
    87a8:	7182      	strb	r2, [r0, #6]
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
    87aa:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    87ac:	61c3      	str	r3, [r0, #28]
    fileSize_ = 32 * vol->rootDirEntryCount();
    87ae:	0153      	lsls	r3, r2, #5
    87b0:	6183      	str	r3, [r0, #24]
  vol_ = vol;
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    87b2:	2300      	movs	r3, #0
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
  // read only
  flags_ = O_READ;
    87b4:	2001      	movs	r0, #1
    87b6:	7160      	strb	r0, [r4, #5]
  curCluster_ = 0;
  curPosition_ = 0;

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
    87b8:	7523      	strb	r3, [r4, #20]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    87ba:	6225      	str	r5, [r4, #32]
  // read only
  flags_ = O_READ;

  // set to start of file
  curCluster_ = 0;
    87bc:	60a3      	str	r3, [r4, #8]
  curPosition_ = 0;
    87be:	60e3      	str	r3, [r4, #12]

  // root has no directory entry
  dirBlock_ = 0;
    87c0:	6123      	str	r3, [r4, #16]
  dirIndex_ = 0;
  return true;
}
    87c2:	bd38      	pop	{r3, r4, r5, pc}
  if (vol->fatType() == 16) {
    type_ = FAT_FILE_TYPE_ROOT16;
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    87c4:	2303      	movs	r3, #3
    87c6:	7183      	strb	r3, [r0, #6]
    87c8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    firstCluster_ = vol->rootDirStart();
    87ca:	61c1      	str	r1, [r0, #28]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    87cc:	f100 0218 	add.w	r2, r0, #24
    87d0:	4628      	mov	r0, r5
    87d2:	f000 ffe1 	bl	9798 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    87d6:	2800      	cmp	r0, #0
    87d8:	d1eb      	bne.n	87b2 <SdFile::openRoot(SdVolume*)+0x26>
    87da:	e7e2      	b.n	87a2 <SdFile::openRoot(SdVolume*)+0x16>

000087dc <SdFile::read(void*, unsigned short)>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
    87dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    87e0:	460f      	mov	r7, r1
    87e2:	b085      	sub	sp, #20
    87e4:	7981      	ldrb	r1, [r0, #6]
    87e6:	9203      	str	r2, [sp, #12]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
    87e8:	b119      	cbz	r1, 87f2 <SdFile::read(void*, unsigned short)+0x16>
    87ea:	7943      	ldrb	r3, [r0, #5]
    87ec:	4606      	mov	r6, r0
    87ee:	07d8      	lsls	r0, r3, #31
    87f0:	d404      	bmi.n	87fc <SdFile::read(void*, unsigned short)+0x20>
    87f2:	f04f 30ff 	mov.w	r0, #4294967295
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
}
    87f6:	b005      	add	sp, #20
    87f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87fc:	4610      	mov	r0, r2

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
    87fe:	68f3      	ldr	r3, [r6, #12]
    8800:	69b2      	ldr	r2, [r6, #24]
    8802:	1ad2      	subs	r2, r2, r3
    8804:	4290      	cmp	r0, r2
    8806:	f240 80a9 	bls.w	895c <SdFile::read(void*, unsigned short)+0x180>
    880a:	b292      	uxth	r2, r2
    880c:	9203      	str	r2, [sp, #12]
    880e:	4615      	mov	r5, r2

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    8810:	2d00      	cmp	r5, #0
    8812:	f000 80c1 	beq.w	8998 <SdFile::read(void*, unsigned short)+0x1bc>
    8816:	460a      	mov	r2, r1
    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
      block != SdVolume::cacheBlockNumber_) {
    8818:	f8df b190 	ldr.w	fp, [pc, #400]	; 89ac <SdFile::read(void*, unsigned short)+0x1d0>
    881c:	e068      	b.n	88f0 <SdFile::read(void*, unsigned short)+0x114>

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    881e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    8822:	f000 8088 	beq.w	8936 <SdFile::read(void*, unsigned short)+0x15a>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
      dst += n;
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
    8826:	2100      	movs	r1, #0
    8828:	f000 ff3a 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    882c:	2800      	cmp	r0, #0
    882e:	d0e0      	beq.n	87f2 <SdFile::read(void*, unsigned short)+0x16>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
    8830:	4b5c      	ldr	r3, [pc, #368]	; (89a4 <SdFile::read(void*, unsigned short)+0x1c8>)
    8832:	eb08 0103 	add.w	r1, r8, r3
      uint8_t* end = src + n;
    8836:	1908      	adds	r0, r1, r4
      while (src != end) *dst++ = *src++;
    8838:	4281      	cmp	r1, r0
    883a:	d051      	beq.n	88e0 <SdFile::read(void*, unsigned short)+0x104>
    883c:	f108 0804 	add.w	r8, r8, #4
    8840:	4498      	add	r8, r3
    8842:	1d3b      	adds	r3, r7, #4
    8844:	4299      	cmp	r1, r3
    8846:	bf38      	it	cc
    8848:	4547      	cmpcc	r7, r8
    884a:	ea47 0e01 	orr.w	lr, r7, r1
    884e:	bf2c      	ite	cs
    8850:	2301      	movcs	r3, #1
    8852:	2300      	movcc	r3, #0
    8854:	1c4a      	adds	r2, r1, #1
    8856:	f01e 0f03 	tst.w	lr, #3
    885a:	f003 0301 	and.w	r3, r3, #1
    885e:	ebc2 0c00 	rsb	ip, r2, r0
    8862:	bf18      	it	ne
    8864:	2300      	movne	r3, #0
    8866:	f10c 0a01 	add.w	sl, ip, #1
    886a:	4696      	mov	lr, r2
    886c:	2b00      	cmp	r3, #0
    886e:	f000 8088 	beq.w	8982 <SdFile::read(void*, unsigned short)+0x1a6>
    8872:	f1ba 0f09 	cmp.w	sl, #9
    8876:	f240 8084 	bls.w	8982 <SdFile::read(void*, unsigned short)+0x1a6>
    887a:	f1ac 0303 	sub.w	r3, ip, #3
    887e:	089b      	lsrs	r3, r3, #2
    8880:	3301      	adds	r3, #1
    8882:	ea4f 0983 	mov.w	r9, r3, lsl #2
    8886:	f1a1 0804 	sub.w	r8, r1, #4
    888a:	46bc      	mov	ip, r7
    888c:	f04f 0e00 	mov.w	lr, #0
    8890:	9402      	str	r4, [sp, #8]
    8892:	f10e 0e01 	add.w	lr, lr, #1
    8896:	f858 4f04 	ldr.w	r4, [r8, #4]!
    889a:	f84c 4b04 	str.w	r4, [ip], #4
    889e:	4573      	cmp	r3, lr
    88a0:	d8f7      	bhi.n	8892 <SdFile::read(void*, unsigned short)+0xb6>
    88a2:	45d1      	cmp	r9, sl
    88a4:	9c02      	ldr	r4, [sp, #8]
    88a6:	eb07 0c09 	add.w	ip, r7, r9
    88aa:	eb01 0e09 	add.w	lr, r1, r9
    88ae:	d013      	beq.n	88d8 <SdFile::read(void*, unsigned short)+0xfc>
    88b0:	f811 1023 	ldrb.w	r1, [r1, r3, lsl #2]
    88b4:	f807 1023 	strb.w	r1, [r7, r3, lsl #2]
    88b8:	f10e 0301 	add.w	r3, lr, #1
    88bc:	4298      	cmp	r0, r3
    88be:	d00b      	beq.n	88d8 <SdFile::read(void*, unsigned short)+0xfc>
    88c0:	f89e 3001 	ldrb.w	r3, [lr, #1]
    88c4:	f88c 3001 	strb.w	r3, [ip, #1]
    88c8:	f10e 0302 	add.w	r3, lr, #2
    88cc:	4298      	cmp	r0, r3
    88ce:	d003      	beq.n	88d8 <SdFile::read(void*, unsigned short)+0xfc>
    88d0:	f89e 3002 	ldrb.w	r3, [lr, #2]
    88d4:	f88c 3002 	strb.w	r3, [ip, #2]
    88d8:	f1c2 0201 	rsb	r2, r2, #1
    88dc:	4410      	add	r0, r2
    88de:	4407      	add	r7, r0
    }
    curPosition_ += n;
    88e0:	68f0      	ldr	r0, [r6, #12]
    toRead -= n;
    88e2:	1b2d      	subs	r5, r5, r4
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    88e4:	1823      	adds	r3, r4, r0
    toRead -= n;
    88e6:	b2ad      	uxth	r5, r5
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    }
    curPosition_ += n;
    88e8:	60f3      	str	r3, [r6, #12]
  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    88ea:	2d00      	cmp	r5, #0
    88ec:	d054      	beq.n	8998 <SdFile::read(void*, unsigned short)+0x1bc>
    88ee:	79b2      	ldrb	r2, [r6, #6]
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    88f0:	2a02      	cmp	r2, #2

  // amount left to read
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    88f2:	f3c3 0808 	ubfx	r8, r3, #0, #9
    if (type_ == FAT_FILE_TYPE_ROOT16) {
    88f6:	d03f      	beq.n	8978 <SdFile::read(void*, unsigned short)+0x19c>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    88f8:	6a31      	ldr	r1, [r6, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    88fa:	790c      	ldrb	r4, [r1, #4]
    88fc:	3c01      	subs	r4, #1
    88fe:	ea04 2453 	and.w	r4, r4, r3, lsr #9
    8902:	b2e4      	uxtb	r4, r4
      if (offset == 0 && blockOfCluster == 0) {
    8904:	f1b8 0f00 	cmp.w	r8, #0
    8908:	d134      	bne.n	8974 <SdFile::read(void*, unsigned short)+0x198>
    890a:	2c00      	cmp	r4, #0
    890c:	d132      	bne.n	8974 <SdFile::read(void*, unsigned short)+0x198>
        // start of new cluster
        if (curPosition_ == 0) {
    890e:	bb3b      	cbnz	r3, 8960 <SdFile::read(void*, unsigned short)+0x184>
          // use first cluster in file
          curCluster_ = firstCluster_;
    8910:	69f2      	ldr	r2, [r6, #28]
    8912:	60b2      	str	r2, [r6, #8]
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    8914:	7c08      	ldrb	r0, [r1, #16]
    8916:	694b      	ldr	r3, [r1, #20]
    8918:	3a02      	subs	r2, #2
    891a:	fa02 f000 	lsl.w	r0, r2, r0
    891e:	441c      	add	r4, r3
    8920:	4420      	add	r0, r4
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    8922:	f5c8 7400 	rsb	r4, r8, #512	; 0x200

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    8926:	7973      	ldrb	r3, [r6, #5]
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    }
    uint16_t n = toRead;

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
    8928:	42a5      	cmp	r5, r4
    892a:	bfcc      	ite	gt
    892c:	b2a4      	uxthgt	r4, r4
    892e:	462c      	movle	r4, r5

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
    8930:	065b      	lsls	r3, r3, #25
    8932:	f57f af74 	bpl.w	881e <SdFile::read(void*, unsigned short)+0x42>
    8936:	f8db 3000 	ldr.w	r3, [fp]
    893a:	4298      	cmp	r0, r3
    893c:	f43f af73 	beq.w	8826 <SdFile::read(void*, unsigned short)+0x4a>
  }
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
    8940:	4b19      	ldr	r3, [pc, #100]	; (89a8 <SdFile::read(void*, unsigned short)+0x1cc>)
    8942:	681b      	ldr	r3, [r3, #0]
    8944:	9700      	str	r7, [sp, #0]
    8946:	4601      	mov	r1, r0
    8948:	4642      	mov	r2, r8
    894a:	4618      	mov	r0, r3
    894c:	4623      	mov	r3, r4
    894e:	f7ff fc9b 	bl	8288 <Sd2Card::readData(unsigned long, unsigned short, unsigned short, unsigned char*)>
      block != SdVolume::cacheBlockNumber_) {
      if (!vol_->readData(block, offset, n, dst)) return -1;
    8952:	2800      	cmp	r0, #0
    8954:	f43f af4d 	beq.w	87f2 <SdFile::read(void*, unsigned short)+0x16>
      dst += n;
    8958:	4427      	add	r7, r4
    895a:	e7c1      	b.n	88e0 <SdFile::read(void*, unsigned short)+0x104>
    895c:	4605      	mov	r5, r0
    895e:	e757      	b.n	8810 <SdFile::read(void*, unsigned short)+0x34>
        if (curPosition_ == 0) {
          // use first cluster in file
          curCluster_ = firstCluster_;
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
    8960:	4608      	mov	r0, r1
    8962:	f106 0208 	add.w	r2, r6, #8
    8966:	68b1      	ldr	r1, [r6, #8]
    8968:	f000 ff96 	bl	9898 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    896c:	2800      	cmp	r0, #0
    896e:	f43f af40 	beq.w	87f2 <SdFile::read(void*, unsigned short)+0x16>
    8972:	6a31      	ldr	r1, [r6, #32]
    8974:	68b2      	ldr	r2, [r6, #8]
    8976:	e7cd      	b.n	8914 <SdFile::read(void*, unsigned short)+0x138>
    8978:	6a32      	ldr	r2, [r6, #32]
  uint16_t toRead = nbyte;
  while (toRead > 0) {
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
    if (type_ == FAT_FILE_TYPE_ROOT16) {
      block = vol_->rootDirStart() + (curPosition_ >> 9);
    897a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    897c:	eb02 2053 	add.w	r0, r2, r3, lsr #9
    8980:	e7cf      	b.n	8922 <SdFile::read(void*, unsigned short)+0x146>
    8982:	1e7b      	subs	r3, r7, #1
    8984:	e001      	b.n	898a <SdFile::read(void*, unsigned short)+0x1ae>
    8986:	f10e 0e01 	add.w	lr, lr, #1
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
      uint8_t* end = src + n;
      while (src != end) *dst++ = *src++;
    898a:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
    898e:	f803 1f01 	strb.w	r1, [r3, #1]!
    8992:	4570      	cmp	r0, lr
    8994:	d1f7      	bne.n	8986 <SdFile::read(void*, unsigned short)+0x1aa>
    8996:	e79f      	b.n	88d8 <SdFile::read(void*, unsigned short)+0xfc>
    }
    curPosition_ += n;
    toRead -= n;
  }
  return nbyte;
    8998:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
}
    899c:	b005      	add	sp, #20
    899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    89a2:	bf00      	nop
    89a4:	1fff6418 	.word	0x1fff6418
    89a8:	1fff6414 	.word	0x1fff6414
    89ac:	1fff4988 	.word	0x1fff4988

000089b0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    89b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89b4:	b08b      	sub	sp, #44	; 0x2c
    89b6:	f10d 090c 	add.w	r9, sp, #12
    89ba:	f04f 3420 	mov.w	r4, #538976288	; 0x20202020
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    89be:	4e91      	ldr	r6, [pc, #580]	; (8c04 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x254>)
    89c0:	f8c9 4004 	str.w	r4, [r9, #4]
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    89c4:	4680      	mov	r8, r0
    89c6:	9403      	str	r4, [sp, #12]
    89c8:	468a      	mov	sl, r1
    89ca:	f8c9 4007 	str.w	r4, [r9, #7]
    89ce:	469b      	mov	fp, r3
    89d0:	f102 3eff 	add.w	lr, r2, #4294967295
      while ((b = *p++)) if (b == c) return false;
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    89d4:	2700      	movs	r7, #0
    89d6:	f04f 0c07 	mov.w	ip, #7
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    89da:	ac06      	add	r4, sp, #24
  uint8_t n = 7;  // max index for part before dot
  uint8_t i = 0;
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    89dc:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
    89e0:	b395      	cbz	r5, 8a48 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x98>
    if (c == '.') {
    89e2:	2d2e      	cmp	r5, #46	; 0x2e
    89e4:	d029      	beq.n	8a3a <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x8a>
      uint8_t b;
#if defined(__AVR__)
      PGM_P p = PSTR("|<>^+=?/[];,*\"\\");
      while ((b = pgm_read_byte(p++))) if (b == c) return false;
#elif defined(__arm__)
      const uint8_t valid[] = "|<>^+=?/[];,*\"\\";
    89e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    89ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      const uint8_t *p = valid;
    89ee:	4622      	mov	r2, r4
    89f0:	e001      	b.n	89f6 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x46>
      while ((b = *p++)) if (b == c) return false;
    89f2:	429d      	cmp	r5, r3
    89f4:	d01d      	beq.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
    89f6:	f812 3b01 	ldrb.w	r3, [r2], #1
    89fa:	2b00      	cmp	r3, #0
    89fc:	d1f9      	bne.n	89f2 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x42>
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
    89fe:	45bc      	cmp	ip, r7
    8a00:	d317      	bcc.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
    8a02:	f1a5 0321 	sub.w	r3, r5, #33	; 0x21
    8a06:	2b5d      	cmp	r3, #93	; 0x5d
    8a08:	d813      	bhi.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    8a0a:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
    8a0e:	2a19      	cmp	r2, #25
    8a10:	f107 0301 	add.w	r3, r7, #1
    8a14:	bf98      	it	ls
    8a16:	3d20      	subls	r5, #32
    8a18:	444f      	add	r7, r9
    8a1a:	b2db      	uxtb	r3, r3
    8a1c:	bf98      	it	ls
    8a1e:	b2ed      	uxtbls	r5, r5
    8a20:	703d      	strb	r5, [r7, #0]
    8a22:	461f      	mov	r7, r3
    8a24:	e7da      	b.n	89dc <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2c>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    8a26:	9b01      	ldr	r3, [sp, #4]
    8a28:	f003 0312 	and.w	r3, r3, #18
    8a2c:	2b12      	cmp	r3, #18
    8a2e:	f000 8098 	beq.w	8b62 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x1b2>

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;
    8a32:	2000      	movs	r0, #0
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    8a34:	b00b      	add	sp, #44	; 0x2c
    8a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // blank fill name and extension
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
    8a3a:	f1bc 0f0a 	cmp.w	ip, #10
    8a3e:	d0f8      	beq.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
      n = 10;  // max index for full 8.3 name
      i = 8;   // place for extension
    8a40:	2708      	movs	r7, #8
  while (i < 11) name[i++] = ' ';
  i = 0;
  while ((c = *str++) != '\0') {
    if (c == '.') {
      if (n == 10) return false;  // only one dot allowed
      n = 10;  // max index for full 8.3 name
    8a42:	f04f 0c0a 	mov.w	ip, #10
    8a46:	e7c9      	b.n	89dc <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x2c>
  dir_t* p;

  // error if already open
  if (isOpen())return false;

  if (!make83Name(fileName, dname)) return false;
    8a48:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8a4c:	2b20      	cmp	r3, #32
    8a4e:	d0f0      	beq.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
  vol_ = dirFile->vol_;
    8a50:	f8da 2020 	ldr.w	r2, [sl, #32]
    8a54:	f8c8 2020 	str.w	r2, [r8, #32]
    8a58:	f8cd b004 	str.w	fp, [sp, #4]
  int8_t readDir(dir_t* dir);
  static uint8_t remove(SdFile* dirFile, const char* fileName);
  uint8_t remove(void);
  /** Set the file's current position to zero. */
  void rewind(void) {
    curPosition_ = curCluster_ = 0;
    8a5c:	f8ca 5008 	str.w	r5, [sl, #8]
    8a60:	f8ca 500c 	str.w	r5, [sl, #12]
    8a64:	46d3      	mov	fp, sl
    8a66:	462c      	mov	r4, r5
  dirFile->rewind();

  // bool for empty entry found
  uint8_t emptyFound = false;
    8a68:	462f      	mov	r7, r5
    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    8a6a:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8c10 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x260>

  // advance to next entry
  curPosition_ += 31;

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    8a6e:	4d66      	ldr	r5, [pc, #408]	; (8c08 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x258>)

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    8a70:	f8db 2018 	ldr.w	r2, [fp, #24]
    8a74:	42a2      	cmp	r2, r4
    8a76:	d939      	bls.n	8aec <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x13c>
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    8a78:	f89b 2006 	ldrb.w	r2, [fp, #6]
    8a7c:	2a01      	cmp	r2, #1
  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    8a7e:	f3c4 1643 	ubfx	r6, r4, #5, #4
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
  // error if not directory
  if (!isDir()) return NULL;
    8a82:	d9d6      	bls.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    8a84:	2201      	movs	r2, #1
    8a86:	a906      	add	r1, sp, #24
    8a88:	4658      	mov	r0, fp
    8a8a:	f7ff fea7 	bl	87dc <SdFile::read(void*, unsigned short)>
    8a8e:	2801      	cmp	r0, #1
    8a90:	d1cf      	bne.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    8a92:	f8db 400c 	ldr.w	r4, [fp, #12]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
    8a96:	0172      	lsls	r2, r6, #5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    8a98:	341f      	adds	r4, #31

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;
    8a9a:	1951      	adds	r1, r2, r5

  // use read to locate and cache block
  if (read() < 0) return NULL;

  // advance to next entry
  curPosition_ += 31;
    8a9c:	f8cb 400c 	str.w	r4, [fp, #12]

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    uint8_t index = 0XF & (dirFile->curPosition_ >> 5);
    p = dirFile->readDirCache();
    if (p == NULL) return false;
    8aa0:	d0c7      	beq.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
    8aa2:	5d50      	ldrb	r0, [r2, r5]
    8aa4:	b188      	cbz	r0, 8aca <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x11a>
    8aa6:	28e5      	cmp	r0, #229	; 0xe5
    8aa8:	d058      	beq.n	8b5c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x1ac>
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    } else if (!memcmp(dname, p->name, 11)) {
    8aaa:	220b      	movs	r2, #11
    8aac:	4648      	mov	r0, r9
    8aae:	f009 fd0f 	bl	124d0 <memcmp>
    8ab2:	2800      	cmp	r0, #0
    8ab4:	d1dc      	bne.n	8a70 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc0>
      // don't open existing file if O_CREAT and O_EXCL
      if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
    8ab6:	9a01      	ldr	r2, [sp, #4]
    8ab8:	f002 0330 	and.w	r3, r2, #48	; 0x30
    8abc:	2b30      	cmp	r3, #48	; 0x30
    8abe:	d0b8      	beq.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>

      // open found file
      return openCachedEntry(0XF & index, oflag);
    8ac0:	4631      	mov	r1, r6
    8ac2:	4640      	mov	r0, r8
    8ac4:	f7ff fdd8 	bl	8678 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    8ac8:	e7b4      	b.n	8a34 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    8aca:	2f00      	cmp	r7, #0
    8acc:	d1ab      	bne.n	8a26 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x76>
        emptyFound = true;
        dirIndex_ = index;
        dirBlock_ = SdVolume::cacheBlockNumber_;
    8ace:	f8da 1000 	ldr.w	r1, [sl]

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
        emptyFound = true;
        dirIndex_ = index;
    8ad2:	f888 6014 	strb.w	r6, [r8, #20]
        dirBlock_ = SdVolume::cacheBlockNumber_;
    8ad6:	f8c8 1010 	str.w	r1, [r8, #16]
      }
      // done if no entries follow
      if (p->name[0] == DIR_NAME_FREE) break;
    8ada:	5d52      	ldrb	r2, [r2, r5]
    8adc:	2a00      	cmp	r2, #0
    8ade:	d0a2      	beq.n	8a26 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x76>

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    8ae0:	f8db 2018 	ldr.w	r2, [fp, #24]
    8ae4:	42a2      	cmp	r2, r4
      while ((b = *p++)) if (b == c) return false;
#endif
      // check size and only allow ASCII printable characters
      if (i > n || c < 0X21 || c > 0X7E)return false;
      // only upper case allowed in 8.3 names - convert lower to upper
      name[i++] = c < 'a' || c > 'z' ?  c : c + ('A' - 'a');
    8ae6:	f04f 0701 	mov.w	r7, #1

  // bool for empty entry found
  uint8_t emptyFound = false;

  // search for file
  while (dirFile->curPosition_ < dirFile->fileSize_) {
    8aea:	d8c5      	bhi.n	8a78 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0xc8>
      // open found file
      return openCachedEntry(0XF & index, oflag);
    }
  }
  // only create file if O_CREAT and O_WRITE
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;
    8aec:	9b01      	ldr	r3, [sp, #4]
    8aee:	f003 0212 	and.w	r2, r3, #18
    8af2:	2a12      	cmp	r2, #18
    8af4:	d19d      	bne.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    8af6:	2f00      	cmp	r7, #0
    8af8:	d133      	bne.n	8b62 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x1b2>
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
  } else {
    if (dirFile->type_ == FAT_FILE_TYPE_ROOT16) return false;
    8afa:	f89b 2006 	ldrb.w	r2, [fp, #6]
    8afe:	2a02      	cmp	r2, #2
    8b00:	d097      	beq.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    8b02:	f10b 0208 	add.w	r2, fp, #8
    8b06:	2101      	movs	r1, #1
    8b08:	f8db 0020 	ldr.w	r0, [fp, #32]
    8b0c:	f000 fc68 	bl	93e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    8b10:	2800      	cmp	r0, #0
    8b12:	d08e      	beq.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    8b14:	f8db 201c 	ldr.w	r2, [fp, #28]
    8b18:	2a00      	cmp	r2, #0
    8b1a:	d16f      	bne.n	8bfc <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x24c>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    8b1c:	f89b 1005 	ldrb.w	r1, [fp, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    8b20:	f8db 2008 	ldr.w	r2, [fp, #8]
    8b24:	f8cb 201c 	str.w	r2, [fp, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    8b28:	f061 017f 	orn	r1, r1, #127	; 0x7f
    8b2c:	f88b 1005 	strb.w	r1, [fp, #5]
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    8b30:	f8db 1020 	ldr.w	r1, [fp, #32]
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    8b34:	7c0e      	ldrb	r6, [r1, #16]
    8b36:	694d      	ldr	r5, [r1, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    8b38:	790c      	ldrb	r4, [r1, #4]
    8b3a:	3a02      	subs	r2, #2
    8b3c:	40b2      	lsls	r2, r6
    8b3e:	3d01      	subs	r5, #1
    8b40:	2c00      	cmp	r4, #0
    8b42:	d046      	beq.n	8bd2 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x222>
    8b44:	4415      	add	r5, r2
    8b46:	e002      	b.n	8b4e <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x19e>
    8b48:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8b4c:	d03e      	beq.n	8bcc <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x21c>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    8b4e:	1960      	adds	r0, r4, r5
    8b50:	f000 fdec 	bl	972c <SdVolume::cacheZeroBlock(unsigned long)>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    8b54:	3c01      	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    8b56:	2800      	cmp	r0, #0
    8b58:	d1f6      	bne.n	8b48 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x198>
    8b5a:	e76a      	b.n	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
    p = dirFile->readDirCache();
    if (p == NULL) return false;

    if (p->name[0] == DIR_NAME_FREE || p->name[0] == DIR_NAME_DELETED) {
      // remember first empty slot
      if (!emptyFound) {
    8b5c:	2f00      	cmp	r7, #0
    8b5e:	d1bf      	bne.n	8ae0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x130>
    8b60:	e7b5      	b.n	8ace <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x11e>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8b62:	2101      	movs	r1, #1
    8b64:	f8d8 0010 	ldr.w	r0, [r8, #16]
    8b68:	f000 fd9a 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8b6c:	2800      	cmp	r0, #0
    8b6e:	f43f af60 	beq.w	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8b72:	f898 4014 	ldrb.w	r4, [r8, #20]
    8b76:	4b24      	ldr	r3, [pc, #144]	; (8c08 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x258>)
  if ((oflag & (O_CREAT | O_WRITE)) != (O_CREAT | O_WRITE)) return false;

  // cache found slot or add cluster if end of file
  if (emptyFound) {
    p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!p) return false;
    8b78:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    8b7c:	f43f af59 	beq.w	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>
    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
    8b80:	2220      	movs	r2, #32
    8b82:	2100      	movs	r1, #0
    8b84:	4620      	mov	r0, r4
    8b86:	f009 fd39 	bl	125fc <memset>
  memcpy(p->name, dname, 11);
    8b8a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
    8b8e:	4623      	mov	r3, r4
    8b90:	c303      	stmia	r3!, {r0, r1}

  // set timestamps
  if (dateTime_) {
    8b92:	491e      	ldr	r1, [pc, #120]	; (8c0c <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x25c>)
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    8b94:	f823 2b02 	strh.w	r2, [r3], #2

  // set timestamps
  if (dateTime_) {
    8b98:	680d      	ldr	r5, [r1, #0]
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
  }
  // initialize as empty file
  memset(p, 0, sizeof(dir_t));
  memcpy(p->name, dname, 11);
    8b9a:	0c12      	lsrs	r2, r2, #16
    8b9c:	701a      	strb	r2, [r3, #0]

  // set timestamps
  if (dateTime_) {
    8b9e:	b335      	cbz	r5, 8bee <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x23e>
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
    8ba0:	f104 010e 	add.w	r1, r4, #14
    8ba4:	f104 0010 	add.w	r0, r4, #16
    8ba8:	47a8      	blx	r5
    8baa:	8a23      	ldrh	r3, [r4, #16]
    8bac:	89e2      	ldrh	r2, [r4, #14]
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    p->creationTime = FAT_DEFAULT_TIME;
  }
  p->lastAccessDate = p->creationDate;
    8bae:	8263      	strh	r3, [r4, #18]
  p->lastWriteDate = p->creationDate;
    8bb0:	8323      	strh	r3, [r4, #24]
  p->lastWriteTime = p->creationTime;
    8bb2:	82e2      	strh	r2, [r4, #22]

  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;
    8bb4:	f000 fd4a 	bl	964c <SdVolume::cacheFlush()>
    8bb8:	2800      	cmp	r0, #0
    8bba:	f43f af3a 	beq.w	8a32 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x82>

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
    8bbe:	9a01      	ldr	r2, [sp, #4]
    8bc0:	f898 1014 	ldrb.w	r1, [r8, #20]
    8bc4:	4640      	mov	r0, r8
    8bc6:	f7ff fd57 	bl	8678 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    8bca:	e733      	b.n	8a34 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x84>
    8bcc:	f8db 2020 	ldr.w	r2, [fp, #32]
    8bd0:	7c16      	ldrb	r6, [r2, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    8bd2:	f8db 0018 	ldr.w	r0, [fp, #24]
    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    p = SdVolume::cacheBuffer_.dir;
    8bd6:	4c0c      	ldr	r4, [pc, #48]	; (8c08 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x258>)
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    8bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
    8bdc:	fa01 f206 	lsl.w	r2, r1, r6
    8be0:	4402      	add	r2, r0

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    8be2:	2100      	movs	r1, #0
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    8be4:	f8cb 2018 	str.w	r2, [fp, #24]

    // add and zero cluster for dirFile - first cluster is in cache for write
    if (!dirFile->addDirCluster()) return false;

    // use first entry in cluster
    dirIndex_ = 0;
    8be8:	f888 1014 	strb.w	r1, [r8, #20]
    8bec:	e7c8      	b.n	8b80 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x1d0>
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    8bee:	f642 0321 	movw	r3, #10273	; 0x2821
    p->creationTime = FAT_DEFAULT_TIME;
    8bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  if (dateTime_) {
    // call user function
    dateTime_(&p->creationDate, &p->creationTime);
  } else {
    // use default date/time
    p->creationDate = FAT_DEFAULT_DATE;
    8bf6:	8223      	strh	r3, [r4, #16]
    p->creationTime = FAT_DEFAULT_TIME;
    8bf8:	81e2      	strh	r2, [r4, #14]
    8bfa:	e7d8      	b.n	8bae <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x1fe>
    8bfc:	f8db 2008 	ldr.w	r2, [fp, #8]
    8c00:	e796      	b.n	8b30 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]+0x180>
    8c02:	bf00      	nop
    8c04:	00017598 	.word	0x00017598
    8c08:	1fff6418 	.word	0x1fff6418
    8c0c:	1fff640c 	.word	0x1fff640c
    8c10:	1fff4988 	.word	0x1fff4988

00008c14 <SdFile::makeDir(SdFile*, char const*)>:
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    8c14:	7983      	ldrb	r3, [r0, #6]
    8c16:	b10b      	cbz	r3, 8c1c <SdFile::makeDir(SdFile*, char const*)+0x8>
  // set position after '..'
  curPosition_ = 2 * sizeof(d);

  // write first block
  return SdVolume::cacheFlush();
}
    8c18:	2000      	movs	r0, #0
    8c1a:	4770      	bx	lr
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a dir is not a
 * directory, \a dirName is invalid or already exists in \a dir.
 */
uint8_t SdFile::makeDir(SdFile* dir, const char* dirName) {
    8c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8c20:	2333      	movs	r3, #51	; 0x33
    8c22:	b088      	sub	sp, #32
    8c24:	4605      	mov	r5, r0
    8c26:	460f      	mov	r7, r1
    8c28:	f7ff fec2 	bl	89b0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
  dir_t d;

  // create a normal file
  if (!open(dir, dirName, O_CREAT | O_EXCL | O_RDWR)) return false;
    8c2c:	b320      	cbz	r0, 8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>

  // convert SdFile to directory
  flags_ = O_READ;
    8c2e:	2101      	movs	r1, #1
  type_ = FAT_FILE_TYPE_SUBDIR;
    8c30:	2304      	movs	r3, #4

  // create a normal file
  if (!open(dir, dirName, O_CREAT | O_EXCL | O_RDWR)) return false;

  // convert SdFile to directory
  flags_ = O_READ;
    8c32:	7169      	strb	r1, [r5, #5]
  type_ = FAT_FILE_TYPE_SUBDIR;
    8c34:	71ab      	strb	r3, [r5, #6]
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    8c36:	f105 0208 	add.w	r2, r5, #8
    8c3a:	6a28      	ldr	r0, [r5, #32]
    8c3c:	f000 fbd0 	bl	93e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    8c40:	b1d0      	cbz	r0, 8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    8c42:	69eb      	ldr	r3, [r5, #28]
    8c44:	b9e3      	cbnz	r3, 8c80 <SdFile::makeDir(SdFile*, char const*)+0x6c>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    8c46:	796b      	ldrb	r3, [r5, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    8c48:	68ae      	ldr	r6, [r5, #8]
    8c4a:	61ee      	str	r6, [r5, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    8c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8c50:	716b      	strb	r3, [r5, #5]
// return with first block of cluster in the cache
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
    8c52:	6a2a      	ldr	r2, [r5, #32]
    8c54:	7c11      	ldrb	r1, [r2, #16]
    8c56:	6953      	ldr	r3, [r2, #20]
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    8c58:	7914      	ldrb	r4, [r2, #4]
    8c5a:	3e02      	subs	r6, #2
    8c5c:	408e      	lsls	r6, r1
    8c5e:	3b01      	subs	r3, #1
    8c60:	b194      	cbz	r4, 8c88 <SdFile::makeDir(SdFile*, char const*)+0x74>
    8c62:	441e      	add	r6, r3
    8c64:	e002      	b.n	8c6c <SdFile::makeDir(SdFile*, char const*)+0x58>
    8c66:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    8c6a:	d00b      	beq.n	8c84 <SdFile::makeDir(SdFile*, char const*)+0x70>
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    8c6c:	19a0      	adds	r0, r4, r6
    8c6e:	f000 fd5d 	bl	972c <SdVolume::cacheZeroBlock(unsigned long)>
uint8_t SdFile::addDirCluster(void) {
  if (!addCluster()) return false;

  // zero data in cluster insure first cluster is in cache
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    8c72:	3c01      	subs	r4, #1
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
    8c74:	2800      	cmp	r0, #0
    8c76:	d1f6      	bne.n	8c66 <SdFile::makeDir(SdFile*, char const*)+0x52>
  // set position after '..'
  curPosition_ = 2 * sizeof(d);

  // write first block
  return SdVolume::cacheFlush();
}
    8c78:	2000      	movs	r0, #0
    8c7a:	b008      	add	sp, #32
    8c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8c80:	68ae      	ldr	r6, [r5, #8]
    8c82:	e7e6      	b.n	8c52 <SdFile::makeDir(SdFile*, char const*)+0x3e>
    8c84:	6a2b      	ldr	r3, [r5, #32]
    8c86:	7c19      	ldrb	r1, [r3, #16]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    8c88:	69ac      	ldr	r4, [r5, #24]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    8c8a:	79a8      	ldrb	r0, [r5, #6]
  uint32_t block = vol_->clusterStartBlock(curCluster_);
  for (uint8_t i = vol_->blocksPerCluster_; i != 0; i--) {
    if (!SdVolume::cacheZeroBlock(block + i - 1)) return false;
  }
  // Increase directory file size by cluster size
  fileSize_ += 512UL << vol_->clusterSizeShift_;
    8c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8c90:	fa02 f301 	lsl.w	r3, r2, r1
    8c94:	4423      	add	r3, r4
    8c96:	61ab      	str	r3, [r5, #24]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    8c98:	2800      	cmp	r0, #0
    8c9a:	d0ed      	beq.n	8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>

  if (flags_ & F_FILE_DIR_DIRTY) {
    8c9c:	f995 3005 	ldrsb.w	r3, [r5, #5]
    8ca0:	2b00      	cmp	r3, #0
    8ca2:	db65      	blt.n	8d70 <SdFile::makeDir(SdFile*, char const*)+0x15c>
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    8ca4:	f000 fcd2 	bl	964c <SdVolume::cacheFlush()>

  // allocate and zero first cluster
  if (!addDirCluster())return false;

  // force entry to SD
  if (!sync()) return false;
    8ca8:	2800      	cmp	r0, #0
    8caa:	d0e5      	beq.n	8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8cac:	2101      	movs	r1, #1
    8cae:	6928      	ldr	r0, [r5, #16]
    8cb0:	f000 fcf6 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8cb4:	2800      	cmp	r0, #0
    8cb6:	d0df      	beq.n	8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8cb8:	f895 c014 	ldrb.w	ip, [r5, #20]
    8cbc:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8dc4 <SdFile::makeDir(SdFile*, char const*)+0x1b0>
  // force entry to SD
  if (!sync()) return false;

  // cache entry - should already be in cache due to sync() call
  dir_t* p = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!p) return false;
    8cc0:	eb18 1c4c 	adds.w	ip, r8, ip, lsl #5
    8cc4:	d0d8      	beq.n	8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>

  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;
    8cc6:	2310      	movs	r3, #16
    8cc8:	f88c 300b 	strb.w	r3, [ip, #11]

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    8ccc:	46e6      	mov	lr, ip
    8cce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    8cd2:	466c      	mov	r4, sp
    8cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
  d.name[0] = '.';

  // cache block for '.'  and '..'
  uint32_t block = vol_->clusterStartBlock(firstCluster_);
    8cd6:	f8d5 9020 	ldr.w	r9, [r5, #32]
  if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) return false;
    8cda:	69ee      	ldr	r6, [r5, #28]
    8cdc:	f899 a010 	ldrb.w	sl, [r9, #16]

  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    8ce0:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
  d.name[0] = '.';

  // cache block for '.'  and '..'
  uint32_t block = vol_->clusterStartBlock(firstCluster_);
  if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) return false;
    8ce4:	3e02      	subs	r6, #2
    8ce6:	f8d9 e014 	ldr.w	lr, [r9, #20]
    8cea:	fa06 f60a 	lsl.w	r6, r6, sl

  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    8cee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
  d.name[0] = '.';
    8cf2:	f04f 092e 	mov.w	r9, #46	; 0x2e
    8cf6:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020

  // cache block for '.'  and '..'
  uint32_t block = vol_->clusterStartBlock(firstCluster_);
  if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) return false;
    8cfa:	eb06 000e 	add.w	r0, r6, lr
    8cfe:	2101      	movs	r1, #1
    8d00:	f8cd 3005 	str.w	r3, [sp, #5]
    8d04:	f8cd 3001 	str.w	r3, [sp, #1]
    8d08:	f8ad 3009 	strh.w	r3, [sp, #9]
  p->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
  d.name[0] = '.';
    8d0c:	f88d 9000 	strb.w	r9, [sp]

  // change directory entry  attribute
  p->attributes = DIR_ATT_DIRECTORY;

  // make entry for '.'
  memcpy(&d, p, sizeof(d));
    8d10:	f8bc 6014 	ldrh.w	r6, [ip, #20]
    8d14:	f8bc 401a 	ldrh.w	r4, [ip, #26]
  for (uint8_t i = 1; i < 11; i++) d.name[i] = ' ';
  d.name[0] = '.';

  // cache block for '.'  and '..'
  uint32_t block = vol_->clusterStartBlock(firstCluster_);
  if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) return false;
    8d18:	f000 fcc2 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8d1c:	2800      	cmp	r0, #0
    8d1e:	d0ab      	beq.n	8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>

  // copy '.' to block
  memcpy(&SdVolume::cacheBuffer_.dir[0], &d, sizeof(d));
    8d20:	f8ad 6014 	strh.w	r6, [sp, #20]
    8d24:	f8ad 401a 	strh.w	r4, [sp, #26]
    8d28:	466e      	mov	r6, sp
    8d2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    8d2c:	4644      	mov	r4, r8
    8d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8d30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    8d34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // make entry for '..'
  d.name[1] = '.';
  if (dir->isRoot()) {
    8d38:	79bb      	ldrb	r3, [r7, #6]

  // copy '.' to block
  memcpy(&SdVolume::cacheBuffer_.dir[0], &d, sizeof(d));

  // make entry for '..'
  d.name[1] = '.';
    8d3a:	f88d 9001 	strb.w	r9, [sp, #1]
  if (dir->isRoot()) {
    8d3e:	3b02      	subs	r3, #2
    8d40:	2b01      	cmp	r3, #1
    8d42:	d93a      	bls.n	8dba <SdFile::makeDir(SdFile*, char const*)+0x1a6>
    d.firstClusterLow = 0;
    d.firstClusterHigh = 0;
  } else {
    d.firstClusterLow = dir->firstCluster_ & 0XFFFF;
    8d44:	69fb      	ldr	r3, [r7, #28]
    8d46:	b29a      	uxth	r2, r3
    d.firstClusterHigh = dir->firstCluster_ >> 16;
    8d48:	0c1b      	lsrs	r3, r3, #16
  }
  // copy '..' to block
  memcpy(&SdVolume::cacheBuffer_.dir[1], &d, sizeof(d));
    8d4a:	f8ad 3014 	strh.w	r3, [sp, #20]
    8d4e:	f8ad 201a 	strh.w	r2, [sp, #26]
    8d52:	466c      	mov	r4, sp
    8d54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    8d56:	4e1a      	ldr	r6, [pc, #104]	; (8dc0 <SdFile::makeDir(SdFile*, char const*)+0x1ac>)
    8d58:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    8d5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}

  // set position after '..'
  curPosition_ = 2 * sizeof(d);
    8d5e:	2440      	movs	r4, #64	; 0x40
  } else {
    d.firstClusterLow = dir->firstCluster_ & 0XFFFF;
    d.firstClusterHigh = dir->firstCluster_ >> 16;
  }
  // copy '..' to block
  memcpy(&SdVolume::cacheBuffer_.dir[1], &d, sizeof(d));
    8d60:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}

  // set position after '..'
  curPosition_ = 2 * sizeof(d);
    8d64:	60ec      	str	r4, [r5, #12]

  // write first block
  return SdVolume::cacheFlush();
}
    8d66:	b008      	add	sp, #32
    8d68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  // set position after '..'
  curPosition_ = 2 * sizeof(d);

  // write first block
  return SdVolume::cacheFlush();
    8d6c:	f000 bc6e 	b.w	964c <SdVolume::cacheFlush()>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8d70:	2101      	movs	r1, #1
    8d72:	6928      	ldr	r0, [r5, #16]
    8d74:	f000 fc94 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8d78:	2800      	cmp	r0, #0
    8d7a:	f43f af7d 	beq.w	8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8d7e:	7d2c      	ldrb	r4, [r5, #20]
    8d80:	4b10      	ldr	r3, [pc, #64]	; (8dc4 <SdFile::makeDir(SdFile*, char const*)+0x1b0>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    8d82:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    8d86:	f43f af77 	beq.w	8c78 <SdFile::makeDir(SdFile*, char const*)+0x64>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8d8a:	79ab      	ldrb	r3, [r5, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8d8c:	4a0e      	ldr	r2, [pc, #56]	; (8dc8 <SdFile::makeDir(SdFile*, char const*)+0x1b4>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8d8e:	2b01      	cmp	r3, #1
    8d90:	bf9c      	itt	ls
    8d92:	69ab      	ldrls	r3, [r5, #24]
    8d94:	61e3      	strls	r3, [r4, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8d96:	69eb      	ldr	r3, [r5, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8d98:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8d9a:	8363      	strh	r3, [r4, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    8d9c:	0c1b      	lsrs	r3, r3, #16
    8d9e:	82a3      	strh	r3, [r4, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8da0:	b132      	cbz	r2, 8db0 <SdFile::makeDir(SdFile*, char const*)+0x19c>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    8da2:	f104 0116 	add.w	r1, r4, #22
    8da6:	f104 0018 	add.w	r0, r4, #24
    8daa:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    8dac:	8b23      	ldrh	r3, [r4, #24]
    8dae:	8263      	strh	r3, [r4, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    8db0:	796b      	ldrb	r3, [r5, #5]
    8db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8db6:	716b      	strb	r3, [r5, #5]
    8db8:	e774      	b.n	8ca4 <SdFile::makeDir(SdFile*, char const*)+0x90>
  memcpy(&SdVolume::cacheBuffer_.dir[0], &d, sizeof(d));

  // make entry for '..'
  d.name[1] = '.';
  if (dir->isRoot()) {
    d.firstClusterLow = 0;
    8dba:	2200      	movs	r2, #0
    d.firstClusterHigh = 0;
    8dbc:	4613      	mov	r3, r2
    8dbe:	e7c4      	b.n	8d4a <SdFile::makeDir(SdFile*, char const*)+0x136>
    8dc0:	1fff6438 	.word	0x1fff6438
    8dc4:	1fff6418 	.word	0x1fff6418
    8dc8:	1fff640c 	.word	0x1fff640c

00008dcc <SdFile::open(SdFile*, char const*, unsigned char)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include this SdFile is already open, \a difFile is not
 * a directory, \a fileName is invalid, the file does not exist
 * or can't be opened in the access mode specified by oflag.
 */
uint8_t SdFile::open(SdFile* dirFile, const char* fileName, uint8_t oflag) {
    8dcc:	b410      	push	{r4}
  uint8_t dname[11];
  dir_t* p;

  // error if already open
  if (isOpen())return false;
    8dce:	7984      	ldrb	r4, [r0, #6]
    8dd0:	b11c      	cbz	r4, 8dda <SdFile::open(SdFile*, char const*, unsigned char)+0xe>
  // force write of entry to SD
  if (!SdVolume::cacheFlush()) return false;

  // open entry in cache
  return openCachedEntry(dirIndex_, oflag);
}
    8dd2:	2000      	movs	r0, #0
    8dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
    8dd8:	4770      	bx	lr
    8dda:	f85d 4b04 	ldr.w	r4, [sp], #4
    8dde:	f7ff bde7 	b.w	89b0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
    8de2:	bf00      	nop

00008de4 <SdFile::remove(SdFile*, char const*)>:
 * the value zero, false, is returned for failure.
 * Reasons for failure include the file is a directory, is read only,
 * \a dirFile is not a directory, \a fileName is not found
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
    8de4:	b530      	push	{r4, r5, lr}
    8de6:	b08b      	sub	sp, #44	; 0x2c
    8de8:	2400      	movs	r4, #0
    8dea:	460a      	mov	r2, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    8dec:	4d3c      	ldr	r5, [pc, #240]	; (8ee0 <SdFile::remove(SdFile*, char const*)+0xfc>)
    8dee:	f88d 4008 	strb.w	r4, [sp, #8]
    8df2:	4601      	mov	r1, r0
    8df4:	2302      	movs	r3, #2
    8df6:	a801      	add	r0, sp, #4
    8df8:	f88d 400a 	strb.w	r4, [sp, #10]
    8dfc:	9501      	str	r5, [sp, #4]
    8dfe:	f7ff fdd7 	bl	89b0 <SdFile::open(SdFile*, char const*, unsigned char) [clone .part.25] [clone .constprop.29]>
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
    8e02:	b910      	cbnz	r0, 8e0a <SdFile::remove(SdFile*, char const*)+0x26>
 * Reasons for failure include the file read-only, is a directory,
 * or an I/O error occurred.
 */
uint8_t SdFile::remove(void) {
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;
    8e04:	2000      	movs	r0, #0
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
  return file.remove();
}
    8e06:	b00b      	add	sp, #44	; 0x2c
    8e08:	bd30      	pop	{r4, r5, pc}
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
    8e0a:	f89d 500a 	ldrb.w	r5, [sp, #10]
    8e0e:	2d01      	cmp	r5, #1
    8e10:	d1f8      	bne.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>
    8e12:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8e16:	079b      	lsls	r3, r3, #30
    8e18:	d5f4      	bpl.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>

  // error if length is greater than current size
  if (length > fileSize_) return false;

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
    8e1a:	9b07      	ldr	r3, [sp, #28]
    8e1c:	2b00      	cmp	r3, #0
    8e1e:	d046      	beq.n	8eae <SdFile::remove(SdFile*, char const*)+0xca>
  // position to last cluster in truncated file
  if (!seekSet(length)) return false;

  if (length == 0) {
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    8e20:	9908      	ldr	r1, [sp, #32]
    8e22:	9809      	ldr	r0, [sp, #36]	; 0x24
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    8e24:	9403      	str	r4, [sp, #12]
    8e26:	9404      	str	r4, [sp, #16]
  // position to last cluster in truncated file
  if (!seekSet(length)) return false;

  if (length == 0) {
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    8e28:	f000 fda0 	bl	996c <SdVolume::freeChain(unsigned long)>
    8e2c:	2800      	cmp	r0, #0
    8e2e:	d0e9      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    8e30:	f89d 3009 	ldrb.w	r3, [sp, #9]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    8e34:	f89d 200a 	ldrb.w	r2, [sp, #10]
  if (!seekSet(length)) return false;

  if (length == 0) {
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
    firstCluster_ = 0;
    8e38:	9408      	str	r4, [sp, #32]
    }
  }
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    8e3a:	f063 037f 	orn	r3, r3, #127	; 0x7f

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
    }
  }
  fileSize_ = length;
    8e3e:	9407      	str	r4, [sp, #28]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
    8e40:	f88d 3009 	strb.w	r3, [sp, #9]
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    8e44:	2a00      	cmp	r2, #0
    8e46:	d0dd      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8e48:	4629      	mov	r1, r5
    8e4a:	9805      	ldr	r0, [sp, #20]
    8e4c:	f000 fc28 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8e50:	2800      	cmp	r0, #0
    8e52:	d0d7      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8e54:	f89d 4018 	ldrb.w	r4, [sp, #24]
    8e58:	4b22      	ldr	r3, [pc, #136]	; (8ee4 <SdFile::remove(SdFile*, char const*)+0x100>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    8e5a:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    8e5e:	d0d1      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8e60:	f89d 300a 	ldrb.w	r3, [sp, #10]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8e64:	4a20      	ldr	r2, [pc, #128]	; (8ee8 <SdFile::remove(SdFile*, char const*)+0x104>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8e66:	2b01      	cmp	r3, #1
    8e68:	bf9c      	itt	ls
    8e6a:	9b07      	ldrls	r3, [sp, #28]
    8e6c:	61e3      	strls	r3, [r4, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8e6e:	9b08      	ldr	r3, [sp, #32]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8e70:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8e72:	8363      	strh	r3, [r4, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    8e74:	0c1b      	lsrs	r3, r3, #16
    8e76:	82a3      	strh	r3, [r4, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8e78:	b132      	cbz	r2, 8e88 <SdFile::remove(SdFile*, char const*)+0xa4>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    8e7a:	f104 0116 	add.w	r1, r4, #22
    8e7e:	f104 0018 	add.w	r0, r4, #24
    8e82:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    8e84:	8b23      	ldrh	r3, [r4, #24]
    8e86:	8263      	strh	r3, [r4, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    8e88:	f89d 3009 	ldrb.w	r3, [sp, #9]
    8e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8e90:	f88d 3009 	strb.w	r3, [sp, #9]
  }
  return SdVolume::cacheFlush();
    8e94:	f000 fbda 	bl	964c <SdVolume::cacheFlush()>
  fileSize_ = length;

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;

  if (!sync()) return false;
    8e98:	2800      	cmp	r0, #0
    8e9a:	d0b3      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>
    8e9c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    8ea0:	2b00      	cmp	r3, #0
    8ea2:	d0af      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    8ea4:	2b02      	cmp	r3, #2
    8ea6:	d017      	beq.n	8ed8 <SdFile::remove(SdFile*, char const*)+0xf4>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    8ea8:	2300      	movs	r3, #0
    8eaa:	9303      	str	r3, [sp, #12]
    curPosition_ = 0;
    8eac:	9304      	str	r3, [sp, #16]
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8eae:	2101      	movs	r1, #1
    8eb0:	9805      	ldr	r0, [sp, #20]
    8eb2:	f000 fbf5 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8eb6:	2800      	cmp	r0, #0
    8eb8:	d0a4      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8eba:	f89d 3018 	ldrb.w	r3, [sp, #24]
    8ebe:	4a09      	ldr	r2, [pc, #36]	; (8ee4 <SdFile::remove(SdFile*, char const*)+0x100>)
    8ec0:	015b      	lsls	r3, r3, #5
  // free any clusters - will fail if read-only or directory
  if (!truncate(0)) return false;

  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!d) return false;
    8ec2:	42da      	cmn	r2, r3
    8ec4:	d09e      	beq.n	8e04 <SdFile::remove(SdFile*, char const*)+0x20>

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    8ec6:	20e5      	movs	r0, #229	; 0xe5

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    8ec8:	2100      	movs	r1, #0
  // cache directory entry
  dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
  if (!d) return false;

  // mark entry deleted
  d->name[0] = DIR_NAME_DELETED;
    8eca:	5498      	strb	r0, [r3, r2]

  // set this SdFile closed
  type_ = FAT_FILE_TYPE_CLOSED;
    8ecc:	f88d 100a 	strb.w	r1, [sp, #10]

  // write entry to SD
  return SdVolume::cacheFlush();
    8ed0:	f000 fbbc 	bl	964c <SdVolume::cacheFlush()>
 */
uint8_t SdFile::remove(SdFile* dirFile, const char* fileName) {
  SdFile file;
  if (!file.open(dirFile, fileName, O_WRITE)) return false;
  return file.remove();
}
    8ed4:	b00b      	add	sp, #44	; 0x2c
    8ed6:	bd30      	pop	{r4, r5, pc}
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    8ed8:	2300      	movs	r3, #0
    8eda:	9304      	str	r3, [sp, #16]
    8edc:	e7e7      	b.n	8eae <SdFile::remove(SdFile*, char const*)+0xca>
    8ede:	bf00      	nop
    8ee0:	00017588 	.word	0x00017588
    8ee4:	1fff6418 	.word	0x1fff6418
    8ee8:	1fff640c 	.word	0x1fff640c

00008eec <SdFile::seekSet(unsigned long)>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    8eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8eee:	7983      	ldrb	r3, [r0, #6]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    8ef0:	b113      	cbz	r3, 8ef8 <SdFile::seekSet(unsigned long)+0xc>
    8ef2:	6982      	ldr	r2, [r0, #24]
    8ef4:	428a      	cmp	r2, r1
    8ef6:	d201      	bcs.n	8efc <SdFile::seekSet(unsigned long)+0x10>
    8ef8:	2000      	movs	r0, #0
    8efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    8efc:	2b02      	cmp	r3, #2
    8efe:	460f      	mov	r7, r1
    8f00:	4605      	mov	r5, r0
    8f02:	d01a      	beq.n	8f3a <SdFile::seekSet(unsigned long)+0x4e>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    8f04:	b307      	cbz	r7, 8f48 <SdFile::seekSet(unsigned long)+0x5c>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    8f06:	6a2b      	ldr	r3, [r5, #32]
    8f08:	68e9      	ldr	r1, [r5, #12]
    8f0a:	7c1c      	ldrb	r4, [r3, #16]
    8f0c:	1e4a      	subs	r2, r1, #1
    8f0e:	f104 0309 	add.w	r3, r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    8f12:	1e7c      	subs	r4, r7, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    8f14:	40da      	lsrs	r2, r3
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    8f16:	40dc      	lsrs	r4, r3

  if (nNew < nCur || curPosition_ == 0) {
    8f18:	42a2      	cmp	r2, r4
    8f1a:	d911      	bls.n	8f40 <SdFile::seekSet(unsigned long)+0x54>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    8f1c:	69eb      	ldr	r3, [r5, #28]
    8f1e:	60ab      	str	r3, [r5, #8]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    8f20:	f105 0608 	add.w	r6, r5, #8
    8f24:	e006      	b.n	8f34 <SdFile::seekSet(unsigned long)+0x48>
    8f26:	68a9      	ldr	r1, [r5, #8]
    8f28:	6a28      	ldr	r0, [r5, #32]
    8f2a:	f000 fcb5 	bl	9898 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    8f2e:	3c01      	subs	r4, #1
    8f30:	2800      	cmp	r0, #0
    8f32:	d0e1      	beq.n	8ef8 <SdFile::seekSet(unsigned long)+0xc>
    8f34:	4632      	mov	r2, r6
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    8f36:	2c00      	cmp	r4, #0
    8f38:	d1f5      	bne.n	8f26 <SdFile::seekSet(unsigned long)+0x3a>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    curPosition_ = 0;
    8f3a:	60ef      	str	r7, [r5, #12]
    return true;
    8f3c:	2001      	movs	r0, #1
    8f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    8f40:	2900      	cmp	r1, #0
    8f42:	d0eb      	beq.n	8f1c <SdFile::seekSet(unsigned long)+0x30>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    8f44:	1aa4      	subs	r4, r4, r2
    8f46:	e7eb      	b.n	8f20 <SdFile::seekSet(unsigned long)+0x34>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    8f48:	60af      	str	r7, [r5, #8]
    curPosition_ = 0;
    8f4a:	60ef      	str	r7, [r5, #12]
    return true;
    8f4c:	2001      	movs	r0, #1
    8f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008f50 <SdFile::sync()>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    8f50:	b538      	push	{r3, r4, r5, lr}
  // only allow open files and directories
  if (!isOpen()) return false;
    8f52:	7983      	ldrb	r3, [r0, #6]
    8f54:	b13b      	cbz	r3, 8f66 <SdFile::sync()+0x16>

  if (flags_ & F_FILE_DIR_DIRTY) {
    8f56:	f990 3005 	ldrsb.w	r3, [r0, #5]
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	db05      	blt.n	8f6a <SdFile::sync()+0x1a>
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    8f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    8f62:	f000 bb73 	b.w	964c <SdVolume::cacheFlush()>
}
    8f66:	2000      	movs	r0, #0
    8f68:	bd38      	pop	{r3, r4, r5, pc}
    8f6a:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    8f6c:	2101      	movs	r1, #1
    8f6e:	6900      	ldr	r0, [r0, #16]
    8f70:	f000 fb96 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    8f74:	2800      	cmp	r0, #0
    8f76:	d0f6      	beq.n	8f66 <SdFile::sync()+0x16>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    8f78:	7d25      	ldrb	r5, [r4, #20]
    8f7a:	4b0f      	ldr	r3, [pc, #60]	; (8fb8 <SdFile::sync()+0x68>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    8f7c:	eb13 1545 	adds.w	r5, r3, r5, lsl #5
    8f80:	d0f1      	beq.n	8f66 <SdFile::sync()+0x16>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8f82:	79a3      	ldrb	r3, [r4, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8f84:	4a0d      	ldr	r2, [pc, #52]	; (8fbc <SdFile::sync()+0x6c>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    8f86:	2b01      	cmp	r3, #1
    8f88:	bf9c      	itt	ls
    8f8a:	69a3      	ldrls	r3, [r4, #24]
    8f8c:	61eb      	strls	r3, [r5, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8f8e:	69e3      	ldr	r3, [r4, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8f90:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    8f92:	836b      	strh	r3, [r5, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    8f94:	0c1b      	lsrs	r3, r3, #16
    8f96:	82ab      	strh	r3, [r5, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    8f98:	b132      	cbz	r2, 8fa8 <SdFile::sync()+0x58>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    8f9a:	f105 0116 	add.w	r1, r5, #22
    8f9e:	f105 0018 	add.w	r0, r5, #24
    8fa2:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    8fa4:	8b2b      	ldrh	r3, [r5, #24]
    8fa6:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    8fa8:	7963      	ldrb	r3, [r4, #5]
    8faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8fae:	7163      	strb	r3, [r4, #5]
  }
  return SdVolume::cacheFlush();
}
    8fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    8fb4:	f000 bb4a 	b.w	964c <SdVolume::cacheFlush()>
    8fb8:	1fff6418 	.word	0x1fff6418
    8fbc:	1fff640c 	.word	0x1fff640c

00008fc0 <SdFile::write(void const*, unsigned short)>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    8fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    8fc4:	7983      	ldrb	r3, [r0, #6]
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    8fc6:	b085      	sub	sp, #20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    8fc8:	2b01      	cmp	r3, #1
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    8fca:	4606      	mov	r6, r0
    8fcc:	9201      	str	r2, [sp, #4]

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    8fce:	d005      	beq.n	8fdc <SdFile::write(void const*, unsigned short)+0x1c>
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    8fd0:	2301      	movs	r3, #1
    8fd2:	7133      	strb	r3, [r6, #4]

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    8fd4:	2000      	movs	r0, #0
}
    8fd6:	b005      	add	sp, #20
    8fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    8fdc:	7942      	ldrb	r2, [r0, #5]
    8fde:	0790      	lsls	r0, r2, #30
    8fe0:	d5f6      	bpl.n	8fd0 <SdFile::write(void const*, unsigned short)+0x10>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    8fe2:	0753      	lsls	r3, r2, #29
    8fe4:	460f      	mov	r7, r1
    8fe6:	d526      	bpl.n	9036 <SdFile::write(void const*, unsigned short)+0x76>
    8fe8:	68f3      	ldr	r3, [r6, #12]
    8fea:	69b5      	ldr	r5, [r6, #24]
    8fec:	42ab      	cmp	r3, r5
    8fee:	f000 8133 	beq.w	9258 <SdFile::write(void const*, unsigned short)+0x298>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    8ff2:	2d00      	cmp	r5, #0
    8ff4:	f000 8143 	beq.w	927e <SdFile::write(void const*, unsigned short)+0x2be>
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    8ff8:	6a32      	ldr	r2, [r6, #32]
    8ffa:	7c14      	ldrb	r4, [r2, #16]
    8ffc:	1e59      	subs	r1, r3, #1
    8ffe:	3409      	adds	r4, #9
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    9000:	1e6a      	subs	r2, r5, #1
    curCluster_ = 0;
    curPosition_ = 0;
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    9002:	40e1      	lsrs	r1, r4
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    9004:	fa22 f404 	lsr.w	r4, r2, r4

  if (nNew < nCur || curPosition_ == 0) {
    9008:	42a1      	cmp	r1, r4
    900a:	f200 813c 	bhi.w	9286 <SdFile::write(void const*, unsigned short)+0x2c6>
    900e:	2b00      	cmp	r3, #0
    9010:	f000 8139 	beq.w	9286 <SdFile::write(void const*, unsigned short)+0x2c6>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
    9014:	1a64      	subs	r4, r4, r1
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    9016:	f106 0808 	add.w	r8, r6, #8
    901a:	e006      	b.n	902a <SdFile::write(void const*, unsigned short)+0x6a>
    901c:	68b1      	ldr	r1, [r6, #8]
    901e:	6a30      	ldr	r0, [r6, #32]
    9020:	f000 fc3a 	bl	9898 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    9024:	3c01      	subs	r4, #1
    9026:	2800      	cmp	r0, #0
    9028:	d0d2      	beq.n	8fd0 <SdFile::write(void const*, unsigned short)+0x10>
    902a:	4642      	mov	r2, r8
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    902c:	2c00      	cmp	r4, #0
    902e:	d1f5      	bne.n	901c <SdFile::write(void const*, unsigned short)+0x5c>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    9030:	60f5      	str	r5, [r6, #12]
    9032:	462b      	mov	r3, r5
    9034:	e000      	b.n	9038 <SdFile::write(void const*, unsigned short)+0x78>
    9036:	68f3      	ldr	r3, [r6, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    9038:	9a01      	ldr	r2, [sp, #4]
    903a:	2a00      	cmp	r2, #0
    903c:	f000 80f3 	beq.w	9226 <SdFile::write(void const*, unsigned short)+0x266>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    9040:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 92ec <SdFile::write(void const*, unsigned short)+0x32c>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    9044:	9d01      	ldr	r5, [sp, #4]
    9046:	e033      	b.n	90b0 <SdFile::write(void const*, unsigned short)+0xf0>
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    9048:	f1b8 0f00 	cmp.w	r8, #0
    904c:	d13a      	bne.n	90c4 <SdFile::write(void const*, unsigned short)+0x104>
      // start of new cluster
      if (curCluster_ == 0) {
    904e:	68b1      	ldr	r1, [r6, #8]
    9050:	2900      	cmp	r1, #0
    9052:	f040 80c2 	bne.w	91da <SdFile::write(void const*, unsigned short)+0x21a>
        if (firstCluster_ == 0) {
    9056:	69f3      	ldr	r3, [r6, #28]
    9058:	2b00      	cmp	r3, #0
    905a:	f000 80d1 	beq.w	9200 <SdFile::write(void const*, unsigned short)+0x240>
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    905e:	60b3      	str	r3, [r6, #8]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    9060:	f5c8 7400 	rsb	r4, r8, #512	; 0x200

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    9064:	7c01      	ldrb	r1, [r0, #16]
    9066:	6942      	ldr	r2, [r0, #20]
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    9068:	b2a4      	uxth	r4, r4

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    906a:	3b02      	subs	r3, #2
    906c:	408b      	lsls	r3, r1
    906e:	444a      	add	r2, r9
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    9070:	42ac      	cmp	r4, r5

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    9072:	eb03 0902 	add.w	r9, r3, r2
    }
    // max space in block
    uint16_t n = 512 - blockOffset;

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
    9076:	d827      	bhi.n	90c8 <SdFile::write(void const*, unsigned short)+0x108>

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
    9078:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    907c:	d125      	bne.n	90ca <SdFile::write(void const*, unsigned short)+0x10a>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    907e:	4b96      	ldr	r3, [pc, #600]	; (92d8 <SdFile::write(void const*, unsigned short)+0x318>)
    9080:	681b      	ldr	r3, [r3, #0]
    9082:	4599      	cmp	r9, r3
    9084:	f000 80a4 	beq.w	91d0 <SdFile::write(void const*, unsigned short)+0x210>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    9088:	4b94      	ldr	r3, [pc, #592]	; (92dc <SdFile::write(void const*, unsigned short)+0x31c>)
    908a:	4649      	mov	r1, r9
    908c:	6818      	ldr	r0, [r3, #0]
    908e:	463a      	mov	r2, r7
    9090:	f7ff fa06 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    9094:	2800      	cmp	r0, #0
    9096:	d09b      	beq.n	8fd0 <SdFile::write(void const*, unsigned short)+0x10>
      src += 512;
    9098:	f507 7700 	add.w	r7, r7, #512	; 0x200
    909c:	f44f 7800 	mov.w	r8, #512	; 0x200
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
    90a0:	68f3      	ldr	r3, [r6, #12]
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    90a2:	1b2d      	subs	r5, r5, r4
    curPosition_ += n;
    90a4:	4443      	add	r3, r8
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    90a6:	b2ad      	uxth	r5, r5
    curPosition_ += n;
    90a8:	60f3      	str	r3, [r6, #12]
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    90aa:	2d00      	cmp	r5, #0
    90ac:	f000 80bb 	beq.w	9226 <SdFile::write(void const*, unsigned short)+0x266>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    90b0:	6a30      	ldr	r0, [r6, #32]
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    90b2:	7902      	ldrb	r2, [r0, #4]
    90b4:	3a01      	subs	r2, #1
    90b6:	ea02 2253 	and.w	r2, r2, r3, lsr #9
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    90ba:	f012 09ff 	ands.w	r9, r2, #255	; 0xff
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    90be:	f3c3 0808 	ubfx	r8, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
    90c2:	d0c1      	beq.n	9048 <SdFile::write(void const*, unsigned short)+0x88>
    90c4:	68b3      	ldr	r3, [r6, #8]
    90c6:	e7cb      	b.n	9060 <SdFile::write(void const*, unsigned short)+0xa0>

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    90c8:	462c      	mov	r4, r5
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    90ca:	f1b8 0f00 	cmp.w	r8, #0
    90ce:	d103      	bne.n	90d8 <SdFile::write(void const*, unsigned short)+0x118>
    90d0:	68f2      	ldr	r2, [r6, #12]
    90d2:	69b3      	ldr	r3, [r6, #24]
    90d4:	429a      	cmp	r2, r3
    90d6:	d25c      	bcs.n	9192 <SdFile::write(void const*, unsigned short)+0x1d2>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    90d8:	4648      	mov	r0, r9
    90da:	2101      	movs	r1, #1
    90dc:	f000 fae0 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    90e0:	2800      	cmp	r0, #0
    90e2:	f43f af75 	beq.w	8fd0 <SdFile::write(void const*, unsigned short)+0x10>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    90e6:	eb08 030b 	add.w	r3, r8, fp
      uint8_t* end = dst + n;
    90ea:	1918      	adds	r0, r3, r4
      while (dst != end) *dst++ = *src++;
    90ec:	4283      	cmp	r3, r0
    90ee:	d062      	beq.n	91b6 <SdFile::write(void const*, unsigned short)+0x1f6>
    90f0:	f108 0804 	add.w	r8, r8, #4
    90f4:	1d3a      	adds	r2, r7, #4
    90f6:	44d8      	add	r8, fp
    90f8:	4293      	cmp	r3, r2
    90fa:	bf38      	it	cc
    90fc:	4547      	cmpcc	r7, r8
    90fe:	ea43 0e07 	orr.w	lr, r3, r7
    9102:	bf2c      	ite	cs
    9104:	2201      	movcs	r2, #1
    9106:	2200      	movcc	r2, #0
    9108:	1c59      	adds	r1, r3, #1
    910a:	f01e 0f03 	tst.w	lr, #3
    910e:	f002 0201 	and.w	r2, r2, #1
    9112:	ebc1 0e00 	rsb	lr, r1, r0
    9116:	bf18      	it	ne
    9118:	2200      	movne	r2, #0
    911a:	f10e 0a01 	add.w	sl, lr, #1
    911e:	469c      	mov	ip, r3
    9120:	2a00      	cmp	r2, #0
    9122:	d04a      	beq.n	91ba <SdFile::write(void const*, unsigned short)+0x1fa>
    9124:	f1ba 0f09 	cmp.w	sl, #9
    9128:	d947      	bls.n	91ba <SdFile::write(void const*, unsigned short)+0x1fa>
    912a:	f1ae 0203 	sub.w	r2, lr, #3
    912e:	0892      	lsrs	r2, r2, #2
    9130:	3201      	adds	r2, #1
    9132:	ea4f 0982 	mov.w	r9, r2, lsl #2
    9136:	f1a7 0804 	sub.w	r8, r7, #4
    913a:	f04f 0e00 	mov.w	lr, #0
    913e:	9300      	str	r3, [sp, #0]
    9140:	f10e 0e01 	add.w	lr, lr, #1
    9144:	f858 3f04 	ldr.w	r3, [r8, #4]!
    9148:	f84c 3b04 	str.w	r3, [ip], #4
    914c:	4596      	cmp	lr, r2
    914e:	d3f7      	bcc.n	9140 <SdFile::write(void const*, unsigned short)+0x180>
    9150:	9b00      	ldr	r3, [sp, #0]
    9152:	45d1      	cmp	r9, sl
    9154:	eb07 0c09 	add.w	ip, r7, r9
    9158:	eb03 0e09 	add.w	lr, r3, r9
    915c:	d013      	beq.n	9186 <SdFile::write(void const*, unsigned short)+0x1c6>
    915e:	f817 8022 	ldrb.w	r8, [r7, r2, lsl #2]
    9162:	f803 8022 	strb.w	r8, [r3, r2, lsl #2]
    9166:	f10e 0301 	add.w	r3, lr, #1
    916a:	4298      	cmp	r0, r3
    916c:	d00b      	beq.n	9186 <SdFile::write(void const*, unsigned short)+0x1c6>
    916e:	f89c 3001 	ldrb.w	r3, [ip, #1]
    9172:	f88e 3001 	strb.w	r3, [lr, #1]
    9176:	f10e 0302 	add.w	r3, lr, #2
    917a:	4298      	cmp	r0, r3
    917c:	d003      	beq.n	9186 <SdFile::write(void const*, unsigned short)+0x1c6>
    917e:	f89c 3002 	ldrb.w	r3, [ip, #2]
    9182:	f88e 3002 	strb.w	r3, [lr, #2]
    9186:	f1c1 0101 	rsb	r1, r1, #1
    918a:	4408      	add	r0, r1
    918c:	4407      	add	r7, r0
    918e:	46a0      	mov	r8, r4
    9190:	e786      	b.n	90a0 <SdFile::write(void const*, unsigned short)+0xe0>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    9192:	f000 fa5b 	bl	964c <SdVolume::cacheFlush()>
    9196:	2800      	cmp	r0, #0
    9198:	f43f af1a 	beq.w	8fd0 <SdFile::write(void const*, unsigned short)+0x10>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    919c:	4a50      	ldr	r2, [pc, #320]	; (92e0 <SdFile::write(void const*, unsigned short)+0x320>)
        SdVolume::cacheBlockNumber_ = block;
    919e:	4b4e      	ldr	r3, [pc, #312]	; (92d8 <SdFile::write(void const*, unsigned short)+0x318>)
    91a0:	f8c3 9000 	str.w	r9, [r3]
    91a4:	7813      	ldrb	r3, [r2, #0]
    91a6:	f043 0301 	orr.w	r3, r3, #1
    91aa:	7013      	strb	r3, [r2, #0]
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    91ac:	eb08 030b 	add.w	r3, r8, fp
      uint8_t* end = dst + n;
    91b0:	1918      	adds	r0, r3, r4
      while (dst != end) *dst++ = *src++;
    91b2:	4283      	cmp	r3, r0
    91b4:	d19c      	bne.n	90f0 <SdFile::write(void const*, unsigned short)+0x130>
    91b6:	46a0      	mov	r8, r4
    91b8:	e772      	b.n	90a0 <SdFile::write(void const*, unsigned short)+0xe0>
    91ba:	3b01      	subs	r3, #1
    91bc:	1e7a      	subs	r2, r7, #1
    91be:	f100 3cff 	add.w	ip, r0, #4294967295
    91c2:	f812 ef01 	ldrb.w	lr, [r2, #1]!
    91c6:	f803 ef01 	strb.w	lr, [r3, #1]!
    91ca:	459c      	cmp	ip, r3
    91cc:	d1f9      	bne.n	91c2 <SdFile::write(void const*, unsigned short)+0x202>
    91ce:	e7da      	b.n	9186 <SdFile::write(void const*, unsigned short)+0x1c6>
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    if (n == 512) {
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    91d0:	4a41      	ldr	r2, [pc, #260]	; (92d8 <SdFile::write(void const*, unsigned short)+0x318>)
    91d2:	f04f 33ff 	mov.w	r3, #4294967295
    91d6:	6013      	str	r3, [r2, #0]
    91d8:	e756      	b.n	9088 <SdFile::write(void const*, unsigned short)+0xc8>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    91da:	aa03      	add	r2, sp, #12
    91dc:	f000 fb5c 	bl	9898 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    91e0:	2800      	cmp	r0, #0
    91e2:	f43f aef8 	beq.w	8fd6 <SdFile::write(void const*, unsigned short)+0x16>
        if (vol_->isEOC(next)) {
    91e6:	6a30      	ldr	r0, [r6, #32]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    91e8:	4c3e      	ldr	r4, [pc, #248]	; (92e4 <SdFile::write(void const*, unsigned short)+0x324>)
    91ea:	f890 1020 	ldrb.w	r1, [r0, #32]
    91ee:	9b03      	ldr	r3, [sp, #12]
    91f0:	f64f 72f8 	movw	r2, #65528	; 0xfff8
    91f4:	2910      	cmp	r1, #16
    91f6:	bf18      	it	ne
    91f8:	4622      	movne	r2, r4
    91fa:	4293      	cmp	r3, r2
    91fc:	f4ff af2f 	bcc.w	905e <SdFile::write(void const*, unsigned short)+0x9e>
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    9200:	f106 0208 	add.w	r2, r6, #8
    9204:	2101      	movs	r1, #1
    9206:	f000 f8eb 	bl	93e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    920a:	2800      	cmp	r0, #0
    920c:	f43f aee0 	beq.w	8fd0 <SdFile::write(void const*, unsigned short)+0x10>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    9210:	69f3      	ldr	r3, [r6, #28]
    9212:	2b00      	cmp	r3, #0
    9214:	d131      	bne.n	927a <SdFile::write(void const*, unsigned short)+0x2ba>
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
    9216:	7972      	ldrb	r2, [r6, #5]
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    9218:	68b3      	ldr	r3, [r6, #8]
    921a:	61f3      	str	r3, [r6, #28]
    flags_ |= F_FILE_DIR_DIRTY;
    921c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9220:	7172      	strb	r2, [r6, #5]
    9222:	6a30      	ldr	r0, [r6, #32]
    9224:	e71c      	b.n	9060 <SdFile::write(void const*, unsigned short)+0xa0>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    9226:	69b2      	ldr	r2, [r6, #24]
    9228:	429a      	cmp	r2, r3
    922a:	d21a      	bcs.n	9262 <SdFile::write(void const*, unsigned short)+0x2a2>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
    922c:	7972      	ldrb	r2, [r6, #5]
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    922e:	61b3      	str	r3, [r6, #24]
    flags_ |= F_FILE_DIR_DIRTY;
    9230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9234:	7172      	strb	r2, [r6, #5]
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    9236:	0711      	lsls	r1, r2, #28
    9238:	d50a      	bpl.n	9250 <SdFile::write(void const*, unsigned short)+0x290>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    923a:	79b3      	ldrb	r3, [r6, #6]
    923c:	2b00      	cmp	r3, #0
    923e:	f43f aec7 	beq.w	8fd0 <SdFile::write(void const*, unsigned short)+0x10>

  if (flags_ & F_FILE_DIR_DIRTY) {
    9242:	0612      	lsls	r2, r2, #24
    9244:	d422      	bmi.n	928c <SdFile::write(void const*, unsigned short)+0x2cc>
      d->lastAccessDate = d->lastWriteDate;
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
    9246:	f000 fa01 	bl	964c <SdVolume::cacheFlush()>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    924a:	2800      	cmp	r0, #0
    924c:	f43f aec0 	beq.w	8fd0 <SdFile::write(void const*, unsigned short)+0x10>
  }
  return nbyte;
    9250:	9801      	ldr	r0, [sp, #4]
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    9252:	b005      	add	sp, #20
    9254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    9258:	9901      	ldr	r1, [sp, #4]
    925a:	2900      	cmp	r1, #0
    925c:	f47f aef0 	bne.w	9040 <SdFile::write(void const*, unsigned short)+0x80>
    9260:	e7e9      	b.n	9236 <SdFile::write(void const*, unsigned short)+0x276>
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    9262:	4b21      	ldr	r3, [pc, #132]	; (92e8 <SdFile::write(void const*, unsigned short)+0x328>)
    9264:	7972      	ldrb	r2, [r6, #5]
    9266:	681b      	ldr	r3, [r3, #0]
    9268:	2b00      	cmp	r3, #0
    926a:	d0e4      	beq.n	9236 <SdFile::write(void const*, unsigned short)+0x276>
    926c:	9b01      	ldr	r3, [sp, #4]
    926e:	2b00      	cmp	r3, #0
    9270:	d0e1      	beq.n	9236 <SdFile::write(void const*, unsigned short)+0x276>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    9272:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    9276:	7172      	strb	r2, [r6, #5]
    9278:	e7dd      	b.n	9236 <SdFile::write(void const*, unsigned short)+0x276>
    927a:	68b3      	ldr	r3, [r6, #8]
    927c:	e7d1      	b.n	9222 <SdFile::write(void const*, unsigned short)+0x262>
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    curCluster_ = 0;
    927e:	60b5      	str	r5, [r6, #8]
    curPosition_ = 0;
    9280:	60f5      	str	r5, [r6, #12]
    9282:	462b      	mov	r3, r5
    9284:	e6d8      	b.n	9038 <SdFile::write(void const*, unsigned short)+0x78>
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);

  if (nNew < nCur || curPosition_ == 0) {
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    9286:	69f3      	ldr	r3, [r6, #28]
    9288:	60b3      	str	r3, [r6, #8]
    928a:	e6c4      	b.n	9016 <SdFile::write(void const*, unsigned short)+0x56>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    928c:	2101      	movs	r1, #1
    928e:	6930      	ldr	r0, [r6, #16]
    9290:	f000 fa06 	bl	96a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    9294:	2800      	cmp	r0, #0
    9296:	f43f ae9b 	beq.w	8fd0 <SdFile::write(void const*, unsigned short)+0x10>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    929a:	7d34      	ldrb	r4, [r6, #20]
    929c:	4b13      	ldr	r3, [pc, #76]	; (92ec <SdFile::write(void const*, unsigned short)+0x32c>)
  // only allow open files and directories
  if (!isOpen()) return false;

  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;
    929e:	eb13 1444 	adds.w	r4, r3, r4, lsl #5
    92a2:	f43f ae95 	beq.w	8fd0 <SdFile::write(void const*, unsigned short)+0x10>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    92a6:	79b3      	ldrb	r3, [r6, #6]
    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    92a8:	4a0f      	ldr	r2, [pc, #60]	; (92e8 <SdFile::write(void const*, unsigned short)+0x328>)
  if (flags_ & F_FILE_DIR_DIRTY) {
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    if (!d) return false;

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    92aa:	2b01      	cmp	r3, #1
    92ac:	bf9c      	itt	ls
    92ae:	69b3      	ldrls	r3, [r6, #24]
    92b0:	61e3      	strls	r3, [r4, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    92b2:	69f3      	ldr	r3, [r6, #28]
    d->firstClusterHigh = firstCluster_ >> 16;

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    92b4:	6812      	ldr	r2, [r2, #0]

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    92b6:	8363      	strh	r3, [r4, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
    92b8:	0c1b      	lsrs	r3, r3, #16
    92ba:	82a3      	strh	r3, [r4, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    92bc:	b132      	cbz	r2, 92cc <SdFile::write(void const*, unsigned short)+0x30c>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    92be:	f104 0116 	add.w	r1, r4, #22
    92c2:	f104 0018 	add.w	r0, r4, #24
    92c6:	4790      	blx	r2
      d->lastAccessDate = d->lastWriteDate;
    92c8:	8b23      	ldrh	r3, [r4, #24]
    92ca:	8263      	strh	r3, [r4, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    92cc:	7973      	ldrb	r3, [r6, #5]
    92ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    92d2:	7173      	strb	r3, [r6, #5]
    92d4:	e7b7      	b.n	9246 <SdFile::write(void const*, unsigned short)+0x286>
    92d6:	bf00      	nop
    92d8:	1fff4988 	.word	0x1fff4988
    92dc:	1fff6414 	.word	0x1fff6414
    92e0:	1fff6618 	.word	0x1fff6618
    92e4:	0ffffff8 	.word	0x0ffffff8
    92e8:	1fff640c 	.word	0x1fff640c
    92ec:	1fff6418 	.word	0x1fff6418

000092f0 <SdFile::write(unsigned char)>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    92f0:	b500      	push	{lr}
    92f2:	b083      	sub	sp, #12
    92f4:	ab02      	add	r3, sp, #8
  return write(&b, 1);
    92f6:	2201      	movs	r2, #1
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    92f8:	f803 1d01 	strb.w	r1, [r3, #-1]!
  return write(&b, 1);
    92fc:	4619      	mov	r1, r3
    92fe:	f7ff fe5f 	bl	8fc0 <SdFile::write(void const*, unsigned short)>
}
    9302:	b003      	add	sp, #12
    9304:	f85d fb04 	ldr.w	pc, [sp], #4

00009308 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    9308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    930c:	460d      	mov	r5, r1
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    930e:	f890 1020 	ldrb.w	r1, [r0, #32]

  if (lba != cacheBlockNumber_) {
    9312:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 93d8 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xd0>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    9316:	69c3      	ldr	r3, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    9318:	f8d8 6000 	ldr.w	r6, [r8]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    931c:	2910      	cmp	r1, #16
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    931e:	4604      	mov	r4, r0
    9320:	4691      	mov	r9, r2
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9322:	d017      	beq.n	9354 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x4c>
    9324:	eb03 13d5 	add.w	r3, r3, r5, lsr #7

  if (lba != cacheBlockNumber_) {
    9328:	42b3      	cmp	r3, r6
    932a:	d11d      	bne.n	9368 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    932c:	4f27      	ldr	r7, [pc, #156]	; (93cc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc4>)
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    932e:	4b28      	ldr	r3, [pc, #160]	; (93d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc8>)
    9330:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    9334:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    9338:	7e22      	ldrb	r2, [r4, #24]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    933a:	783b      	ldrb	r3, [r7, #0]
    933c:	2a01      	cmp	r2, #1
    933e:	f043 0301 	orr.w	r3, r3, #1
    9342:	703b      	strb	r3, [r7, #0]
    9344:	bf81      	itttt	hi
    9346:	68a3      	ldrhi	r3, [r4, #8]
    9348:	4a22      	ldrhi	r2, [pc, #136]	; (93d4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xcc>)
    934a:	18f6      	addhi	r6, r6, r3
    934c:	6016      	strhi	r6, [r2, #0]
  return true;
    934e:	2001      	movs	r0, #1
    9350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9354:	eb03 2315 	add.w	r3, r3, r5, lsr #8

  if (lba != cacheBlockNumber_) {
    9358:	42b3      	cmp	r3, r6
    935a:	d105      	bne.n	9368 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x60>
    935c:	4f1b      	ldr	r7, [pc, #108]	; (93cc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc4>)
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    935e:	4b1c      	ldr	r3, [pc, #112]	; (93d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc8>)
    9360:	b2ed      	uxtb	r5, r5
    9362:	f823 9015 	strh.w	r9, [r3, r5, lsl #1]
    9366:	e7e7      	b.n	9338 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x30>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9368:	4f18      	ldr	r7, [pc, #96]	; (93cc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc4>)
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    936a:	f8df a070 	ldr.w	sl, [pc, #112]	; 93dc <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xd4>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    936e:	4631      	mov	r1, r6
    9370:	461e      	mov	r6, r3

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9372:	783b      	ldrb	r3, [r7, #0]
    9374:	b983      	cbnz	r3, 9398 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x90>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9376:	f8da 0000 	ldr.w	r0, [sl]
    937a:	4a15      	ldr	r2, [pc, #84]	; (93d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc8>)
    937c:	4631      	mov	r1, r6
    937e:	f7fe ff09 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    9382:	b130      	cbz	r0, 9392 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x8a>

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    9384:	f894 3020 	ldrb.w	r3, [r4, #32]
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
    9388:	f8c8 6000 	str.w	r6, [r8]

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    938c:	2b10      	cmp	r3, #16
    938e:	d1ce      	bne.n	932e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x26>
    9390:	e7e5      	b.n	935e <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x56>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    9392:	2000      	movs	r0, #0
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    9394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9398:	4a0d      	ldr	r2, [pc, #52]	; (93d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc8>)
    939a:	f8da 0000 	ldr.w	r0, [sl]
    939e:	f7ff f87f 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    93a2:	2800      	cmp	r0, #0
    93a4:	d0f5      	beq.n	9392 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x8a>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    93a6:	f8df b02c 	ldr.w	fp, [pc, #44]	; 93d4 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xcc>
    93aa:	f8db 1000 	ldr.w	r1, [fp]
    93ae:	b911      	cbnz	r1, 93b6 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xae>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    93b0:	2300      	movs	r3, #0
    93b2:	703b      	strb	r3, [r7, #0]
    93b4:	e7df      	b.n	9376 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x6e>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    93b6:	4a06      	ldr	r2, [pc, #24]	; (93d0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xc8>)
    93b8:	f8da 0000 	ldr.w	r0, [sl]
    93bc:	f7ff f870 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    93c0:	2800      	cmp	r0, #0
    93c2:	d0e6      	beq.n	9392 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0x8a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    93c4:	2300      	movs	r3, #0
    93c6:	f8cb 3000 	str.w	r3, [fp]
    93ca:	e7f1      	b.n	93b0 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]+0xa8>
    93cc:	1fff6618 	.word	0x1fff6618
    93d0:	1fff6418 	.word	0x1fff6418
    93d4:	1fff6410 	.word	0x1fff6410
    93d8:	1fff4988 	.word	0x1fff4988
    93dc:	1fff6414 	.word	0x1fff6414

000093e0 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    93e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    93e4:	6813      	ldr	r3, [r2, #0]
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    93e6:	b087      	sub	sp, #28

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    93e8:	2b00      	cmp	r3, #0
    93ea:	d071      	beq.n	94d0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xf0>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    93ec:	f103 0801 	add.w	r8, r3, #1

    // don't save new start location
    setStart = false;
    93f0:	2300      	movs	r3, #0
    93f2:	9305      	str	r3, [sp, #20]
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    93f4:	68c4      	ldr	r4, [r0, #12]
    93f6:	1c63      	adds	r3, r4, #1
    93f8:	4699      	mov	r9, r3

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    93fa:	b38c      	cbz	r4, 9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
    93fc:	4644      	mov	r4, r8

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    93fe:	45a1      	cmp	r9, r4
      bgnCluster = endCluster = 2;
    9400:	bf3c      	itt	cc
    9402:	2402      	movcc	r4, #2
    9404:	46a0      	movcc	r8, r4
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    9406:	429c      	cmp	r4, r3
    9408:	9101      	str	r1, [sp, #4]
    940a:	4605      	mov	r5, r0
    940c:	9204      	str	r2, [sp, #16]
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    940e:	f8df b228 	ldr.w	fp, [pc, #552]	; 9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    9412:	f04f 0600 	mov.w	r6, #0
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    9416:	d823      	bhi.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9418:	f895 3020 	ldrb.w	r3, [r5, #32]
  if (lba != cacheBlockNumber_) {
    941c:	f8df a228 	ldr.w	sl, [pc, #552]	; 9648 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x268>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    9420:	69ef      	ldr	r7, [r5, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    9422:	f8da 1000 	ldr.w	r1, [sl]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9426:	2b10      	cmp	r3, #16
    9428:	d026      	beq.n	9478 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x98>
    942a:	eb07 17d4 	add.w	r7, r7, r4, lsr #7
  if (lba != cacheBlockNumber_) {
    942e:	428f      	cmp	r7, r1
    9430:	d12b      	bne.n	948a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xaa>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    9432:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    9436:	4f80      	ldr	r7, [pc, #512]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    9438:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
    943c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
      bgnCluster = endCluster = 2;
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
    9440:	b193      	cbz	r3, 9468 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x88>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    9442:	3401      	adds	r4, #1
    9444:	46a0      	mov	r8, r4
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    9446:	68eb      	ldr	r3, [r5, #12]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    9448:	3601      	adds	r6, #1
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    944a:	42b3      	cmp	r3, r6
    944c:	d908      	bls.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    944e:	45a1      	cmp	r9, r4
      bgnCluster = endCluster = 2;
    9450:	bf38      	it	cc
    9452:	2402      	movcc	r4, #2
    9454:	f103 0301 	add.w	r3, r3, #1
    9458:	bf38      	it	cc
    945a:	46a0      	movcc	r8, r4
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    945c:	429c      	cmp	r4, r3
    945e:	d9db      	bls.n	9418 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x38>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    9460:	2000      	movs	r0, #0
}
    9462:	b007      	add	sp, #28
    9464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9468:	1c63      	adds	r3, r4, #1
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    946a:	9901      	ldr	r1, [sp, #4]
    946c:	ebc8 0203 	rsb	r2, r8, r3
    9470:	4291      	cmp	r1, r2
    9472:	d042      	beq.n	94fa <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x11a>
    9474:	461c      	mov	r4, r3
    9476:	e7e6      	b.n	9446 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x66>
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9478:	eb07 2714 	add.w	r7, r7, r4, lsr #8
  if (lba != cacheBlockNumber_) {
    947c:	428f      	cmp	r7, r1
    947e:	d104      	bne.n	948a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xaa>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    9480:	b2e3      	uxtb	r3, r4
    9482:	4f6d      	ldr	r7, [pc, #436]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    9484:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
    9488:	e7da      	b.n	9440 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    948a:	4b6c      	ldr	r3, [pc, #432]	; (963c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x25c>)
    948c:	9302      	str	r3, [sp, #8]
    948e:	781b      	ldrb	r3, [r3, #0]
    9490:	b973      	cbnz	r3, 94b0 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xd0>
    9492:	4b6b      	ldr	r3, [pc, #428]	; (9640 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x260>)
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9494:	6818      	ldr	r0, [r3, #0]
    9496:	4a68      	ldr	r2, [pc, #416]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    9498:	4639      	mov	r1, r7
    949a:	f7fe fe7b 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    949e:	2800      	cmp	r0, #0
    94a0:	d0de      	beq.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    94a2:	f895 3020 	ldrb.w	r3, [r5, #32]
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
    94a6:	f8ca 7000 	str.w	r7, [sl]
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    94aa:	2b10      	cmp	r3, #16
    94ac:	d1c1      	bne.n	9432 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x52>
    94ae:	e7e7      	b.n	9480 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xa0>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    94b0:	4b63      	ldr	r3, [pc, #396]	; (9640 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x260>)
    94b2:	4a61      	ldr	r2, [pc, #388]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    94b4:	6818      	ldr	r0, [r3, #0]
    94b6:	9303      	str	r3, [sp, #12]
    94b8:	f7fe fff2 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    94bc:	2800      	cmp	r0, #0
    94be:	d0cf      	beq.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    94c0:	4b60      	ldr	r3, [pc, #384]	; (9644 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x264>)
    94c2:	6819      	ldr	r1, [r3, #0]
    94c4:	9b03      	ldr	r3, [sp, #12]
    94c6:	b961      	cbnz	r1, 94e2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x102>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    94c8:	9902      	ldr	r1, [sp, #8]
    94ca:	2200      	movs	r2, #0
    94cc:	700a      	strb	r2, [r1, #0]
    94ce:	e7e1      	b.n	9494 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xb4>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    94d0:	f1a1 0301 	sub.w	r3, r1, #1
    94d4:	fab3 f383 	clz	r3, r3
    94d8:	095b      	lsrs	r3, r3, #5

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    94da:	f8d0 8000 	ldr.w	r8, [r0]

    // save next search start if one cluster
    setStart = 1 == count;
    94de:	9305      	str	r3, [sp, #20]
    94e0:	e788      	b.n	93f4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x14>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    94e2:	4b57      	ldr	r3, [pc, #348]	; (9640 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x260>)
    94e4:	4a54      	ldr	r2, [pc, #336]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    94e6:	6818      	ldr	r0, [r3, #0]
    94e8:	f7fe ffda 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    94ec:	2800      	cmp	r0, #0
    94ee:	d0b7      	beq.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
        return false;
      }
      cacheMirrorBlock_ = 0;
    94f0:	4b54      	ldr	r3, [pc, #336]	; (9644 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x264>)
    94f2:	2200      	movs	r2, #0
    94f4:	601a      	str	r2, [r3, #0]
    94f6:	9b03      	ldr	r3, [sp, #12]
    94f8:	e7e6      	b.n	94c8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xe8>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    94fa:	2c01      	cmp	r4, #1
    94fc:	d9b0      	bls.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    94fe:	68eb      	ldr	r3, [r5, #12]
    9500:	3301      	adds	r3, #1
    9502:	429c      	cmp	r4, r3
    9504:	d8ac      	bhi.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
    9506:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    950a:	4621      	mov	r1, r4
    950c:	4628      	mov	r0, r5
    950e:	f7ff fefb 	bl	9308 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    9512:	2800      	cmp	r0, #0
    9514:	d0a4      	beq.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

  // link clusters
  while (endCluster > bgnCluster) {
    9516:	45a0      	cmp	r8, r4
    9518:	d260      	bcs.n	95dc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1fc>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    951a:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    951c:	2c01      	cmp	r4, #1
    951e:	d99f      	bls.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9520:	68eb      	ldr	r3, [r5, #12]
    9522:	3301      	adds	r3, #1
    9524:	42a3      	cmp	r3, r4
    9526:	d39b      	bcc.n	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
    9528:	f8df b110 	ldr.w	fp, [pc, #272]	; 963c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x25c>
    952c:	46b9      	mov	r9, r7
    952e:	f89b 0000 	ldrb.w	r0, [fp]
    9532:	e01d      	b.n	9570 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x190>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9534:	eb06 16d4 	add.w	r6, r6, r4, lsr #7

  if (lba != cacheBlockNumber_) {
    9538:	428e      	cmp	r6, r1
    953a:	d12b      	bne.n	9594 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1b4>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    953c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    9540:	f849 7023 	str.w	r7, [r9, r3, lsl #2]
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    9544:	7e2b      	ldrb	r3, [r5, #24]
    9546:	f040 0001 	orr.w	r0, r0, #1
    954a:	2b01      	cmp	r3, #1
    954c:	f88b 0000 	strb.w	r0, [fp]
    9550:	d903      	bls.n	955a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x17a>
    9552:	68ab      	ldr	r3, [r5, #8]
    9554:	4a3b      	ldr	r2, [pc, #236]	; (9644 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x264>)
    9556:	4419      	add	r1, r3
    9558:	6011      	str	r1, [r2, #0]
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    955a:	45a0      	cmp	r8, r4
    955c:	d03e      	beq.n	95dc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1fc>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    955e:	3c01      	subs	r4, #1
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    9560:	2c01      	cmp	r4, #1
    9562:	f43f af7d 	beq.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    9566:	68eb      	ldr	r3, [r5, #12]
    9568:	3301      	adds	r3, #1
    956a:	429c      	cmp	r4, r3
    956c:	f63f af78 	bhi.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9570:	f895 3020 	ldrb.w	r3, [r5, #32]

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    9574:	69ee      	ldr	r6, [r5, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    9576:	f8da 1000 	ldr.w	r1, [sl]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    957a:	2b10      	cmp	r3, #16
    957c:	f104 0701 	add.w	r7, r4, #1
    9580:	d1d8      	bne.n	9534 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x154>
    9582:	eb06 2614 	add.w	r6, r6, r4, lsr #8

  if (lba != cacheBlockNumber_) {
    9586:	42b1      	cmp	r1, r6
    9588:	d104      	bne.n	9594 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1b4>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    958a:	b2e3      	uxtb	r3, r4
    958c:	4631      	mov	r1, r6
    958e:	f829 7013 	strh.w	r7, [r9, r3, lsl #1]
    9592:	e7d7      	b.n	9544 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x164>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9594:	b988      	cbnz	r0, 95ba <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1da>
    9596:	4b2a      	ldr	r3, [pc, #168]	; (9640 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x260>)
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9598:	6818      	ldr	r0, [r3, #0]
    959a:	4a27      	ldr	r2, [pc, #156]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    959c:	4631      	mov	r1, r6
    959e:	f7fe fdf9 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    95a2:	2800      	cmp	r0, #0
    95a4:	f43f af5c 	beq.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    95a8:	f895 3020 	ldrb.w	r3, [r5, #32]
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
    95ac:	f8ca 6000 	str.w	r6, [sl]

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    95b0:	2b10      	cmp	r3, #16
    95b2:	d13c      	bne.n	962e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x24e>
    95b4:	f89b 0000 	ldrb.w	r0, [fp]
    95b8:	e7e7      	b.n	958a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1aa>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    95ba:	4b21      	ldr	r3, [pc, #132]	; (9640 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x260>)
    95bc:	4a1e      	ldr	r2, [pc, #120]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    95be:	6818      	ldr	r0, [r3, #0]
    95c0:	9301      	str	r3, [sp, #4]
    95c2:	f7fe ff6d 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    95c6:	2800      	cmp	r0, #0
    95c8:	f43f af4a 	beq.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    95cc:	4b1d      	ldr	r3, [pc, #116]	; (9644 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x264>)
    95ce:	6819      	ldr	r1, [r3, #0]
    95d0:	9b01      	ldr	r3, [sp, #4]
    95d2:	b9f9      	cbnz	r1, 9614 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x234>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    95d4:	2200      	movs	r2, #0
    95d6:	f88b 2000 	strb.w	r2, [fp]
    95da:	e7dd      	b.n	9598 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1b8>
  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    95dc:	9b04      	ldr	r3, [sp, #16]
    95de:	6819      	ldr	r1, [r3, #0]
    95e0:	b171      	cbz	r1, 9600 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x220>
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    95e2:	2901      	cmp	r1, #1
    95e4:	f67f af3c 	bls.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    95e8:	68eb      	ldr	r3, [r5, #12]
    95ea:	3301      	adds	r3, #1
    95ec:	4299      	cmp	r1, r3
    95ee:	f63f af37 	bhi.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
    95f2:	4642      	mov	r2, r8
    95f4:	4628      	mov	r0, r5
    95f6:	f7ff fe87 	bl	9308 <SdVolume::fatPut(unsigned long, unsigned long) [clone .part.3]>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    95fa:	2800      	cmp	r0, #0
    95fc:	f43f af30 	beq.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    9600:	9b04      	ldr	r3, [sp, #16]
    9602:	f8c3 8000 	str.w	r8, [r3]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    9606:	9b05      	ldr	r3, [sp, #20]
    9608:	b113      	cbz	r3, 9610 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x230>
    960a:	f108 0301 	add.w	r3, r8, #1
    960e:	602b      	str	r3, [r5, #0]

  return true;
    9610:	2001      	movs	r0, #1
    9612:	e726      	b.n	9462 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x82>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9614:	4b0a      	ldr	r3, [pc, #40]	; (9640 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x260>)
    9616:	4a08      	ldr	r2, [pc, #32]	; (9638 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x258>)
    9618:	6818      	ldr	r0, [r3, #0]
    961a:	f7fe ff41 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    961e:	2800      	cmp	r0, #0
    9620:	f43f af1e 	beq.w	9460 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x80>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9624:	4b07      	ldr	r3, [pc, #28]	; (9644 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x264>)
    9626:	2200      	movs	r2, #0
    9628:	601a      	str	r2, [r3, #0]
    962a:	9b01      	ldr	r3, [sp, #4]
    962c:	e7d2      	b.n	95d4 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1f4>

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    962e:	4631      	mov	r1, r6
    9630:	f89b 0000 	ldrb.w	r0, [fp]
    9634:	e782      	b.n	953c <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x15c>
    9636:	bf00      	nop
    9638:	1fff6418 	.word	0x1fff6418
    963c:	1fff6618 	.word	0x1fff6618
    9640:	1fff6414 	.word	0x1fff6414
    9644:	1fff6410 	.word	0x1fff6410
    9648:	1fff4988 	.word	0x1fff4988

0000964c <SdVolume::cacheFlush()>:
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
    964c:	b570      	push	{r4, r5, r6, lr}
  if (cacheDirty_) {
    964e:	4c0f      	ldr	r4, [pc, #60]	; (968c <SdVolume::cacheFlush()+0x40>)
    9650:	7823      	ldrb	r3, [r4, #0]
    9652:	b90b      	cbnz	r3, 9658 <SdVolume::cacheFlush()+0xc>
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    9654:	2001      	movs	r0, #1
}
    9656:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9658:	4b0d      	ldr	r3, [pc, #52]	; (9690 <SdVolume::cacheFlush()+0x44>)
    965a:	4d0e      	ldr	r5, [pc, #56]	; (9694 <SdVolume::cacheFlush()+0x48>)
    965c:	6819      	ldr	r1, [r3, #0]
    965e:	6828      	ldr	r0, [r5, #0]
    9660:	4a0d      	ldr	r2, [pc, #52]	; (9698 <SdVolume::cacheFlush()+0x4c>)
    9662:	f7fe ff1d 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9666:	b170      	cbz	r0, 9686 <SdVolume::cacheFlush()+0x3a>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    9668:	4e0c      	ldr	r6, [pc, #48]	; (969c <SdVolume::cacheFlush()+0x50>)
    966a:	6831      	ldr	r1, [r6, #0]
    966c:	b919      	cbnz	r1, 9676 <SdVolume::cacheFlush()+0x2a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    966e:	2300      	movs	r3, #0
    9670:	7023      	strb	r3, [r4, #0]
  }
  return true;
    9672:	2001      	movs	r0, #1
    9674:	bd70      	pop	{r4, r5, r6, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9676:	6828      	ldr	r0, [r5, #0]
    9678:	4a07      	ldr	r2, [pc, #28]	; (9698 <SdVolume::cacheFlush()+0x4c>)
    967a:	f7fe ff11 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    967e:	b110      	cbz	r0, 9686 <SdVolume::cacheFlush()+0x3a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9680:	2300      	movs	r3, #0
    9682:	6033      	str	r3, [r6, #0]
    9684:	e7f3      	b.n	966e <SdVolume::cacheFlush()+0x22>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    9686:	2000      	movs	r0, #0
    9688:	bd70      	pop	{r4, r5, r6, pc}
    968a:	bf00      	nop
    968c:	1fff6618 	.word	0x1fff6618
    9690:	1fff4988 	.word	0x1fff4988
    9694:	1fff6414 	.word	0x1fff6414
    9698:	1fff6418 	.word	0x1fff6418
    969c:	1fff6410 	.word	0x1fff6410

000096a0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    96a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (cacheBlockNumber_ != blockNumber) {
    96a4:	4e1c      	ldr	r6, [pc, #112]	; (9718 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x78>)
    96a6:	6833      	ldr	r3, [r6, #0]
    96a8:	4283      	cmp	r3, r0
    cacheDirty_ = 0;
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    96aa:	460f      	mov	r7, r1
  if (cacheBlockNumber_ != blockNumber) {
    96ac:	d013      	beq.n	96d6 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x36>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    96ae:	4c1b      	ldr	r4, [pc, #108]	; (971c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x7c>)
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    96b0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 9724 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x84>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    96b4:	7822      	ldrb	r2, [r4, #0]
    96b6:	4605      	mov	r5, r0
    96b8:	b992      	cbnz	r2, 96e0 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x40>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    96ba:	f8d8 0000 	ldr.w	r0, [r8]
    96be:	4a18      	ldr	r2, [pc, #96]	; (9720 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x80>)
    96c0:	4629      	mov	r1, r5
    96c2:	f7fe fd67 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    96c6:	b140      	cbz	r0, 96da <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3a>
    cacheBlockNumber_ = blockNumber;
    96c8:	6035      	str	r5, [r6, #0]
  }
  cacheDirty_ |= action;
    96ca:	7821      	ldrb	r1, [r4, #0]
    96cc:	4339      	orrs	r1, r7
    96ce:	7021      	strb	r1, [r4, #0]
  return true;
    96d0:	2001      	movs	r0, #1
    96d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    96d6:	4c11      	ldr	r4, [pc, #68]	; (971c <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x7c>)
    96d8:	e7f7      	b.n	96ca <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x2a>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    96da:	2000      	movs	r0, #0
    96dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    96e0:	4a0f      	ldr	r2, [pc, #60]	; (9720 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x80>)
    96e2:	f8d8 0000 	ldr.w	r0, [r8]
    96e6:	4619      	mov	r1, r3
    96e8:	f7fe feda 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    96ec:	2800      	cmp	r0, #0
    96ee:	d0f4      	beq.n	96da <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3a>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    96f0:	f8df 9034 	ldr.w	r9, [pc, #52]	; 9728 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x88>
    96f4:	f8d9 1000 	ldr.w	r1, [r9]
    96f8:	b911      	cbnz	r1, 9700 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x60>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    96fa:	2300      	movs	r3, #0
    96fc:	7023      	strb	r3, [r4, #0]
    96fe:	e7dc      	b.n	96ba <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x1a>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9700:	4a07      	ldr	r2, [pc, #28]	; (9720 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x80>)
    9702:	f8d8 0000 	ldr.w	r0, [r8]
    9706:	f7fe fecb 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    970a:	2800      	cmp	r0, #0
    970c:	d0e5      	beq.n	96da <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x3a>
        return false;
      }
      cacheMirrorBlock_ = 0;
    970e:	2300      	movs	r3, #0
    9710:	f8c9 3000 	str.w	r3, [r9]
    9714:	e7f1      	b.n	96fa <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x5a>
    9716:	bf00      	nop
    9718:	1fff4988 	.word	0x1fff4988
    971c:	1fff6618 	.word	0x1fff6618
    9720:	1fff6418 	.word	0x1fff6418
    9724:	1fff6414 	.word	0x1fff6414
    9728:	1fff6410 	.word	0x1fff6410

0000972c <SdVolume::cacheZeroBlock(unsigned long)>:
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9730:	4c14      	ldr	r4, [pc, #80]	; (9784 <SdVolume::cacheZeroBlock(unsigned long)+0x58>)
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9732:	4d15      	ldr	r5, [pc, #84]	; (9788 <SdVolume::cacheZeroBlock(unsigned long)+0x5c>)

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9734:	7823      	ldrb	r3, [r4, #0]
  cacheDirty_ |= action;
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    9736:	4606      	mov	r6, r0

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9738:	b953      	cbnz	r3, 9750 <SdVolume::cacheZeroBlock(unsigned long)+0x24>
    973a:	f44f 7200 	mov.w	r2, #512	; 0x200
    973e:	2100      	movs	r1, #0
    9740:	4812      	ldr	r0, [pc, #72]	; (978c <SdVolume::cacheZeroBlock(unsigned long)+0x60>)
    9742:	f008 ff5b 	bl	125fc <memset>
    9746:	2001      	movs	r0, #1
    9748:	7020      	strb	r0, [r4, #0]

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    974a:	602e      	str	r6, [r5, #0]
  cacheSetDirty();
  return true;
}
    974c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9750:	4f0f      	ldr	r7, [pc, #60]	; (9790 <SdVolume::cacheZeroBlock(unsigned long)+0x64>)
    9752:	6829      	ldr	r1, [r5, #0]
    9754:	6838      	ldr	r0, [r7, #0]
    9756:	4a0d      	ldr	r2, [pc, #52]	; (978c <SdVolume::cacheZeroBlock(unsigned long)+0x60>)
    9758:	f7fe fea2 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    975c:	b170      	cbz	r0, 977c <SdVolume::cacheZeroBlock(unsigned long)+0x50>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    975e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 9794 <SdVolume::cacheZeroBlock(unsigned long)+0x68>
    9762:	f8d8 1000 	ldr.w	r1, [r8]
    9766:	2900      	cmp	r1, #0
    9768:	d0e7      	beq.n	973a <SdVolume::cacheZeroBlock(unsigned long)+0xe>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    976a:	6838      	ldr	r0, [r7, #0]
    976c:	4a07      	ldr	r2, [pc, #28]	; (978c <SdVolume::cacheZeroBlock(unsigned long)+0x60>)
    976e:	f7fe fe97 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9772:	b118      	cbz	r0, 977c <SdVolume::cacheZeroBlock(unsigned long)+0x50>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9774:	2300      	movs	r3, #0
    9776:	f8c8 3000 	str.w	r3, [r8]
    977a:	e7de      	b.n	973a <SdVolume::cacheZeroBlock(unsigned long)+0xe>
  return true;
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;
    977c:	2000      	movs	r0, #0
    977e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9782:	bf00      	nop
    9784:	1fff6618 	.word	0x1fff6618
    9788:	1fff4988 	.word	0x1fff4988
    978c:	1fff6418 	.word	0x1fff6418
    9790:	1fff6414 	.word	0x1fff6414
    9794:	1fff6410 	.word	0x1fff6410

00009798 <SdVolume::chainSize(unsigned long, unsigned long*) const>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    9798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    979c:	b083      	sub	sp, #12
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    979e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 9884 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xec>
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    97a2:	9200      	str	r2, [sp, #0]
    97a4:	4605      	mov	r5, r0
    97a6:	460c      	mov	r4, r1
  uint32_t s = 0;
    97a8:	2700      	movs	r7, #0
    97aa:	e01a      	b.n	97e2 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x4a>
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    97ac:	f895 3020 	ldrb.w	r3, [r5, #32]
  if (lba != cacheBlockNumber_) {
    97b0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 9890 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xf8>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    97b4:	69ee      	ldr	r6, [r5, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    97b6:	f8d8 1000 	ldr.w	r1, [r8]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    97ba:	2b10      	cmp	r3, #16
    97bc:	d019      	beq.n	97f2 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x5a>
    97be:	eb06 16d4 	add.w	r6, r6, r4, lsr #7
  if (lba != cacheBlockNumber_) {
    97c2:	428e      	cmp	r6, r1
    97c4:	d119      	bne.n	97fa <SdVolume::chainSize(unsigned long, unsigned long*) const+0x62>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    97c6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    97ca:	7c29      	ldrb	r1, [r5, #16]
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    97cc:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    97d0:	4a2b      	ldr	r2, [pc, #172]	; (9880 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xe8>)
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    97d2:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    97d6:	f024 4470 	bic.w	r4, r4, #4026531840	; 0xf0000000
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    97da:	408b      	lsls	r3, r1
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    97dc:	42a2      	cmp	r2, r4
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    97de:	441f      	add	r7, r3
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    97e0:	d92c      	bls.n	983c <SdVolume::chainSize(unsigned long, unsigned long*) const+0xa4>
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    97e2:	68eb      	ldr	r3, [r5, #12]
    97e4:	3301      	adds	r3, #1
    97e6:	42a3      	cmp	r3, r4
    97e8:	d2e0      	bcs.n	97ac <SdVolume::chainSize(unsigned long, unsigned long*) const+0x14>
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    97ea:	2000      	movs	r0, #0
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    97ec:	b003      	add	sp, #12
    97ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    97f2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
  if (lba != cacheBlockNumber_) {
    97f6:	428e      	cmp	r6, r1
    97f8:	d014      	beq.n	9824 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x8c>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    97fa:	f8df a098 	ldr.w	sl, [pc, #152]	; 9894 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xfc>
    97fe:	f89a 3000 	ldrb.w	r3, [sl]
    9802:	bb0b      	cbnz	r3, 9848 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xb0>
    9804:	f8df b080 	ldr.w	fp, [pc, #128]	; 9888 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xf0>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9808:	f8db 0000 	ldr.w	r0, [fp]
    980c:	4a1d      	ldr	r2, [pc, #116]	; (9884 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xec>)
    980e:	4631      	mov	r1, r6
    9810:	f7fe fcc0 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    9814:	2800      	cmp	r0, #0
    9816:	d0e8      	beq.n	97ea <SdVolume::chainSize(unsigned long, unsigned long*) const+0x52>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    9818:	f895 3020 	ldrb.w	r3, [r5, #32]
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
    981c:	f8c8 6000 	str.w	r6, [r8]
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    9820:	2b10      	cmp	r3, #16
    9822:	d1d0      	bne.n	97c6 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x2e>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    9824:	b2e4      	uxtb	r4, r4
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9826:	7c2a      	ldrb	r2, [r5, #16]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    9828:	f839 4014 	ldrh.w	r4, [r9, r4, lsl #1]
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    982c:	f44f 7300 	mov.w	r3, #512	; 0x200
    9830:	4093      	lsls	r3, r2
    9832:	f64f 72f8 	movw	r2, #65528	; 0xfff8
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    9836:	42a2      	cmp	r2, r4
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    9838:	441f      	add	r7, r3
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    983a:	d8d2      	bhi.n	97e2 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x4a>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    983c:	9b00      	ldr	r3, [sp, #0]
  return true;
    983e:	2001      	movs	r0, #1
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    9840:	601f      	str	r7, [r3, #0]
  return true;
}
    9842:	b003      	add	sp, #12
    9844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9848:	4b0f      	ldr	r3, [pc, #60]	; (9888 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xf0>)
    984a:	4a0e      	ldr	r2, [pc, #56]	; (9884 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xec>)
    984c:	6818      	ldr	r0, [r3, #0]
    984e:	469b      	mov	fp, r3
    9850:	f7fe fe26 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9854:	2800      	cmp	r0, #0
    9856:	d0c8      	beq.n	97ea <SdVolume::chainSize(unsigned long, unsigned long*) const+0x52>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    9858:	4b0c      	ldr	r3, [pc, #48]	; (988c <SdVolume::chainSize(unsigned long, unsigned long*) const+0xf4>)
    985a:	6819      	ldr	r1, [r3, #0]
    985c:	b919      	cbnz	r1, 9866 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xce>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    985e:	2300      	movs	r3, #0
    9860:	f88a 3000 	strb.w	r3, [sl]
    9864:	e7d0      	b.n	9808 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x70>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9866:	4a07      	ldr	r2, [pc, #28]	; (9884 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xec>)
    9868:	f8db 0000 	ldr.w	r0, [fp]
    986c:	9301      	str	r3, [sp, #4]
    986e:	f7fe fe17 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9872:	2800      	cmp	r0, #0
    9874:	d0b9      	beq.n	97ea <SdVolume::chainSize(unsigned long, unsigned long*) const+0x52>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9876:	9b01      	ldr	r3, [sp, #4]
    9878:	2200      	movs	r2, #0
    987a:	601a      	str	r2, [r3, #0]
    987c:	e7ef      	b.n	985e <SdVolume::chainSize(unsigned long, unsigned long*) const+0xc6>
    987e:	bf00      	nop
    9880:	0ffffff8 	.word	0x0ffffff8
    9884:	1fff6418 	.word	0x1fff6418
    9888:	1fff6414 	.word	0x1fff6414
    988c:	1fff6410 	.word	0x1fff6410
    9890:	1fff4988 	.word	0x1fff4988
    9894:	1fff6618 	.word	0x1fff6618

00009898 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    9898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cluster > (clusterCount_ + 1)) return false;
    989c:	68c3      	ldr	r3, [r0, #12]
    989e:	3301      	adds	r3, #1
    98a0:	428b      	cmp	r3, r1
    98a2:	d320      	bcc.n	98e6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x4e>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    98a4:	f890 3020 	ldrb.w	r3, [r0, #32]
  if (lba != cacheBlockNumber_) {
    98a8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 995c <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc4>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    98ac:	69c4      	ldr	r4, [r0, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    98ae:	2b10      	cmp	r3, #16
    98b0:	460e      	mov	r6, r1
    98b2:	4617      	mov	r7, r2
    98b4:	4605      	mov	r5, r0
  if (lba != cacheBlockNumber_) {
    98b6:	f8d8 1000 	ldr.w	r1, [r8]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    98ba:	d017      	beq.n	98ec <SdVolume::fatGet(unsigned long, unsigned long*) const+0x54>
    98bc:	eb04 14d6 	add.w	r4, r4, r6, lsr #7
  if (lba != cacheBlockNumber_) {
    98c0:	428c      	cmp	r4, r1
    98c2:	d117      	bne.n	98f4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x5c>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    98c4:	f006 017f 	and.w	r1, r6, #127	; 0x7f
    98c8:	4b23      	ldr	r3, [pc, #140]	; (9958 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc0>)
    98ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    98ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    98d2:	603b      	str	r3, [r7, #0]
    98d4:	2001      	movs	r0, #1
    98d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    98da:	4a1f      	ldr	r2, [pc, #124]	; (9958 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc0>)
    98dc:	f8d9 0000 	ldr.w	r0, [r9]
    98e0:	f7fe fdde 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    98e4:	bb20      	cbnz	r0, 9930 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x98>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    98e6:	2000      	movs	r0, #0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    98e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    98ec:	eb04 2416 	add.w	r4, r4, r6, lsr #8
  if (lba != cacheBlockNumber_) {
    98f0:	42a1      	cmp	r1, r4
    98f2:	d015      	beq.n	9920 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x88>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    98f4:	f8df a068 	ldr.w	sl, [pc, #104]	; 9960 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc8>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    98f8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 9964 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xcc>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    98fc:	f89a 3000 	ldrb.w	r3, [sl]
    9900:	2b00      	cmp	r3, #0
    9902:	d1ea      	bne.n	98da <SdVolume::fatGet(unsigned long, unsigned long*) const+0x42>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9904:	f8d9 0000 	ldr.w	r0, [r9]
    9908:	4a13      	ldr	r2, [pc, #76]	; (9958 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc0>)
    990a:	4621      	mov	r1, r4
    990c:	f7fe fc42 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    9910:	2800      	cmp	r0, #0
    9912:	d0e8      	beq.n	98e6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x4e>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    9914:	f895 3020 	ldrb.w	r3, [r5, #32]
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
    9918:	f8c8 4000 	str.w	r4, [r8]
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    991c:	2b10      	cmp	r3, #16
    991e:	d1d1      	bne.n	98c4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x2c>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    9920:	b2f1      	uxtb	r1, r6
    9922:	4b0d      	ldr	r3, [pc, #52]	; (9958 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc0>)
    9924:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    9928:	603b      	str	r3, [r7, #0]
    992a:	2001      	movs	r0, #1
    992c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    9930:	f8df b034 	ldr.w	fp, [pc, #52]	; 9968 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xd0>
    9934:	f8db 1000 	ldr.w	r1, [fp]
    9938:	b919      	cbnz	r1, 9942 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xaa>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    993a:	2300      	movs	r3, #0
    993c:	f88a 3000 	strb.w	r3, [sl]
    9940:	e7e0      	b.n	9904 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x6c>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9942:	4a05      	ldr	r2, [pc, #20]	; (9958 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc0>)
    9944:	f8d9 0000 	ldr.w	r0, [r9]
    9948:	f7fe fdaa 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    994c:	2800      	cmp	r0, #0
    994e:	d0ca      	beq.n	98e6 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x4e>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9950:	2300      	movs	r3, #0
    9952:	f8cb 3000 	str.w	r3, [fp]
    9956:	e7f0      	b.n	993a <SdVolume::fatGet(unsigned long, unsigned long*) const+0xa2>
    9958:	1fff6418 	.word	0x1fff6418
    995c:	1fff4988 	.word	0x1fff4988
    9960:	1fff6618 	.word	0x1fff6618
    9964:	1fff6414 	.word	0x1fff6414
    9968:	1fff6410 	.word	0x1fff6410

0000996c <SdVolume::freeChain(unsigned long)>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // clear free cluster location
  allocSearchStart_ = 2;
    9970:	2302      	movs	r3, #2
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    9972:	b083      	sub	sp, #12
    9974:	4605      	mov	r5, r0
    9976:	460c      	mov	r4, r1
  // clear free cluster location
  allocSearchStart_ = 2;
    9978:	6003      	str	r3, [r0, #0]
    997a:	e042      	b.n	9a02 <SdVolume::freeChain(unsigned long)+0x96>
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    997c:	f895 2020 	ldrb.w	r2, [r5, #32]
  if (lba != cacheBlockNumber_) {
    9980:	f8df 919c 	ldr.w	r9, [pc, #412]	; 9b20 <SdVolume::freeChain(unsigned long)+0x1b4>
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    9984:	69ee      	ldr	r6, [r5, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    9986:	f8d9 1000 	ldr.w	r1, [r9]
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    998a:	2a10      	cmp	r2, #16
    998c:	d064      	beq.n	9a58 <SdVolume::freeChain(unsigned long)+0xec>
    998e:	eb06 16d4 	add.w	r6, r6, r4, lsr #7
  if (lba != cacheBlockNumber_) {
    9992:	428e      	cmp	r6, r1
    9994:	d164      	bne.n	9a60 <SdVolume::freeChain(unsigned long)+0xf4>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    9996:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    999a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 9b18 <SdVolume::freeChain(unsigned long)+0x1ac>
    999e:	f85a 7023 	ldr.w	r7, [sl, r3, lsl #2]
    99a2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;
    99a6:	2c01      	cmp	r4, #1
    99a8:	d92f      	bls.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    99aa:	68eb      	ldr	r3, [r5, #12]
    99ac:	3301      	adds	r3, #1
    99ae:	429c      	cmp	r4, r3
    99b0:	d82b      	bhi.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    99b2:	2a10      	cmp	r2, #16

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    99b4:	69ee      	ldr	r6, [r5, #28]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    99b6:	f8d9 1000 	ldr.w	r1, [r9]
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    99ba:	d02a      	beq.n	9a12 <SdVolume::freeChain(unsigned long)+0xa6>
    99bc:	eb06 16d4 	add.w	r6, r6, r4, lsr #7

  if (lba != cacheBlockNumber_) {
    99c0:	428e      	cmp	r6, r1
    99c2:	d132      	bne.n	9a2a <SdVolume::freeChain(unsigned long)+0xbe>
    99c4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 9b24 <SdVolume::freeChain(unsigned long)+0x1b8>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    99c8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    99cc:	2300      	movs	r3, #0
    99ce:	f84a 3024 	str.w	r3, [sl, r4, lsl #2]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    99d2:	f898 3000 	ldrb.w	r3, [r8]
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    99d6:	7e2a      	ldrb	r2, [r5, #24]
    99d8:	f043 0301 	orr.w	r3, r3, #1
    99dc:	2a01      	cmp	r2, #1
    99de:	f888 3000 	strb.w	r3, [r8]
    99e2:	d903      	bls.n	99ec <SdVolume::freeChain(unsigned long)+0x80>
    99e4:	68aa      	ldr	r2, [r5, #8]
    99e6:	4b4a      	ldr	r3, [pc, #296]	; (9b10 <SdVolume::freeChain(unsigned long)+0x1a4>)
    99e8:	4411      	add	r1, r2
    99ea:	6019      	str	r1, [r3, #0]
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    99ec:	f895 1020 	ldrb.w	r1, [r5, #32]
    99f0:	4a48      	ldr	r2, [pc, #288]	; (9b14 <SdVolume::freeChain(unsigned long)+0x1a8>)
    99f2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
    99f6:	2910      	cmp	r1, #16
    99f8:	bf18      	it	ne
    99fa:	4613      	movne	r3, r2
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    99fc:	42bb      	cmp	r3, r7
    99fe:	463c      	mov	r4, r7
    9a00:	d968      	bls.n	9ad4 <SdVolume::freeChain(unsigned long)+0x168>
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
    9a02:	68eb      	ldr	r3, [r5, #12]
    9a04:	3301      	adds	r3, #1
    9a06:	429c      	cmp	r4, r3
    9a08:	d9b8      	bls.n	997c <SdVolume::freeChain(unsigned long)+0x10>
    9a0a:	2000      	movs	r0, #0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    9a0c:	b003      	add	sp, #12
    9a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9a12:	eb06 2614 	add.w	r6, r6, r4, lsr #8

  if (lba != cacheBlockNumber_) {
    9a16:	42b1      	cmp	r1, r6
    9a18:	d107      	bne.n	9a2a <SdVolume::freeChain(unsigned long)+0xbe>
    9a1a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 9b24 <SdVolume::freeChain(unsigned long)+0x1b8>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    9a1e:	b2e4      	uxtb	r4, r4
    9a20:	2300      	movs	r3, #0
    9a22:	4631      	mov	r1, r6
    9a24:	f82a 3014 	strh.w	r3, [sl, r4, lsl #1]
    9a28:	e7d3      	b.n	99d2 <SdVolume::freeChain(unsigned long)+0x66>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9a2a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 9b24 <SdVolume::freeChain(unsigned long)+0x1b8>
    9a2e:	f898 3000 	ldrb.w	r3, [r8]
    9a32:	bb8b      	cbnz	r3, 9a98 <SdVolume::freeChain(unsigned long)+0x12c>
    9a34:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 9b1c <SdVolume::freeChain(unsigned long)+0x1b0>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9a38:	f8db 0000 	ldr.w	r0, [fp]
    9a3c:	4a36      	ldr	r2, [pc, #216]	; (9b18 <SdVolume::freeChain(unsigned long)+0x1ac>)
    9a3e:	4631      	mov	r1, r6
    9a40:	f7fe fba8 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    9a44:	2800      	cmp	r0, #0
    9a46:	d0e0      	beq.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    9a48:	f895 3020 	ldrb.w	r3, [r5, #32]
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
    9a4c:	f8c9 6000 	str.w	r6, [r9]

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    9a50:	2b10      	cmp	r3, #16
    9a52:	d0e4      	beq.n	9a1e <SdVolume::freeChain(unsigned long)+0xb2>
    9a54:	4631      	mov	r1, r6
    9a56:	e7b7      	b.n	99c8 <SdVolume::freeChain(unsigned long)+0x5c>
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    9a58:	eb06 2614 	add.w	r6, r6, r4, lsr #8
  if (lba != cacheBlockNumber_) {
    9a5c:	428e      	cmp	r6, r1
    9a5e:	d014      	beq.n	9a8a <SdVolume::freeChain(unsigned long)+0x11e>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9a60:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9b24 <SdVolume::freeChain(unsigned long)+0x1b8>
    9a64:	f898 3000 	ldrb.w	r3, [r8]
    9a68:	bb2b      	cbnz	r3, 9ab6 <SdVolume::freeChain(unsigned long)+0x14a>
    9a6a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 9b1c <SdVolume::freeChain(unsigned long)+0x1b0>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9a6e:	f8db 0000 	ldr.w	r0, [fp]
    9a72:	4a29      	ldr	r2, [pc, #164]	; (9b18 <SdVolume::freeChain(unsigned long)+0x1ac>)
    9a74:	4631      	mov	r1, r6
    9a76:	f7fe fb8d 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    9a7a:	2800      	cmp	r0, #0
    9a7c:	d0c5      	beq.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    9a7e:	f895 2020 	ldrb.w	r2, [r5, #32]
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
    9a82:	f8c9 6000 	str.w	r6, [r9]
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    9a86:	2a10      	cmp	r2, #16
    9a88:	d185      	bne.n	9996 <SdVolume::freeChain(unsigned long)+0x2a>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    9a8a:	b2e3      	uxtb	r3, r4
    9a8c:	f8df a088 	ldr.w	sl, [pc, #136]	; 9b18 <SdVolume::freeChain(unsigned long)+0x1ac>
    9a90:	2210      	movs	r2, #16
    9a92:	f83a 7013 	ldrh.w	r7, [sl, r3, lsl #1]
    9a96:	e786      	b.n	99a6 <SdVolume::freeChain(unsigned long)+0x3a>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9a98:	4b20      	ldr	r3, [pc, #128]	; (9b1c <SdVolume::freeChain(unsigned long)+0x1b0>)
    9a9a:	4a1f      	ldr	r2, [pc, #124]	; (9b18 <SdVolume::freeChain(unsigned long)+0x1ac>)
    9a9c:	6818      	ldr	r0, [r3, #0]
    9a9e:	469b      	mov	fp, r3
    9aa0:	f7fe fcfe 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9aa4:	2800      	cmp	r0, #0
    9aa6:	d0b0      	beq.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    9aa8:	4b19      	ldr	r3, [pc, #100]	; (9b10 <SdVolume::freeChain(unsigned long)+0x1a4>)
    9aaa:	6819      	ldr	r1, [r3, #0]
    9aac:	b9b1      	cbnz	r1, 9adc <SdVolume::freeChain(unsigned long)+0x170>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    9aae:	2300      	movs	r3, #0
    9ab0:	f888 3000 	strb.w	r3, [r8]
    9ab4:	e7c0      	b.n	9a38 <SdVolume::freeChain(unsigned long)+0xcc>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9ab6:	4b19      	ldr	r3, [pc, #100]	; (9b1c <SdVolume::freeChain(unsigned long)+0x1b0>)
    9ab8:	4a17      	ldr	r2, [pc, #92]	; (9b18 <SdVolume::freeChain(unsigned long)+0x1ac>)
    9aba:	6818      	ldr	r0, [r3, #0]
    9abc:	469b      	mov	fp, r3
    9abe:	f7fe fcef 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9ac2:	2800      	cmp	r0, #0
    9ac4:	d0a1      	beq.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    9ac6:	4f12      	ldr	r7, [pc, #72]	; (9b10 <SdVolume::freeChain(unsigned long)+0x1a4>)
    9ac8:	6839      	ldr	r1, [r7, #0]
    9aca:	b9b1      	cbnz	r1, 9afa <SdVolume::freeChain(unsigned long)+0x18e>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    9acc:	2300      	movs	r3, #0
    9ace:	f888 3000 	strb.w	r3, [r8]
    9ad2:	e7cc      	b.n	9a6e <SdVolume::freeChain(unsigned long)+0x102>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    9ad4:	2001      	movs	r0, #1
}
    9ad6:	b003      	add	sp, #12
    9ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9adc:	4a0e      	ldr	r2, [pc, #56]	; (9b18 <SdVolume::freeChain(unsigned long)+0x1ac>)
    9ade:	f8db 0000 	ldr.w	r0, [fp]
    9ae2:	9301      	str	r3, [sp, #4]
    9ae4:	f7fe fcdc 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9ae8:	2800      	cmp	r0, #0
    9aea:	d08e      	beq.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9aec:	9b01      	ldr	r3, [sp, #4]
    9aee:	2200      	movs	r2, #0
    9af0:	601a      	str	r2, [r3, #0]
    }
    cacheDirty_ = 0;
    9af2:	2300      	movs	r3, #0
    9af4:	f888 3000 	strb.w	r3, [r8]
    9af8:	e79e      	b.n	9a38 <SdVolume::freeChain(unsigned long)+0xcc>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9afa:	4a07      	ldr	r2, [pc, #28]	; (9b18 <SdVolume::freeChain(unsigned long)+0x1ac>)
    9afc:	f8db 0000 	ldr.w	r0, [fp]
    9b00:	f7fe fcce 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9b04:	2800      	cmp	r0, #0
    9b06:	d080      	beq.n	9a0a <SdVolume::freeChain(unsigned long)+0x9e>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9b08:	2300      	movs	r3, #0
    9b0a:	603b      	str	r3, [r7, #0]
    9b0c:	e7de      	b.n	9acc <SdVolume::freeChain(unsigned long)+0x160>
    9b0e:	bf00      	nop
    9b10:	1fff6410 	.word	0x1fff6410
    9b14:	0ffffff8 	.word	0x0ffffff8
    9b18:	1fff6418 	.word	0x1fff6418
    9b1c:	1fff6414 	.word	0x1fff6414
    9b20:	1fff4988 	.word	0x1fff4988
    9b24:	1fff6618 	.word	0x1fff6618

00009b28 <SdVolume::init(Sd2Card*, unsigned char)>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    9b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    9b2c:	4d73      	ldr	r5, [pc, #460]	; (9cfc <SdVolume::init(Sd2Card*, unsigned char)+0x1d4>)
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    9b2e:	4606      	mov	r6, r0
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    9b30:	6029      	str	r1, [r5, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    9b32:	4614      	mov	r4, r2
    9b34:	2a00      	cmp	r2, #0
    9b36:	d039      	beq.n	9bac <SdVolume::init(Sd2Card*, unsigned char)+0x84>
    if (part > 4)return false;
    9b38:	2a04      	cmp	r2, #4
    9b3a:	d902      	bls.n	9b42 <SdVolume::init(Sd2Card*, unsigned char)+0x1a>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    9b3c:	2000      	movs	r0, #0
    9b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    9b42:	4f6f      	ldr	r7, [pc, #444]	; (9d00 <SdVolume::init(Sd2Card*, unsigned char)+0x1d8>)
    9b44:	460b      	mov	r3, r1
    9b46:	6839      	ldr	r1, [r7, #0]
    9b48:	b171      	cbz	r1, 9b68 <SdVolume::init(Sd2Card*, unsigned char)+0x40>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9b4a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 9d08 <SdVolume::init(Sd2Card*, unsigned char)+0x1e0>
    9b4e:	f898 2000 	ldrb.w	r2, [r8]
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9b52:	4618      	mov	r0, r3

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9b54:	2a00      	cmp	r2, #0
    9b56:	d173      	bne.n	9c40 <SdVolume::init(Sd2Card*, unsigned char)+0x118>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9b58:	4a6a      	ldr	r2, [pc, #424]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9b5a:	2100      	movs	r1, #0
    9b5c:	f7fe fb1a 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    9b60:	2800      	cmp	r0, #0
    9b62:	d0eb      	beq.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    9b64:	2300      	movs	r3, #0
    9b66:	603b      	str	r3, [r7, #0]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    9b68:	4b66      	ldr	r3, [pc, #408]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9b6a:	eb03 1204 	add.w	r2, r3, r4, lsl #4
    9b6e:	f892 11ae 	ldrb.w	r1, [r2, #430]	; 0x1ae
    9b72:	f011 017f 	ands.w	r1, r1, #127	; 0x7f
    9b76:	d1e1      	bne.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
      p->totalSectors < 100 ||
    9b78:	341b      	adds	r4, #27
    9b7a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    9b7e:	f8d3 200a 	ldr.w	r2, [r3, #10]
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    9b82:	2a63      	cmp	r2, #99	; 0x63
    9b84:	d9da      	bls.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    9b86:	f8d3 4006 	ldr.w	r4, [r3, #6]
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    9b8a:	2c00      	cmp	r4, #0
    9b8c:	d0d6      	beq.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    9b8e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 9d08 <SdVolume::init(Sd2Card*, unsigned char)+0x1e0>
    9b92:	f898 3000 	ldrb.w	r3, [r8]
    9b96:	2b00      	cmp	r3, #0
    9b98:	d141      	bne.n	9c1e <SdVolume::init(Sd2Card*, unsigned char)+0xf6>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    9b9a:	6828      	ldr	r0, [r5, #0]
    9b9c:	4a59      	ldr	r2, [pc, #356]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9b9e:	4621      	mov	r1, r4
    9ba0:	f7fe faf8 	bl	8194 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    9ba4:	2800      	cmp	r0, #0
    9ba6:	d0c9      	beq.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    cacheBlockNumber_ = blockNumber;
    9ba8:	603c      	str	r4, [r7, #0]
    9baa:	e004      	b.n	9bb6 <SdVolume::init(Sd2Card*, unsigned char)+0x8e>
    9bac:	4f54      	ldr	r7, [pc, #336]	; (9d00 <SdVolume::init(Sd2Card*, unsigned char)+0x1d8>)
    9bae:	6839      	ldr	r1, [r7, #0]
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    9bb0:	2900      	cmp	r1, #0
    9bb2:	d1ec      	bne.n	9b8e <SdVolume::init(Sd2Card*, unsigned char)+0x66>
    9bb4:	460c      	mov	r4, r1
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    9bb6:	4b53      	ldr	r3, [pc, #332]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9bb8:	f8b3 200b 	ldrh.w	r2, [r3, #11]
    9bbc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    9bc0:	d1bc      	bne.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    bpb->fatCount == 0 ||
    9bc2:	7c18      	ldrb	r0, [r3, #16]
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    9bc4:	2800      	cmp	r0, #0
    9bc6:	d0b9      	beq.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    bpb->fatCount == 0 ||
    9bc8:	89da      	ldrh	r2, [r3, #14]
    9bca:	2a00      	cmp	r2, #0
    9bcc:	d0b6      	beq.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    9bce:	7b59      	ldrb	r1, [r3, #13]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    9bd0:	2900      	cmp	r1, #0
    9bd2:	d0b3      	beq.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
  }
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    9bd4:	2200      	movs	r2, #0
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bd6:	2901      	cmp	r1, #1
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    9bd8:	7630      	strb	r0, [r6, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
    9bda:	7131      	strb	r1, [r6, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    9bdc:	7432      	strb	r2, [r6, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bde:	d057      	beq.n	9c90 <SdVolume::init(Sd2Card*, unsigned char)+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9be0:	2201      	movs	r2, #1
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9be2:	2902      	cmp	r1, #2
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9be4:	7432      	strb	r2, [r6, #16]
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9be6:	d053      	beq.n	9c90 <SdVolume::init(Sd2Card*, unsigned char)+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9be8:	2202      	movs	r2, #2
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bea:	2904      	cmp	r1, #4
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9bec:	7432      	strb	r2, [r6, #16]
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bee:	d04f      	beq.n	9c90 <SdVolume::init(Sd2Card*, unsigned char)+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9bf0:	2203      	movs	r2, #3
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bf2:	2908      	cmp	r1, #8
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9bf4:	7432      	strb	r2, [r6, #16]
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bf6:	d04b      	beq.n	9c90 <SdVolume::init(Sd2Card*, unsigned char)+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9bf8:	2204      	movs	r2, #4
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bfa:	2910      	cmp	r1, #16
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9bfc:	7432      	strb	r2, [r6, #16]
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9bfe:	d047      	beq.n	9c90 <SdVolume::init(Sd2Card*, unsigned char)+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9c00:	2205      	movs	r2, #5
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9c02:	2920      	cmp	r1, #32
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9c04:	7432      	strb	r2, [r6, #16]
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9c06:	d042      	beq.n	9c8e <SdVolume::init(Sd2Card*, unsigned char)+0x166>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9c08:	2206      	movs	r2, #6
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9c0a:	2940      	cmp	r1, #64	; 0x40
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9c0c:	7432      	strb	r2, [r6, #16]
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9c0e:	d03f      	beq.n	9c90 <SdVolume::init(Sd2Card*, unsigned char)+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9c10:	2207      	movs	r2, #7
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9c12:	2980      	cmp	r1, #128	; 0x80
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9c14:	7432      	strb	r2, [r6, #16]
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9c16:	d03b      	beq.n	9c90 <SdVolume::init(Sd2Card*, unsigned char)+0x168>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    9c18:	2309      	movs	r3, #9
    9c1a:	7433      	strb	r3, [r6, #16]
    9c1c:	e78e      	b.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9c1e:	4a39      	ldr	r2, [pc, #228]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9c20:	6828      	ldr	r0, [r5, #0]
    9c22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 9cfc <SdVolume::init(Sd2Card*, unsigned char)+0x1d4>
    9c26:	f7fe fc3b 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9c2a:	2800      	cmp	r0, #0
    9c2c:	d086      	beq.n	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    9c2e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 9d0c <SdVolume::init(Sd2Card*, unsigned char)+0x1e4>
    9c32:	f8d9 1000 	ldr.w	r1, [r9]
    9c36:	b999      	cbnz	r1, 9c60 <SdVolume::init(Sd2Card*, unsigned char)+0x138>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    9c38:	2300      	movs	r3, #0
    9c3a:	f888 3000 	strb.w	r3, [r8]
    9c3e:	e7ac      	b.n	9b9a <SdVolume::init(Sd2Card*, unsigned char)+0x72>
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    9c40:	4a30      	ldr	r2, [pc, #192]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9c42:	f7fe fc2d 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9c46:	2800      	cmp	r0, #0
    9c48:	f43f af78 	beq.w	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    9c4c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9d0c <SdVolume::init(Sd2Card*, unsigned char)+0x1e4>
    9c50:	f8d9 1000 	ldr.w	r1, [r9]
    9c54:	b981      	cbnz	r1, 9c78 <SdVolume::init(Sd2Card*, unsigned char)+0x150>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
    9c56:	2300      	movs	r3, #0
    9c58:	f888 3000 	strb.w	r3, [r8]
    9c5c:	6828      	ldr	r0, [r5, #0]
    9c5e:	e77b      	b.n	9b58 <SdVolume::init(Sd2Card*, unsigned char)+0x30>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9c60:	f8da 0000 	ldr.w	r0, [sl]
    9c64:	4a27      	ldr	r2, [pc, #156]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9c66:	f7fe fc1b 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9c6a:	2800      	cmp	r0, #0
    9c6c:	f43f af66 	beq.w	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9c70:	2300      	movs	r3, #0
    9c72:	f8c9 3000 	str.w	r3, [r9]
    9c76:	e7df      	b.n	9c38 <SdVolume::init(Sd2Card*, unsigned char)+0x110>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    9c78:	4a22      	ldr	r2, [pc, #136]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
    9c7a:	6828      	ldr	r0, [r5, #0]
    9c7c:	f7fe fc10 	bl	84a0 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    9c80:	2800      	cmp	r0, #0
    9c82:	f43f af5b 	beq.w	9b3c <SdVolume::init(Sd2Card*, unsigned char)+0x14>
        return false;
      }
      cacheMirrorBlock_ = 0;
    9c86:	2300      	movs	r3, #0
    9c88:	f8c9 3000 	str.w	r3, [r9]
    9c8c:	e7e3      	b.n	9c56 <SdVolume::init(Sd2Card*, unsigned char)+0x12e>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    9c8e:	2205      	movs	r2, #5
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    9c90:	8ad8      	ldrh	r0, [r3, #22]
    9c92:	491c      	ldr	r1, [pc, #112]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    9c94:	b900      	cbnz	r0, 9c98 <SdVolume::init(Sd2Card*, unsigned char)+0x170>
    9c96:	6a48      	ldr	r0, [r1, #36]	; 0x24

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    9c98:	89df      	ldrh	r7, [r3, #14]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    9c9a:	60b0      	str	r0, [r6, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    9c9c:	4427      	add	r7, r4
    9c9e:	61f7      	str	r7, [r6, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    9ca0:	f8b3 1011 	ldrh.w	r1, [r3, #17]

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    9ca4:	7c1d      	ldrb	r5, [r3, #16]
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    9ca6:	8471      	strh	r1, [r6, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    9ca8:	0149      	lsls	r1, r1, #5

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    9caa:	fb00 7005 	mla	r0, r0, r5, r7

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    9cae:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
    9cb2:	eb00 2161 	add.w	r1, r0, r1, asr #9
    9cb6:	6171      	str	r1, [r6, #20]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    9cb8:	6270      	str	r0, [r6, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    9cba:	f8b3 0013 	ldrh.w	r0, [r3, #19]
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    9cbe:	4d11      	ldr	r5, [pc, #68]	; (9d04 <SdVolume::init(Sd2Card*, unsigned char)+0x1dc>)
  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    9cc0:	b900      	cbnz	r0, 9cc4 <SdVolume::init(Sd2Card*, unsigned char)+0x19c>
    9cc2:	6a28      	ldr	r0, [r5, #32]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    9cc4:	1a64      	subs	r4, r4, r1
    9cc6:	4404      	add	r4, r0
    9cc8:	fa24 f202 	lsr.w	r2, r4, r2

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    9ccc:	f640 71f4 	movw	r1, #4084	; 0xff4
    9cd0:	428a      	cmp	r2, r1
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    9cd2:	60f2      	str	r2, [r6, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    9cd4:	d90c      	bls.n	9cf0 <SdVolume::init(Sd2Card*, unsigned char)+0x1c8>
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    9cd6:	f64f 71f4 	movw	r1, #65524	; 0xfff4
    9cda:	428a      	cmp	r2, r1
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    9cdc:	bf85      	ittet	hi
    9cde:	6adb      	ldrhi	r3, [r3, #44]	; 0x2c
    9ce0:	6273      	strhi	r3, [r6, #36]	; 0x24

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
    9ce2:	2310      	movls	r3, #16
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
    9ce4:	2320      	movhi	r3, #32
    9ce6:	f886 3020 	strb.w	r3, [r6, #32]
  }
  return true;
    9cea:	2001      	movs	r0, #1
    9cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    9cf0:	230c      	movs	r3, #12
    9cf2:	f886 3020 	strb.w	r3, [r6, #32]
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
    9cf6:	2001      	movs	r0, #1
    9cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cfc:	1fff6414 	.word	0x1fff6414
    9d00:	1fff4988 	.word	0x1fff4988
    9d04:	1fff6418 	.word	0x1fff6418
    9d08:	1fff6618 	.word	0x1fff6618
    9d0c:	1fff6410 	.word	0x1fff6410

00009d10 <Bounce::Bounce(unsigned char, unsigned long)>:

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    9d10:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d12:	4b09      	ldr	r3, [pc, #36]	; (9d38 <Bounce::Bounce(unsigned char, unsigned long)+0x28>)
       }


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
    9d14:	6042      	str	r2, [r0, #4]

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    9d16:	b083      	sub	sp, #12
    9d18:	681b      	ldr	r3, [r3, #0]
    9d1a:	9301      	str	r3, [sp, #4]
    9d1c:	460d      	mov	r5, r1
	return ret;
    9d1e:	9b01      	ldr	r3, [sp, #4]
{
	interval(interval_millis);
	previous_millis = millis();
    9d20:	6003      	str	r3, [r0, #0]


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    9d22:	2100      	movs	r1, #0

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    9d24:	4604      	mov	r4, r0


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    9d26:	6081      	str	r1, [r0, #8]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    9d28:	4628      	mov	r0, r5
    9d2a:	f005 f91b 	bl	ef64 <digitalRead>
    9d2e:	7320      	strb	r0, [r4, #12]
    this->pin = pin;
}
    9d30:	4620      	mov	r0, r4
Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    this->pin = pin;
    9d32:	7365      	strb	r5, [r4, #13]
}
    9d34:	b003      	add	sp, #12
    9d36:	bd30      	pop	{r4, r5, pc}
    9d38:	1fff6804 	.word	0x1fff6804

00009d3c <Bounce::update()>:
}



int Bounce::update()
{
    9d3c:	b530      	push	{r4, r5, lr}
    9d3e:	4604      	mov	r4, r0
    9d40:	b085      	sub	sp, #20


// Protected: debounces the pin
int Bounce::debounce() {
	
	uint8_t newState = digitalRead(pin);
    9d42:	7b40      	ldrb	r0, [r0, #13]
    9d44:	f005 f90e 	bl	ef64 <digitalRead>
	if (state != newState ) {
    9d48:	7b23      	ldrb	r3, [r4, #12]
    9d4a:	4283      	cmp	r3, r0
    9d4c:	d013      	beq.n	9d76 <Bounce::update()+0x3a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d4e:	4a16      	ldr	r2, [pc, #88]	; (9da8 <Bounce::update()+0x6c>)
  		if (millis() - previous_millis >= interval_millis) {
    9d50:	6825      	ldr	r5, [r4, #0]
    9d52:	6813      	ldr	r3, [r2, #0]
    9d54:	9303      	str	r3, [sp, #12]
	return ret;
    9d56:	9b03      	ldr	r3, [sp, #12]
    9d58:	6861      	ldr	r1, [r4, #4]
    9d5a:	1b5b      	subs	r3, r3, r5
    9d5c:	428b      	cmp	r3, r1
    9d5e:	d30a      	bcc.n	9d76 <Bounce::update()+0x3a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d60:	6813      	ldr	r3, [r2, #0]
    9d62:	9302      	str	r3, [sp, #8]
	return ret;
    9d64:	9a02      	ldr	r2, [sp, #8]
  			previous_millis = millis();
  			state = newState;
    9d66:	7320      	strb	r0, [r4, #12]
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    9d68:	2300      	movs	r3, #0

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    9d6a:	2001      	movs	r0, #1
int Bounce::debounce() {
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
    9d6c:	6022      	str	r2, [r4, #0]
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    9d6e:	60a3      	str	r3, [r4, #8]

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    9d70:	73a0      	strb	r0, [r4, #14]
		 rebounce(0);
		 return stateChanged = 1;
	}

	return stateChanged = 0;
}
    9d72:	b005      	add	sp, #20
    9d74:	bd30      	pop	{r4, r5, pc}
        return stateChanged = 1;
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
    9d76:	68a3      	ldr	r3, [r4, #8]
    9d78:	b18b      	cbz	r3, 9d9e <Bounce::update()+0x62>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d7a:	490b      	ldr	r1, [pc, #44]	; (9da8 <Bounce::update()+0x6c>)
    9d7c:	6820      	ldr	r0, [r4, #0]
    9d7e:	680a      	ldr	r2, [r1, #0]
    9d80:	9200      	str	r2, [sp, #0]
	return ret;
    9d82:	9a00      	ldr	r2, [sp, #0]
    9d84:	1a12      	subs	r2, r2, r0
    9d86:	4293      	cmp	r3, r2
    9d88:	d809      	bhi.n	9d9e <Bounce::update()+0x62>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d8a:	680b      	ldr	r3, [r1, #0]
    9d8c:	9301      	str	r3, [sp, #4]
	return ret;
    9d8e:	9b01      	ldr	r3, [sp, #4]
        previous_millis = millis();
    9d90:	6023      	str	r3, [r4, #0]
		 rebounce(0);
		 return stateChanged = 1;
    9d92:	2001      	movs	r0, #1
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    9d94:	2300      	movs	r3, #0
    9d96:	60a3      	str	r3, [r4, #8]
     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
    9d98:	73a0      	strb	r0, [r4, #14]
	}

	return stateChanged = 0;
}
    9d9a:	b005      	add	sp, #20
    9d9c:	bd30      	pop	{r4, r5, pc}
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
	}

	return stateChanged = 0;
    9d9e:	2000      	movs	r0, #0
    9da0:	73a0      	strb	r0, [r4, #14]
}
    9da2:	b005      	add	sp, #20
    9da4:	bd30      	pop	{r4, r5, pc}
    9da6:	bf00      	nop
    9da8:	1fff6804 	.word	0x1fff6804

00009dac <Bounce::fallingEdge()>:
}

// The risingEdge method is true for one scan after the de-bounced input goes from off-to-on.
bool  Bounce::risingEdge() { return stateChanged && state; }
// The fallingEdge  method it true for one scan after the de-bounced input goes from on-to-off. 
bool  Bounce::fallingEdge() { return stateChanged && !state; }
    9dac:	7b83      	ldrb	r3, [r0, #14]
    9dae:	b123      	cbz	r3, 9dba <Bounce::fallingEdge()+0xe>
    9db0:	7b00      	ldrb	r0, [r0, #12]
    9db2:	fab0 f080 	clz	r0, r0
    9db6:	0940      	lsrs	r0, r0, #5
    9db8:	4770      	bx	lr
    9dba:	4618      	mov	r0, r3
    9dbc:	4770      	bx	lr
    9dbe:	bf00      	nop

00009dc0 <sdhc_isr>:
  m_errorLine = line;
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
void sdhc_isr() {
    9dc0:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    9dc2:	4c07      	ldr	r4, [pc, #28]	; (9de0 <sdhc_isr+0x20>)
  m_irqstat = SDHC_IRQSTAT;
    9dc4:	4a07      	ldr	r2, [pc, #28]	; (9de4 <sdhc_isr+0x24>)
    9dc6:	4908      	ldr	r1, [pc, #32]	; (9de8 <sdhc_isr+0x28>)
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    9dc8:	4808      	ldr	r0, [pc, #32]	; (9dec <sdhc_isr+0x2c>)
  return false;  // setSdErrorCode
}
//=============================================================================
// ISR
void sdhc_isr() {
  SDHC_IRQSIGEN = 0;
    9dca:	2300      	movs	r3, #0
    9dcc:	6023      	str	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9dce:	6814      	ldr	r4, [r2, #0]
    9dd0:	600c      	str	r4, [r1, #0]
  SDHC_IRQSTAT = m_irqstat;
    9dd2:	6809      	ldr	r1, [r1, #0]
    9dd4:	6011      	str	r1, [r2, #0]
  m_dmaBusy = false;
}
    9dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
// ISR
void sdhc_isr() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  m_dmaBusy = false;
    9dda:	7003      	strb	r3, [r0, #0]
}
    9ddc:	4770      	bx	lr
    9dde:	bf00      	nop
    9de0:	400b1038 	.word	0x400b1038
    9de4:	400b1030 	.word	0x400b1030
    9de8:	1fff661c 	.word	0x1fff661c
    9dec:	1fff6620 	.word	0x1fff6620

00009df0 <SnoozeAlarm::disableDriver()>:

/*******************************************************************************
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::disableDriver( void ) {
    if ( mode == RUN_LP ) { return; }
    9df0:	4b11      	ldr	r3, [pc, #68]	; (9e38 <SnoozeAlarm::disableDriver()+0x48>)
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	2b01      	cmp	r3, #1
    9df6:	d01e      	beq.n	9e36 <SnoozeAlarm::disableDriver()+0x46>
    if ( mode == VLPW || mode == VLPS ) {
    9df8:	2b03      	cmp	r3, #3
}

/*******************************************************************************
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::disableDriver( void ) {
    9dfa:	b510      	push	{r4, lr}
    9dfc:	4604      	mov	r4, r0
    if ( mode == RUN_LP ) { return; }
    if ( mode == VLPW || mode == VLPS ) {
    9dfe:	d005      	beq.n	9e0c <SnoozeAlarm::disableDriver()+0x1c>
    9e00:	2b05      	cmp	r3, #5
    9e02:	d003      	beq.n	9e0c <SnoozeAlarm::disableDriver()+0x1c>
        NVIC_SET_PRIORITY( IRQ_RTC_ALARM, return_priority );// return priority
        __disable_irq( );
        attachInterruptVector( IRQ_RTC_ALARM, return_rtc_irq );// return prev interrupt
        __enable_irq( );
    }
    RTC_IER = IER;
    9e04:	4b0d      	ldr	r3, [pc, #52]	; (9e3c <SnoozeAlarm::disableDriver()+0x4c>)
    9e06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9e08:	601a      	str	r2, [r3, #0]
    9e0a:	bd10      	pop	{r4, pc}
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::disableDriver( void ) {
    if ( mode == RUN_LP ) { return; }
    if ( mode == VLPW || mode == VLPS ) {
        if ( return_isr_enabled == 0 )  NVIC_DISABLE_IRQ( IRQ_RTC_ALARM ); //disable irq
    9e0c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    9e10:	b91b      	cbnz	r3, 9e1a <SnoozeAlarm::disableDriver()+0x2a>
    9e12:	4b0b      	ldr	r3, [pc, #44]	; (9e40 <SnoozeAlarm::disableDriver()+0x50>)
    9e14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9e18:	601a      	str	r2, [r3, #0]
        NVIC_SET_PRIORITY( IRQ_RTC_ALARM, return_priority );// return priority
    9e1a:	4b0a      	ldr	r3, [pc, #40]	; (9e44 <SnoozeAlarm::disableDriver()+0x54>)
    9e1c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    9e20:	701a      	strb	r2, [r3, #0]
        __disable_irq( );
    9e22:	b672      	cpsid	i
        attachInterruptVector( IRQ_RTC_ALARM, return_rtc_irq );// return prev interrupt
    9e24:	202e      	movs	r0, #46	; 0x2e
    9e26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9e28:	f004 ff16 	bl	ec58 <attachInterruptVector>
        __enable_irq( );
    9e2c:	b662      	cpsie	i
    }
    RTC_IER = IER;
    9e2e:	4b03      	ldr	r3, [pc, #12]	; (9e3c <SnoozeAlarm::disableDriver()+0x4c>)
    9e30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    9e32:	601a      	str	r2, [r3, #0]
    9e34:	bd10      	pop	{r4, pc}
    9e36:	4770      	bx	lr
    9e38:	1fff42f4 	.word	0x1fff42f4
    9e3c:	4003d01c 	.word	0x4003d01c
    9e40:	e000e184 	.word	0xe000e184
    9e44:	e000e42e 	.word	0xe000e42e

00009e48 <SnoozeAlarm::enableDriver()>:
}

/*******************************************************************************
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::enableDriver( void ) {
    9e48:	b538      	push	{r3, r4, r5, lr}
    if ( mode == RUN_LP ) { return; }
    9e4a:	4d2f      	ldr	r5, [pc, #188]	; (9f08 <SnoozeAlarm::enableDriver()+0xc0>)
    9e4c:	782b      	ldrb	r3, [r5, #0]
    9e4e:	2b01      	cmp	r3, #1
    9e50:	d023      	beq.n	9e9a <SnoozeAlarm::enableDriver()+0x52>
    if ( mode == VLPW || mode == VLPS ) {
    9e52:	2b03      	cmp	r3, #3
    9e54:	4604      	mov	r4, r0
    9e56:	d02f      	beq.n	9eb8 <SnoozeAlarm::enableDriver()+0x70>
    9e58:	2b05      	cmp	r3, #5
    9e5a:	d02d      	beq.n	9eb8 <SnoozeAlarm::enableDriver()+0x70>
        return_rtc_irq = _VectorsRam[IRQ_RTC_ALARM+16];// save prev isr
        attachInterruptVector( IRQ_RTC_ALARM, isr );
        __enable_irq( );
    }
    
    if ( SIM_SCGC6 & SIM_SCGC6_RTC ) SIM_SCGC6_clock_active = true;
    9e5c:	4a2b      	ldr	r2, [pc, #172]	; (9f0c <SnoozeAlarm::enableDriver()+0xc4>)
    9e5e:	6811      	ldr	r1, [r2, #0]
    9e60:	0089      	lsls	r1, r1, #2
    9e62:	d41b      	bmi.n	9e9c <SnoozeAlarm::enableDriver()+0x54>
    else SIM_SCGC6 |= SIM_SCGC6_RTC;
    9e64:	6811      	ldr	r1, [r2, #0]
    
    
    if ( mode == VLPW || mode == VLPS) {
    9e66:	2b03      	cmp	r3, #3
        attachInterruptVector( IRQ_RTC_ALARM, isr );
        __enable_irq( );
    }
    
    if ( SIM_SCGC6 & SIM_SCGC6_RTC ) SIM_SCGC6_clock_active = true;
    else SIM_SCGC6 |= SIM_SCGC6_RTC;
    9e68:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    9e6c:	6011      	str	r1, [r2, #0]
    
    
    if ( mode == VLPW || mode == VLPS) {
    9e6e:	d01a      	beq.n	9ea6 <SnoozeAlarm::enableDriver()+0x5e>
    9e70:	2b05      	cmp	r3, #5
    9e72:	d018      	beq.n	9ea6 <SnoozeAlarm::enableDriver()+0x5e>
    
    static inline
    void llwu_configure_modules_mask( uint8_t module ) {
        llwu_mask_t *mask = &llwuMask;
        if( module & LLWU_LPTMR_MOD )      mask->ME |= LLWU_ME_WUME0;
        else if ( module & LLWU_RTCA_MOD ) mask->ME |= LLWU_ME_WUME5;
    9e74:	4a26      	ldr	r2, [pc, #152]	; (9f10 <SnoozeAlarm::enableDriver()+0xc8>)
    9e76:	7a13      	ldrb	r3, [r2, #8]
    9e78:	f043 0320 	orr.w	r3, r3, #32
    9e7c:	7213      	strb	r3, [r2, #8]
        if ( return_isr_enabled == 0 ) NVIC_ENABLE_IRQ( IRQ_RTC_ALARM );
    } else {
        llwu_configure_modules_mask( LLWU_RTCA_MOD );
    }
    
    IER = RTC_IER;
    9e7e:	4a25      	ldr	r2, [pc, #148]	; (9f14 <SnoozeAlarm::enableDriver()+0xcc>)
    if( timer_ ) // If setting timer style alarm
    9e80:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        if ( return_isr_enabled == 0 ) NVIC_ENABLE_IRQ( IRQ_RTC_ALARM );
    } else {
        llwu_configure_modules_mask( LLWU_RTCA_MOD );
    }
    
    IER = RTC_IER;
    9e84:	6812      	ldr	r2, [r2, #0]
    9e86:	63a2      	str	r2, [r4, #56]	; 0x38
    if( timer_ ) // If setting timer style alarm
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d135      	bne.n	9ef8 <SnoozeAlarm::enableDriver()+0xb0>
        RTC_TAR = rtc_get( ) + ( alarm - 1 );
    else        // else, setting true alarm
        RTC_TAR = alarm - 1;
    9e8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9e8e:	4a22      	ldr	r2, [pc, #136]	; (9f18 <SnoozeAlarm::enableDriver()+0xd0>)
    9e90:	3b01      	subs	r3, #1
    9e92:	6013      	str	r3, [r2, #0]
    RTC_IER = RTC_IER_TAIE_MASK;
    9e94:	4b1f      	ldr	r3, [pc, #124]	; (9f14 <SnoozeAlarm::enableDriver()+0xcc>)
    9e96:	2204      	movs	r2, #4
    9e98:	601a      	str	r2, [r3, #0]
    9e9a:	bd38      	pop	{r3, r4, r5, pc}
        return_rtc_irq = _VectorsRam[IRQ_RTC_ALARM+16];// save prev isr
        attachInterruptVector( IRQ_RTC_ALARM, isr );
        __enable_irq( );
    }
    
    if ( SIM_SCGC6 & SIM_SCGC6_RTC ) SIM_SCGC6_clock_active = true;
    9e9c:	2201      	movs	r2, #1
    else SIM_SCGC6 |= SIM_SCGC6_RTC;
    
    
    if ( mode == VLPW || mode == VLPS) {
    9e9e:	2b03      	cmp	r3, #3
        return_rtc_irq = _VectorsRam[IRQ_RTC_ALARM+16];// save prev isr
        attachInterruptVector( IRQ_RTC_ALARM, isr );
        __enable_irq( );
    }
    
    if ( SIM_SCGC6 & SIM_SCGC6_RTC ) SIM_SCGC6_clock_active = true;
    9ea0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    else SIM_SCGC6 |= SIM_SCGC6_RTC;
    
    
    if ( mode == VLPW || mode == VLPS) {
    9ea4:	d1e4      	bne.n	9e70 <SnoozeAlarm::enableDriver()+0x28>
        return_isr_enabled = NVIC_IS_ENABLED( IRQ_RTC_ALARM );
    9ea6:	4b1d      	ldr	r3, [pc, #116]	; (9f1c <SnoozeAlarm::enableDriver()+0xd4>)
    9ea8:	2100      	movs	r1, #0
        if ( return_isr_enabled == 0 ) NVIC_ENABLE_IRQ( IRQ_RTC_ALARM );
    9eaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    if ( SIM_SCGC6 & SIM_SCGC6_RTC ) SIM_SCGC6_clock_active = true;
    else SIM_SCGC6 |= SIM_SCGC6_RTC;
    
    
    if ( mode == VLPW || mode == VLPS) {
        return_isr_enabled = NVIC_IS_ENABLED( IRQ_RTC_ALARM );
    9eae:	6818      	ldr	r0, [r3, #0]
    9eb0:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
        if ( return_isr_enabled == 0 ) NVIC_ENABLE_IRQ( IRQ_RTC_ALARM );
    9eb4:	601a      	str	r2, [r3, #0]
    9eb6:	e7e2      	b.n	9e7e <SnoozeAlarm::enableDriver()+0x36>
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::enableDriver( void ) {
    if ( mode == RUN_LP ) { return; }
    if ( mode == VLPW || mode == VLPS ) {
        return_priority = NVIC_GET_PRIORITY( IRQ_RTC_ALARM );//get current priority
    9eb8:	4b19      	ldr	r3, [pc, #100]	; (9f20 <SnoozeAlarm::enableDriver()+0xd8>)
    9eba:	781b      	ldrb	r3, [r3, #0]
    9ebc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        int priority = nvic_execution_priority( );// get current priority
    9ec0:	f004 fcb8 	bl	e834 <nvic_execution_priority>
        // if running from handler set priority higher than current handler
        priority = ( priority  < 256 ) && ( ( priority - 16 ) > 0 ) ? priority - 16 : 128;
    9ec4:	f1a0 0311 	sub.w	r3, r0, #17
    9ec8:	2bee      	cmp	r3, #238	; 0xee
    9eca:	bf98      	it	ls
    9ecc:	3810      	subls	r0, #16
        NVIC_SET_PRIORITY( IRQ_RTC_ALARM, priority );//set priority to new level
    9ece:	4b14      	ldr	r3, [pc, #80]	; (9f20 <SnoozeAlarm::enableDriver()+0xd8>)
    9ed0:	bf94      	ite	ls
    9ed2:	b2c0      	uxtbls	r0, r0
    9ed4:	2080      	movhi	r0, #128	; 0x80
    9ed6:	7018      	strb	r0, [r3, #0]
        __disable_irq( );
    9ed8:	b672      	cpsid	i
        return_rtc_irq = _VectorsRam[IRQ_RTC_ALARM+16];// save prev isr
    9eda:	4b12      	ldr	r3, [pc, #72]	; (9f24 <SnoozeAlarm::enableDriver()+0xdc>)
        attachInterruptVector( IRQ_RTC_ALARM, isr );
    9edc:	4912      	ldr	r1, [pc, #72]	; (9f28 <SnoozeAlarm::enableDriver()+0xe0>)
        int priority = nvic_execution_priority( );// get current priority
        // if running from handler set priority higher than current handler
        priority = ( priority  < 256 ) && ( ( priority - 16 ) > 0 ) ? priority - 16 : 128;
        NVIC_SET_PRIORITY( IRQ_RTC_ALARM, priority );//set priority to new level
        __disable_irq( );
        return_rtc_irq = _VectorsRam[IRQ_RTC_ALARM+16];// save prev isr
    9ede:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
    9ee2:	62a3      	str	r3, [r4, #40]	; 0x28
        attachInterruptVector( IRQ_RTC_ALARM, isr );
    9ee4:	202e      	movs	r0, #46	; 0x2e
    9ee6:	f004 feb7 	bl	ec58 <attachInterruptVector>
        __enable_irq( );
    9eea:	b662      	cpsie	i
    }
    
    if ( SIM_SCGC6 & SIM_SCGC6_RTC ) SIM_SCGC6_clock_active = true;
    9eec:	4a07      	ldr	r2, [pc, #28]	; (9f0c <SnoozeAlarm::enableDriver()+0xc4>)
    9eee:	782b      	ldrb	r3, [r5, #0]
    9ef0:	6811      	ldr	r1, [r2, #0]
    9ef2:	0089      	lsls	r1, r1, #2
    9ef4:	d5b6      	bpl.n	9e64 <SnoozeAlarm::enableDriver()+0x1c>
    9ef6:	e7d1      	b.n	9e9c <SnoozeAlarm::enableDriver()+0x54>
        llwu_configure_modules_mask( LLWU_RTCA_MOD );
    }
    
    IER = RTC_IER;
    if( timer_ ) // If setting timer style alarm
        RTC_TAR = rtc_get( ) + ( alarm - 1 );
    9ef8:	f004 feb6 	bl	ec68 <rtc_get>
    9efc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9efe:	4a06      	ldr	r2, [pc, #24]	; (9f18 <SnoozeAlarm::enableDriver()+0xd0>)
    9f00:	3b01      	subs	r3, #1
    9f02:	4418      	add	r0, r3
    9f04:	6010      	str	r0, [r2, #0]
    9f06:	e7c5      	b.n	9e94 <SnoozeAlarm::enableDriver()+0x4c>
    9f08:	1fff42f4 	.word	0x1fff42f4
    9f0c:	4004803c 	.word	0x4004803c
    9f10:	1fff6c3c 	.word	0x1fff6c3c
    9f14:	4003d01c 	.word	0x4003d01c
    9f18:	4003d008 	.word	0x4003d008
    9f1c:	e000e104 	.word	0xe000e104
    9f20:	e000e42e 	.word	0xe000e42e
    9f24:	1fff4400 	.word	0x1fff4400
    9f28:	00009f69 	.word	0x00009f69

00009f2c <SnoozeAlarm::clearIsrFlags()>:

/*******************************************************************************
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::isr( void ) {
    if ( !( SIM_SCGC6 & SIM_SCGC6_RTC ) ) return;
    9f2c:	4b09      	ldr	r3, [pc, #36]	; (9f54 <SnoozeAlarm::clearIsrFlags()+0x28>)
    9f2e:	681b      	ldr	r3, [r3, #0]
    9f30:	009b      	lsls	r3, r3, #2
    9f32:	d400      	bmi.n	9f36 <SnoozeAlarm::clearIsrFlags()+0xa>
    9f34:	4770      	bx	lr
    RTC_TAR = RTC_TSR + 1;
    9f36:	4b08      	ldr	r3, [pc, #32]	; (9f58 <SnoozeAlarm::clearIsrFlags()+0x2c>)
    9f38:	4908      	ldr	r1, [pc, #32]	; (9f5c <SnoozeAlarm::clearIsrFlags()+0x30>)
    9f3a:	681b      	ldr	r3, [r3, #0]
    if ( mode == VLPW || mode == VLPS ) source = 35;
    9f3c:	4a08      	ldr	r2, [pc, #32]	; (9f60 <SnoozeAlarm::clearIsrFlags()+0x34>)
/*******************************************************************************
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::isr( void ) {
    if ( !( SIM_SCGC6 & SIM_SCGC6_RTC ) ) return;
    RTC_TAR = RTC_TSR + 1;
    9f3e:	3301      	adds	r3, #1
    9f40:	600b      	str	r3, [r1, #0]
    if ( mode == VLPW || mode == VLPS ) source = 35;
    9f42:	7813      	ldrb	r3, [r2, #0]
    9f44:	2b03      	cmp	r3, #3
    9f46:	d001      	beq.n	9f4c <SnoozeAlarm::clearIsrFlags()+0x20>
    9f48:	2b05      	cmp	r3, #5
    9f4a:	d1f3      	bne.n	9f34 <SnoozeAlarm::clearIsrFlags()+0x8>
    9f4c:	4b05      	ldr	r3, [pc, #20]	; (9f64 <SnoozeAlarm::clearIsrFlags()+0x38>)
    9f4e:	2223      	movs	r2, #35	; 0x23
    9f50:	601a      	str	r2, [r3, #0]
    9f52:	4770      	bx	lr
    9f54:	4004803c 	.word	0x4004803c
    9f58:	4003d000 	.word	0x4003d000
    9f5c:	4003d008 	.word	0x4003d008
    9f60:	1fff42f4 	.word	0x1fff42f4
    9f64:	1fff42f0 	.word	0x1fff42f0

00009f68 <SnoozeAlarm::isr()>:

/*******************************************************************************
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::isr( void ) {
    if ( !( SIM_SCGC6 & SIM_SCGC6_RTC ) ) return;
    9f68:	4b09      	ldr	r3, [pc, #36]	; (9f90 <SnoozeAlarm::isr()+0x28>)
    9f6a:	681b      	ldr	r3, [r3, #0]
    9f6c:	009b      	lsls	r3, r3, #2
    9f6e:	d50a      	bpl.n	9f86 <SnoozeAlarm::isr()+0x1e>
    RTC_TAR = RTC_TSR + 1;
    9f70:	4b08      	ldr	r3, [pc, #32]	; (9f94 <SnoozeAlarm::isr()+0x2c>)
    9f72:	4909      	ldr	r1, [pc, #36]	; (9f98 <SnoozeAlarm::isr()+0x30>)
    9f74:	681b      	ldr	r3, [r3, #0]
    if ( mode == VLPW || mode == VLPS ) source = 35;
    9f76:	4a09      	ldr	r2, [pc, #36]	; (9f9c <SnoozeAlarm::isr()+0x34>)
/*******************************************************************************
 *  <#Description#>
 *******************************************************************************/
void SnoozeAlarm::isr( void ) {
    if ( !( SIM_SCGC6 & SIM_SCGC6_RTC ) ) return;
    RTC_TAR = RTC_TSR + 1;
    9f78:	3301      	adds	r3, #1
    9f7a:	600b      	str	r3, [r1, #0]
    if ( mode == VLPW || mode == VLPS ) source = 35;
    9f7c:	7813      	ldrb	r3, [r2, #0]
    9f7e:	2b03      	cmp	r3, #3
    9f80:	d002      	beq.n	9f88 <SnoozeAlarm::isr()+0x20>
    9f82:	2b05      	cmp	r3, #5
    9f84:	d000      	beq.n	9f88 <SnoozeAlarm::isr()+0x20>
    9f86:	4770      	bx	lr
    9f88:	4b05      	ldr	r3, [pc, #20]	; (9fa0 <SnoozeAlarm::isr()+0x38>)
    9f8a:	2223      	movs	r2, #35	; 0x23
    9f8c:	601a      	str	r2, [r3, #0]
    9f8e:	4770      	bx	lr
    9f90:	4004803c 	.word	0x4004803c
    9f94:	4003d000 	.word	0x4003d000
    9f98:	4003d008 	.word	0x4003d008
    9f9c:	1fff42f4 	.word	0x1fff42f4
    9fa0:	1fff42f0 	.word	0x1fff42f0

00009fa4 <SnoozeAlarm::setRtcTimer(unsigned char, unsigned char, unsigned char)>:
 *  @param minutes 0 - 60
 *  @param seconds 0 - 60
 *******************************************************************************/
void SnoozeAlarm::setRtcTimer( uint8_t hours, uint8_t minutes, uint8_t seconds ) {
    isUsed = true;
    alarm = ( hours * 3600 ) + ( minutes * 60 ) + seconds;
    9fa4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 *
 *  @param hours   0 - 24
 *  @param minutes 0 - 60
 *  @param seconds 0 - 60
 *******************************************************************************/
void SnoozeAlarm::setRtcTimer( uint8_t hours, uint8_t minutes, uint8_t seconds ) {
    9fa8:	b410      	push	{r4}
    isUsed = true;
    alarm = ( hours * 3600 ) + ( minutes * 60 ) + seconds;
    9faa:	0092      	lsls	r2, r2, #2
    9fac:	f44f 6461 	mov.w	r4, #3600	; 0xe10
    9fb0:	fb04 2101 	mla	r1, r4, r1, r2
    9fb4:	440b      	add	r3, r1
 *  @param hours   0 - 24
 *  @param minutes 0 - 60
 *  @param seconds 0 - 60
 *******************************************************************************/
void SnoozeAlarm::setRtcTimer( uint8_t hours, uint8_t minutes, uint8_t seconds ) {
    isUsed = true;
    9fb6:	2201      	movs	r2, #1
    alarm = ( hours * 3600 ) + ( minutes * 60 ) + seconds;
    9fb8:	62c3      	str	r3, [r0, #44]	; 0x2c
 *  @param hours   0 - 24
 *  @param minutes 0 - 60
 *  @param seconds 0 - 60
 *******************************************************************************/
void SnoozeAlarm::setRtcTimer( uint8_t hours, uint8_t minutes, uint8_t seconds ) {
    isUsed = true;
    9fba:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    alarm = ( hours * 3600 ) + ( minutes * 60 ) + seconds;
    timer_ = true;
    9fbe:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
    9fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
    9fc6:	4770      	bx	lr

00009fc8 <SnoozeDigital::enableDriver()>:
}

/*******************************************************************************
 *  Enable digital interrupt and configure the pin
 *******************************************************************************/
void SnoozeDigital::enableDriver( void ) {
    9fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( mode == RUN_LP ) { return; }
    9fcc:	f8df b358 	ldr.w	fp, [pc, #856]	; a328 <SnoozeDigital::enableDriver()+0x360>
    9fd0:	f89b 3000 	ldrb.w	r3, [fp]
    9fd4:	2b01      	cmp	r3, #1
}

/*******************************************************************************
 *  Enable digital interrupt and configure the pin
 *******************************************************************************/
void SnoozeDigital::enableDriver( void ) {
    9fd6:	b083      	sub	sp, #12
    if ( mode == RUN_LP ) { return; }
    9fd8:	d04f      	beq.n	a07a <SnoozeDigital::enableDriver()+0xb2>
    9fda:	4680      	mov	r8, r0
#if defined(KINETISK)
    uint64_t _pin = pin;
    isr_pin = pin;
    9fdc:	4ac6      	ldr	r2, [pc, #792]	; (a2f8 <SnoozeDigital::enableDriver()+0x330>)
    9fde:	6a80      	ldr	r0, [r0, #40]	; 0x28
    9fe0:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
    if ( mode == VLPW || mode == VLPS ) {
    9fe4:	2b03      	cmp	r3, #3
 *******************************************************************************/
void SnoozeDigital::enableDriver( void ) {
    if ( mode == RUN_LP ) { return; }
#if defined(KINETISK)
    uint64_t _pin = pin;
    isr_pin = pin;
    9fe6:	e882 0003 	stmia.w	r2, {r0, r1}
    if ( mode == VLPW || mode == VLPS ) {
    9fea:	d049      	beq.n	a080 <SnoozeDigital::enableDriver()+0xb8>
    9fec:	2b05      	cmp	r3, #5
    9fee:	d047      	beq.n	a080 <SnoozeDigital::enableDriver()+0xb8>
    9ff0:	4606      	mov	r6, r0
    9ff2:	460f      	mov	r7, r1
        
        uint32_t pin_mode = irqType[pinNumber] >> 4;// get type
        uint32_t pin_type = irqType[pinNumber] & 0x0F;// get mode
        
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
    9ff4:	f8df a334 	ldr.w	sl, [pc, #820]	; a32c <SnoozeDigital::enableDriver()+0x364>
    9ff8:	46d1      	mov	r9, sl
    9ffa:	e030      	b.n	a05e <SnoozeDigital::enableDriver()+0x96>
        NVIC_ENABLE_IRQ( IRQ_PORTD );
        NVIC_ENABLE_IRQ( IRQ_PORTE );
    }
    _pin = pin;
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber  = 63 - __builtin_clzll( _pin );// get pin
    9ffc:	fab7 f387 	clz	r3, r7
    a000:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
        
        if ( pinNumber > CORE_NUM_INTERRUPT ) break;
    a004:	2b40      	cmp	r3, #64	; 0x40
    a006:	d838      	bhi.n	a07a <SnoozeDigital::enableDriver()+0xb2>
        
        uint32_t pin_mode = irqType[pinNumber] >> 4;// get type
        uint32_t pin_type = irqType[pinNumber] & 0x0F;// get mode
        
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
    a008:	00da      	lsls	r2, r3, #3
    a00a:	eb0a 0102 	add.w	r1, sl, r2
    a00e:	9201      	str	r2, [sp, #4]
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber  = 63 - __builtin_clzll( _pin );// get pin
        
        if ( pinNumber > CORE_NUM_INTERRUPT ) break;
        
        uint32_t pin_mode = irqType[pinNumber] >> 4;// get type
    a010:	eb08 0203 	add.w	r2, r8, r3
        uint32_t pin_type = irqType[pinNumber] & 0x0F;// get mode
        
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
    a014:	6849      	ldr	r1, [r1, #4]
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber  = 63 - __builtin_clzll( _pin );// get pin
        
        if ( pinNumber > CORE_NUM_INTERRUPT ) break;
        
        uint32_t pin_mode = irqType[pinNumber] >> 4;// get type
    a016:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
        uint32_t pin_type = irqType[pinNumber] & 0x0F;// get mode
        
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
        return_core_pin_config[pinNumber] = *config;
    a01a:	f8d1 c000 	ldr.w	ip, [r1]
    a01e:	f103 0e28 	add.w	lr, r3, #40	; 0x28
    a022:	f848 c02e 	str.w	ip, [r8, lr, lsl #2]
        // setup pin mode/type/interrupt
        if ( pin_mode == INPUT || pin_mode == INPUT_PULLUP  || pin_mode == INPUT_PULLDOWN ) {
    a026:	ea5f 1e22 	movs.w	lr, r2, asr #4
    a02a:	f000 80c1 	beq.w	a1b0 <SnoozeDigital::enableDriver()+0x1e8>
    a02e:	f1be 0f02 	cmp.w	lr, #2
    a032:	f000 8114 	beq.w	a25e <SnoozeDigital::enableDriver()+0x296>
    a036:	f1be 0f03 	cmp.w	lr, #3
    a03a:	f000 813a 	beq.w	a2b2 <SnoozeDigital::enableDriver()+0x2ea>
            }
        } else {
            //pinMode( pinNumber, pin_mode );
            //digitalWriteFast( pinNumber, pin_type );
        }
        _pin &= ~( ( uint64_t )1 << pinNumber );// remove pin from list
    a03e:	2201      	movs	r2, #1
    a040:	f1a3 0020 	sub.w	r0, r3, #32
    a044:	f1c3 0120 	rsb	r1, r3, #32
    a048:	fa02 f500 	lsl.w	r5, r2, r0
    a04c:	fa22 f101 	lsr.w	r1, r2, r1
    a050:	430d      	orrs	r5, r1
    a052:	fa02 f403 	lsl.w	r4, r2, r3
    a056:	ea26 0604 	bic.w	r6, r6, r4
    a05a:	ea27 0705 	bic.w	r7, r7, r5
        NVIC_ENABLE_IRQ( IRQ_PORTC );
        NVIC_ENABLE_IRQ( IRQ_PORTD );
        NVIC_ENABLE_IRQ( IRQ_PORTE );
    }
    _pin = pin;
    while ( __builtin_popcountll( _pin ) ) {
    a05e:	4630      	mov	r0, r6
    a060:	4639      	mov	r1, r7
    a062:	f007 fce1 	bl	11a28 <__popcountdi2>
    a066:	b140      	cbz	r0, a07a <SnoozeDigital::enableDriver()+0xb2>
        uint32_t pinNumber  = 63 - __builtin_clzll( _pin );// get pin
    a068:	2f00      	cmp	r7, #0
    a06a:	d1c7      	bne.n	9ffc <SnoozeDigital::enableDriver()+0x34>
    a06c:	fab6 f386 	clz	r3, r6
    a070:	3320      	adds	r3, #32
    a072:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
        
        if ( pinNumber > CORE_NUM_INTERRUPT ) break;
    a076:	2b40      	cmp	r3, #64	; 0x40
    a078:	d9c6      	bls.n	a008 <SnoozeDigital::enableDriver()+0x40>
            //digitalWriteFast( pinNumber, pin_type );
        }
        _pin &= ~( ( uint32_t )1 << pinNumber );// remove pin from list
    }
#endif
}
    a07a:	b003      	add	sp, #12
    a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if defined(KINETISK)
    uint64_t _pin = pin;
    isr_pin = pin;
    if ( mode == VLPW || mode == VLPS ) {
        
        return_isr_a_enabled = NVIC_IS_ENABLED( IRQ_PORTA );
    a080:	499e      	ldr	r1, [pc, #632]	; (a2fc <SnoozeDigital::enableDriver()+0x334>)
        return_isr_b_enabled = NVIC_IS_ENABLED( IRQ_PORTB );
        return_isr_c_enabled = NVIC_IS_ENABLED( IRQ_PORTC );
        return_isr_d_enabled = NVIC_IS_ENABLED( IRQ_PORTD );
        return_isr_e_enabled = NVIC_IS_ENABLED( IRQ_PORTE );
        NVIC_DISABLE_IRQ(IRQ_PORTA);
    a082:	4a9f      	ldr	r2, [pc, #636]	; (a300 <SnoozeDigital::enableDriver()+0x338>)
#if defined(KINETISK)
    uint64_t _pin = pin;
    isr_pin = pin;
    if ( mode == VLPW || mode == VLPS ) {
        
        return_isr_a_enabled = NVIC_IS_ENABLED( IRQ_PORTA );
    a084:	6808      	ldr	r0, [r1, #0]
        NVIC_DISABLE_IRQ(IRQ_PORTA);
        NVIC_DISABLE_IRQ(IRQ_PORTB);
        NVIC_DISABLE_IRQ(IRQ_PORTC);
        NVIC_DISABLE_IRQ(IRQ_PORTD);
        NVIC_DISABLE_IRQ(IRQ_PORTE);
        NVIC_CLEAR_PENDING(IRQ_PORTA);
    a086:	4b9f      	ldr	r3, [pc, #636]	; (a304 <SnoozeDigital::enableDriver()+0x33c>)
#if defined(KINETISK)
    uint64_t _pin = pin;
    isr_pin = pin;
    if ( mode == VLPW || mode == VLPS ) {
        
        return_isr_a_enabled = NVIC_IS_ENABLED( IRQ_PORTA );
    a088:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
    a08c:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
        return_isr_b_enabled = NVIC_IS_ENABLED( IRQ_PORTB );
    a090:	6808      	ldr	r0, [r1, #0]
    a092:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
    a096:	f8c8 0088 	str.w	r0, [r8, #136]	; 0x88
        return_isr_c_enabled = NVIC_IS_ENABLED( IRQ_PORTC );
    a09a:	6808      	ldr	r0, [r1, #0]
    a09c:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
    a0a0:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
        return_isr_d_enabled = NVIC_IS_ENABLED( IRQ_PORTD );
    a0a4:	6808      	ldr	r0, [r1, #0]
    a0a6:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
    a0aa:	f8c8 0090 	str.w	r0, [r8, #144]	; 0x90
        return_isr_e_enabled = NVIC_IS_ENABLED( IRQ_PORTE );
    a0ae:	6809      	ldr	r1, [r1, #0]
    a0b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a0b4:	f8c8 1094 	str.w	r1, [r8, #148]	; 0x94
        NVIC_DISABLE_IRQ(IRQ_PORTA);
    a0b8:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
        NVIC_DISABLE_IRQ(IRQ_PORTB);
        NVIC_DISABLE_IRQ(IRQ_PORTC);
        NVIC_DISABLE_IRQ(IRQ_PORTD);
        NVIC_DISABLE_IRQ(IRQ_PORTE);
    a0bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
        return_isr_b_enabled = NVIC_IS_ENABLED( IRQ_PORTB );
        return_isr_c_enabled = NVIC_IS_ENABLED( IRQ_PORTC );
        return_isr_d_enabled = NVIC_IS_ENABLED( IRQ_PORTD );
        return_isr_e_enabled = NVIC_IS_ENABLED( IRQ_PORTE );
        NVIC_DISABLE_IRQ(IRQ_PORTA);
        NVIC_DISABLE_IRQ(IRQ_PORTB);
    a0c0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
        NVIC_DISABLE_IRQ(IRQ_PORTC);
    a0c4:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
        NVIC_DISABLE_IRQ(IRQ_PORTD);
    a0c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
        return_isr_a_enabled = NVIC_IS_ENABLED( IRQ_PORTA );
        return_isr_b_enabled = NVIC_IS_ENABLED( IRQ_PORTB );
        return_isr_c_enabled = NVIC_IS_ENABLED( IRQ_PORTC );
        return_isr_d_enabled = NVIC_IS_ENABLED( IRQ_PORTD );
        return_isr_e_enabled = NVIC_IS_ENABLED( IRQ_PORTE );
        NVIC_DISABLE_IRQ(IRQ_PORTA);
    a0cc:	f8c2 e000 	str.w	lr, [r2]
        NVIC_DISABLE_IRQ(IRQ_PORTB);
    a0d0:	6017      	str	r7, [r2, #0]
        NVIC_DISABLE_IRQ(IRQ_PORTC);
    a0d2:	6016      	str	r6, [r2, #0]
        NVIC_DISABLE_IRQ(IRQ_PORTD);
    a0d4:	6010      	str	r0, [r2, #0]
        NVIC_DISABLE_IRQ(IRQ_PORTE);
    a0d6:	6011      	str	r1, [r2, #0]
        NVIC_CLEAR_PENDING(IRQ_PORTA);
    a0d8:	f8c3 e000 	str.w	lr, [r3]
        NVIC_CLEAR_PENDING(IRQ_PORTB);
    a0dc:	601f      	str	r7, [r3, #0]
        NVIC_CLEAR_PENDING(IRQ_PORTC);
    a0de:	601e      	str	r6, [r3, #0]
        NVIC_CLEAR_PENDING(IRQ_PORTD);
    a0e0:	6018      	str	r0, [r3, #0]
        NVIC_CLEAR_PENDING(IRQ_PORTE);
    a0e2:	6019      	str	r1, [r3, #0]
        
        int priority = nvic_execution_priority( );// get current priority
    a0e4:	f004 fba6 	bl	e834 <nvic_execution_priority>
        // if running from interrupt set priority higher than current interrupt
        priority = ( priority < 256 ) && ( ( priority - 16 ) > 0 ) ? priority - 16 : 128;
        return_priority_a = NVIC_GET_PRIORITY( IRQ_PORTA );//get current priority
    a0e8:	4f87      	ldr	r7, [pc, #540]	; (a308 <SnoozeDigital::enableDriver()+0x340>)
        return_priority_b = NVIC_GET_PRIORITY( IRQ_PORTB );//get current priority
    a0ea:	4e88      	ldr	r6, [pc, #544]	; (a30c <SnoozeDigital::enableDriver()+0x344>)
        NVIC_CLEAR_PENDING(IRQ_PORTE);
        
        int priority = nvic_execution_priority( );// get current priority
        // if running from interrupt set priority higher than current interrupt
        priority = ( priority < 256 ) && ( ( priority - 16 ) > 0 ) ? priority - 16 : 128;
        return_priority_a = NVIC_GET_PRIORITY( IRQ_PORTA );//get current priority
    a0ec:	783a      	ldrb	r2, [r7, #0]
    a0ee:	f888 2098 	strb.w	r2, [r8, #152]	; 0x98
        NVIC_CLEAR_PENDING(IRQ_PORTD);
        NVIC_CLEAR_PENDING(IRQ_PORTE);
        
        int priority = nvic_execution_priority( );// get current priority
        // if running from interrupt set priority higher than current interrupt
        priority = ( priority < 256 ) && ( ( priority - 16 ) > 0 ) ? priority - 16 : 128;
    a0f2:	f1a0 0311 	sub.w	r3, r0, #17
    a0f6:	2bee      	cmp	r3, #238	; 0xee
        return_priority_a = NVIC_GET_PRIORITY( IRQ_PORTA );//get current priority
        return_priority_b = NVIC_GET_PRIORITY( IRQ_PORTB );//get current priority
    a0f8:	7832      	ldrb	r2, [r6, #0]
    a0fa:	f888 2099 	strb.w	r2, [r8, #153]	; 0x99
    a0fe:	bf98      	it	ls
    a100:	f1a0 0310 	subls.w	r3, r0, #16
        return_priority_c = NVIC_GET_PRIORITY( IRQ_PORTC );//get current priority
    a104:	4882      	ldr	r0, [pc, #520]	; (a310 <SnoozeDigital::enableDriver()+0x348>)
        return_priority_d = NVIC_GET_PRIORITY( IRQ_PORTD );//get current priority
    a106:	4983      	ldr	r1, [pc, #524]	; (a314 <SnoozeDigital::enableDriver()+0x34c>)
        int priority = nvic_execution_priority( );// get current priority
        // if running from interrupt set priority higher than current interrupt
        priority = ( priority < 256 ) && ( ( priority - 16 ) > 0 ) ? priority - 16 : 128;
        return_priority_a = NVIC_GET_PRIORITY( IRQ_PORTA );//get current priority
        return_priority_b = NVIC_GET_PRIORITY( IRQ_PORTB );//get current priority
        return_priority_c = NVIC_GET_PRIORITY( IRQ_PORTC );//get current priority
    a108:	7802      	ldrb	r2, [r0, #0]
    a10a:	f888 209a 	strb.w	r2, [r8, #154]	; 0x9a
        return_priority_d = NVIC_GET_PRIORITY( IRQ_PORTD );//get current priority
    a10e:	f891 e000 	ldrb.w	lr, [r1]
        return_priority_e = NVIC_GET_PRIORITY( IRQ_PORTE );//get current priority
    a112:	4a81      	ldr	r2, [pc, #516]	; (a318 <SnoozeDigital::enableDriver()+0x350>)
        // if running from interrupt set priority higher than current interrupt
        priority = ( priority < 256 ) && ( ( priority - 16 ) > 0 ) ? priority - 16 : 128;
        return_priority_a = NVIC_GET_PRIORITY( IRQ_PORTA );//get current priority
        return_priority_b = NVIC_GET_PRIORITY( IRQ_PORTB );//get current priority
        return_priority_c = NVIC_GET_PRIORITY( IRQ_PORTC );//get current priority
        return_priority_d = NVIC_GET_PRIORITY( IRQ_PORTD );//get current priority
    a114:	f888 e09b 	strb.w	lr, [r8, #155]	; 0x9b
        return_priority_e = NVIC_GET_PRIORITY( IRQ_PORTE );//get current priority
    a118:	f892 e000 	ldrb.w	lr, [r2]
    a11c:	f888 e09c 	strb.w	lr, [r8, #156]	; 0x9c
    a120:	bf94      	ite	ls
    a122:	b2db      	uxtbls	r3, r3
    a124:	2380      	movhi	r3, #128	; 0x80
        NVIC_SET_PRIORITY( IRQ_PORTA, priority );//set priority to new level
    a126:	703b      	strb	r3, [r7, #0]
        NVIC_SET_PRIORITY( IRQ_PORTB, priority );//set priority to new level
    a128:	7033      	strb	r3, [r6, #0]
        NVIC_SET_PRIORITY( IRQ_PORTC, priority );//set priority to new level
    a12a:	7003      	strb	r3, [r0, #0]
        NVIC_SET_PRIORITY( IRQ_PORTD, priority );//set priority to new level
    a12c:	700b      	strb	r3, [r1, #0]
        NVIC_SET_PRIORITY( IRQ_PORTE, priority );//set priority to new level
    a12e:	7013      	strb	r3, [r2, #0]
        
        __disable_irq( );
    a130:	b672      	cpsid	i
        return_porta_irq = _VectorsRam[IRQ_PORTA+16];// save prev isr handler
    a132:	4b7a      	ldr	r3, [pc, #488]	; (a31c <SnoozeDigital::enableDriver()+0x354>)
        return_portb_irq = _VectorsRam[IRQ_PORTB+16];// save prev isr handler
        return_portc_irq = _VectorsRam[IRQ_PORTC+16];// save prev isr handler
        return_portd_irq = _VectorsRam[IRQ_PORTD+16];// save prev isr handler
        return_porte_irq = _VectorsRam[IRQ_PORTE+16];// save prev isr handler
        attachInterruptVector( IRQ_PORTA, wakeupIsr );// set snooze digA isr
    a134:	497a      	ldr	r1, [pc, #488]	; (a320 <SnoozeDigital::enableDriver()+0x358>)
        NVIC_SET_PRIORITY( IRQ_PORTC, priority );//set priority to new level
        NVIC_SET_PRIORITY( IRQ_PORTD, priority );//set priority to new level
        NVIC_SET_PRIORITY( IRQ_PORTE, priority );//set priority to new level
        
        __disable_irq( );
        return_porta_irq = _VectorsRam[IRQ_PORTA+16];// save prev isr handler
    a136:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
    a13a:	f8c8 2070 	str.w	r2, [r8, #112]	; 0x70
        return_portb_irq = _VectorsRam[IRQ_PORTB+16];// save prev isr handler
    a13e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    a142:	f8c8 2074 	str.w	r2, [r8, #116]	; 0x74
        return_portc_irq = _VectorsRam[IRQ_PORTC+16];// save prev isr handler
    a146:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
    a14a:	f8c8 2078 	str.w	r2, [r8, #120]	; 0x78
        return_portd_irq = _VectorsRam[IRQ_PORTD+16];// save prev isr handler
    a14e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    a152:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
        return_porte_irq = _VectorsRam[IRQ_PORTE+16];// save prev isr handler
    a156:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    a15a:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
        attachInterruptVector( IRQ_PORTA, wakeupIsr );// set snooze digA isr
    a15e:	203b      	movs	r0, #59	; 0x3b
    a160:	f004 fd7a 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTB, wakeupIsr );// set snooze digB isr
    a164:	496e      	ldr	r1, [pc, #440]	; (a320 <SnoozeDigital::enableDriver()+0x358>)
    a166:	203c      	movs	r0, #60	; 0x3c
    a168:	f004 fd76 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTC, wakeupIsr );// set snooze digC isr
    a16c:	496c      	ldr	r1, [pc, #432]	; (a320 <SnoozeDigital::enableDriver()+0x358>)
    a16e:	203d      	movs	r0, #61	; 0x3d
    a170:	f004 fd72 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTD, wakeupIsr );// set snooze digD isr
    a174:	496a      	ldr	r1, [pc, #424]	; (a320 <SnoozeDigital::enableDriver()+0x358>)
    a176:	203e      	movs	r0, #62	; 0x3e
    a178:	f004 fd6e 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTE, wakeupIsr );// set snooze digE isr
    a17c:	4968      	ldr	r1, [pc, #416]	; (a320 <SnoozeDigital::enableDriver()+0x358>)
    a17e:	203f      	movs	r0, #63	; 0x3f
    a180:	f004 fd6a 	bl	ec58 <attachInterruptVector>
        __enable_irq( );
    a184:	b662      	cpsie	i
        
        NVIC_ENABLE_IRQ( IRQ_PORTA );
    a186:	4b5d      	ldr	r3, [pc, #372]	; (a2fc <SnoozeDigital::enableDriver()+0x334>)
    a188:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
        NVIC_ENABLE_IRQ( IRQ_PORTB );
    a18c:	f04f 5e80 	mov.w	lr, #268435456	; 0x10000000
        NVIC_ENABLE_IRQ( IRQ_PORTC );
    a190:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
        NVIC_ENABLE_IRQ( IRQ_PORTD );
    a194:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
        NVIC_ENABLE_IRQ( IRQ_PORTE );
    a198:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    a19c:	e9d8 670a 	ldrd	r6, r7, [r8, #40]	; 0x28
        attachInterruptVector( IRQ_PORTC, wakeupIsr );// set snooze digC isr
        attachInterruptVector( IRQ_PORTD, wakeupIsr );// set snooze digD isr
        attachInterruptVector( IRQ_PORTE, wakeupIsr );// set snooze digE isr
        __enable_irq( );
        
        NVIC_ENABLE_IRQ( IRQ_PORTA );
    a1a0:	f8c3 c000 	str.w	ip, [r3]
        NVIC_ENABLE_IRQ( IRQ_PORTB );
    a1a4:	f8c3 e000 	str.w	lr, [r3]
        NVIC_ENABLE_IRQ( IRQ_PORTC );
    a1a8:	6018      	str	r0, [r3, #0]
        NVIC_ENABLE_IRQ( IRQ_PORTD );
    a1aa:	6019      	str	r1, [r3, #0]
        NVIC_ENABLE_IRQ( IRQ_PORTE );
    a1ac:	601a      	str	r2, [r3, #0]
    a1ae:	e721      	b.n	9ff4 <SnoozeDigital::enableDriver()+0x2c>
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
        return_core_pin_config[pinNumber] = *config;
        // setup pin mode/type/interrupt
        if ( pin_mode == INPUT || pin_mode == INPUT_PULLUP  || pin_mode == INPUT_PULLDOWN ) {
            *portModeRegister( pinNumber ) = 0;
    a1b0:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
    a1b4:	f880 e280 	strb.w	lr, [r0, #640]	; 0x280
            *config = PORT_PCR_MUX( 1 );
    a1b8:	f44f 7080 	mov.w	r0, #256	; 0x100
    a1bc:	6008      	str	r0, [r1, #0]
            if ( pin_mode == INPUT_PULLUP ) *config |= PORT_PCR_PE | PORT_PCR_PS;// pullup
            else if ( pin_mode == INPUT_PULLDOWN ) {
                *config |= ( PORT_PCR_PE ); // pulldown
                *config &= ~( PORT_PCR_PS );
            }
            if ( mode == VLPW || mode == VLPS ) {
    a1be:	f89b 1000 	ldrb.w	r1, [fp]
    a1c2:	2903      	cmp	r1, #3
    a1c4:	d05e      	beq.n	a284 <SnoozeDigital::enableDriver()+0x2bc>
    a1c6:	2905      	cmp	r1, #5
    a1c8:	d05c      	beq.n	a284 <SnoozeDigital::enableDriver()+0x2bc>
    
    static inline
    void llwu_configure_pin_mask( uint8_t pin, uint8_t rise_fall ) {
        llwu_mask_t *mask = &llwuMask;
        uint8_t detect_type;
        if ( rise_fall == RISING )       detect_type = LLWU_PIN_RISING;
    a1ca:	f1be 0f03 	cmp.w	lr, #3
    a1ce:	d069      	beq.n	a2a4 <SnoozeDigital::enableDriver()+0x2dc>
        else if ( rise_fall == FALLING ) detect_type = LLWU_PIN_FALLING;
    a1d0:	f1be 0f02 	cmp.w	lr, #2
    a1d4:	bf15      	itete	ne
    a1d6:	2030      	movne	r0, #48	; 0x30
    a1d8:	2020      	moveq	r0, #32
    a1da:	f04f 0e0c 	movne.w	lr, #12
    a1de:	f04f 0e08 	moveq.w	lr, #8
    a1e2:	bf15      	itete	ne
    a1e4:	f04f 0cc0 	movne.w	ip, #192	; 0xc0
    a1e8:	f04f 0c80 	moveq.w	ip, #128	; 0x80
    a1ec:	2103      	movne	r1, #3
    a1ee:	2102      	moveq	r1, #2
        else if ( rise_fall == CHANGE )  detect_type = LLWU_PIN_ANY;
        else                             detect_type = LLWU_PIN_ANY;
        
        if ( pin == 2 )       mask->PE4 |= LLWU_PE4_WUPE12( detect_type );
    a1f0:	2b02      	cmp	r3, #2
    a1f2:	d051      	beq.n	a298 <SnoozeDigital::enableDriver()+0x2d0>
        else if ( pin == 4 )  mask->PE2 |= LLWU_PE2_WUPE4 ( detect_type );
    a1f4:	2b04      	cmp	r3, #4
                attachDigitalInterrupt( pinNumber, pin_type );// set pin interrupt
            }
            else {
                llwu_configure_pin_mask( pinNumber, pin_mode );
    a1f6:	b2da      	uxtb	r2, r3
    a1f8:	d071      	beq.n	a2de <SnoozeDigital::enableDriver()+0x316>
        else if ( pin == 6 )  mask->PE4 |= LLWU_PE4_WUPE14( detect_type );
    a1fa:	2a06      	cmp	r2, #6
    a1fc:	d075      	beq.n	a2ea <SnoozeDigital::enableDriver()+0x322>
        else if ( pin == 7 )  mask->PE4 |= LLWU_PE4_WUPE13( detect_type );
    a1fe:	2a07      	cmp	r2, #7
    a200:	f000 8096 	beq.w	a330 <SnoozeDigital::enableDriver()+0x368>
        else if ( pin == 9 )  mask->PE2 |= LLWU_PE2_WUPE7 ( detect_type );
    a204:	2a09      	cmp	r2, #9
    a206:	f000 809b 	beq.w	a340 <SnoozeDigital::enableDriver()+0x378>
        else if ( pin == 10 ) mask->PE3 |= LLWU_PE3_WUPE8 ( detect_type );
    a20a:	2a0a      	cmp	r2, #10
    a20c:	f000 80c5 	beq.w	a39a <SnoozeDigital::enableDriver()+0x3d2>
        else if ( pin == 11 ) mask->PE3 |= LLWU_PE3_WUPE10( detect_type );
    a210:	2a0b      	cmp	r2, #11
    a212:	f000 80c8 	beq.w	a3a6 <SnoozeDigital::enableDriver()+0x3de>
        else if ( pin == 13 ) mask->PE3 |= LLWU_PE3_WUPE9 ( detect_type );
    a216:	2a0d      	cmp	r2, #13
    a218:	f000 80cb 	beq.w	a3b2 <SnoozeDigital::enableDriver()+0x3ea>
        else if ( pin == 16 ) mask->PE2 |= LLWU_PE2_WUPE5 ( detect_type );
    a21c:	2a10      	cmp	r2, #16
    a21e:	f000 80b4 	beq.w	a38a <SnoozeDigital::enableDriver()+0x3c2>
        else if ( pin == 21 ) mask->PE4 |= LLWU_PE4_WUPE15( detect_type );
    a222:	2a15      	cmp	r2, #21
    a224:	f000 80d5 	beq.w	a3d2 <SnoozeDigital::enableDriver()+0x40a>
        else if ( pin == 22 ) mask->PE2 |= LLWU_PE2_WUPE6 ( detect_type );
    a228:	2a16      	cmp	r2, #22
    a22a:	f000 80da 	beq.w	a3e2 <SnoozeDigital::enableDriver()+0x41a>
        else if ( pin == 26 ) mask->PE1 |= LLWU_PE1_WUPE0 ( detect_type );
    a22e:	2a1a      	cmp	r2, #26
    a230:	f000 80dd 	beq.w	a3ee <SnoozeDigital::enableDriver()+0x426>
        else if ( pin == 30 ) mask->PE3 |= LLWU_PE3_WUPE11( detect_type );
    a234:	2a1e      	cmp	r2, #30
    a236:	f000 80c4 	beq.w	a3c2 <SnoozeDigital::enableDriver()+0x3fa>
        else if ( pin == 33 ) mask->PE1 |= LLWU_PE1_WUPE3 ( detect_type );
    a23a:	2a21      	cmp	r2, #33	; 0x21
    a23c:	f000 80dd 	beq.w	a3fa <SnoozeDigital::enableDriver()+0x432>
        else if ( pin == 59 ) mask->PE1 |= LLWU_PE1_WUPE0( detect_type );
    a240:	2a3b      	cmp	r2, #59	; 0x3b
    a242:	f000 80d4 	beq.w	a3ee <SnoozeDigital::enableDriver()+0x426>
        else if ( pin == 60 ) mask->PE1 |= LLWU_PE1_WUPE1( detect_type );
    a246:	2a3c      	cmp	r2, #60	; 0x3c
    a248:	f000 80df 	beq.w	a40a <SnoozeDigital::enableDriver()+0x442>
        else if ( pin == 62 ) mask->PE1 |= LLWU_PE1_WUPE2( detect_type );
    a24c:	2a3e      	cmp	r2, #62	; 0x3e
    a24e:	f47f aef6 	bne.w	a03e <SnoozeDigital::enableDriver()+0x76>
    a252:	4a34      	ldr	r2, [pc, #208]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a254:	7812      	ldrb	r2, [r2, #0]
    a256:	4310      	orrs	r0, r2
    a258:	4a32      	ldr	r2, [pc, #200]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a25a:	7010      	strb	r0, [r2, #0]
    a25c:	e6ef      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
        return_core_pin_config[pinNumber] = *config;
        // setup pin mode/type/interrupt
        if ( pin_mode == INPUT || pin_mode == INPUT_PULLUP  || pin_mode == INPUT_PULLDOWN ) {
            *portModeRegister( pinNumber ) = 0;
    a25e:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
    a262:	f04f 0c00 	mov.w	ip, #0
    a266:	f880 c280 	strb.w	ip, [r0, #640]	; 0x280
            *config = PORT_PCR_MUX( 1 );
    a26a:	f44f 7080 	mov.w	r0, #256	; 0x100
    a26e:	6008      	str	r0, [r1, #0]
            if ( pin_mode == INPUT_PULLUP ) *config |= PORT_PCR_PE | PORT_PCR_PS;// pullup
    a270:	f8d1 c000 	ldr.w	ip, [r1]
    a274:	f04c 0c03 	orr.w	ip, ip, #3
    a278:	f8c1 c000 	str.w	ip, [r1]
            else if ( pin_mode == INPUT_PULLDOWN ) {
                *config |= ( PORT_PCR_PE ); // pulldown
                *config &= ~( PORT_PCR_PS );
            }
            if ( mode == VLPW || mode == VLPS ) {
    a27c:	f89b 1000 	ldrb.w	r1, [fp]
    a280:	2903      	cmp	r1, #3
    a282:	d1a0      	bne.n	a1c6 <SnoozeDigital::enableDriver()+0x1fe>
void SnoozeDigital::attachDigitalInterrupt( uint8_t pin, int mode ) {
    volatile uint32_t *config;
    uint32_t cfg, mask;
    
    if ( pin >= CORE_NUM_DIGITAL ) return;
    switch ( mode ) {
    a284:	f002 020f 	and.w	r2, r2, #15
    a288:	2a04      	cmp	r2, #4
    a28a:	f63f aed8 	bhi.w	a03e <SnoozeDigital::enableDriver()+0x76>
    a28e:	e8df f002 	tbb	[pc, r2]
    a292:	7376      	.short	0x7376
    a294:	5f70      	.short	0x5f70
    a296:	79          	.byte	0x79
    a297:	00          	.byte	0x00
        if ( rise_fall == RISING )       detect_type = LLWU_PIN_RISING;
        else if ( rise_fall == FALLING ) detect_type = LLWU_PIN_FALLING;
        else if ( rise_fall == CHANGE )  detect_type = LLWU_PIN_ANY;
        else                             detect_type = LLWU_PIN_ANY;
        
        if ( pin == 2 )       mask->PE4 |= LLWU_PE4_WUPE12( detect_type );
    a298:	4a22      	ldr	r2, [pc, #136]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a29a:	78d2      	ldrb	r2, [r2, #3]
    a29c:	4311      	orrs	r1, r2
    a29e:	4a21      	ldr	r2, [pc, #132]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a2a0:	70d1      	strb	r1, [r2, #3]
    a2a2:	e6cc      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
    
    static inline
    void llwu_configure_pin_mask( uint8_t pin, uint8_t rise_fall ) {
        llwu_mask_t *mask = &llwuMask;
        uint8_t detect_type;
        if ( rise_fall == RISING )       detect_type = LLWU_PIN_RISING;
    a2a4:	2010      	movs	r0, #16
    a2a6:	f04f 0e04 	mov.w	lr, #4
    a2aa:	f04f 0c40 	mov.w	ip, #64	; 0x40
    a2ae:	2101      	movs	r1, #1
    a2b0:	e79e      	b.n	a1f0 <SnoozeDigital::enableDriver()+0x228>
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
        return_core_pin_config[pinNumber] = *config;
        // setup pin mode/type/interrupt
        if ( pin_mode == INPUT || pin_mode == INPUT_PULLUP  || pin_mode == INPUT_PULLDOWN ) {
            *portModeRegister( pinNumber ) = 0;
    a2b2:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
    a2b6:	f04f 0c00 	mov.w	ip, #0
    a2ba:	f880 c280 	strb.w	ip, [r0, #640]	; 0x280
            *config = PORT_PCR_MUX( 1 );
    a2be:	f44f 7080 	mov.w	r0, #256	; 0x100
    a2c2:	6008      	str	r0, [r1, #0]
            if ( pin_mode == INPUT_PULLUP ) *config |= PORT_PCR_PE | PORT_PCR_PS;// pullup
            else if ( pin_mode == INPUT_PULLDOWN ) {
                *config |= ( PORT_PCR_PE ); // pulldown
    a2c4:	f8d1 c000 	ldr.w	ip, [r1]
    a2c8:	f04c 0c02 	orr.w	ip, ip, #2
    a2cc:	f8c1 c000 	str.w	ip, [r1]
                *config &= ~( PORT_PCR_PS );
    a2d0:	f8d1 c000 	ldr.w	ip, [r1]
    a2d4:	f02c 0c01 	bic.w	ip, ip, #1
    a2d8:	f8c1 c000 	str.w	ip, [r1]
    a2dc:	e76f      	b.n	a1be <SnoozeDigital::enableDriver()+0x1f6>
        else if ( rise_fall == FALLING ) detect_type = LLWU_PIN_FALLING;
        else if ( rise_fall == CHANGE )  detect_type = LLWU_PIN_ANY;
        else                             detect_type = LLWU_PIN_ANY;
        
        if ( pin == 2 )       mask->PE4 |= LLWU_PE4_WUPE12( detect_type );
        else if ( pin == 4 )  mask->PE2 |= LLWU_PE2_WUPE4 ( detect_type );
    a2de:	4a11      	ldr	r2, [pc, #68]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a2e0:	7852      	ldrb	r2, [r2, #1]
    a2e2:	4311      	orrs	r1, r2
    a2e4:	4a0f      	ldr	r2, [pc, #60]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a2e6:	7051      	strb	r1, [r2, #1]
    a2e8:	e6a9      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 6 )  mask->PE4 |= LLWU_PE4_WUPE14( detect_type );
    a2ea:	4a0e      	ldr	r2, [pc, #56]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a2ec:	78d2      	ldrb	r2, [r2, #3]
    a2ee:	4310      	orrs	r0, r2
    a2f0:	4a0c      	ldr	r2, [pc, #48]	; (a324 <SnoozeDigital::enableDriver()+0x35c>)
    a2f2:	70d0      	strb	r0, [r2, #3]
    a2f4:	e6a3      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
    a2f6:	bf00      	nop
    a2f8:	1fff6668 	.word	0x1fff6668
    a2fc:	e000e104 	.word	0xe000e104
    a300:	e000e184 	.word	0xe000e184
    a304:	e000e284 	.word	0xe000e284
    a308:	e000e43b 	.word	0xe000e43b
    a30c:	e000e43c 	.word	0xe000e43c
    a310:	e000e43d 	.word	0xe000e43d
    a314:	e000e43e 	.word	0xe000e43e
    a318:	e000e43f 	.word	0xe000e43f
    a31c:	1fff4400 	.word	0x1fff4400
    a320:	0000046d 	.word	0x0000046d
    a324:	1fff6c3c 	.word	0x1fff6c3c
    a328:	1fff42f4 	.word	0x1fff42f4
    a32c:	0001778c 	.word	0x0001778c
        else if ( pin == 7 )  mask->PE4 |= LLWU_PE4_WUPE13( detect_type );
    a330:	4a3a      	ldr	r2, [pc, #232]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a332:	78d2      	ldrb	r2, [r2, #3]
    a334:	ea4e 0e02 	orr.w	lr, lr, r2
    a338:	4a38      	ldr	r2, [pc, #224]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a33a:	f882 e003 	strb.w	lr, [r2, #3]
    a33e:	e67e      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 9 )  mask->PE2 |= LLWU_PE2_WUPE7 ( detect_type );
    a340:	4a36      	ldr	r2, [pc, #216]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a342:	7852      	ldrb	r2, [r2, #1]
    a344:	ea4c 0c02 	orr.w	ip, ip, r2
    a348:	4a34      	ldr	r2, [pc, #208]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a34a:	f882 c001 	strb.w	ip, [r2, #1]
    a34e:	e676      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
void SnoozeDigital::attachDigitalInterrupt( uint8_t pin, int mode ) {
    volatile uint32_t *config;
    uint32_t cfg, mask;
    
    if ( pin >= CORE_NUM_DIGITAL ) return;
    switch ( mode ) {
    a350:	f44f 2e10 	mov.w	lr, #589824	; 0x90000
        case FALLING:	mask = 0x0A; break;
        case LOW:	mask = 0x08; break;
        case HIGH:	mask = 0x0C; break;
        default: return;
    }
    __disable_irq( );
    a354:	b672      	cpsid	i
    mask = ( mask << 16 ) | 0x01000000;
    config = portConfigRegister( pin );
    a356:	9a01      	ldr	r2, [sp, #4]
    a358:	4452      	add	r2, sl
    a35a:	6851      	ldr	r1, [r2, #4]
    cfg = *config;
    a35c:	680a      	ldr	r2, [r1, #0]
    cfg &= ~0x000F0000;		// disable any previous interrupt
    a35e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
    a362:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
    *config = cfg;
    cfg |= mask;
    a366:	ea40 000e 	orr.w	r0, r0, lr
    __disable_irq( );
    mask = ( mask << 16 ) | 0x01000000;
    config = portConfigRegister( pin );
    cfg = *config;
    cfg &= ~0x000F0000;		// disable any previous interrupt
    *config = cfg;
    a36a:	600a      	str	r2, [r1, #0]
    cfg |= mask;
    *config = cfg;			// enable the new interrupt
    a36c:	6008      	str	r0, [r1, #0]
    __enable_irq( );
    a36e:	b662      	cpsie	i
    a370:	e665      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
    a372:	f44f 2e20 	mov.w	lr, #655360	; 0xa0000
    a376:	e7ed      	b.n	a354 <SnoozeDigital::enableDriver()+0x38c>
    a378:	f44f 2e40 	mov.w	lr, #786432	; 0xc0000
    a37c:	e7ea      	b.n	a354 <SnoozeDigital::enableDriver()+0x38c>
    a37e:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
    a382:	e7e7      	b.n	a354 <SnoozeDigital::enableDriver()+0x38c>
void SnoozeDigital::attachDigitalInterrupt( uint8_t pin, int mode ) {
    volatile uint32_t *config;
    uint32_t cfg, mask;
    
    if ( pin >= CORE_NUM_DIGITAL ) return;
    switch ( mode ) {
    a384:	f44f 2e30 	mov.w	lr, #720896	; 0xb0000
    a388:	e7e4      	b.n	a354 <SnoozeDigital::enableDriver()+0x38c>
        else if ( pin == 10 ) mask->PE3 |= LLWU_PE3_WUPE8 ( detect_type );
        else if ( pin == 11 ) mask->PE3 |= LLWU_PE3_WUPE10( detect_type );
        else if ( pin == 13 ) mask->PE3 |= LLWU_PE3_WUPE9 ( detect_type );
        else if ( pin == 16 ) mask->PE2 |= LLWU_PE2_WUPE5 ( detect_type );
    a38a:	4a24      	ldr	r2, [pc, #144]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a38c:	7852      	ldrb	r2, [r2, #1]
    a38e:	ea4e 0e02 	orr.w	lr, lr, r2
    a392:	4a22      	ldr	r2, [pc, #136]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a394:	f882 e001 	strb.w	lr, [r2, #1]
    a398:	e651      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        if ( pin == 2 )       mask->PE4 |= LLWU_PE4_WUPE12( detect_type );
        else if ( pin == 4 )  mask->PE2 |= LLWU_PE2_WUPE4 ( detect_type );
        else if ( pin == 6 )  mask->PE4 |= LLWU_PE4_WUPE14( detect_type );
        else if ( pin == 7 )  mask->PE4 |= LLWU_PE4_WUPE13( detect_type );
        else if ( pin == 9 )  mask->PE2 |= LLWU_PE2_WUPE7 ( detect_type );
        else if ( pin == 10 ) mask->PE3 |= LLWU_PE3_WUPE8 ( detect_type );
    a39a:	4a20      	ldr	r2, [pc, #128]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a39c:	7892      	ldrb	r2, [r2, #2]
    a39e:	4311      	orrs	r1, r2
    a3a0:	4a1e      	ldr	r2, [pc, #120]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3a2:	7091      	strb	r1, [r2, #2]
    a3a4:	e64b      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 11 ) mask->PE3 |= LLWU_PE3_WUPE10( detect_type );
    a3a6:	4a1d      	ldr	r2, [pc, #116]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3a8:	7892      	ldrb	r2, [r2, #2]
    a3aa:	4310      	orrs	r0, r2
    a3ac:	4a1b      	ldr	r2, [pc, #108]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3ae:	7090      	strb	r0, [r2, #2]
    a3b0:	e645      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 13 ) mask->PE3 |= LLWU_PE3_WUPE9 ( detect_type );
    a3b2:	4a1a      	ldr	r2, [pc, #104]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3b4:	7892      	ldrb	r2, [r2, #2]
    a3b6:	ea4e 0e02 	orr.w	lr, lr, r2
    a3ba:	4a18      	ldr	r2, [pc, #96]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3bc:	f882 e002 	strb.w	lr, [r2, #2]
    a3c0:	e63d      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 16 ) mask->PE2 |= LLWU_PE2_WUPE5 ( detect_type );
        else if ( pin == 21 ) mask->PE4 |= LLWU_PE4_WUPE15( detect_type );
        else if ( pin == 22 ) mask->PE2 |= LLWU_PE2_WUPE6 ( detect_type );
        else if ( pin == 26 ) mask->PE1 |= LLWU_PE1_WUPE0 ( detect_type );
        else if ( pin == 30 ) mask->PE3 |= LLWU_PE3_WUPE11( detect_type );
    a3c2:	4a16      	ldr	r2, [pc, #88]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3c4:	7892      	ldrb	r2, [r2, #2]
    a3c6:	ea4c 0c02 	orr.w	ip, ip, r2
    a3ca:	4a14      	ldr	r2, [pc, #80]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3cc:	f882 c002 	strb.w	ip, [r2, #2]
    a3d0:	e635      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 9 )  mask->PE2 |= LLWU_PE2_WUPE7 ( detect_type );
        else if ( pin == 10 ) mask->PE3 |= LLWU_PE3_WUPE8 ( detect_type );
        else if ( pin == 11 ) mask->PE3 |= LLWU_PE3_WUPE10( detect_type );
        else if ( pin == 13 ) mask->PE3 |= LLWU_PE3_WUPE9 ( detect_type );
        else if ( pin == 16 ) mask->PE2 |= LLWU_PE2_WUPE5 ( detect_type );
        else if ( pin == 21 ) mask->PE4 |= LLWU_PE4_WUPE15( detect_type );
    a3d2:	4a12      	ldr	r2, [pc, #72]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3d4:	78d2      	ldrb	r2, [r2, #3]
    a3d6:	ea4c 0c02 	orr.w	ip, ip, r2
    a3da:	4a10      	ldr	r2, [pc, #64]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3dc:	f882 c003 	strb.w	ip, [r2, #3]
    a3e0:	e62d      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 22 ) mask->PE2 |= LLWU_PE2_WUPE6 ( detect_type );
    a3e2:	4a0e      	ldr	r2, [pc, #56]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3e4:	7852      	ldrb	r2, [r2, #1]
    a3e6:	4310      	orrs	r0, r2
    a3e8:	4a0c      	ldr	r2, [pc, #48]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3ea:	7050      	strb	r0, [r2, #1]
    a3ec:	e627      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 26 ) mask->PE1 |= LLWU_PE1_WUPE0 ( detect_type );
        else if ( pin == 30 ) mask->PE3 |= LLWU_PE3_WUPE11( detect_type );
        else if ( pin == 33 ) mask->PE1 |= LLWU_PE1_WUPE3 ( detect_type );
        else if ( pin == 59 ) mask->PE1 |= LLWU_PE1_WUPE0( detect_type );
    a3ee:	4a0b      	ldr	r2, [pc, #44]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3f0:	7812      	ldrb	r2, [r2, #0]
    a3f2:	4311      	orrs	r1, r2
    a3f4:	4a09      	ldr	r2, [pc, #36]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3f6:	7011      	strb	r1, [r2, #0]
    a3f8:	e621      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 16 ) mask->PE2 |= LLWU_PE2_WUPE5 ( detect_type );
        else if ( pin == 21 ) mask->PE4 |= LLWU_PE4_WUPE15( detect_type );
        else if ( pin == 22 ) mask->PE2 |= LLWU_PE2_WUPE6 ( detect_type );
        else if ( pin == 26 ) mask->PE1 |= LLWU_PE1_WUPE0 ( detect_type );
        else if ( pin == 30 ) mask->PE3 |= LLWU_PE3_WUPE11( detect_type );
        else if ( pin == 33 ) mask->PE1 |= LLWU_PE1_WUPE3 ( detect_type );
    a3fa:	4a08      	ldr	r2, [pc, #32]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a3fc:	7812      	ldrb	r2, [r2, #0]
    a3fe:	ea4c 0c02 	orr.w	ip, ip, r2
    a402:	4a06      	ldr	r2, [pc, #24]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a404:	f882 c000 	strb.w	ip, [r2]
    a408:	e619      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
        else if ( pin == 59 ) mask->PE1 |= LLWU_PE1_WUPE0( detect_type );
        else if ( pin == 60 ) mask->PE1 |= LLWU_PE1_WUPE1( detect_type );
    a40a:	4a04      	ldr	r2, [pc, #16]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a40c:	7812      	ldrb	r2, [r2, #0]
    a40e:	ea4e 0e02 	orr.w	lr, lr, r2
    a412:	4a02      	ldr	r2, [pc, #8]	; (a41c <SnoozeDigital::enableDriver()+0x454>)
    a414:	f882 e000 	strb.w	lr, [r2]
    a418:	e611      	b.n	a03e <SnoozeDigital::enableDriver()+0x76>
    a41a:	bf00      	nop
    a41c:	1fff6c3c 	.word	0x1fff6c3c

0000a420 <SnoozeDigital::disableDriver()>:
}

/*******************************************************************************
 *  Disable interrupt and configure pin to orignal state.
 *******************************************************************************/
void SnoozeDigital::disableDriver( void ) {
    a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ( mode == RUN_LP ) { return; }
    a424:	4b4a      	ldr	r3, [pc, #296]	; (a550 <SnoozeDigital::disableDriver()+0x130>)
    a426:	781b      	ldrb	r3, [r3, #0]
}

/*******************************************************************************
 *  Disable interrupt and configure pin to orignal state.
 *******************************************************************************/
void SnoozeDigital::disableDriver( void ) {
    a428:	b083      	sub	sp, #12
    if ( mode == RUN_LP ) { return; }
    a42a:	2b01      	cmp	r3, #1
    a42c:	9301      	str	r3, [sp, #4]
    a42e:	f000 808b 	beq.w	a548 <SnoozeDigital::disableDriver()+0x128>
    a432:	4681      	mov	r9, r0
#if defined(KINETISK)
    uint64_t _pin = pin;
    a434:	e9d0 670a 	ldrd	r6, r7, [r0, #40]	; 0x28
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
        
        if ( pinNumber > 33 ) break;
        
        *portModeRegister( pinNumber ) = 0;
    a438:	f8df 8120 	ldr.w	r8, [pc, #288]	; a55c <SnoozeDigital::disableDriver()+0x13c>
    a43c:	f04f 0a00 	mov.w	sl, #0
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
        *config = return_core_pin_config[pinNumber];
        
        _pin &= ~( ( uint64_t )1 << pinNumber );// remove pin from list
    a440:	f04f 0b01 	mov.w	fp, #1
    a444:	e022      	b.n	a48c <SnoozeDigital::disableDriver()+0x6c>
void SnoozeDigital::disableDriver( void ) {
    if ( mode == RUN_LP ) { return; }
#if defined(KINETISK)
    uint64_t _pin = pin;
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
    a446:	fab7 f387 	clz	r3, r7
    a44a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
        *portModeRegister( pinNumber ) = 0;
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
        *config = return_core_pin_config[pinNumber];
        
        _pin &= ~( ( uint64_t )1 << pinNumber );// remove pin from list
    a44e:	f1a3 0020 	sub.w	r0, r3, #32
    a452:	f1c3 0120 	rsb	r1, r3, #32
    a456:	fa0b f500 	lsl.w	r5, fp, r0
    a45a:	fa2b f101 	lsr.w	r1, fp, r1
#if defined(KINETISK)
    uint64_t _pin = pin;
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
        
        if ( pinNumber > 33 ) break;
    a45e:	2b21      	cmp	r3, #33	; 0x21
        
        *portModeRegister( pinNumber ) = 0;
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
    a460:	eb08 0cc3 	add.w	ip, r8, r3, lsl #3
        *config = return_core_pin_config[pinNumber];
    a464:	f103 0e28 	add.w	lr, r3, #40	; 0x28
        
        _pin &= ~( ( uint64_t )1 << pinNumber );// remove pin from list
    a468:	ea45 0501 	orr.w	r5, r5, r1
    a46c:	fa0b f403 	lsl.w	r4, fp, r3
#if defined(KINETISK)
    uint64_t _pin = pin;
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
        
        if ( pinNumber > 33 ) break;
    a470:	d817      	bhi.n	a4a2 <SnoozeDigital::disableDriver()+0x82>
        
        *portModeRegister( pinNumber ) = 0;
    a472:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
    a476:	f883 a280 	strb.w	sl, [r3, #640]	; 0x280
        volatile uint32_t *config;
        config = portConfigRegister( pinNumber );
    a47a:	f8dc 3004 	ldr.w	r3, [ip, #4]
        *config = return_core_pin_config[pinNumber];
    a47e:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
    a482:	6019      	str	r1, [r3, #0]
        
        _pin &= ~( ( uint64_t )1 << pinNumber );// remove pin from list
    a484:	ea26 0604 	bic.w	r6, r6, r4
    a488:	ea27 0705 	bic.w	r7, r7, r5
 *******************************************************************************/
void SnoozeDigital::disableDriver( void ) {
    if ( mode == RUN_LP ) { return; }
#if defined(KINETISK)
    uint64_t _pin = pin;
    while ( __builtin_popcountll( _pin ) ) {
    a48c:	4630      	mov	r0, r6
    a48e:	4639      	mov	r1, r7
    a490:	f007 faca 	bl	11a28 <__popcountdi2>
    a494:	b128      	cbz	r0, a4a2 <SnoozeDigital::disableDriver()+0x82>
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
    a496:	2f00      	cmp	r7, #0
    a498:	d1d5      	bne.n	a446 <SnoozeDigital::disableDriver()+0x26>
    a49a:	fab6 f386 	clz	r3, r6
    a49e:	3320      	adds	r3, #32
    a4a0:	e7d3      	b.n	a44a <SnoozeDigital::disableDriver()+0x2a>
        *config = return_core_pin_config[pinNumber];
        
        _pin &= ~( ( uint32_t )1 << pinNumber );// remove pin from list
    }
#endif
    if ( mode == VLPW || mode == VLPS ) {
    a4a2:	9b01      	ldr	r3, [sp, #4]
    a4a4:	2b03      	cmp	r3, #3
    a4a6:	d001      	beq.n	a4ac <SnoozeDigital::disableDriver()+0x8c>
    a4a8:	2b05      	cmp	r3, #5
    a4aa:	d14d      	bne.n	a548 <SnoozeDigital::disableDriver()+0x128>
#if defined(KINETISK)
        NVIC_SET_PRIORITY( IRQ_PORTA, return_priority_a );//return priority
    a4ac:	4b29      	ldr	r3, [pc, #164]	; (a554 <SnoozeDigital::disableDriver()+0x134>)
    a4ae:	f899 2098 	ldrb.w	r2, [r9, #152]	; 0x98
    a4b2:	701a      	strb	r2, [r3, #0]
        NVIC_SET_PRIORITY( IRQ_PORTB, return_priority_b );//return priority
    a4b4:	f899 2099 	ldrb.w	r2, [r9, #153]	; 0x99
    a4b8:	705a      	strb	r2, [r3, #1]
        NVIC_SET_PRIORITY( IRQ_PORTC, return_priority_c );//return priority
    a4ba:	f899 209a 	ldrb.w	r2, [r9, #154]	; 0x9a
    a4be:	709a      	strb	r2, [r3, #2]
        NVIC_SET_PRIORITY( IRQ_PORTD, return_priority_d );//return priority
    a4c0:	f899 209b 	ldrb.w	r2, [r9, #155]	; 0x9b
    a4c4:	70da      	strb	r2, [r3, #3]
        NVIC_SET_PRIORITY( IRQ_PORTE, return_priority_e );//return priority
    a4c6:	f899 209c 	ldrb.w	r2, [r9, #156]	; 0x9c
    a4ca:	711a      	strb	r2, [r3, #4]
        __disable_irq( );
    a4cc:	b672      	cpsid	i
        attachInterruptVector( IRQ_PORTA, return_porta_irq );// set previous isr
    a4ce:	203b      	movs	r0, #59	; 0x3b
    a4d0:	f8d9 1070 	ldr.w	r1, [r9, #112]	; 0x70
    a4d4:	f004 fbc0 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTB, return_portb_irq );// set previous isr
    a4d8:	f8d9 1074 	ldr.w	r1, [r9, #116]	; 0x74
    a4dc:	203c      	movs	r0, #60	; 0x3c
    a4de:	f004 fbbb 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTC, return_portc_irq );// set previous isr
    a4e2:	f8d9 1078 	ldr.w	r1, [r9, #120]	; 0x78
    a4e6:	203d      	movs	r0, #61	; 0x3d
    a4e8:	f004 fbb6 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTD, return_portd_irq );// set previous isr
    a4ec:	f8d9 107c 	ldr.w	r1, [r9, #124]	; 0x7c
    a4f0:	203e      	movs	r0, #62	; 0x3e
    a4f2:	f004 fbb1 	bl	ec58 <attachInterruptVector>
        attachInterruptVector( IRQ_PORTE, return_porte_irq );// set previous isr
    a4f6:	f8d9 1080 	ldr.w	r1, [r9, #128]	; 0x80
    a4fa:	203f      	movs	r0, #63	; 0x3f
    a4fc:	f004 fbac 	bl	ec58 <attachInterruptVector>
        __enable_irq( );
    a500:	b662      	cpsie	i
        if ( return_isr_a_enabled == 0 ) NVIC_DISABLE_IRQ( IRQ_PORTA );
    a502:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
    a506:	b91b      	cbnz	r3, a510 <SnoozeDigital::disableDriver()+0xf0>
    a508:	4b13      	ldr	r3, [pc, #76]	; (a558 <SnoozeDigital::disableDriver()+0x138>)
    a50a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    a50e:	601a      	str	r2, [r3, #0]
        if ( return_isr_b_enabled == 0 ) NVIC_DISABLE_IRQ( IRQ_PORTB );
    a510:	f8d9 3088 	ldr.w	r3, [r9, #136]	; 0x88
    a514:	b91b      	cbnz	r3, a51e <SnoozeDigital::disableDriver()+0xfe>
    a516:	4b10      	ldr	r3, [pc, #64]	; (a558 <SnoozeDigital::disableDriver()+0x138>)
    a518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a51c:	601a      	str	r2, [r3, #0]
        if ( return_isr_c_enabled == 0 ) NVIC_DISABLE_IRQ( IRQ_PORTC );
    a51e:	f8d9 308c 	ldr.w	r3, [r9, #140]	; 0x8c
    a522:	b91b      	cbnz	r3, a52c <SnoozeDigital::disableDriver()+0x10c>
    a524:	4b0c      	ldr	r3, [pc, #48]	; (a558 <SnoozeDigital::disableDriver()+0x138>)
    a526:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    a52a:	601a      	str	r2, [r3, #0]
        if ( return_isr_d_enabled == 0 ) NVIC_DISABLE_IRQ( IRQ_PORTD );
    a52c:	f8d9 3090 	ldr.w	r3, [r9, #144]	; 0x90
    a530:	b91b      	cbnz	r3, a53a <SnoozeDigital::disableDriver()+0x11a>
    a532:	4b09      	ldr	r3, [pc, #36]	; (a558 <SnoozeDigital::disableDriver()+0x138>)
    a534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a538:	601a      	str	r2, [r3, #0]
        if ( return_isr_e_enabled == 0 ) NVIC_DISABLE_IRQ( IRQ_PORTE );
    a53a:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
    a53e:	b91b      	cbnz	r3, a548 <SnoozeDigital::disableDriver()+0x128>
    a540:	4b05      	ldr	r3, [pc, #20]	; (a558 <SnoozeDigital::disableDriver()+0x138>)
    a542:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    a546:	601a      	str	r2, [r3, #0]
        __enable_irq( );
        if ( return_isr_a_enabled == 0 )  NVIC_DISABLE_IRQ( IRQ_PORTA );
        if ( return_isr_cd_enabled == 0 ) NVIC_DISABLE_IRQ( IRQ_PORTCD );
#endif
    }
}
    a548:	b003      	add	sp, #12
    a54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a54e:	bf00      	nop
    a550:	1fff42f4 	.word	0x1fff42f4
    a554:	e000e43b 	.word	0xe000e43b
    a558:	e000e184 	.word	0xe000e184
    a55c:	0001778c 	.word	0x0001778c

0000a560 <SnoozeDigital::pinMode(int, int, int)>:
 *  @param type CHANGE, FALLING or LOW, RISING or HIGH
 *
 *  @return Teensy Pin
 *******************************************************************************/
int SnoozeDigital::pinMode( int _pin, int mode, int type ) {
    if ( _pin >= CORE_NUM_INTERRUPT ) return -1;
    a560:	293f      	cmp	r1, #63	; 0x3f
    a562:	dc1c      	bgt.n	a59e <SnoozeDigital::pinMode(int, int, int)+0x3e>
 *  @param mode INPUT, INPUT_PULLUP
 *  @param type CHANGE, FALLING or LOW, RISING or HIGH
 *
 *  @return Teensy Pin
 *******************************************************************************/
int SnoozeDigital::pinMode( int _pin, int mode, int type ) {
    a564:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ( _pin >= CORE_NUM_INTERRUPT ) return -1;
    isUsed = true;
    a566:	f04f 0e01 	mov.w	lr, #1
#if defined(KINETISK)
    pin            = pin | ( ( uint64_t )0x01 << _pin );// save pin
    a56a:	f1a1 0620 	sub.w	r6, r1, #32
    a56e:	fa0e f506 	lsl.w	r5, lr, r6
    a572:	f1c1 0620 	rsb	r6, r1, #32
    a576:	fa2e f606 	lsr.w	r6, lr, r6
    a57a:	4335      	orrs	r5, r6
    a57c:	e9d0 670a 	ldrd	r6, r7, [r0, #40]	; 0x28
    irqType[_pin]  = type;// save type
    irqType[_pin] |= mode << 4;// save mode
    a580:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 *******************************************************************************/
int SnoozeDigital::pinMode( int _pin, int mode, int type ) {
    if ( _pin >= CORE_NUM_INTERRUPT ) return -1;
    isUsed = true;
#if defined(KINETISK)
    pin            = pin | ( ( uint64_t )0x01 << _pin );// save pin
    a584:	fa0e f401 	lsl.w	r4, lr, r1
    irqType[_pin]  = type;// save type
    irqType[_pin] |= mode << 4;// save mode
    a588:	1842      	adds	r2, r0, r1
 *******************************************************************************/
int SnoozeDigital::pinMode( int _pin, int mode, int type ) {
    if ( _pin >= CORE_NUM_INTERRUPT ) return -1;
    isUsed = true;
#if defined(KINETISK)
    pin            = pin | ( ( uint64_t )0x01 << _pin );// save pin
    a58a:	4334      	orrs	r4, r6
    a58c:	433d      	orrs	r5, r7
 *
 *  @return Teensy Pin
 *******************************************************************************/
int SnoozeDigital::pinMode( int _pin, int mode, int type ) {
    if ( _pin >= CORE_NUM_INTERRUPT ) return -1;
    isUsed = true;
    a58e:	f880 e025 	strb.w	lr, [r0, #37]	; 0x25
#if defined(KINETISK)
    pin            = pin | ( ( uint64_t )0x01 << _pin );// save pin
    a592:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
    irqType[_pin]  = type;// save type
    irqType[_pin] |= mode << 4;// save mode
    a596:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
#elif defined(KINETISL)
    pin            = pin | ( ( uint32_t )0x01 << _pin );// save pin
    irqType[_pin]  = type;// save type
    irqType[_pin] |= mode << 4;// save mode
#endif
    return _pin;
    a59a:	4608      	mov	r0, r1
    a59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *  @param type CHANGE, FALLING or LOW, RISING or HIGH
 *
 *  @return Teensy Pin
 *******************************************************************************/
int SnoozeDigital::pinMode( int _pin, int mode, int type ) {
    if ( _pin >= CORE_NUM_INTERRUPT ) return -1;
    a59e:	f04f 30ff 	mov.w	r0, #4294967295
    a5a2:	4770      	bx	lr

0000a5a4 <SnoozeDigital::isr()>:
}

/*******************************************************************************
 *  this gets called when we wake up by NVIC or LLWU
 *******************************************************************************/
void SnoozeDigital::isr( void ) {
    a5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t isfr_a = PORTA_ISFR;
    a5a8:	4bad      	ldr	r3, [pc, #692]	; (a860 <SnoozeDigital::isr()+0x2bc>)
    PORTA_ISFR = isfr_a;
#if defined(KINETISK)
    uint32_t isfr_b = PORTB_ISFR;
    a5aa:	48ae      	ldr	r0, [pc, #696]	; (a864 <SnoozeDigital::isr()+0x2c0>)

/*******************************************************************************
 *  this gets called when we wake up by NVIC or LLWU
 *******************************************************************************/
void SnoozeDigital::isr( void ) {
    uint32_t isfr_a = PORTA_ISFR;
    a5ac:	f8d3 9000 	ldr.w	r9, [r3]
    PORTA_ISFR = isfr_a;
    a5b0:	f8c3 9000 	str.w	r9, [r3]
#if defined(KINETISK)
    uint32_t isfr_b = PORTB_ISFR;
    a5b4:	6803      	ldr	r3, [r0, #0]
    uint32_t isfr_e = PORTE_ISFR;
    a5b6:	49ac      	ldr	r1, [pc, #688]	; (a868 <SnoozeDigital::isr()+0x2c4>)
    PORTB_ISFR = isfr_b;
    PORTE_ISFR = isfr_e;
#endif
    uint32_t isfr_c = PORTC_ISFR;
    a5b8:	4aac      	ldr	r2, [pc, #688]	; (a86c <SnoozeDigital::isr()+0x2c8>)
}

/*******************************************************************************
 *  this gets called when we wake up by NVIC or LLWU
 *******************************************************************************/
void SnoozeDigital::isr( void ) {
    a5ba:	b085      	sub	sp, #20
    uint32_t isfr_a = PORTA_ISFR;
    PORTA_ISFR = isfr_a;
#if defined(KINETISK)
    uint32_t isfr_b = PORTB_ISFR;
    a5bc:	461e      	mov	r6, r3
    a5be:	9301      	str	r3, [sp, #4]
    uint32_t isfr_e = PORTE_ISFR;
    a5c0:	680b      	ldr	r3, [r1, #0]
    a5c2:	9303      	str	r3, [sp, #12]
    a5c4:	461f      	mov	r7, r3
    PORTB_ISFR = isfr_b;
    PORTE_ISFR = isfr_e;
#endif
    uint32_t isfr_c = PORTC_ISFR;
    uint32_t isfr_d = PORTD_ISFR;
    a5c6:	4baa      	ldr	r3, [pc, #680]	; (a870 <SnoozeDigital::isr()+0x2cc>)
    uint32_t isfr_a = PORTA_ISFR;
    PORTA_ISFR = isfr_a;
#if defined(KINETISK)
    uint32_t isfr_b = PORTB_ISFR;
    uint32_t isfr_e = PORTE_ISFR;
    PORTB_ISFR = isfr_b;
    a5c8:	6006      	str	r6, [r0, #0]
    PORTE_ISFR = isfr_e;
    a5ca:	600f      	str	r7, [r1, #0]
#endif
    uint32_t isfr_c = PORTC_ISFR;
    a5cc:	f8d2 a000 	ldr.w	sl, [r2]
    uint32_t isfr_d = PORTD_ISFR;
    a5d0:	6819      	ldr	r1, [r3, #0]
    a5d2:	9102      	str	r1, [sp, #8]
    a5d4:	4608      	mov	r0, r1
    PORTC_ISFR = isfr_c;
    PORTD_ISFR = isfr_d;
    
    if ( mode == LLS || mode == VLLS3 || mode == VLLS2 || mode == VLLS1 ) return;// return if using deepSleep or hibernate
    a5d6:	49a7      	ldr	r1, [pc, #668]	; (a874 <SnoozeDigital::isr()+0x2d0>)
    PORTB_ISFR = isfr_b;
    PORTE_ISFR = isfr_e;
#endif
    uint32_t isfr_c = PORTC_ISFR;
    uint32_t isfr_d = PORTD_ISFR;
    PORTC_ISFR = isfr_c;
    a5d8:	f8c2 a000 	str.w	sl, [r2]
    PORTD_ISFR = isfr_d;
    a5dc:	6018      	str	r0, [r3, #0]
    
    if ( mode == LLS || mode == VLLS3 || mode == VLLS2 || mode == VLLS1 ) return;// return if using deepSleep or hibernate
    a5de:	780b      	ldrb	r3, [r1, #0]
    a5e0:	3b06      	subs	r3, #6
    a5e2:	2b03      	cmp	r3, #3
    a5e4:	d937      	bls.n	a656 <SnoozeDigital::isr()+0xb2>
    
#if defined(KINETISK)
    uint64_t _pin = isr_pin;
    a5e6:	4ba4      	ldr	r3, [pc, #656]	; (a878 <SnoozeDigital::isr()+0x2d4>)
 *  @param pin Teensy Pin
 *******************************************************************************/
void SnoozeDigital::detachDigitalInterrupt( uint8_t pin ) {
    volatile uint32_t *config;
    __disable_irq( );
    config = portConfigRegister( pin );
    a5e8:	f8df 8294 	ldr.w	r8, [pc, #660]	; a880 <SnoozeDigital::isr()+0x2dc>
    PORTD_ISFR = isfr_d;
    
    if ( mode == LLS || mode == VLLS3 || mode == VLLS2 || mode == VLLS1 ) return;// return if using deepSleep or hibernate
    
#if defined(KINETISK)
    uint64_t _pin = isr_pin;
    a5ec:	e9d3 6700 	ldrd	r6, r7, [r3]
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
        if ( pinNumber > 33 ) return;
        detachDigitalInterrupt( pinNumber );// remove pin interrupt
        _pin &= ~( ( uint64_t )1 << pinNumber );// remove pin from list
    a5f0:	f04f 0b01 	mov.w	fp, #1
    a5f4:	e021      	b.n	a63a <SnoozeDigital::isr()+0x96>
    if ( mode == LLS || mode == VLLS3 || mode == VLLS2 || mode == VLLS1 ) return;// return if using deepSleep or hibernate
    
#if defined(KINETISK)
    uint64_t _pin = isr_pin;
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
    a5f6:	fab7 f387 	clz	r3, r7
    a5fa:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
        if ( pinNumber > 33 ) return;
    a5fe:	2b21      	cmp	r3, #33	; 0x21
    a600:	d829      	bhi.n	a656 <SnoozeDigital::isr()+0xb2>
 *
 *  @param pin Teensy Pin
 *******************************************************************************/
void SnoozeDigital::detachDigitalInterrupt( uint8_t pin ) {
    volatile uint32_t *config;
    __disable_irq( );
    a602:	b672      	cpsid	i
    config = portConfigRegister( pin );
    a604:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    a608:	6851      	ldr	r1, [r2, #4]
    *config = ( ( *config & ~0x000F0000 ) | 0x01000000 );
    a60a:	680a      	ldr	r2, [r1, #0]
    a60c:	f022 7287 	bic.w	r2, r2, #17694720	; 0x10e0000
    a610:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    a614:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    a618:	600a      	str	r2, [r1, #0]
    __enable_irq( );
    a61a:	b662      	cpsie	i
    uint64_t _pin = isr_pin;
    while ( __builtin_popcountll( _pin ) ) {
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
        if ( pinNumber > 33 ) return;
        detachDigitalInterrupt( pinNumber );// remove pin interrupt
        _pin &= ~( ( uint64_t )1 << pinNumber );// remove pin from list
    a61c:	f1a3 0120 	sub.w	r1, r3, #32
    a620:	f1c3 0220 	rsb	r2, r3, #32
    a624:	fa0b f501 	lsl.w	r5, fp, r1
    a628:	fa2b f202 	lsr.w	r2, fp, r2
    a62c:	4315      	orrs	r5, r2
    a62e:	fa0b f403 	lsl.w	r4, fp, r3
    a632:	ea26 0604 	bic.w	r6, r6, r4
    a636:	ea27 0705 	bic.w	r7, r7, r5
    
    if ( mode == LLS || mode == VLLS3 || mode == VLLS2 || mode == VLLS1 ) return;// return if using deepSleep or hibernate
    
#if defined(KINETISK)
    uint64_t _pin = isr_pin;
    while ( __builtin_popcountll( _pin ) ) {
    a63a:	4630      	mov	r0, r6
    a63c:	4639      	mov	r1, r7
    a63e:	f007 f9f3 	bl	11a28 <__popcountdi2>
    a642:	b158      	cbz	r0, a65c <SnoozeDigital::isr()+0xb8>
        uint32_t pinNumber = 63 - __builtin_clzll( _pin );
    a644:	2f00      	cmp	r7, #0
    a646:	d1d6      	bne.n	a5f6 <SnoozeDigital::isr()+0x52>
    a648:	fab6 f386 	clz	r3, r6
    a64c:	3320      	adds	r3, #32
    a64e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
        if ( pinNumber > 33 ) return;
    a652:	2b21      	cmp	r3, #33	; 0x21
    a654:	d9d5      	bls.n	a602 <SnoozeDigital::isr()+0x5e>
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    else if ( isfr_d & CORE_PIN20_BITMASK ) source = 20;
    else if ( isfr_d & CORE_PIN21_BITMASK ) source = 21;
#endif
}
    a656:	b005      	add	sp, #20
    a658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
#endif
    
    
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ( isfr_a & CORE_PIN3_BITMASK )       source = 3;
    a65c:	f419 5f80 	tst.w	r9, #4096	; 0x1000
    a660:	f040 8095 	bne.w	a78e <SnoozeDigital::isr()+0x1ea>
    else if ( isfr_a & CORE_PIN4_BITMASK  ) source = 4;
    a664:	f419 5f00 	tst.w	r9, #8192	; 0x2000
    a668:	f040 8097 	bne.w	a79a <SnoozeDigital::isr()+0x1f6>
    else if ( isfr_a & CORE_PIN25_BITMASK ) source = 25;
    a66c:	f019 0f20 	tst.w	r9, #32
    a670:	f040 809b 	bne.w	a7aa <SnoozeDigital::isr()+0x206>
    else if ( isfr_a & CORE_PIN26_BITMASK ) source = 26;
    a674:	f419 4f80 	tst.w	r9, #16384	; 0x4000
    a678:	f040 8093 	bne.w	a7a2 <SnoozeDigital::isr()+0x1fe>
    else if ( isfr_a & CORE_PIN27_BITMASK ) source = 27;
    a67c:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    a680:	f040 8097 	bne.w	a7b2 <SnoozeDigital::isr()+0x20e>
    else if ( isfr_a & CORE_PIN28_BITMASK ) source = 28;
    a684:	f419 3f80 	tst.w	r9, #65536	; 0x10000
    a688:	f040 8097 	bne.w	a7ba <SnoozeDigital::isr()+0x216>
    else if ( isfr_a & CORE_PIN39_BITMASK ) source = 39;
    a68c:	f419 3300 	ands.w	r3, r9, #131072	; 0x20000
    a690:	f040 8097 	bne.w	a7c2 <SnoozeDigital::isr()+0x21e>
    
    else if ( isfr_b & CORE_PIN0_BITMASK )  source = 0;
    a694:	9a01      	ldr	r2, [sp, #4]
    a696:	03d5      	lsls	r5, r2, #15
    a698:	f100 8097 	bmi.w	a7ca <SnoozeDigital::isr()+0x226>
    else if ( isfr_b & CORE_PIN1_BITMASK )  source = 1;
    a69c:	0394      	lsls	r4, r2, #14
    a69e:	4613      	mov	r3, r2
    a6a0:	f100 8096 	bmi.w	a7d0 <SnoozeDigital::isr()+0x22c>
    else if ( isfr_b & CORE_PIN16_BITMASK ) source = 16;
    a6a4:	07d0      	lsls	r0, r2, #31
    a6a6:	f100 8097 	bmi.w	a7d8 <SnoozeDigital::isr()+0x234>
    else if ( isfr_b & CORE_PIN17_BITMASK ) source = 17;
    a6aa:	0791      	lsls	r1, r2, #30
    a6ac:	f100 809c 	bmi.w	a7e8 <SnoozeDigital::isr()+0x244>
    else if ( isfr_b & CORE_PIN18_BITMASK ) source = 18;
    a6b0:	071a      	lsls	r2, r3, #28
    a6b2:	f100 8095 	bmi.w	a7e0 <SnoozeDigital::isr()+0x23c>
    else if ( isfr_b & CORE_PIN19_BITMASK ) source = 19;
    a6b6:	075f      	lsls	r7, r3, #29
    a6b8:	f100 80c2 	bmi.w	a840 <SnoozeDigital::isr()+0x29c>
    else if ( isfr_b & CORE_PIN29_BITMASK ) source = 29;
    a6bc:	035e      	lsls	r6, r3, #13
    a6be:	f100 80bb 	bmi.w	a838 <SnoozeDigital::isr()+0x294>
    else if ( isfr_b & CORE_PIN30_BITMASK ) source = 30;
    a6c2:	9b01      	ldr	r3, [sp, #4]
    a6c4:	031d      	lsls	r5, r3, #12
    a6c6:	f100 80b3 	bmi.w	a830 <SnoozeDigital::isr()+0x28c>
    else if ( isfr_b & CORE_PIN31_BITMASK ) source = 31;
    a6ca:	9b01      	ldr	r3, [sp, #4]
    a6cc:	055c      	lsls	r4, r3, #21
    a6ce:	f100 80ab 	bmi.w	a828 <SnoozeDigital::isr()+0x284>
    else if ( isfr_b & CORE_PIN32_BITMASK ) source = 32;
    a6d2:	9b01      	ldr	r3, [sp, #4]
    a6d4:	0518      	lsls	r0, r3, #20
    a6d6:	f100 80a3 	bmi.w	a820 <SnoozeDigital::isr()+0x27c>
    
    else if ( isfr_c & CORE_PIN9_BITMASK )  source = 9;
    a6da:	f01a 0f08 	tst.w	sl, #8
    a6de:	f040 809b 	bne.w	a818 <SnoozeDigital::isr()+0x274>
    else if ( isfr_c & CORE_PIN10_BITMASK ) source = 10;
    a6e2:	f01a 0f10 	tst.w	sl, #16
    a6e6:	f040 8093 	bne.w	a810 <SnoozeDigital::isr()+0x26c>
    else if ( isfr_c & CORE_PIN11_BITMASK ) source = 11;
    a6ea:	f01a 0f40 	tst.w	sl, #64	; 0x40
    a6ee:	f040 808b 	bne.w	a808 <SnoozeDigital::isr()+0x264>
    else if ( isfr_c & CORE_PIN12_BITMASK ) source = 12;
    a6f2:	f01a 0f80 	tst.w	sl, #128	; 0x80
    a6f6:	f040 80f5 	bne.w	a8e4 <SnoozeDigital::isr()+0x340>
    else if ( isfr_c & CORE_PIN13_BITMASK ) source = 13;
    a6fa:	f01a 0f20 	tst.w	sl, #32
    a6fe:	f040 80ed 	bne.w	a8dc <SnoozeDigital::isr()+0x338>
    else if ( isfr_c & CORE_PIN15_BITMASK ) source = 15;
    a702:	f01a 0f01 	tst.w	sl, #1
    a706:	f040 80e5 	bne.w	a8d4 <SnoozeDigital::isr()+0x330>
    else if ( isfr_c & CORE_PIN22_BITMASK ) source = 22;
    a70a:	f01a 0f02 	tst.w	sl, #2
    a70e:	f040 80dd 	bne.w	a8cc <SnoozeDigital::isr()+0x328>
    else if ( isfr_c & CORE_PIN23_BITMASK ) source = 23;
    a712:	f01a 0f04 	tst.w	sl, #4
    a716:	f040 80d5 	bne.w	a8c4 <SnoozeDigital::isr()+0x320>
    else if ( isfr_c & CORE_PIN35_BITMASK ) source = 35;
    a71a:	f41a 7f80 	tst.w	sl, #256	; 0x100
    a71e:	f040 80cd 	bne.w	a8bc <SnoozeDigital::isr()+0x318>
    else if ( isfr_c & CORE_PIN36_BITMASK ) source = 36;
    a722:	f41a 7f00 	tst.w	sl, #512	; 0x200
    a726:	f040 80c5 	bne.w	a8b4 <SnoozeDigital::isr()+0x310>
    else if ( isfr_c & CORE_PIN37_BITMASK ) source = 37;
    a72a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    a72e:	f040 80bd 	bne.w	a8ac <SnoozeDigital::isr()+0x308>
    else if ( isfr_c & CORE_PIN38_BITMASK ) source = 38;
    a732:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    a736:	f040 80b5 	bne.w	a8a4 <SnoozeDigital::isr()+0x300>
    
    else if ( isfr_d & CORE_PIN2_BITMASK )  source = 2;
    a73a:	9b02      	ldr	r3, [sp, #8]
    a73c:	07d9      	lsls	r1, r3, #31
    a73e:	f100 80ad 	bmi.w	a89c <SnoozeDigital::isr()+0x2f8>
    else if ( isfr_d & CORE_PIN5_BITMASK )  source = 5;
    a742:	9b02      	ldr	r3, [sp, #8]
    a744:	061a      	lsls	r2, r3, #24
    a746:	f100 80a5 	bmi.w	a894 <SnoozeDigital::isr()+0x2f0>
    else if ( isfr_d & CORE_PIN6_BITMASK )  source = 6;
    a74a:	9b02      	ldr	r3, [sp, #8]
    a74c:	06db      	lsls	r3, r3, #27
    a74e:	f100 809d 	bmi.w	a88c <SnoozeDigital::isr()+0x2e8>
    else if ( isfr_d & CORE_PIN7_BITMASK )  source = 7;
    a752:	9b02      	ldr	r3, [sp, #8]
    a754:	075f      	lsls	r7, r3, #29
    a756:	f100 8095 	bmi.w	a884 <SnoozeDigital::isr()+0x2e0>
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    a75a:	9b02      	ldr	r3, [sp, #8]
    a75c:	071e      	lsls	r6, r3, #28
    a75e:	d47b      	bmi.n	a858 <SnoozeDigital::isr()+0x2b4>
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    a760:	9b02      	ldr	r3, [sp, #8]
    a762:	079d      	lsls	r5, r3, #30
    a764:	d474      	bmi.n	a850 <SnoozeDigital::isr()+0x2ac>
    else if ( isfr_d & CORE_PIN20_BITMASK ) source = 20;
    a766:	9b02      	ldr	r3, [sp, #8]
    a768:	069c      	lsls	r4, r3, #26
    a76a:	d46d      	bmi.n	a848 <SnoozeDigital::isr()+0x2a4>
    else if ( isfr_d & CORE_PIN21_BITMASK ) source = 21;
    a76c:	9b02      	ldr	r3, [sp, #8]
    a76e:	0658      	lsls	r0, r3, #25
    a770:	d446      	bmi.n	a800 <SnoozeDigital::isr()+0x25c>
    
    else if ( isfr_e & CORE_PIN24_BITMASK ) source = 24;
    a772:	9b03      	ldr	r3, [sp, #12]
    a774:	0159      	lsls	r1, r3, #5
    a776:	d43f      	bmi.n	a7f8 <SnoozeDigital::isr()+0x254>
    else if ( isfr_e & CORE_PIN33_BITMASK ) source = 33;
    a778:	9b03      	ldr	r3, [sp, #12]
    a77a:	01da      	lsls	r2, r3, #7
    a77c:	d438      	bmi.n	a7f0 <SnoozeDigital::isr()+0x24c>
    else if ( isfr_e & CORE_PIN34_BITMASK ) source = 34;
    a77e:	9b03      	ldr	r3, [sp, #12]
    a780:	019b      	lsls	r3, r3, #6
    a782:	f57f af68 	bpl.w	a656 <SnoozeDigital::isr()+0xb2>
    a786:	4b3d      	ldr	r3, [pc, #244]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a788:	2222      	movs	r2, #34	; 0x22
    a78a:	601a      	str	r2, [r3, #0]
    a78c:	e763      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    }
#endif
    
    
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ( isfr_a & CORE_PIN3_BITMASK )       source = 3;
    a78e:	4b3b      	ldr	r3, [pc, #236]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a790:	2203      	movs	r2, #3
    a792:	601a      	str	r2, [r3, #0]
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    else if ( isfr_d & CORE_PIN20_BITMASK ) source = 20;
    else if ( isfr_d & CORE_PIN21_BITMASK ) source = 21;
#endif
}
    a794:	b005      	add	sp, #20
    a796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif
    
    
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ( isfr_a & CORE_PIN3_BITMASK )       source = 3;
    else if ( isfr_a & CORE_PIN4_BITMASK  ) source = 4;
    a79a:	4b38      	ldr	r3, [pc, #224]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a79c:	2204      	movs	r2, #4
    a79e:	601a      	str	r2, [r3, #0]
    a7a0:	e759      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_a & CORE_PIN25_BITMASK ) source = 25;
    else if ( isfr_a & CORE_PIN26_BITMASK ) source = 26;
    a7a2:	4b36      	ldr	r3, [pc, #216]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7a4:	221a      	movs	r2, #26
    a7a6:	601a      	str	r2, [r3, #0]
    a7a8:	e755      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    
    
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    if ( isfr_a & CORE_PIN3_BITMASK )       source = 3;
    else if ( isfr_a & CORE_PIN4_BITMASK  ) source = 4;
    else if ( isfr_a & CORE_PIN25_BITMASK ) source = 25;
    a7aa:	4b34      	ldr	r3, [pc, #208]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7ac:	2219      	movs	r2, #25
    a7ae:	601a      	str	r2, [r3, #0]
    a7b0:	e751      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_a & CORE_PIN26_BITMASK ) source = 26;
    else if ( isfr_a & CORE_PIN27_BITMASK ) source = 27;
    a7b2:	4b32      	ldr	r3, [pc, #200]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7b4:	221b      	movs	r2, #27
    a7b6:	601a      	str	r2, [r3, #0]
    a7b8:	e74d      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_a & CORE_PIN28_BITMASK ) source = 28;
    a7ba:	4b30      	ldr	r3, [pc, #192]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7bc:	221c      	movs	r2, #28
    a7be:	601a      	str	r2, [r3, #0]
    a7c0:	e749      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_a & CORE_PIN39_BITMASK ) source = 39;
    a7c2:	4b2e      	ldr	r3, [pc, #184]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7c4:	2227      	movs	r2, #39	; 0x27
    a7c6:	601a      	str	r2, [r3, #0]
    a7c8:	e745      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    
    else if ( isfr_b & CORE_PIN0_BITMASK )  source = 0;
    a7ca:	4a2c      	ldr	r2, [pc, #176]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7cc:	6013      	str	r3, [r2, #0]
    a7ce:	e742      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN1_BITMASK )  source = 1;
    a7d0:	4b2a      	ldr	r3, [pc, #168]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7d2:	2201      	movs	r2, #1
    a7d4:	601a      	str	r2, [r3, #0]
    a7d6:	e73e      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN16_BITMASK ) source = 16;
    a7d8:	4b28      	ldr	r3, [pc, #160]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7da:	2210      	movs	r2, #16
    a7dc:	601a      	str	r2, [r3, #0]
    a7de:	e73a      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN17_BITMASK ) source = 17;
    else if ( isfr_b & CORE_PIN18_BITMASK ) source = 18;
    a7e0:	4b26      	ldr	r3, [pc, #152]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7e2:	2212      	movs	r2, #18
    a7e4:	601a      	str	r2, [r3, #0]
    a7e6:	e736      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_a & CORE_PIN39_BITMASK ) source = 39;
    
    else if ( isfr_b & CORE_PIN0_BITMASK )  source = 0;
    else if ( isfr_b & CORE_PIN1_BITMASK )  source = 1;
    else if ( isfr_b & CORE_PIN16_BITMASK ) source = 16;
    else if ( isfr_b & CORE_PIN17_BITMASK ) source = 17;
    a7e8:	4b24      	ldr	r3, [pc, #144]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7ea:	2211      	movs	r2, #17
    a7ec:	601a      	str	r2, [r3, #0]
    a7ee:	e732      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    else if ( isfr_d & CORE_PIN20_BITMASK ) source = 20;
    else if ( isfr_d & CORE_PIN21_BITMASK ) source = 21;
    
    else if ( isfr_e & CORE_PIN24_BITMASK ) source = 24;
    else if ( isfr_e & CORE_PIN33_BITMASK ) source = 33;
    a7f0:	4b22      	ldr	r3, [pc, #136]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7f2:	2221      	movs	r2, #33	; 0x21
    a7f4:	601a      	str	r2, [r3, #0]
    a7f6:	e72e      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    else if ( isfr_d & CORE_PIN20_BITMASK ) source = 20;
    else if ( isfr_d & CORE_PIN21_BITMASK ) source = 21;
    
    else if ( isfr_e & CORE_PIN24_BITMASK ) source = 24;
    a7f8:	4b20      	ldr	r3, [pc, #128]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a7fa:	2218      	movs	r2, #24
    a7fc:	601a      	str	r2, [r3, #0]
    a7fe:	e72a      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_d & CORE_PIN6_BITMASK )  source = 6;
    else if ( isfr_d & CORE_PIN7_BITMASK )  source = 7;
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    else if ( isfr_d & CORE_PIN20_BITMASK ) source = 20;
    else if ( isfr_d & CORE_PIN21_BITMASK ) source = 21;
    a800:	4b1e      	ldr	r3, [pc, #120]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a802:	2215      	movs	r2, #21
    a804:	601a      	str	r2, [r3, #0]
    a806:	e726      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN31_BITMASK ) source = 31;
    else if ( isfr_b & CORE_PIN32_BITMASK ) source = 32;
    
    else if ( isfr_c & CORE_PIN9_BITMASK )  source = 9;
    else if ( isfr_c & CORE_PIN10_BITMASK ) source = 10;
    else if ( isfr_c & CORE_PIN11_BITMASK ) source = 11;
    a808:	4b1c      	ldr	r3, [pc, #112]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a80a:	220b      	movs	r2, #11
    a80c:	601a      	str	r2, [r3, #0]
    a80e:	e722      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN30_BITMASK ) source = 30;
    else if ( isfr_b & CORE_PIN31_BITMASK ) source = 31;
    else if ( isfr_b & CORE_PIN32_BITMASK ) source = 32;
    
    else if ( isfr_c & CORE_PIN9_BITMASK )  source = 9;
    else if ( isfr_c & CORE_PIN10_BITMASK ) source = 10;
    a810:	4b1a      	ldr	r3, [pc, #104]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a812:	220a      	movs	r2, #10
    a814:	601a      	str	r2, [r3, #0]
    a816:	e71e      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN29_BITMASK ) source = 29;
    else if ( isfr_b & CORE_PIN30_BITMASK ) source = 30;
    else if ( isfr_b & CORE_PIN31_BITMASK ) source = 31;
    else if ( isfr_b & CORE_PIN32_BITMASK ) source = 32;
    
    else if ( isfr_c & CORE_PIN9_BITMASK )  source = 9;
    a818:	4b18      	ldr	r3, [pc, #96]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a81a:	2209      	movs	r2, #9
    a81c:	601a      	str	r2, [r3, #0]
    a81e:	e71a      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN18_BITMASK ) source = 18;
    else if ( isfr_b & CORE_PIN19_BITMASK ) source = 19;
    else if ( isfr_b & CORE_PIN29_BITMASK ) source = 29;
    else if ( isfr_b & CORE_PIN30_BITMASK ) source = 30;
    else if ( isfr_b & CORE_PIN31_BITMASK ) source = 31;
    else if ( isfr_b & CORE_PIN32_BITMASK ) source = 32;
    a820:	4b16      	ldr	r3, [pc, #88]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a822:	2220      	movs	r2, #32
    a824:	601a      	str	r2, [r3, #0]
    a826:	e716      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN17_BITMASK ) source = 17;
    else if ( isfr_b & CORE_PIN18_BITMASK ) source = 18;
    else if ( isfr_b & CORE_PIN19_BITMASK ) source = 19;
    else if ( isfr_b & CORE_PIN29_BITMASK ) source = 29;
    else if ( isfr_b & CORE_PIN30_BITMASK ) source = 30;
    else if ( isfr_b & CORE_PIN31_BITMASK ) source = 31;
    a828:	4b14      	ldr	r3, [pc, #80]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a82a:	221f      	movs	r2, #31
    a82c:	601a      	str	r2, [r3, #0]
    a82e:	e712      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN16_BITMASK ) source = 16;
    else if ( isfr_b & CORE_PIN17_BITMASK ) source = 17;
    else if ( isfr_b & CORE_PIN18_BITMASK ) source = 18;
    else if ( isfr_b & CORE_PIN19_BITMASK ) source = 19;
    else if ( isfr_b & CORE_PIN29_BITMASK ) source = 29;
    else if ( isfr_b & CORE_PIN30_BITMASK ) source = 30;
    a830:	4b12      	ldr	r3, [pc, #72]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a832:	221e      	movs	r2, #30
    a834:	601a      	str	r2, [r3, #0]
    a836:	e70e      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN1_BITMASK )  source = 1;
    else if ( isfr_b & CORE_PIN16_BITMASK ) source = 16;
    else if ( isfr_b & CORE_PIN17_BITMASK ) source = 17;
    else if ( isfr_b & CORE_PIN18_BITMASK ) source = 18;
    else if ( isfr_b & CORE_PIN19_BITMASK ) source = 19;
    else if ( isfr_b & CORE_PIN29_BITMASK ) source = 29;
    a838:	4b10      	ldr	r3, [pc, #64]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a83a:	221d      	movs	r2, #29
    a83c:	601a      	str	r2, [r3, #0]
    a83e:	e70a      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN0_BITMASK )  source = 0;
    else if ( isfr_b & CORE_PIN1_BITMASK )  source = 1;
    else if ( isfr_b & CORE_PIN16_BITMASK ) source = 16;
    else if ( isfr_b & CORE_PIN17_BITMASK ) source = 17;
    else if ( isfr_b & CORE_PIN18_BITMASK ) source = 18;
    else if ( isfr_b & CORE_PIN19_BITMASK ) source = 19;
    a840:	4b0e      	ldr	r3, [pc, #56]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a842:	2213      	movs	r2, #19
    a844:	601a      	str	r2, [r3, #0]
    a846:	e706      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_d & CORE_PIN5_BITMASK )  source = 5;
    else if ( isfr_d & CORE_PIN6_BITMASK )  source = 6;
    else if ( isfr_d & CORE_PIN7_BITMASK )  source = 7;
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    else if ( isfr_d & CORE_PIN20_BITMASK ) source = 20;
    a848:	4b0c      	ldr	r3, [pc, #48]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a84a:	2214      	movs	r2, #20
    a84c:	601a      	str	r2, [r3, #0]
    a84e:	e702      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_d & CORE_PIN2_BITMASK )  source = 2;
    else if ( isfr_d & CORE_PIN5_BITMASK )  source = 5;
    else if ( isfr_d & CORE_PIN6_BITMASK )  source = 6;
    else if ( isfr_d & CORE_PIN7_BITMASK )  source = 7;
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    else if ( isfr_d & CORE_PIN14_BITMASK ) source = 14;
    a850:	4b0a      	ldr	r3, [pc, #40]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a852:	220e      	movs	r2, #14
    a854:	601a      	str	r2, [r3, #0]
    a856:	e6fe      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    
    else if ( isfr_d & CORE_PIN2_BITMASK )  source = 2;
    else if ( isfr_d & CORE_PIN5_BITMASK )  source = 5;
    else if ( isfr_d & CORE_PIN6_BITMASK )  source = 6;
    else if ( isfr_d & CORE_PIN7_BITMASK )  source = 7;
    else if ( isfr_d & CORE_PIN8_BITMASK )  source = 8;
    a858:	4b08      	ldr	r3, [pc, #32]	; (a87c <SnoozeDigital::isr()+0x2d8>)
    a85a:	2208      	movs	r2, #8
    a85c:	601a      	str	r2, [r3, #0]
    a85e:	e6fa      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    a860:	400490a0 	.word	0x400490a0
    a864:	4004a0a0 	.word	0x4004a0a0
    a868:	4004d0a0 	.word	0x4004d0a0
    a86c:	4004b0a0 	.word	0x4004b0a0
    a870:	4004c0a0 	.word	0x4004c0a0
    a874:	1fff42f4 	.word	0x1fff42f4
    a878:	1fff6668 	.word	0x1fff6668
    a87c:	1fff42f0 	.word	0x1fff42f0
    a880:	0001778c 	.word	0x0001778c
    else if ( isfr_c & CORE_PIN38_BITMASK ) source = 38;
    
    else if ( isfr_d & CORE_PIN2_BITMASK )  source = 2;
    else if ( isfr_d & CORE_PIN5_BITMASK )  source = 5;
    else if ( isfr_d & CORE_PIN6_BITMASK )  source = 6;
    else if ( isfr_d & CORE_PIN7_BITMASK )  source = 7;
    a884:	4b19      	ldr	r3, [pc, #100]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a886:	2207      	movs	r2, #7
    a888:	601a      	str	r2, [r3, #0]
    a88a:	e6e4      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN37_BITMASK ) source = 37;
    else if ( isfr_c & CORE_PIN38_BITMASK ) source = 38;
    
    else if ( isfr_d & CORE_PIN2_BITMASK )  source = 2;
    else if ( isfr_d & CORE_PIN5_BITMASK )  source = 5;
    else if ( isfr_d & CORE_PIN6_BITMASK )  source = 6;
    a88c:	4b17      	ldr	r3, [pc, #92]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a88e:	2206      	movs	r2, #6
    a890:	601a      	str	r2, [r3, #0]
    a892:	e6e0      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN36_BITMASK ) source = 36;
    else if ( isfr_c & CORE_PIN37_BITMASK ) source = 37;
    else if ( isfr_c & CORE_PIN38_BITMASK ) source = 38;
    
    else if ( isfr_d & CORE_PIN2_BITMASK )  source = 2;
    else if ( isfr_d & CORE_PIN5_BITMASK )  source = 5;
    a894:	4b15      	ldr	r3, [pc, #84]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a896:	2205      	movs	r2, #5
    a898:	601a      	str	r2, [r3, #0]
    a89a:	e6dc      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN35_BITMASK ) source = 35;
    else if ( isfr_c & CORE_PIN36_BITMASK ) source = 36;
    else if ( isfr_c & CORE_PIN37_BITMASK ) source = 37;
    else if ( isfr_c & CORE_PIN38_BITMASK ) source = 38;
    
    else if ( isfr_d & CORE_PIN2_BITMASK )  source = 2;
    a89c:	4b13      	ldr	r3, [pc, #76]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a89e:	2202      	movs	r2, #2
    a8a0:	601a      	str	r2, [r3, #0]
    a8a2:	e6d8      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN22_BITMASK ) source = 22;
    else if ( isfr_c & CORE_PIN23_BITMASK ) source = 23;
    else if ( isfr_c & CORE_PIN35_BITMASK ) source = 35;
    else if ( isfr_c & CORE_PIN36_BITMASK ) source = 36;
    else if ( isfr_c & CORE_PIN37_BITMASK ) source = 37;
    else if ( isfr_c & CORE_PIN38_BITMASK ) source = 38;
    a8a4:	4b11      	ldr	r3, [pc, #68]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8a6:	2226      	movs	r2, #38	; 0x26
    a8a8:	601a      	str	r2, [r3, #0]
    a8aa:	e6d4      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN15_BITMASK ) source = 15;
    else if ( isfr_c & CORE_PIN22_BITMASK ) source = 22;
    else if ( isfr_c & CORE_PIN23_BITMASK ) source = 23;
    else if ( isfr_c & CORE_PIN35_BITMASK ) source = 35;
    else if ( isfr_c & CORE_PIN36_BITMASK ) source = 36;
    else if ( isfr_c & CORE_PIN37_BITMASK ) source = 37;
    a8ac:	4b0f      	ldr	r3, [pc, #60]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8ae:	2225      	movs	r2, #37	; 0x25
    a8b0:	601a      	str	r2, [r3, #0]
    a8b2:	e6d0      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN13_BITMASK ) source = 13;
    else if ( isfr_c & CORE_PIN15_BITMASK ) source = 15;
    else if ( isfr_c & CORE_PIN22_BITMASK ) source = 22;
    else if ( isfr_c & CORE_PIN23_BITMASK ) source = 23;
    else if ( isfr_c & CORE_PIN35_BITMASK ) source = 35;
    else if ( isfr_c & CORE_PIN36_BITMASK ) source = 36;
    a8b4:	4b0d      	ldr	r3, [pc, #52]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8b6:	2224      	movs	r2, #36	; 0x24
    a8b8:	601a      	str	r2, [r3, #0]
    a8ba:	e6cc      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN12_BITMASK ) source = 12;
    else if ( isfr_c & CORE_PIN13_BITMASK ) source = 13;
    else if ( isfr_c & CORE_PIN15_BITMASK ) source = 15;
    else if ( isfr_c & CORE_PIN22_BITMASK ) source = 22;
    else if ( isfr_c & CORE_PIN23_BITMASK ) source = 23;
    else if ( isfr_c & CORE_PIN35_BITMASK ) source = 35;
    a8bc:	4b0b      	ldr	r3, [pc, #44]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8be:	2223      	movs	r2, #35	; 0x23
    a8c0:	601a      	str	r2, [r3, #0]
    a8c2:	e6c8      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN11_BITMASK ) source = 11;
    else if ( isfr_c & CORE_PIN12_BITMASK ) source = 12;
    else if ( isfr_c & CORE_PIN13_BITMASK ) source = 13;
    else if ( isfr_c & CORE_PIN15_BITMASK ) source = 15;
    else if ( isfr_c & CORE_PIN22_BITMASK ) source = 22;
    else if ( isfr_c & CORE_PIN23_BITMASK ) source = 23;
    a8c4:	4b09      	ldr	r3, [pc, #36]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8c6:	2217      	movs	r2, #23
    a8c8:	601a      	str	r2, [r3, #0]
    a8ca:	e6c4      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN10_BITMASK ) source = 10;
    else if ( isfr_c & CORE_PIN11_BITMASK ) source = 11;
    else if ( isfr_c & CORE_PIN12_BITMASK ) source = 12;
    else if ( isfr_c & CORE_PIN13_BITMASK ) source = 13;
    else if ( isfr_c & CORE_PIN15_BITMASK ) source = 15;
    else if ( isfr_c & CORE_PIN22_BITMASK ) source = 22;
    a8cc:	4b07      	ldr	r3, [pc, #28]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8ce:	2216      	movs	r2, #22
    a8d0:	601a      	str	r2, [r3, #0]
    a8d2:	e6c0      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_c & CORE_PIN9_BITMASK )  source = 9;
    else if ( isfr_c & CORE_PIN10_BITMASK ) source = 10;
    else if ( isfr_c & CORE_PIN11_BITMASK ) source = 11;
    else if ( isfr_c & CORE_PIN12_BITMASK ) source = 12;
    else if ( isfr_c & CORE_PIN13_BITMASK ) source = 13;
    else if ( isfr_c & CORE_PIN15_BITMASK ) source = 15;
    a8d4:	4b05      	ldr	r3, [pc, #20]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8d6:	220f      	movs	r2, #15
    a8d8:	601a      	str	r2, [r3, #0]
    a8da:	e6bc      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    
    else if ( isfr_c & CORE_PIN9_BITMASK )  source = 9;
    else if ( isfr_c & CORE_PIN10_BITMASK ) source = 10;
    else if ( isfr_c & CORE_PIN11_BITMASK ) source = 11;
    else if ( isfr_c & CORE_PIN12_BITMASK ) source = 12;
    else if ( isfr_c & CORE_PIN13_BITMASK ) source = 13;
    a8dc:	4b03      	ldr	r3, [pc, #12]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8de:	220d      	movs	r2, #13
    a8e0:	601a      	str	r2, [r3, #0]
    a8e2:	e6b8      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    else if ( isfr_b & CORE_PIN32_BITMASK ) source = 32;
    
    else if ( isfr_c & CORE_PIN9_BITMASK )  source = 9;
    else if ( isfr_c & CORE_PIN10_BITMASK ) source = 10;
    else if ( isfr_c & CORE_PIN11_BITMASK ) source = 11;
    else if ( isfr_c & CORE_PIN12_BITMASK ) source = 12;
    a8e4:	4b01      	ldr	r3, [pc, #4]	; (a8ec <SnoozeDigital::isr()+0x348>)
    a8e6:	220c      	movs	r2, #12
    a8e8:	601a      	str	r2, [r3, #0]
    a8ea:	e6b4      	b.n	a656 <SnoozeDigital::isr()+0xb2>
    a8ec:	1fff42f0 	.word	0x1fff42f0

0000a8f0 <SnoozeDigital::clearIsrFlags()>:

/*******************************************************************************
 *  for LLWU wakeup ISR to call actual digital ISR code
 *******************************************************************************/
void SnoozeDigital::clearIsrFlags( void ) {
    isr( );
    a8f0:	f7ff be58 	b.w	a5a4 <SnoozeDigital::isr()>

0000a8f4 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    a8f4:	4a94      	ldr	r2, [pc, #592]	; (ab48 <breakTime(long, tmElements_t&)+0x254>)
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    a8f6:	4b95      	ldr	r3, [pc, #596]	; (ab4c <breakTime(long, tmElements_t&)+0x258>)
// leap year calulator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a8fc:	4e94      	ldr	r6, [pc, #592]	; (ab50 <breakTime(long, tmElements_t&)+0x25c>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a8fe:	f8df a260 	ldr.w	sl, [pc, #608]	; ab60 <breakTime(long, tmElements_t&)+0x26c>
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a902:	4c94      	ldr	r4, [pc, #592]	; (ab54 <breakTime(long, tmElements_t&)+0x260>)
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    a904:	f8df 8250 	ldr.w	r8, [pc, #592]	; ab58 <breakTime(long, tmElements_t&)+0x264>
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    a908:	fba2 5200 	umull	r5, r2, r2, r0
    a90c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a910:	f10e 0704 	add.w	r7, lr, #4
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    a914:	fba3 2500 	umull	r2, r5, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a918:	fba6 6200 	umull	r6, r2, r6, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    a91c:	096d      	lsrs	r5, r5, #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a91e:	fba7 ab0a 	umull	sl, fp, r7, sl
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a922:	0ad2      	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    a924:	fba3 6305 	umull	r6, r3, r3, r5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a928:	fba4 6402 	umull	r6, r4, r4, r2
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a92c:	ebcb 0607 	rsb	r6, fp, r7
    a930:	eb0b 0656 	add.w	r6, fp, r6, lsr #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    a934:	095b      	lsrs	r3, r3, #5
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a936:	08b6      	lsrs	r6, r6, #2
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a938:	0924      	lsrs	r4, r4, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a93a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    a93e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a942:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    a946:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a94a:	1bbe      	subs	r6, r7, r6
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    a94c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a950:	eba2 02c4 	sub.w	r2, r2, r4, lsl #3
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    a954:	eba0 0085 	sub.w	r0, r0, r5, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a958:	3601      	adds	r6, #1
    a95a:	2400      	movs	r4, #0
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    a95c:	708a      	strb	r2, [r1, #2]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    a95e:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    a960:	704b      	strb	r3, [r1, #1]
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    a962:	70ce      	strb	r6, [r1, #3]
  
  year = 0;  
  days = 0;
    a964:	4622      	mov	r2, r4
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    a966:	f240 1a6d 	movw	sl, #365	; 0x16d
    a96a:	f04f 0c64 	mov.w	ip, #100	; 0x64
    a96e:	f44f 79c8 	mov.w	r9, #400	; 0x190
    a972:	e00f      	b.n	a994 <breakTime(long, tmElements_t&)+0xa0>
    a974:	ebc5 15eb 	rsb	r5, r5, fp, asr #7
    a978:	fb09 3515 	mls	r5, r9, r5, r3
    a97c:	2800      	cmp	r0, #0
    a97e:	d14e      	bne.n	aa1e <breakTime(long, tmElements_t&)+0x12a>
    a980:	2d00      	cmp	r5, #0
    a982:	bf14      	ite	ne
    a984:	4650      	movne	r0, sl
    a986:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
    a98a:	4402      	add	r2, r0
    a98c:	4596      	cmp	lr, r2
    a98e:	f104 0401 	add.w	r4, r4, #1
    a992:	d313      	bcc.n	a9bc <breakTime(long, tmElements_t&)+0xc8>
    a994:	b2e7      	uxtb	r7, r4
    a996:	f207 73b2 	addw	r3, r7, #1970	; 0x7b2
    a99a:	fb88 0b03 	smull	r0, fp, r8, r3
    a99e:	17dd      	asrs	r5, r3, #31
    a9a0:	ebc5 106b 	rsb	r0, r5, fp, asr #5
    a9a4:	f013 0603 	ands.w	r6, r3, #3
    a9a8:	fb0c 3010 	mls	r0, ip, r0, r3
    a9ac:	d0e2      	beq.n	a974 <breakTime(long, tmElements_t&)+0x80>
    a9ae:	f240 106d 	movw	r0, #365	; 0x16d
    a9b2:	4402      	add	r2, r0
    a9b4:	4596      	cmp	lr, r2
    a9b6:	f104 0401 	add.w	r4, r4, #1
    a9ba:	d2eb      	bcs.n	a994 <breakTime(long, tmElements_t&)+0xa0>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    a9bc:	4c66      	ldr	r4, [pc, #408]	; (ab58 <breakTime(long, tmElements_t&)+0x264>)
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    a9be:	718f      	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    a9c0:	17d8      	asrs	r0, r3, #31
    a9c2:	fb84 5403 	smull	r5, r4, r4, r3
    a9c6:	bb6e      	cbnz	r6, aa24 <breakTime(long, tmElements_t&)+0x130>
    a9c8:	ebc0 1564 	rsb	r5, r0, r4, asr #5
    a9cc:	2764      	movs	r7, #100	; 0x64
    a9ce:	fb07 3515 	mls	r5, r7, r5, r3
    a9d2:	ebc0 10e4 	rsb	r0, r0, r4, asr #7
    a9d6:	f44f 74c8 	mov.w	r4, #400	; 0x190
    a9da:	2d00      	cmp	r5, #0
    a9dc:	d152      	bne.n	aa84 <breakTime(long, tmElements_t&)+0x190>
    a9de:	fb04 3310 	mls	r3, r4, r0, r3
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d17f      	bne.n	aae6 <breakTime(long, tmElements_t&)+0x1f2>
  time  -= days; // now it is days in this year, starting at 0
    a9e6:	f5a2 72b7 	sub.w	r2, r2, #366	; 0x16e
    a9ea:	ebc2 020e 	rsb	r2, r2, lr
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    a9ee:	2401      	movs	r4, #1
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    a9f0:	4f5a      	ldr	r7, [pc, #360]	; (ab5c <breakTime(long, tmElements_t&)+0x268>)
    a9f2:	e001      	b.n	a9f8 <breakTime(long, tmElements_t&)+0x104>
    a9f4:	3601      	adds	r6, #1
    a9f6:	b2ec      	uxtb	r4, r5
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    a9f8:	2e01      	cmp	r6, #1
    a9fa:	b2f0      	uxtb	r0, r6
    a9fc:	f104 0501 	add.w	r5, r4, #1
    aa00:	f000 8097 	beq.w	ab32 <breakTime(long, tmElements_t&)+0x23e>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    aa04:	5df3      	ldrb	r3, [r6, r7]
    aa06:	429a      	cmp	r2, r3
    aa08:	d355      	bcc.n	aab6 <breakTime(long, tmElements_t&)+0x1c2>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aa0a:	2c0c      	cmp	r4, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    aa0c:	eba2 0203 	sub.w	r2, r2, r3
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aa10:	d1f0      	bne.n	a9f4 <breakTime(long, tmElements_t&)+0x100>
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    aa12:	200d      	movs	r0, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    aa14:	3201      	adds	r2, #1
    aa16:	710a      	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    aa18:	7148      	strb	r0, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    aa1e:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    aa22:	e7b2      	b.n	a98a <breakTime(long, tmElements_t&)+0x96>
    aa24:	ebc0 14e4 	rsb	r4, r0, r4, asr #7
    aa28:	f44f 75c8 	mov.w	r5, #400	; 0x190
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    aa2c:	f46f 70b6 	mvn.w	r0, #364	; 0x16c
    aa30:	1810      	adds	r0, r2, r0
    aa32:	fb05 3314 	mls	r3, r5, r4, r3
    aa36:	ebc0 020e 	rsb	r2, r0, lr
    aa3a:	b18b      	cbz	r3, aa60 <breakTime(long, tmElements_t&)+0x16c>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    aa3c:	2401      	movs	r4, #1
    aa3e:	2300      	movs	r3, #0
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    aa40:	4e46      	ldr	r6, [pc, #280]	; (ab5c <breakTime(long, tmElements_t&)+0x268>)
    aa42:	e002      	b.n	aa4a <breakTime(long, tmElements_t&)+0x156>
    aa44:	3401      	adds	r4, #1
    aa46:	b2e4      	uxtb	r4, r4
    aa48:	3301      	adds	r3, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    aa4a:	2b01      	cmp	r3, #1
    aa4c:	b2d8      	uxtb	r0, r3
    aa4e:	d068      	beq.n	ab22 <breakTime(long, tmElements_t&)+0x22e>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    aa50:	5d9d      	ldrb	r5, [r3, r6]
    aa52:	42aa      	cmp	r2, r5
    aa54:	d32f      	bcc.n	aab6 <breakTime(long, tmElements_t&)+0x1c2>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aa56:	2c0c      	cmp	r4, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    aa58:	eba2 0205 	sub.w	r2, r2, r5
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aa5c:	d1f2      	bne.n	aa44 <breakTime(long, tmElements_t&)+0x150>
    aa5e:	e7d8      	b.n	aa12 <breakTime(long, tmElements_t&)+0x11e>
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    aa60:	2501      	movs	r5, #1
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    aa62:	4f3e      	ldr	r7, [pc, #248]	; (ab5c <breakTime(long, tmElements_t&)+0x268>)
    aa64:	e001      	b.n	aa6a <breakTime(long, tmElements_t&)+0x176>
    aa66:	3301      	adds	r3, #1
    aa68:	b2f5      	uxtb	r5, r6
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    aa6a:	2b01      	cmp	r3, #1
    aa6c:	b2d8      	uxtb	r0, r3
    aa6e:	f105 0601 	add.w	r6, r5, #1
    aa72:	d052      	beq.n	ab1a <breakTime(long, tmElements_t&)+0x226>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    aa74:	5ddc      	ldrb	r4, [r3, r7]
    aa76:	42a2      	cmp	r2, r4
    aa78:	d31d      	bcc.n	aab6 <breakTime(long, tmElements_t&)+0x1c2>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aa7a:	2d0c      	cmp	r5, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    aa7c:	eba2 0204 	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aa80:	d1f1      	bne.n	aa66 <breakTime(long, tmElements_t&)+0x172>
    aa82:	e7c6      	b.n	aa12 <breakTime(long, tmElements_t&)+0x11e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    aa84:	f5a2 72b7 	sub.w	r2, r2, #366	; 0x16e
    aa88:	fb04 3310 	mls	r3, r4, r0, r3
    aa8c:	ebc2 020e 	rsb	r2, r2, lr
    aa90:	b1c3      	cbz	r3, aac4 <breakTime(long, tmElements_t&)+0x1d0>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    aa92:	2301      	movs	r3, #1
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    aa94:	4f31      	ldr	r7, [pc, #196]	; (ab5c <breakTime(long, tmElements_t&)+0x268>)
    aa96:	e001      	b.n	aa9c <breakTime(long, tmElements_t&)+0x1a8>
    aa98:	3601      	adds	r6, #1
    aa9a:	b2eb      	uxtb	r3, r5
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    aa9c:	2e01      	cmp	r6, #1
    aa9e:	b2f0      	uxtb	r0, r6
    aaa0:	f103 0501 	add.w	r5, r3, #1
    aaa4:	d049      	beq.n	ab3a <breakTime(long, tmElements_t&)+0x246>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    aaa6:	5df4      	ldrb	r4, [r6, r7]
    aaa8:	42a2      	cmp	r2, r4
    aaaa:	d304      	bcc.n	aab6 <breakTime(long, tmElements_t&)+0x1c2>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aaac:	2b0c      	cmp	r3, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    aaae:	eba2 0204 	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aab2:	d1f1      	bne.n	aa98 <breakTime(long, tmElements_t&)+0x1a4>
    aab4:	e7ad      	b.n	aa12 <breakTime(long, tmElements_t&)+0x11e>
    aab6:	3001      	adds	r0, #1
    aab8:	b2c0      	uxtb	r0, r0
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    aaba:	3201      	adds	r2, #1
    aabc:	710a      	strb	r2, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    aabe:	7148      	strb	r0, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    aac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    aac4:	2301      	movs	r3, #1
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    aac6:	4d25      	ldr	r5, [pc, #148]	; (ab5c <breakTime(long, tmElements_t&)+0x268>)
    aac8:	e002      	b.n	aad0 <breakTime(long, tmElements_t&)+0x1dc>
    aaca:	3301      	adds	r3, #1
    aacc:	b2db      	uxtb	r3, r3
    aace:	3601      	adds	r6, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    aad0:	2e01      	cmp	r6, #1
    aad2:	b2f0      	uxtb	r0, r6
    aad4:	d01d      	beq.n	ab12 <breakTime(long, tmElements_t&)+0x21e>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    aad6:	5d74      	ldrb	r4, [r6, r5]
    aad8:	4294      	cmp	r4, r2
    aada:	d8ec      	bhi.n	aab6 <breakTime(long, tmElements_t&)+0x1c2>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aadc:	2b0c      	cmp	r3, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    aade:	eba2 0204 	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    aae2:	d1f2      	bne.n	aaca <breakTime(long, tmElements_t&)+0x1d6>
    aae4:	e795      	b.n	aa12 <breakTime(long, tmElements_t&)+0x11e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    aae6:	f46f 74b6 	mvn.w	r4, #364	; 0x16c
    aaea:	4422      	add	r2, r4
    aaec:	ebc2 020e 	rsb	r2, r2, lr
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    aaf0:	2301      	movs	r3, #1
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    aaf2:	4d1a      	ldr	r5, [pc, #104]	; (ab5c <breakTime(long, tmElements_t&)+0x268>)
    aaf4:	e002      	b.n	aafc <breakTime(long, tmElements_t&)+0x208>
    aaf6:	3301      	adds	r3, #1
    aaf8:	b2db      	uxtb	r3, r3
    aafa:	3601      	adds	r6, #1
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    aafc:	2e01      	cmp	r6, #1
    aafe:	b2f0      	uxtb	r0, r6
    ab00:	d013      	beq.n	ab2a <breakTime(long, tmElements_t&)+0x236>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    ab02:	5d74      	ldrb	r4, [r6, r5]
    ab04:	42a2      	cmp	r2, r4
    ab06:	d3d6      	bcc.n	aab6 <breakTime(long, tmElements_t&)+0x1c2>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    ab08:	2b0c      	cmp	r3, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    ab0a:	eba2 0204 	sub.w	r2, r2, r4
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    ab0e:	d1f2      	bne.n	aaf6 <breakTime(long, tmElements_t&)+0x202>
    ab10:	e77f      	b.n	aa12 <breakTime(long, tmElements_t&)+0x11e>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    ab12:	2a1c      	cmp	r2, #28
    ab14:	d915      	bls.n	ab42 <breakTime(long, tmElements_t&)+0x24e>
      time -= monthLength;
    ab16:	3a1d      	subs	r2, #29
    ab18:	e7d7      	b.n	aaca <breakTime(long, tmElements_t&)+0x1d6>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    ab1a:	2a1b      	cmp	r2, #27
    ab1c:	d911      	bls.n	ab42 <breakTime(long, tmElements_t&)+0x24e>
      time -= monthLength;
    ab1e:	3a1c      	subs	r2, #28
    ab20:	e7a1      	b.n	aa66 <breakTime(long, tmElements_t&)+0x172>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    ab22:	2a1b      	cmp	r2, #27
    ab24:	d90d      	bls.n	ab42 <breakTime(long, tmElements_t&)+0x24e>
      time -= monthLength;
    ab26:	3a1c      	subs	r2, #28
    ab28:	e78c      	b.n	aa44 <breakTime(long, tmElements_t&)+0x150>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    ab2a:	2a1b      	cmp	r2, #27
    ab2c:	d909      	bls.n	ab42 <breakTime(long, tmElements_t&)+0x24e>
      time -= monthLength;
    ab2e:	3a1c      	subs	r2, #28
    ab30:	e7e1      	b.n	aaf6 <breakTime(long, tmElements_t&)+0x202>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    ab32:	2a1c      	cmp	r2, #28
    ab34:	d905      	bls.n	ab42 <breakTime(long, tmElements_t&)+0x24e>
      time -= monthLength;
    ab36:	3a1d      	subs	r2, #29
    ab38:	e75c      	b.n	a9f4 <breakTime(long, tmElements_t&)+0x100>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    ab3a:	2a1c      	cmp	r2, #28
    ab3c:	d901      	bls.n	ab42 <breakTime(long, tmElements_t&)+0x24e>
      time -= monthLength;
    ab3e:	3a1d      	subs	r2, #29
    ab40:	e7aa      	b.n	aa98 <breakTime(long, tmElements_t&)+0x1a4>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    ab42:	2002      	movs	r0, #2
    ab44:	e766      	b.n	aa14 <breakTime(long, tmElements_t&)+0x120>
    ab46:	bf00      	nop
    ab48:	c22e4507 	.word	0xc22e4507
    ab4c:	88888889 	.word	0x88888889
    ab50:	91a2b3c5 	.word	0x91a2b3c5
    ab54:	aaaaaaab 	.word	0xaaaaaaab
    ab58:	51eb851f 	.word	0x51eb851f
    ab5c:	000175d0 	.word	0x000175d0
    ab60:	24924925 	.word	0x24924925

0000ab64 <makeTime(tmElements_t const&)>:
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
}

time_t makeTime(const tmElements_t &tm){   
    ab64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    ab68:	496d      	ldr	r1, [pc, #436]	; (ad20 <makeTime(tmElements_t const&)+0x1bc>)
    ab6a:	7986      	ldrb	r6, [r0, #6]
    ab6c:	fb01 f106 	mul.w	r1, r1, r6
  for (i = 0; i < tm.Year; i++) {
    ab70:	b306      	cbz	r6, abb4 <makeTime(tmElements_t const&)+0x50>
    ab72:	f206 7cb2 	addw	ip, r6, #1970	; 0x7b2
    ab76:	f240 73b3 	movw	r3, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    ab7a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; ad24 <makeTime(tmElements_t const&)+0x1c0>
    ab7e:	2764      	movs	r7, #100	; 0x64
    ab80:	f44f 78c8 	mov.w	r8, #400	; 0x190
    ab84:	e00d      	b.n	aba2 <makeTime(tmElements_t const&)+0x3e>
    ab86:	f013 0f03 	tst.w	r3, #3
    ab8a:	d109      	bne.n	aba0 <makeTime(tmElements_t const&)+0x3c>
    ab8c:	ebc2 12e5 	rsb	r2, r2, r5, asr #7
    ab90:	fb08 3212 	mls	r2, r8, r2, r3
    ab94:	b904      	cbnz	r4, ab98 <makeTime(tmElements_t const&)+0x34>
    ab96:	b91a      	cbnz	r2, aba0 <makeTime(tmElements_t const&)+0x3c>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    ab98:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
    ab9c:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    aba0:	3301      	adds	r3, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    aba2:	fb8e 2503 	smull	r2, r5, lr, r3
    aba6:	17da      	asrs	r2, r3, #31
    aba8:	ebc2 1465 	rsb	r4, r2, r5, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    abac:	4563      	cmp	r3, ip
    if (LEAP_YEAR(i)) {
    abae:	fb07 3414 	mls	r4, r7, r4, r3
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    abb2:	d1e8      	bne.n	ab86 <makeTime(tmElements_t const&)+0x22>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    abb4:	7942      	ldrb	r2, [r0, #5]
    abb6:	2a01      	cmp	r2, #1
    abb8:	dd5c      	ble.n	ac74 <makeTime(tmElements_t const&)+0x110>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    abba:	4c5a      	ldr	r4, [pc, #360]	; (ad24 <makeTime(tmElements_t const&)+0x1c0>)
    abbc:	f206 73b2 	addw	r3, r6, #1970	; 0x7b2
    abc0:	fb84 4503 	smull	r4, r5, r4, r3
    abc4:	17dc      	asrs	r4, r3, #31
    abc6:	ebc4 16e5 	rsb	r6, r4, r5, asr #7
    abca:	f44f 77c8 	mov.w	r7, #400	; 0x190
    abce:	ebc4 1465 	rsb	r4, r4, r5, asr #5
    abd2:	fb07 3516 	mls	r5, r7, r6, r3
    abd6:	2664      	movs	r6, #100	; 0x64
    abd8:	fb06 3414 	mls	r4, r6, r4, r3
    abdc:	f003 0303 	and.w	r3, r3, #3
    abe0:	2d00      	cmp	r5, #0
    abe2:	d05a      	beq.n	ac9a <makeTime(tmElements_t const&)+0x136>
    abe4:	b114      	cbz	r4, abec <makeTime(tmElements_t const&)+0x88>
    abe6:	2b00      	cmp	r3, #0
    abe8:	f000 8086 	beq.w	acf8 <makeTime(tmElements_t const&)+0x194>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    abec:	f501 1323 	add.w	r3, r1, #2670592	; 0x28c000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    abf0:	2a02      	cmp	r2, #2
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    abf2:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    abf6:	d067      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    abf8:	f501 039b 	add.w	r3, r1, #5079040	; 0x4d8000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    abfc:	2a03      	cmp	r2, #3
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    abfe:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac02:	d061      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac04:	f501 03ed 	add.w	r3, r1, #7766016	; 0x768000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac08:	2a04      	cmp	r2, #4
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac0a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac0e:	d05b      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac10:	f501 031e 	add.w	r3, r1, #10354688	; 0x9e0000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac14:	2a05      	cmp	r2, #5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac16:	f503 5350 	add.w	r3, r3, #13312	; 0x3400
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac1a:	d055      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac1c:	f501 0347 	add.w	r3, r1, #13041664	; 0xc70000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac20:	2a06      	cmp	r2, #6
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac22:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac26:	d04f      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac28:	4b3f      	ldr	r3, [pc, #252]	; (ad28 <makeTime(tmElements_t const&)+0x1c4>)
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac2a:	2a07      	cmp	r2, #7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac2c:	440b      	add	r3, r1
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac2e:	d04b      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac30:	f101 738b 	add.w	r3, r1, #18219008	; 0x1160000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac34:	2a08      	cmp	r2, #8
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac36:	f503 33bf 	add.w	r3, r3, #97792	; 0x17e00
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac3a:	d045      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac3c:	f101 73a0 	add.w	r3, r1, #20971520	; 0x1400000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac40:	2a09      	cmp	r2, #9
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac42:	f503 43b9 	add.w	r3, r3, #23680	; 0x5c80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac46:	d03f      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac48:	4b38      	ldr	r3, [pc, #224]	; (ad2c <makeTime(tmElements_t const&)+0x1c8>)
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac4a:	2a0a      	cmp	r2, #10
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac4c:	440b      	add	r3, r1
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac4e:	d03b      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac50:	f101 73c8 	add.w	r3, r1, #26214400	; 0x1900000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac54:	2a0b      	cmp	r2, #11
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac56:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac5a:	d035      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac5c:	f101 73dc 	add.w	r3, r1, #28835840	; 0x1b80000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac60:	2a0c      	cmp	r2, #12
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac62:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ac66:	d02f      	beq.n	acc8 <makeTime(tmElements_t const&)+0x164>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ac68:	f101 71f0 	add.w	r1, r1, #31457280	; 0x1e00000
    ac6c:	f501 3199 	add.w	r1, r1, #78336	; 0x13200
    ac70:	f501 71c0 	add.w	r1, r1, #384	; 0x180
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
  return (time_t)seconds; 
    ac74:	7843      	ldrb	r3, [r0, #1]
    ac76:	7885      	ldrb	r5, [r0, #2]
    ac78:	7804      	ldrb	r4, [r0, #0]
    ac7a:	7902      	ldrb	r2, [r0, #4]
    ac7c:	482c      	ldr	r0, [pc, #176]	; (ad30 <makeTime(tmElements_t const&)+0x1cc>)
    ac7e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    ac82:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    ac86:	009b      	lsls	r3, r3, #2
    ac88:	fb06 3305 	mla	r3, r6, r5, r3
    ac8c:	4423      	add	r3, r4
    ac8e:	3a01      	subs	r2, #1
    ac90:	fb00 3002 	mla	r0, r0, r2, r3
}
    ac94:	4408      	add	r0, r1
    ac96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac9a:	b9bc      	cbnz	r4, accc <makeTime(tmElements_t const&)+0x168>
    ac9c:	2b00      	cmp	r3, #0
    ac9e:	d1a5      	bne.n	abec <makeTime(tmElements_t const&)+0x88>
    aca0:	4c24      	ldr	r4, [pc, #144]	; (ad34 <makeTime(tmElements_t const&)+0x1d0>)
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aca2:	4e23      	ldr	r6, [pc, #140]	; (ad30 <makeTime(tmElements_t const&)+0x1cc>)
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    aca4:	2301      	movs	r3, #1
    aca6:	2b02      	cmp	r3, #2
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aca8:	bf14      	ite	ne
    acaa:	7825      	ldrbne	r5, [r4, #0]
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    acac:	f501 1118 	addeq.w	r1, r1, #2490368	; 0x260000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    acb0:	f103 0301 	add.w	r3, r3, #1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    acb4:	bf14      	ite	ne
    acb6:	fb06 1105 	mlane	r1, r6, r5, r1
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    acba:	f501 516e 	addeq.w	r1, r1, #15232	; 0x3b80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    acbe:	429a      	cmp	r2, r3
    acc0:	f104 0401 	add.w	r4, r4, #1
    acc4:	d1ef      	bne.n	aca6 <makeTime(tmElements_t const&)+0x142>
    acc6:	e7d5      	b.n	ac74 <makeTime(tmElements_t const&)+0x110>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    acc8:	4619      	mov	r1, r3
    acca:	e7d3      	b.n	ac74 <makeTime(tmElements_t const&)+0x110>
    accc:	2b00      	cmp	r3, #0
    acce:	d18d      	bne.n	abec <makeTime(tmElements_t const&)+0x88>
    acd0:	4c18      	ldr	r4, [pc, #96]	; (ad34 <makeTime(tmElements_t const&)+0x1d0>)
    acd2:	4e17      	ldr	r6, [pc, #92]	; (ad30 <makeTime(tmElements_t const&)+0x1cc>)
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    acd4:	2301      	movs	r3, #1
    acd6:	2b02      	cmp	r3, #2
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    acd8:	bf14      	ite	ne
    acda:	7825      	ldrbne	r5, [r4, #0]
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    acdc:	f501 1118 	addeq.w	r1, r1, #2490368	; 0x260000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ace0:	f103 0301 	add.w	r3, r3, #1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    ace4:	bf0c      	ite	eq
    ace6:	f501 516e 	addeq.w	r1, r1, #15232	; 0x3b80
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    acea:	fb06 1105 	mlane	r1, r6, r5, r1
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    acee:	4293      	cmp	r3, r2
    acf0:	f104 0401 	add.w	r4, r4, #1
    acf4:	d1ef      	bne.n	acd6 <makeTime(tmElements_t const&)+0x172>
    acf6:	e7bd      	b.n	ac74 <makeTime(tmElements_t const&)+0x110>
    acf8:	4c0e      	ldr	r4, [pc, #56]	; (ad34 <makeTime(tmElements_t const&)+0x1d0>)
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    acfa:	4e0d      	ldr	r6, [pc, #52]	; (ad30 <makeTime(tmElements_t const&)+0x1cc>)
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    acfc:	2301      	movs	r3, #1
    acfe:	2b02      	cmp	r3, #2
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ad00:	bf14      	ite	ne
    ad02:	7825      	ldrbne	r5, [r4, #0]
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    ad04:	f501 1118 	addeq.w	r1, r1, #2490368	; 0x260000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ad08:	f103 0301 	add.w	r3, r3, #1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    ad0c:	bf14      	ite	ne
    ad0e:	fb06 1105 	mlane	r1, r6, r5, r1
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    ad12:	f501 516e 	addeq.w	r1, r1, #15232	; 0x3b80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ad16:	4293      	cmp	r3, r2
    ad18:	f104 0401 	add.w	r4, r4, #1
    ad1c:	d1ef      	bne.n	acfe <makeTime(tmElements_t const&)+0x19a>
    ad1e:	e7a9      	b.n	ac74 <makeTime(tmElements_t const&)+0x110>
    ad20:	01e13380 	.word	0x01e13380
    ad24:	51eb851f 	.word	0x51eb851f
    ad28:	00ee9f80 	.word	0x00ee9f80
    ad2c:	0167e980 	.word	0x0167e980
    ad30:	00015180 	.word	0x00015180
    ad34:	000175d0 	.word	0x000175d0

0000ad38 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad3a:	4c20      	ldr	r4, [pc, #128]	; (adbc <now()+0x84>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    ad3c:	4e20      	ldr	r6, [pc, #128]	; (adc0 <now()+0x88>)
    ad3e:	6823      	ldr	r3, [r4, #0]
    ad40:	6832      	ldr	r2, [r6, #0]
    ad42:	4d20      	ldr	r5, [pc, #128]	; (adc4 <now()+0x8c>)
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    ad44:	b083      	sub	sp, #12
    ad46:	6828      	ldr	r0, [r5, #0]
    ad48:	9300      	str	r3, [sp, #0]
	return ret;
    ad4a:	9b00      	ldr	r3, [sp, #0]
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    ad4c:	1a9b      	subs	r3, r3, r2
    ad4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    ad52:	d30f      	bcc.n	ad74 <now()+0x3c>
    ad54:	3001      	adds	r0, #1
    ad56:	e000      	b.n	ad5a <now()+0x22>
    ad58:	4608      	mov	r0, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad5a:	6823      	ldr	r3, [r4, #0]
    ad5c:	9300      	str	r3, [sp, #0]
	return ret;
    ad5e:	9b00      	ldr	r3, [sp, #0]
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    ad60:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    ad64:	1a9b      	subs	r3, r3, r2
    ad66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    ad6a:	f100 0101 	add.w	r1, r0, #1
    ad6e:	d2f3      	bcs.n	ad58 <now()+0x20>
    ad70:	6028      	str	r0, [r5, #0]
    ad72:	6032      	str	r2, [r6, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    ad74:	4f14      	ldr	r7, [pc, #80]	; (adc8 <now()+0x90>)
    ad76:	683b      	ldr	r3, [r7, #0]
    ad78:	4298      	cmp	r0, r3
    ad7a:	d30f      	bcc.n	ad9c <now()+0x64>
    if (getTimePtr != 0) {
    ad7c:	4b13      	ldr	r3, [pc, #76]	; (adcc <now()+0x94>)
    ad7e:	681b      	ldr	r3, [r3, #0]
    ad80:	b163      	cbz	r3, ad9c <now()+0x64>
      time_t t = getTimePtr();
    ad82:	4798      	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    ad84:	4b12      	ldr	r3, [pc, #72]	; (add0 <now()+0x98>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    ad86:	b958      	cbnz	r0, ada0 <now()+0x68>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    ad88:	4912      	ldr	r1, [pc, #72]	; (add4 <now()+0x9c>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    ad8a:	681a      	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    ad8c:	780b      	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    ad8e:	6828      	ldr	r0, [r5, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    ad90:	3300      	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    ad92:	4402      	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    ad94:	bf18      	it	ne
    ad96:	2301      	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    ad98:	603a      	str	r2, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    ad9a:	700b      	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    ad9c:	b003      	add	sp, #12
    ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ada0:	6822      	ldr	r2, [r4, #0]
    ada2:	9201      	str	r2, [sp, #4]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    ada4:	681b      	ldr	r3, [r3, #0]
  Status = timeSet;
    ada6:	4a0b      	ldr	r2, [pc, #44]	; (add4 <now()+0x9c>)
	return ret;
    ada8:	9c01      	ldr	r4, [sp, #4]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    adaa:	6028      	str	r0, [r5, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    adac:	4403      	add	r3, r0
  Status = timeSet;
    adae:	2102      	movs	r1, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    adb0:	6034      	str	r4, [r6, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    adb2:	603b      	str	r3, [r7, #0]
  Status = timeSet;
    adb4:	7011      	strb	r1, [r2, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
      }
    }
  }  
  return (time_t)sysTime;
}
    adb6:	b003      	add	sp, #12
    adb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adba:	bf00      	nop
    adbc:	1fff6804 	.word	0x1fff6804
    adc0:	1fff6684 	.word	0x1fff6684
    adc4:	1fff6678 	.word	0x1fff6678
    adc8:	1fff6688 	.word	0x1fff6688
    adcc:	1fff6680 	.word	0x1fff6680
    add0:	1fff498c 	.word	0x1fff498c
    add4:	1fff667c 	.word	0x1fff667c

0000add8 <setTime(long)>:

void setTime(time_t t) { 
    add8:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    adda:	4b0a      	ldr	r3, [pc, #40]	; (ae04 <setTime(long)+0x2c>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    addc:	4a0a      	ldr	r2, [pc, #40]	; (ae08 <setTime(long)+0x30>)
    adde:	681b      	ldr	r3, [r3, #0]
    ade0:	6812      	ldr	r2, [r2, #0]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    ade2:	4e0a      	ldr	r6, [pc, #40]	; (ae0c <setTime(long)+0x34>)
  nextSyncTime = (uint32_t)t + syncInterval;
    ade4:	4d0a      	ldr	r5, [pc, #40]	; (ae10 <setTime(long)+0x38>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    ade6:	490b      	ldr	r1, [pc, #44]	; (ae14 <setTime(long)+0x3c>)
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    ade8:	6030      	str	r0, [r6, #0]
    }
  }  
  return (time_t)sysTime;
}

void setTime(time_t t) { 
    adea:	b083      	sub	sp, #12
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    adec:	4410      	add	r0, r2
    adee:	9301      	str	r3, [sp, #4]
	return ret;
    adf0:	9c01      	ldr	r4, [sp, #4]
  Status = timeSet;
    adf2:	4b09      	ldr	r3, [pc, #36]	; (ae18 <setTime(long)+0x40>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    adf4:	6028      	str	r0, [r5, #0]
  Status = timeSet;
    adf6:	2202      	movs	r2, #2
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    adf8:	600c      	str	r4, [r1, #0]
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    adfa:	701a      	strb	r2, [r3, #0]
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 
    adfc:	b003      	add	sp, #12
    adfe:	bc70      	pop	{r4, r5, r6}
    ae00:	4770      	bx	lr
    ae02:	bf00      	nop
    ae04:	1fff6804 	.word	0x1fff6804
    ae08:	1fff498c 	.word	0x1fff498c
    ae0c:	1fff6678 	.word	0x1fff6678
    ae10:	1fff6688 	.word	0x1fff6688
    ae14:	1fff6684 	.word	0x1fff6684
    ae18:	1fff667c 	.word	0x1fff667c

0000ae1c <setTime(int, int, int, int, int, int)>:

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
    ae1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae20:	b083      	sub	sp, #12
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    ae22:	4f86      	ldr	r7, [pc, #536]	; (b03c <setTime(int, int, int, int, int, int)+0x220>)
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
    ae24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  if( yr > 99)
      yr = yr - 1970;
  else
      yr += 30;  
  tm.Year = yr;
  tm.Month = mnth;
    ae26:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
} 

void setTime(int hr,int min,int sec,int dy, int mnth, int yr){
 // year can be given as full four digit year or two digts (2010 or 10 for 2010);  
 //it is converted to years since 1970
  if( yr > 99)
    ae2a:	2c63      	cmp	r4, #99	; 0x63
      yr = yr - 1970;
    ae2c:	bfcc      	ite	gt
    ae2e:	f2a4 7cb2 	subwgt	ip, r4, #1970	; 0x7b2
  else
      yr += 30;  
    ae32:	f104 0c1e 	addle.w	ip, r4, #30
  tm.Year = yr;
    ae36:	4c82      	ldr	r4, [pc, #520]	; (b040 <setTime(int, int, int, int, int, int)+0x224>)
    ae38:	f884 c006 	strb.w	ip, [r4, #6]
    ae3c:	fa5f fc8c 	uxtb.w	ip, ip
  tm.Month = mnth;
    ae40:	7165      	strb	r5, [r4, #5]
  tm.Day = dy;
    ae42:	7123      	strb	r3, [r4, #4]
  tm.Hour = hr;
    ae44:	70a0      	strb	r0, [r4, #2]
  tm.Minute = min;
    ae46:	7061      	strb	r1, [r4, #1]
  tm.Second = sec;
    ae48:	7022      	strb	r2, [r4, #0]
  
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
    ae4a:	fb07 f70c 	mul.w	r7, r7, ip
  for (i = 0; i < tm.Year; i++) {
    ae4e:	f1bc 0f00 	cmp.w	ip, #0
    ae52:	d021      	beq.n	ae98 <setTime(int, int, int, int, int, int)+0x7c>
    ae54:	f20c 7ab2 	addw	sl, ip, #1970	; 0x7b2
    ae58:	f240 74b3 	movw	r4, #1971	; 0x7b3
    if (LEAP_YEAR(i)) {
    ae5c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; b044 <setTime(int, int, int, int, int, int)+0x228>
    ae60:	f04f 0864 	mov.w	r8, #100	; 0x64
    ae64:	f44f 7bc8 	mov.w	fp, #400	; 0x190
    ae68:	e00d      	b.n	ae86 <setTime(int, int, int, int, int, int)+0x6a>
    ae6a:	f014 0f03 	tst.w	r4, #3
    ae6e:	d109      	bne.n	ae84 <setTime(int, int, int, int, int, int)+0x68>
    ae70:	ebc5 15ee 	rsb	r5, r5, lr, asr #7
    ae74:	fb0b 4515 	mls	r5, fp, r5, r4
    ae78:	b906      	cbnz	r6, ae7c <setTime(int, int, int, int, int, int)+0x60>
    ae7a:	b91d      	cbnz	r5, ae84 <setTime(int, int, int, int, int, int)+0x68>
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    ae7c:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
    ae80:	f507 77c0 	add.w	r7, r7, #384	; 0x180
    ae84:	3401      	adds	r4, #1
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    if (LEAP_YEAR(i)) {
    ae86:	fb89 5e04 	smull	r5, lr, r9, r4
    ae8a:	17e5      	asrs	r5, r4, #31
    ae8c:	ebc5 166e 	rsb	r6, r5, lr, asr #5
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    ae90:	4554      	cmp	r4, sl
    if (LEAP_YEAR(i)) {
    ae92:	fb08 4616 	mls	r6, r8, r6, r4
  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= tm.Year*(SECS_PER_DAY * 365);
  for (i = 0; i < tm.Year; i++) {
    ae96:	d1e8      	bne.n	ae6a <setTime(int, int, int, int, int, int)+0x4e>
    ae98:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    ae9c:	2c01      	cmp	r4, #1
    ae9e:	dd5e      	ble.n	af5e <setTime(int, int, int, int, int, int)+0x142>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    aea0:	4e68      	ldr	r6, [pc, #416]	; (b044 <setTime(int, int, int, int, int, int)+0x228>)
    aea2:	f20c 7cb2 	addw	ip, ip, #1970	; 0x7b2
    aea6:	fb86 560c 	smull	r5, r6, r6, ip
    aeaa:	ea4f 75ec 	mov.w	r5, ip, asr #31
    aeae:	ebc5 1ee6 	rsb	lr, r5, r6, asr #7
    aeb2:	f44f 78c8 	mov.w	r8, #400	; 0x190
    aeb6:	ebc5 1666 	rsb	r6, r5, r6, asr #5
    aeba:	fb08 ce1e 	mls	lr, r8, lr, ip
    aebe:	2564      	movs	r5, #100	; 0x64
    aec0:	fb05 c616 	mls	r6, r5, r6, ip
    aec4:	f00c 0503 	and.w	r5, ip, #3
    aec8:	f1be 0f00 	cmp.w	lr, #0
    aecc:	d06b      	beq.n	afa6 <setTime(int, int, int, int, int, int)+0x18a>
    aece:	b116      	cbz	r6, aed6 <setTime(int, int, int, int, int, int)+0xba>
    aed0:	2d00      	cmp	r5, #0
    aed2:	f000 809c 	beq.w	b00e <setTime(int, int, int, int, int, int)+0x1f2>
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aed6:	f507 1523 	add.w	r5, r7, #2670592	; 0x28c000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aeda:	2c02      	cmp	r4, #2
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aedc:	f505 55f4 	add.w	r5, r5, #7808	; 0x1e80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aee0:	d07a      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aee2:	f507 059b 	add.w	r5, r7, #5079040	; 0x4d8000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aee6:	2c03      	cmp	r4, #3
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aee8:	f505 4591 	add.w	r5, r5, #18560	; 0x4880
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aeec:	d074      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aeee:	f507 05ed 	add.w	r5, r7, #7766016	; 0x768000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aef2:	2c04      	cmp	r4, #4
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aef4:	f505 551c 	add.w	r5, r5, #9984	; 0x2700
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aef8:	d06e      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    aefa:	f507 051e 	add.w	r5, r7, #10354688	; 0x9e0000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aefe:	2c05      	cmp	r4, #5
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af00:	f505 5550 	add.w	r5, r5, #13312	; 0x3400
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af04:	d068      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af06:	f507 0547 	add.w	r5, r7, #13041664	; 0xc70000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af0a:	2c06      	cmp	r4, #6
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af0c:	f505 5594 	add.w	r5, r5, #4736	; 0x1280
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af10:	d062      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af12:	4d4d      	ldr	r5, [pc, #308]	; (b048 <setTime(int, int, int, int, int, int)+0x22c>)
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af14:	2c07      	cmp	r4, #7
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af16:	443d      	add	r5, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af18:	d05e      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af1a:	f107 758b 	add.w	r5, r7, #18219008	; 0x1160000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af1e:	2c08      	cmp	r4, #8
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af20:	f505 35bf 	add.w	r5, r5, #97792	; 0x17e00
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af24:	d058      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af26:	f107 75a0 	add.w	r5, r7, #20971520	; 0x1400000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af2a:	2c09      	cmp	r4, #9
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af2c:	f505 45b9 	add.w	r5, r5, #23680	; 0x5c80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af30:	d052      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af32:	4d46      	ldr	r5, [pc, #280]	; (b04c <setTime(int, int, int, int, int, int)+0x230>)
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af34:	2c0a      	cmp	r4, #10
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af36:	443d      	add	r5, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af38:	d04e      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af3a:	f107 75c8 	add.w	r5, r7, #26214400	; 0x1900000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af3e:	2c0b      	cmp	r4, #11
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af40:	f505 4548 	add.w	r5, r5, #51200	; 0xc800
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af44:	d048      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af46:	f107 75dc 	add.w	r5, r7, #28835840	; 0x1b80000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af4a:	2c0c      	cmp	r4, #12
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af4c:	f505 45aa 	add.w	r5, r5, #21760	; 0x5500
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    af50:	d042      	beq.n	afd8 <setTime(int, int, int, int, int, int)+0x1bc>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    af52:	f107 77f0 	add.w	r7, r7, #31457280	; 0x1e00000
    af56:	f507 3799 	add.w	r7, r7, #78336	; 0x13200
    af5a:	f507 77c0 	add.w	r7, r7, #384	; 0x180
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
    af5e:	b2c9      	uxtb	r1, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    af60:	4c3b      	ldr	r4, [pc, #236]	; (b050 <setTime(int, int, int, int, int, int)+0x234>)
    af62:	4e3c      	ldr	r6, [pc, #240]	; (b054 <setTime(int, int, int, int, int, int)+0x238>)
    af64:	6824      	ldr	r4, [r4, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    af66:	4d3c      	ldr	r5, [pc, #240]	; (b058 <setTime(int, int, int, int, int, int)+0x23c>)
    af68:	9401      	str	r4, [sp, #4]
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
    af6a:	b2d2      	uxtb	r2, r2
    af6c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    af70:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    af74:	b2c0      	uxtb	r0, r0
    af76:	b2db      	uxtb	r3, r3
    af78:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    af7c:	fb02 1100 	mla	r1, r2, r0, r1
    af80:	1e5c      	subs	r4, r3, #1
    af82:	fb06 1304 	mla	r3, r6, r4, r1
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    af86:	682d      	ldr	r5, [r5, #0]
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    af88:	4a34      	ldr	r2, [pc, #208]	; (b05c <setTime(int, int, int, int, int, int)+0x240>)
  nextSyncTime = (uint32_t)t + syncInterval;
    af8a:	4c35      	ldr	r4, [pc, #212]	; (b060 <setTime(int, int, int, int, int, int)+0x244>)
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    af8c:	4935      	ldr	r1, [pc, #212]	; (b064 <setTime(int, int, int, int, int, int)+0x248>)
	return ret;
    af8e:	9801      	ldr	r0, [sp, #4]
    af90:	6008      	str	r0, [r1, #0]
    }
  }
  seconds+= (tm.Day-1) * SECS_PER_DAY;
  seconds+= tm.Hour * SECS_PER_HOUR;
  seconds+= tm.Minute * SECS_PER_MIN;
  seconds+= tm.Second;
    af92:	441f      	add	r7, r3
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
    af94:	4b34      	ldr	r3, [pc, #208]	; (b068 <setTime(int, int, int, int, int, int)+0x24c>)
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    af96:	6017      	str	r7, [r2, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
    af98:	442f      	add	r7, r5
  Status = timeSet;
    af9a:	2202      	movs	r2, #2
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    af9c:	6027      	str	r7, [r4, #0]
  Status = timeSet;
    af9e:	701a      	strb	r2, [r3, #0]
  tm.Day = dy;
  tm.Hour = hr;
  tm.Minute = min;
  tm.Second = sec;
  setTime(makeTime(tm));
}
    afa0:	b003      	add	sp, #12
    afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afa6:	b9ce      	cbnz	r6, afdc <setTime(int, int, int, int, int, int)+0x1c0>
    afa8:	2d00      	cmp	r5, #0
    afaa:	d194      	bne.n	aed6 <setTime(int, int, int, int, int, int)+0xba>
    afac:	4e2f      	ldr	r6, [pc, #188]	; (b06c <setTime(int, int, int, int, int, int)+0x250>)
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    afae:	f8df c0a4 	ldr.w	ip, [pc, #164]	; b054 <setTime(int, int, int, int, int, int)+0x238>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    afb2:	2501      	movs	r5, #1
    afb4:	2d02      	cmp	r5, #2
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    afb6:	bf14      	ite	ne
    afb8:	f896 e000 	ldrbne.w	lr, [r6]
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    afbc:	f507 1718 	addeq.w	r7, r7, #2490368	; 0x260000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    afc0:	f105 0501 	add.w	r5, r5, #1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    afc4:	bf14      	ite	ne
    afc6:	fb0c 770e 	mlane	r7, ip, lr, r7
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    afca:	f507 576e 	addeq.w	r7, r7, #15232	; 0x3b80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    afce:	42ac      	cmp	r4, r5
    afd0:	f106 0601 	add.w	r6, r6, #1
    afd4:	d1ee      	bne.n	afb4 <setTime(int, int, int, int, int, int)+0x198>
    afd6:	e7c2      	b.n	af5e <setTime(int, int, int, int, int, int)+0x142>
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    afd8:	462f      	mov	r7, r5
    afda:	e7c0      	b.n	af5e <setTime(int, int, int, int, int, int)+0x142>
    afdc:	2d00      	cmp	r5, #0
    afde:	f47f af7a 	bne.w	aed6 <setTime(int, int, int, int, int, int)+0xba>
    afe2:	4e22      	ldr	r6, [pc, #136]	; (b06c <setTime(int, int, int, int, int, int)+0x250>)
    afe4:	f8df c06c 	ldr.w	ip, [pc, #108]	; b054 <setTime(int, int, int, int, int, int)+0x238>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    afe8:	2501      	movs	r5, #1
    afea:	2d02      	cmp	r5, #2
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    afec:	bf14      	ite	ne
    afee:	f896 e000 	ldrbne.w	lr, [r6]
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    aff2:	f507 1718 	addeq.w	r7, r7, #2490368	; 0x260000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    aff6:	f105 0501 	add.w	r5, r5, #1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    affa:	bf0c      	ite	eq
    affc:	f507 576e 	addeq.w	r7, r7, #15232	; 0x3b80
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    b000:	fb0c 770e 	mlane	r7, ip, lr, r7
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    b004:	42a5      	cmp	r5, r4
    b006:	f106 0601 	add.w	r6, r6, #1
    b00a:	d1ee      	bne.n	afea <setTime(int, int, int, int, int, int)+0x1ce>
    b00c:	e7a7      	b.n	af5e <setTime(int, int, int, int, int, int)+0x142>
    b00e:	4e17      	ldr	r6, [pc, #92]	; (b06c <setTime(int, int, int, int, int, int)+0x250>)
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    b010:	f8df c040 	ldr.w	ip, [pc, #64]	; b054 <setTime(int, int, int, int, int, int)+0x238>
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
    b014:	2501      	movs	r5, #1
    b016:	2d02      	cmp	r5, #2
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    b018:	bf14      	ite	ne
    b01a:	f896 e000 	ldrbne.w	lr, [r6]
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    b01e:	f507 1718 	addeq.w	r7, r7, #2490368	; 0x260000
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    b022:	f105 0501 	add.w	r5, r5, #1
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
    b026:	bf14      	ite	ne
    b028:	fb0c 770e 	mlane	r7, ip, lr, r7
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    if ( (i == 2) && LEAP_YEAR(tm.Year)) { 
      seconds += SECS_PER_DAY * 29;
    b02c:	f507 576e 	addeq.w	r7, r7, #15232	; 0x3b80
      seconds +=  SECS_PER_DAY;   // add extra days for leap years
    }
  }
  
  // add days for this year, months start from 1
  for (i = 1; i < tm.Month; i++) {
    b030:	42a5      	cmp	r5, r4
    b032:	f106 0601 	add.w	r6, r6, #1
    b036:	d1ee      	bne.n	b016 <setTime(int, int, int, int, int, int)+0x1fa>
    b038:	e791      	b.n	af5e <setTime(int, int, int, int, int, int)+0x142>
    b03a:	bf00      	nop
    b03c:	01e13380 	.word	0x01e13380
    b040:	1fff6670 	.word	0x1fff6670
    b044:	51eb851f 	.word	0x51eb851f
    b048:	00ee9f80 	.word	0x00ee9f80
    b04c:	0167e980 	.word	0x0167e980
    b050:	1fff6804 	.word	0x1fff6804
    b054:	00015180 	.word	0x00015180
    b058:	1fff498c 	.word	0x1fff498c
    b05c:	1fff6678 	.word	0x1fff6678
    b060:	1fff6688 	.word	0x1fff6688
    b064:	1fff6684 	.word	0x1fff6684
    b068:	1fff667c 	.word	0x1fff667c
    b06c:	000175d0 	.word	0x000175d0

0000b070 <adjustTime(long)>:
  tm.Second = sec;
  setTime(makeTime(tm));
}

void adjustTime(long adjustment) {
  sysTime += adjustment;
    b070:	4a02      	ldr	r2, [pc, #8]	; (b07c <adjustTime(long)+0xc>)
    b072:	6813      	ldr	r3, [r2, #0]
    b074:	4418      	add	r0, r3
    b076:	6010      	str	r0, [r2, #0]
    b078:	4770      	bx	lr
    b07a:	bf00      	nop
    b07c:	1fff6678 	.word	0x1fff6678

0000b080 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    b080:	4903      	ldr	r1, [pc, #12]	; (b090 <setSyncProvider(long (*)())+0x10>)
    b082:	4a04      	ldr	r2, [pc, #16]	; (b094 <setSyncProvider(long (*)())+0x14>)
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    b084:	4b04      	ldr	r3, [pc, #16]	; (b098 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    b086:	6809      	ldr	r1, [r1, #0]
    b088:	6011      	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    b08a:	6018      	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    b08c:	f7ff be54 	b.w	ad38 <now()>
    b090:	1fff6678 	.word	0x1fff6678
    b094:	1fff6688 	.word	0x1fff6688
    b098:	1fff6680 	.word	0x1fff6680

0000b09c <AlarmClass::updateNextTrigger() [clone .part.0]>:

//**************************************************************
//* Private Methods


void AlarmClass::updateNextTrigger()
    b09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0a0:	4604      	mov	r4, r0
{
  if (Mode.isEnabled) {
    time_t time = now();
    b0a2:	f7ff fe49 	bl	ad38 <now()>
    if (dtIsAlarm(Mode.alarmType) && nextTrigger <= time) {
    b0a6:	7b23      	ldrb	r3, [r4, #12]
    b0a8:	f103 020e 	add.w	r2, r3, #14
    b0ac:	f002 020f 	and.w	r2, r2, #15
    b0b0:	2a02      	cmp	r2, #2


void AlarmClass::updateNextTrigger()
{
  if (Mode.isEnabled) {
    time_t time = now();
    b0b2:	4605      	mov	r5, r0
    if (dtIsAlarm(Mode.alarmType) && nextTrigger <= time) {
    b0b4:	d802      	bhi.n	b0bc <AlarmClass::updateNextTrigger() [clone .part.0]+0x20>
    b0b6:	68a2      	ldr	r2, [r4, #8]
    b0b8:	4290      	cmp	r0, r2
    b0ba:	da08      	bge.n	b0ce <AlarmClass::updateNextTrigger() [clone .part.0]+0x32>
      } else {
        // its not a recognized alarm type - this should not happen
        Mode.isEnabled = false;  // Disable the alarm
      }
    }
    if (Mode.alarmType == dtTimer) {
    b0bc:	f003 030f 	and.w	r3, r3, #15
    b0c0:	2b01      	cmp	r3, #1
    b0c2:	d102      	bne.n	b0ca <AlarmClass::updateNextTrigger() [clone .part.0]+0x2e>
      // its a timer
      nextTrigger = time + value;  // add the value to previous time (this ensures delay always at least Value seconds)
    b0c4:	6860      	ldr	r0, [r4, #4]
    b0c6:	4428      	add	r0, r5
    b0c8:	60a0      	str	r0, [r4, #8]
    b0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
  if (Mode.isEnabled) {
    time_t time = now();
    if (dtIsAlarm(Mode.alarmType) && nextTrigger <= time) {
      // update alarm if next trigger is not yet in the future
      if (Mode.alarmType == dtExplicitAlarm) {
    b0ce:	f003 020f 	and.w	r2, r3, #15
    b0d2:	2a02      	cmp	r2, #2
    b0d4:	d008      	beq.n	b0e8 <AlarmClass::updateNextTrigger() [clone .part.0]+0x4c>
        // is the value a specific date and time in the future
        nextTrigger = value;  // yes, trigger on this value
      } else if (Mode.alarmType == dtDailyAlarm) {
    b0d6:	2a03      	cmp	r2, #3
    b0d8:	d00a      	beq.n	b0f0 <AlarmClass::updateNextTrigger() [clone .part.0]+0x54>
          nextTrigger = value + nextMidnight(time);
        } else {
          // set the date to today and add the time given in value
          nextTrigger = value + previousMidnight(time);
        }
      } else if (Mode.alarmType == dtWeeklyAlarm) {
    b0da:	2a04      	cmp	r2, #4
    b0dc:	d024      	beq.n	b128 <AlarmClass::updateNextTrigger() [clone .part.0]+0x8c>
          // set the date to this week today and add the time given in value
          nextTrigger = value + previousSunday(time);
        }
      } else {
        // its not a recognized alarm type - this should not happen
        Mode.isEnabled = false;  // Disable the alarm
    b0de:	f36f 1304 	bfc	r3, #4, #1
    b0e2:	7323      	strb	r3, [r4, #12]
    b0e4:	b2db      	uxtb	r3, r3
    b0e6:	e7e9      	b.n	b0bc <AlarmClass::updateNextTrigger() [clone .part.0]+0x20>
    time_t time = now();
    if (dtIsAlarm(Mode.alarmType) && nextTrigger <= time) {
      // update alarm if next trigger is not yet in the future
      if (Mode.alarmType == dtExplicitAlarm) {
        // is the value a specific date and time in the future
        nextTrigger = value;  // yes, trigger on this value
    b0e8:	6863      	ldr	r3, [r4, #4]
    b0ea:	60a3      	str	r3, [r4, #8]
    b0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      } else if (Mode.alarmType == dtDailyAlarm) {
        //if this is a daily alarm
        if (value + previousMidnight(now()) <= time) {
    b0f0:	6866      	ldr	r6, [r4, #4]
    b0f2:	f7ff fe21 	bl	ad38 <now()>
    b0f6:	4a46      	ldr	r2, [pc, #280]	; (b210 <AlarmClass::updateNextTrigger() [clone .part.0]+0x174>)
    b0f8:	4946      	ldr	r1, [pc, #280]	; (b214 <AlarmClass::updateNextTrigger() [clone .part.0]+0x178>)
    b0fa:	fb82 7300 	smull	r7, r3, r2, r0
    b0fe:	4403      	add	r3, r0
    b100:	17c0      	asrs	r0, r0, #31
    b102:	ebc0 4023 	rsb	r0, r0, r3, asr #16
    b106:	fb01 6300 	mla	r3, r1, r0, r6
    b10a:	429d      	cmp	r5, r3
    b10c:	db59      	blt.n	b1c2 <AlarmClass::updateNextTrigger() [clone .part.0]+0x126>
          // if time has passed then set for tomorrow
          nextTrigger = value + nextMidnight(time);
    b10e:	fb82 2305 	smull	r2, r3, r2, r5
    b112:	442b      	add	r3, r5
    b114:	17ea      	asrs	r2, r5, #31
    b116:	ebc2 4223 	rsb	r2, r2, r3, asr #16
    b11a:	6860      	ldr	r0, [r4, #4]
    b11c:	7b23      	ldrb	r3, [r4, #12]
    b11e:	fb02 1201 	mla	r2, r2, r1, r1
    b122:	4402      	add	r2, r0
    b124:	60a2      	str	r2, [r4, #8]
    b126:	e7c9      	b.n	b0bc <AlarmClass::updateNextTrigger() [clone .part.0]+0x20>
          // set the date to today and add the time given in value
          nextTrigger = value + previousMidnight(time);
        }
      } else if (Mode.alarmType == dtWeeklyAlarm) {
        // if this is a weekly alarm
        if ((value + previousSunday(now())) <= time) {
    b128:	f8d4 8004 	ldr.w	r8, [r4, #4]
    b12c:	f7ff fe04 	bl	ad38 <now()>
    b130:	4681      	mov	r9, r0
    b132:	f7ff fe01 	bl	ad38 <now()>
    b136:	4682      	mov	sl, r0
    b138:	f7ff fdfe 	bl	ad38 <now()>
    b13c:	4a34      	ldr	r2, [pc, #208]	; (b210 <AlarmClass::updateNextTrigger() [clone .part.0]+0x174>)
    b13e:	f8df c0d8 	ldr.w	ip, [pc, #216]	; b218 <AlarmClass::updateNextTrigger() [clone .part.0]+0x17c>
    b142:	f8df e0d0 	ldr.w	lr, [pc, #208]	; b214 <AlarmClass::updateNextTrigger() [clone .part.0]+0x178>
    b146:	fb82 1300 	smull	r1, r3, r2, r0
    b14a:	4403      	add	r3, r0
    b14c:	17c0      	asrs	r0, r0, #31
    b14e:	ebc0 4323 	rsb	r3, r0, r3, asr #16
    b152:	3304      	adds	r3, #4
    b154:	fb8a 0102 	smull	r0, r1, sl, r2
    b158:	4451      	add	r1, sl
    b15a:	fb83 670c 	smull	r6, r7, r3, ip
    b15e:	ea4f 70ea 	mov.w	r0, sl, asr #31
    b162:	19de      	adds	r6, r3, r7
    b164:	ebc0 4021 	rsb	r0, r0, r1, asr #16
    b168:	17d9      	asrs	r1, r3, #31
    b16a:	ebc1 01a6 	rsb	r1, r1, r6, asr #2
    b16e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    b172:	fb0e aa10 	mls	sl, lr, r0, sl
    b176:	1a5b      	subs	r3, r3, r1
    b178:	fb0e a303 	mla	r3, lr, r3, sl
    b17c:	ebc3 0309 	rsb	r3, r3, r9
    b180:	4498      	add	r8, r3
    b182:	4545      	cmp	r5, r8
    b184:	db29      	blt.n	b1da <AlarmClass::updateNextTrigger() [clone .part.0]+0x13e>
          // if day has passed then set for the next week.
          nextTrigger = value + nextSunday(time);
    b186:	fb82 3105 	smull	r3, r1, r2, r5
    b18a:	4429      	add	r1, r5
    b18c:	17eb      	asrs	r3, r5, #31
    b18e:	ebc3 4121 	rsb	r1, r3, r1, asr #16
    b192:	1d0b      	adds	r3, r1, #4
    b194:	fb83 670c 	smull	r6, r7, r3, ip
    b198:	19d8      	adds	r0, r3, r7
    b19a:	17da      	asrs	r2, r3, #31
    b19c:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
    b1a0:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
    b1a4:	1a1b      	subs	r3, r3, r0
    b1a6:	fb0e 5211 	mls	r2, lr, r1, r5
    b1aa:	fb0e 2203 	mla	r2, lr, r3, r2
    b1ae:	1aaa      	subs	r2, r5, r2
    b1b0:	f502 2213 	add.w	r2, r2, #602112	; 0x93000
    b1b4:	6861      	ldr	r1, [r4, #4]
    b1b6:	7b23      	ldrb	r3, [r4, #12]
    b1b8:	f502 6228 	add.w	r2, r2, #2688	; 0xa80
    b1bc:	440a      	add	r2, r1
    b1be:	60a2      	str	r2, [r4, #8]
    b1c0:	e77c      	b.n	b0bc <AlarmClass::updateNextTrigger() [clone .part.0]+0x20>
        if (value + previousMidnight(now()) <= time) {
          // if time has passed then set for tomorrow
          nextTrigger = value + nextMidnight(time);
        } else {
          // set the date to today and add the time given in value
          nextTrigger = value + previousMidnight(time);
    b1c2:	fb82 3205 	smull	r3, r2, r2, r5
    b1c6:	442a      	add	r2, r5
    b1c8:	17e8      	asrs	r0, r5, #31
    b1ca:	6866      	ldr	r6, [r4, #4]
    b1cc:	7b23      	ldrb	r3, [r4, #12]
    b1ce:	ebc0 4222 	rsb	r2, r0, r2, asr #16
    b1d2:	fb01 6202 	mla	r2, r1, r2, r6
    b1d6:	60a2      	str	r2, [r4, #8]
    b1d8:	e770      	b.n	b0bc <AlarmClass::updateNextTrigger() [clone .part.0]+0x20>
        if ((value + previousSunday(now())) <= time) {
          // if day has passed then set for the next week.
          nextTrigger = value + nextSunday(time);
        } else {
          // set the date to this week today and add the time given in value
          nextTrigger = value + previousSunday(time);
    b1da:	fb82 2305 	smull	r2, r3, r2, r5
    b1de:	442b      	add	r3, r5
    b1e0:	17ea      	asrs	r2, r5, #31
    b1e2:	ebc2 4323 	rsb	r3, r2, r3, asr #16
    b1e6:	1d1a      	adds	r2, r3, #4
    b1e8:	fb82 010c 	smull	r0, r1, r2, ip
    b1ec:	1850      	adds	r0, r2, r1
    b1ee:	17d1      	asrs	r1, r2, #31
    b1f0:	ebc1 01a0 	rsb	r1, r1, r0, asr #2
    b1f4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    b1f8:	fb0e 5313 	mls	r3, lr, r3, r5
    b1fc:	1a52      	subs	r2, r2, r1
    b1fe:	fb0e 3202 	mla	r2, lr, r2, r3
    b202:	6861      	ldr	r1, [r4, #4]
    b204:	7b23      	ldrb	r3, [r4, #12]
    b206:	1aaa      	subs	r2, r5, r2
    b208:	440a      	add	r2, r1
    b20a:	60a2      	str	r2, [r4, #8]
    b20c:	e756      	b.n	b0bc <AlarmClass::updateNextTrigger() [clone .part.0]+0x20>
    b20e:	bf00      	nop
    b210:	c22e4507 	.word	0xc22e4507
    b214:	00015180 	.word	0x00015180
    b218:	92492493 	.word	0x92492493

0000b21c <TimeAlarmsClass::TimeAlarmsClass()>:
}

//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
    b21c:	b5f0      	push	{r4, r5, r6, r7, lr}
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    b21e:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
    b222:	f890 e01c 	ldrb.w	lr, [r0, #28]
    b226:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
    b22a:	f890 603c 	ldrb.w	r6, [r0, #60]	; 0x3c
    b22e:	f890 504c 	ldrb.w	r5, [r0, #76]	; 0x4c
    b232:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    b236:	7b02      	ldrb	r2, [r0, #12]
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b238:	2300      	movs	r3, #0
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    b23a:	f00e 0ecf 	and.w	lr, lr, #207	; 0xcf
    b23e:	f007 07cf 	and.w	r7, r7, #207	; 0xcf
    b242:	f006 06cf 	and.w	r6, r6, #207	; 0xcf
    b246:	f005 05cf 	and.w	r5, r5, #207	; 0xcf
    b24a:	f004 04cf 	and.w	r4, r4, #207	; 0xcf
    b24e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    b252:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    b256:	f363 0703 	bfi	r7, r3, #0, #4
    b25a:	f363 0603 	bfi	r6, r3, #0, #4
    b25e:	f363 0503 	bfi	r5, r3, #0, #4
    b262:	f363 0403 	bfi	r4, r3, #0, #4
    b266:	f363 0103 	bfi	r1, r3, #0, #4
    b26a:	f36f 0203 	bfc	r2, #0, #4
    b26e:	f363 0e03 	bfi	lr, r3, #0, #4
    b272:	f880 702c 	strb.w	r7, [r0, #44]	; 0x2c
    b276:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
    b27a:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
    b27e:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
    b282:	f880 106c 	strb.w	r1, [r0, #108]	; 0x6c
  value = nextTrigger = 0;
    b286:	6083      	str	r3, [r0, #8]
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    b288:	f880 e01c 	strb.w	lr, [r0, #28]
  value = nextTrigger = 0;
    b28c:	6043      	str	r3, [r0, #4]
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b28e:	6003      	str	r3, [r0, #0]

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b290:	6183      	str	r3, [r0, #24]
    b292:	6143      	str	r3, [r0, #20]
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b294:	6103      	str	r3, [r0, #16]

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b296:	6283      	str	r3, [r0, #40]	; 0x28
    b298:	6243      	str	r3, [r0, #36]	; 0x24
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b29a:	6203      	str	r3, [r0, #32]

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b29c:	6383      	str	r3, [r0, #56]	; 0x38
    b29e:	6343      	str	r3, [r0, #52]	; 0x34
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b2a0:	6303      	str	r3, [r0, #48]	; 0x30

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b2a2:	6483      	str	r3, [r0, #72]	; 0x48
    b2a4:	6443      	str	r3, [r0, #68]	; 0x44
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b2a6:	6403      	str	r3, [r0, #64]	; 0x40

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b2a8:	6583      	str	r3, [r0, #88]	; 0x58
    b2aa:	6543      	str	r3, [r0, #84]	; 0x54
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b2ac:	6503      	str	r3, [r0, #80]	; 0x50
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    b2ae:	7302      	strb	r2, [r0, #12]
//**************************************************************
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
    b2b0:	f890 707c 	ldrb.w	r7, [r0, #124]	; 0x7c
    b2b4:	f890 608c 	ldrb.w	r6, [r0, #140]	; 0x8c
    b2b8:	f890 509c 	ldrb.w	r5, [r0, #156]	; 0x9c
    b2bc:	f890 40ac 	ldrb.w	r4, [r0, #172]	; 0xac
    b2c0:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b2c4:	6683      	str	r3, [r0, #104]	; 0x68
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    b2c6:	f007 07cf 	and.w	r7, r7, #207	; 0xcf
    b2ca:	f363 0703 	bfi	r7, r3, #0, #4
    b2ce:	f006 06cf 	and.w	r6, r6, #207	; 0xcf
    b2d2:	f005 05cf 	and.w	r5, r5, #207	; 0xcf
    b2d6:	f004 04cf 	and.w	r4, r4, #207	; 0xcf
    b2da:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b2de:	b2d2      	uxtb	r2, r2
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    b2e0:	f363 0603 	bfi	r6, r3, #0, #4
    b2e4:	f363 0503 	bfi	r5, r3, #0, #4
    b2e8:	f363 0403 	bfi	r4, r3, #0, #4
    b2ec:	f363 0103 	bfi	r1, r3, #0, #4
    b2f0:	f880 707c 	strb.w	r7, [r0, #124]	; 0x7c
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b2f4:	0717      	lsls	r7, r2, #28

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b2f6:	6643      	str	r3, [r0, #100]	; 0x64
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b2f8:	6603      	str	r3, [r0, #96]	; 0x60

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b2fa:	6783      	str	r3, [r0, #120]	; 0x78
    b2fc:	6743      	str	r3, [r0, #116]	; 0x74
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b2fe:	6703      	str	r3, [r0, #112]	; 0x70

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b300:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    b304:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b308:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b30c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    b310:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b314:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b318:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    b31c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b320:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
  value = nextTrigger = 0;
    b324:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
    b328:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  onTickHandler = NULL;  // prevent a callback until this pointer is explicitly set
    b32c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
//**************************************************************
//* Time Alarms Public Methods

TimeAlarmsClass::TimeAlarmsClass()
{
  isServicing = false;
    b330:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
//* Alarm Class Constructor

AlarmClass::AlarmClass()
{
  Mode.isEnabled = Mode.isOneShot = 0;
  Mode.alarmType = dtNotAllocated;
    b334:	f880 608c 	strb.w	r6, [r0, #140]	; 0x8c
    b338:	f880 509c 	strb.w	r5, [r0, #156]	; 0x9c
    b33c:	f880 40ac 	strb.w	r4, [r0, #172]	; 0xac
    b340:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b344:	d004      	beq.n	b350 <TimeAlarmsClass::TimeAlarmsClass()+0x134>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b346:	f002 02ef 	and.w	r2, r2, #239	; 0xef
    b34a:	f363 0203 	bfi	r2, r3, #0, #4
    b34e:	7302      	strb	r2, [r0, #12]
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b350:	7f03      	ldrb	r3, [r0, #28]
    b352:	071e      	lsls	r6, r3, #28
    b354:	d008      	beq.n	b368 <TimeAlarmsClass::TimeAlarmsClass()+0x14c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b356:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b35a:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b35c:	f36f 0303 	bfc	r3, #0, #4
    b360:	7703      	strb	r3, [r0, #28]
    Alarm[ID].onTickHandler = NULL;
    b362:	6102      	str	r2, [r0, #16]
    Alarm[ID].value = 0;
    b364:	6142      	str	r2, [r0, #20]
    Alarm[ID].nextTrigger = 0;
    b366:	6182      	str	r2, [r0, #24]
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b368:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    b36c:	071d      	lsls	r5, r3, #28
    b36e:	d009      	beq.n	b384 <TimeAlarmsClass::TimeAlarmsClass()+0x168>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b370:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b374:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b376:	f36f 0303 	bfc	r3, #0, #4
    b37a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    Alarm[ID].onTickHandler = NULL;
    b37e:	6202      	str	r2, [r0, #32]
    Alarm[ID].value = 0;
    b380:	6242      	str	r2, [r0, #36]	; 0x24
    Alarm[ID].nextTrigger = 0;
    b382:	6282      	str	r2, [r0, #40]	; 0x28
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b384:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    b388:	071c      	lsls	r4, r3, #28
    b38a:	d009      	beq.n	b3a0 <TimeAlarmsClass::TimeAlarmsClass()+0x184>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b38c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b390:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b392:	f36f 0303 	bfc	r3, #0, #4
    b396:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    Alarm[ID].onTickHandler = NULL;
    b39a:	6302      	str	r2, [r0, #48]	; 0x30
    Alarm[ID].value = 0;
    b39c:	6342      	str	r2, [r0, #52]	; 0x34
    Alarm[ID].nextTrigger = 0;
    b39e:	6382      	str	r2, [r0, #56]	; 0x38
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b3a0:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
    b3a4:	0719      	lsls	r1, r3, #28
    b3a6:	d009      	beq.n	b3bc <TimeAlarmsClass::TimeAlarmsClass()+0x1a0>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b3a8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b3ac:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b3ae:	f36f 0303 	bfc	r3, #0, #4
    b3b2:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    Alarm[ID].onTickHandler = NULL;
    b3b6:	6402      	str	r2, [r0, #64]	; 0x40
    Alarm[ID].value = 0;
    b3b8:	6442      	str	r2, [r0, #68]	; 0x44
    Alarm[ID].nextTrigger = 0;
    b3ba:	6482      	str	r2, [r0, #72]	; 0x48
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b3bc:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
    b3c0:	071a      	lsls	r2, r3, #28
    b3c2:	d009      	beq.n	b3d8 <TimeAlarmsClass::TimeAlarmsClass()+0x1bc>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b3c4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b3c8:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b3ca:	f36f 0303 	bfc	r3, #0, #4
    b3ce:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    Alarm[ID].onTickHandler = NULL;
    b3d2:	6502      	str	r2, [r0, #80]	; 0x50
    Alarm[ID].value = 0;
    b3d4:	6542      	str	r2, [r0, #84]	; 0x54
    Alarm[ID].nextTrigger = 0;
    b3d6:	6582      	str	r2, [r0, #88]	; 0x58
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b3d8:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    b3dc:	071f      	lsls	r7, r3, #28
    b3de:	d009      	beq.n	b3f4 <TimeAlarmsClass::TimeAlarmsClass()+0x1d8>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b3e0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b3e4:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b3e6:	f36f 0303 	bfc	r3, #0, #4
    b3ea:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
    Alarm[ID].onTickHandler = NULL;
    b3ee:	6602      	str	r2, [r0, #96]	; 0x60
    Alarm[ID].value = 0;
    b3f0:	6642      	str	r2, [r0, #100]	; 0x64
    Alarm[ID].nextTrigger = 0;
    b3f2:	6682      	str	r2, [r0, #104]	; 0x68
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b3f4:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
    b3f8:	071e      	lsls	r6, r3, #28
    b3fa:	d009      	beq.n	b410 <TimeAlarmsClass::TimeAlarmsClass()+0x1f4>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b3fc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b400:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b402:	f36f 0303 	bfc	r3, #0, #4
    b406:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    Alarm[ID].onTickHandler = NULL;
    b40a:	6702      	str	r2, [r0, #112]	; 0x70
    Alarm[ID].value = 0;
    b40c:	6742      	str	r2, [r0, #116]	; 0x74
    Alarm[ID].nextTrigger = 0;
    b40e:	6782      	str	r2, [r0, #120]	; 0x78
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b410:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    b414:	071d      	lsls	r5, r3, #28
    b416:	d00c      	beq.n	b432 <TimeAlarmsClass::TimeAlarmsClass()+0x216>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b418:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b41c:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b41e:	f36f 0303 	bfc	r3, #0, #4
    b422:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
    Alarm[ID].onTickHandler = NULL;
    b426:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    Alarm[ID].value = 0;
    b42a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    Alarm[ID].nextTrigger = 0;
    b42e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b432:	f890 309c 	ldrb.w	r3, [r0, #156]	; 0x9c
    b436:	071c      	lsls	r4, r3, #28
    b438:	d00c      	beq.n	b454 <TimeAlarmsClass::TimeAlarmsClass()+0x238>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b43a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b43e:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b440:	f36f 0303 	bfc	r3, #0, #4
    b444:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
    Alarm[ID].onTickHandler = NULL;
    b448:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    Alarm[ID].value = 0;
    b44c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    Alarm[ID].nextTrigger = 0;
    b450:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b454:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
    b458:	0719      	lsls	r1, r3, #28
    b45a:	d00c      	beq.n	b476 <TimeAlarmsClass::TimeAlarmsClass()+0x25a>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b45c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b460:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b462:	f36f 0303 	bfc	r3, #0, #4
    b466:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
    Alarm[ID].onTickHandler = NULL;
    b46a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
    Alarm[ID].value = 0;
    b46e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    Alarm[ID].nextTrigger = 0;
    b472:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b476:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
    b47a:	071a      	lsls	r2, r3, #28
    b47c:	d00c      	beq.n	b498 <TimeAlarmsClass::TimeAlarmsClass()+0x27c>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b47e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    Alarm[ID].onTickHandler = NULL;
    b482:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b484:	f36f 0303 	bfc	r3, #0, #4
    b488:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
    Alarm[ID].onTickHandler = NULL;
    b48c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    Alarm[ID].value = 0;
    b490:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
    Alarm[ID].nextTrigger = 0;
    b494:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
{
  isServicing = false;
  for(uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    free(id);   // ensure all Alarms are cleared and available for allocation
  }
}
    b498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b49a:	bf00      	nop

0000b49c <TimeAlarmsClass::free(unsigned char)>:
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b49c:	290b      	cmp	r1, #11
    b49e:	d811      	bhi.n	b4c4 <TimeAlarmsClass::free(unsigned char)+0x28>
    return dtNotAllocated;
  }
}

void TimeAlarmsClass::free(AlarmID_t ID)
{
    b4a0:	b470      	push	{r4, r5, r6}
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b4a2:	eb00 1401 	add.w	r4, r0, r1, lsl #4
    b4a6:	7b23      	ldrb	r3, [r4, #12]
    b4a8:	071a      	lsls	r2, r3, #28
    b4aa:	d00a      	beq.n	b4c2 <TimeAlarmsClass::free(unsigned char)+0x26>
    b4ac:	0109      	lsls	r1, r1, #4

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b4ae:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b4b2:	1846      	adds	r6, r0, r1
    Alarm[ID].onTickHandler = NULL;
    b4b4:	2200      	movs	r2, #0

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b4b6:	f36f 0303 	bfc	r3, #0, #4
    b4ba:	7323      	strb	r3, [r4, #12]
    Alarm[ID].onTickHandler = NULL;
    b4bc:	5042      	str	r2, [r0, r1]
    Alarm[ID].value = 0;
    b4be:	6072      	str	r2, [r6, #4]
    Alarm[ID].nextTrigger = 0;
    b4c0:	60a2      	str	r2, [r4, #8]
  }
}
    b4c2:	bc70      	pop	{r4, r5, r6}
    b4c4:	4770      	bx	lr
    b4c6:	bf00      	nop

0000b4c8 <TimeAlarmsClass::delay(unsigned long)>:
  }
}

// following functions are not Alarm ID specific.
void TimeAlarmsClass::delay(unsigned long ms)
{
    b4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b4cc:	4d33      	ldr	r5, [pc, #204]	; (b59c <TimeAlarmsClass::delay(unsigned long)+0xd4>)
    b4ce:	b082      	sub	sp, #8
    b4d0:	682b      	ldr	r3, [r5, #0]
    b4d2:	9300      	str	r3, [sp, #0]
	return ret;
    b4d4:	9f00      	ldr	r7, [sp, #0]
    b4d6:	4604      	mov	r4, r0
    b4d8:	460e      	mov	r6, r1
//* Private Methods

void TimeAlarmsClass::serviceAlarms()
{
  if (!isServicing) {
    isServicing = true;
    b4da:	f04f 0901 	mov.w	r9, #1
void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    Alarm[ID].onTickHandler = NULL;
    b4de:	f04f 0800 	mov.w	r8, #0
    b4e2:	e007      	b.n	b4f4 <TimeAlarmsClass::delay(unsigned long)+0x2c>
void TimeAlarmsClass::delay(unsigned long ms)
{
  unsigned long start = millis();
  do {
    serviceAlarms();
    yield();
    b4e4:	f005 fb24 	bl	10b30 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b4e8:	682b      	ldr	r3, [r5, #0]
    b4ea:	9301      	str	r3, [sp, #4]
	return ret;
    b4ec:	9b01      	ldr	r3, [sp, #4]

// following functions are not Alarm ID specific.
void TimeAlarmsClass::delay(unsigned long ms)
{
  unsigned long start = millis();
  do {
    b4ee:	1bdb      	subs	r3, r3, r7
    b4f0:	42b3      	cmp	r3, r6
    b4f2:	d850      	bhi.n	b596 <TimeAlarmsClass::delay(unsigned long)+0xce>
//***********************************************************
//* Private Methods

void TimeAlarmsClass::serviceAlarms()
{
  if (!isServicing) {
    b4f4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d1f3      	bne.n	b4e4 <TimeAlarmsClass::delay(unsigned long)+0x1c>
    isServicing = true;
    b4fc:	f884 90c0 	strb.w	r9, [r4, #192]	; 0xc0
    for (servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++) {
    b500:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    b504:	e005      	b.n	b512 <TimeAlarmsClass::delay(unsigned long)+0x4a>
    b506:	3301      	adds	r3, #1
    b508:	b2db      	uxtb	r3, r3
    b50a:	2b0b      	cmp	r3, #11
    b50c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    b510:	d836      	bhi.n	b580 <TimeAlarmsClass::delay(unsigned long)+0xb8>
      if (Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)) {
    b512:	eb04 1203 	add.w	r2, r4, r3, lsl #4
    b516:	7b12      	ldrb	r2, [r2, #12]
    b518:	06d2      	lsls	r2, r2, #27
    b51a:	d5f4      	bpl.n	b506 <TimeAlarmsClass::delay(unsigned long)+0x3e>
    b51c:	f7ff fc0c 	bl	ad38 <now()>
    b520:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
    b524:	eb04 1e03 	add.w	lr, r4, r3, lsl #4
    b528:	f10e 0c08 	add.w	ip, lr, #8
    b52c:	f8de 2008 	ldr.w	r2, [lr, #8]
    b530:	4290      	cmp	r0, r2
    b532:	dbe8      	blt.n	b506 <TimeAlarmsClass::delay(unsigned long)+0x3e>
        OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
        if (Alarm[servicedAlarmId].Mode.isOneShot) {
    b534:	f89c 1004 	ldrb.w	r1, [ip, #4]
    b538:	011a      	lsls	r2, r3, #4
    b53a:	f011 0f20 	tst.w	r1, #32
{
  if (!isServicing) {
    isServicing = true;
    for (servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++) {
      if (Alarm[servicedAlarmId].Mode.isEnabled && (now() >= Alarm[servicedAlarmId].nextTrigger)) {
        OnTick_t TickHandler = Alarm[servicedAlarmId].onTickHandler;
    b53e:	f854 a002 	ldr.w	sl, [r4, r2]
    b542:	eb04 0002 	add.w	r0, r4, r2
        if (Alarm[servicedAlarmId].Mode.isOneShot) {
    b546:	d01e      	beq.n	b586 <TimeAlarmsClass::delay(unsigned long)+0xbe>
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b548:	2b0b      	cmp	r3, #11
    b54a:	d80d      	bhi.n	b568 <TimeAlarmsClass::delay(unsigned long)+0xa0>
    b54c:	070b      	lsls	r3, r1, #28
    b54e:	d00b      	beq.n	b568 <TimeAlarmsClass::delay(unsigned long)+0xa0>

void TimeAlarmsClass::free(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    Alarm[ID].Mode.isEnabled = false;
    Alarm[ID].Mode.alarmType = dtNotAllocated;
    b550:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    b554:	f36f 0103 	bfc	r1, #0, #4
    b558:	f88c 1004 	strb.w	r1, [ip, #4]
    Alarm[ID].onTickHandler = NULL;
    b55c:	f844 8002 	str.w	r8, [r4, r2]
    Alarm[ID].value = 0;
    b560:	f8c0 8004 	str.w	r8, [r0, #4]
    Alarm[ID].nextTrigger = 0;
    b564:	f8ce 8008 	str.w	r8, [lr, #8]
        if (Alarm[servicedAlarmId].Mode.isOneShot) {
          free(servicedAlarmId);  // free the ID if mode is OnShot
        } else {
          Alarm[servicedAlarmId].updateNextTrigger();
        }
        if (TickHandler != NULL) {
    b568:	f1ba 0f00 	cmp.w	sl, #0
    b56c:	d000      	beq.n	b570 <TimeAlarmsClass::delay(unsigned long)+0xa8>
          (*TickHandler)();     // call the handler
    b56e:	47d0      	blx	sl
    b570:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1

void TimeAlarmsClass::serviceAlarms()
{
  if (!isServicing) {
    isServicing = true;
    for (servicedAlarmId = 0; servicedAlarmId < dtNBR_ALARMS; servicedAlarmId++) {
    b574:	3301      	adds	r3, #1
    b576:	b2db      	uxtb	r3, r3
    b578:	2b0b      	cmp	r3, #11
    b57a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
    b57e:	d9c8      	bls.n	b512 <TimeAlarmsClass::delay(unsigned long)+0x4a>
        if (TickHandler != NULL) {
          (*TickHandler)();     // call the handler
        }
      }
    }
    isServicing = false;
    b580:	f884 80c0 	strb.w	r8, [r4, #192]	; 0xc0
    b584:	e7ae      	b.n	b4e4 <TimeAlarmsClass::delay(unsigned long)+0x1c>
//* Private Methods


void AlarmClass::updateNextTrigger()
{
  if (Mode.isEnabled) {
    b586:	f89e 300c 	ldrb.w	r3, [lr, #12]
    b58a:	06db      	lsls	r3, r3, #27
    b58c:	d5ec      	bpl.n	b568 <TimeAlarmsClass::delay(unsigned long)+0xa0>
    b58e:	4670      	mov	r0, lr
    b590:	f7ff fd84 	bl	b09c <AlarmClass::updateNextTrigger() [clone .part.0]>
    b594:	e7e8      	b.n	b568 <TimeAlarmsClass::delay(unsigned long)+0xa0>
  unsigned long start = millis();
  do {
    serviceAlarms();
    yield();
  } while (millis() - start  <= ms);
}
    b596:	b002      	add	sp, #8
    b598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b59c:	1fff6804 	.word	0x1fff6804

0000b5a0 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)>:
  return nextTrigger;
}

// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
    b5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b5a4:	f89d 5020 	ldrb.w	r5, [sp, #32]
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    b5a8:	1eae      	subs	r6, r5, #2
    b5aa:	2e02      	cmp	r6, #2
  return nextTrigger;
}

// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
    b5ac:	4604      	mov	r4, r0
    b5ae:	460f      	mov	r7, r1
    b5b0:	4690      	mov	r8, r2
    b5b2:	4699      	mov	r9, r3
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    b5b4:	d934      	bls.n	b620 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x80>
    b5b6:	1e6b      	subs	r3, r5, #1
    b5b8:	2b01      	cmp	r3, #1
    b5ba:	d939      	bls.n	b630 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x90>
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b5bc:	7b20      	ldrb	r0, [r4, #12]
    b5be:	f010 000f 	ands.w	r0, r0, #15
    b5c2:	d03b      	beq.n	b63c <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9c>
    b5c4:	7f23      	ldrb	r3, [r4, #28]
    b5c6:	071a      	lsls	r2, r3, #28
    b5c8:	d06b      	beq.n	b6a2 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x102>
    b5ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    b5ce:	071b      	lsls	r3, r3, #28
    b5d0:	d06a      	beq.n	b6a8 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x108>
    b5d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    b5d6:	071e      	lsls	r6, r3, #28
    b5d8:	d069      	beq.n	b6ae <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x10e>
    b5da:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    b5de:	0718      	lsls	r0, r3, #28
    b5e0:	d068      	beq.n	b6b4 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x114>
    b5e2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    b5e6:	0719      	lsls	r1, r3, #28
    b5e8:	d067      	beq.n	b6ba <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x11a>
    b5ea:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
    b5ee:	071a      	lsls	r2, r3, #28
    b5f0:	d066      	beq.n	b6c0 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x120>
    b5f2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    b5f6:	071b      	lsls	r3, r3, #28
    b5f8:	d065      	beq.n	b6c6 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x126>
    b5fa:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
    b5fe:	071e      	lsls	r6, r3, #28
    b600:	d042      	beq.n	b688 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0xe8>
    b602:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
    b606:	0718      	lsls	r0, r3, #28
    b608:	d060      	beq.n	b6cc <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x12c>
    b60a:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b60e:	0719      	lsls	r1, r3, #28
    b610:	d013      	beq.n	b63a <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9a>
    b612:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
    b616:	071a      	lsls	r2, r3, #28
    b618:	d05b      	beq.n	b6d2 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x132>
        enable(id);
        return id;  // alarm created ok
      }
    }
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    b61a:	20ff      	movs	r0, #255	; 0xff
    b61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    b620:	f7ff fb8a 	bl	ad38 <now()>
    b624:	4b2c      	ldr	r3, [pc, #176]	; (b6d8 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x138>)
    b626:	4298      	cmp	r0, r3
    b628:	ddf7      	ble.n	b61a <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x7a>
    b62a:	1e6b      	subs	r3, r5, #1
    b62c:	2b01      	cmp	r3, #1
    b62e:	d8c5      	bhi.n	b5bc <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x1c>
    b630:	2f00      	cmp	r7, #0
    b632:	d1c3      	bne.n	b5bc <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x1c>
        enable(id);
        return id;  // alarm created ok
      }
    }
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
    b634:	20ff      	movs	r0, #255	; 0xff
    b636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b63a:	200a      	movs	r0, #10
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b63c:	4606      	mov	r6, r0
    b63e:	0100      	lsls	r0, r0, #4
    b640:	1822      	adds	r2, r4, r0
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
        // here if there is an Alarm id that is not allocated
        Alarm[id].onTickHandler = onTickHandler;
    b642:	f844 8000 	str.w	r8, [r4, r0]
        Alarm[id].Mode.isOneShot = isOneShot;
    b646:	7b13      	ldrb	r3, [r2, #12]
        Alarm[id].Mode.alarmType = alarmType;
        Alarm[id].value = value;
    b648:	6057      	str	r7, [r2, #4]
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
        // here if there is an Alarm id that is not allocated
        Alarm[id].onTickHandler = onTickHandler;
        Alarm[id].Mode.isOneShot = isOneShot;
        Alarm[id].Mode.alarmType = alarmType;
    b64a:	f005 050f 	and.w	r5, r5, #15
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
        // here if there is an Alarm id that is not allocated
        Alarm[id].onTickHandler = onTickHandler;
        Alarm[id].Mode.isOneShot = isOneShot;
    b64e:	f369 1345 	bfi	r3, r9, #5, #1
        Alarm[id].Mode.alarmType = alarmType;
    b652:	f365 0303 	bfi	r3, r5, #0, #4
    b656:	7313      	strb	r3, [r2, #12]
}

// returns true if this id is allocated
bool TimeAlarmsClass::isAllocated(AlarmID_t ID)
{
  return (ID < dtNBR_ALARMS && Alarm[ID].Mode.alarmType != dtNotAllocated);
    b658:	b19d      	cbz	r5, b682 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0xe2>
}

void TimeAlarmsClass::enable(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    if (( !(dtUseAbsoluteValue(Alarm[ID].Mode.alarmType) && (Alarm[ID].value == 0)) ) && (Alarm[ID].onTickHandler != NULL)) {
    b65a:	350f      	adds	r5, #15
    b65c:	f005 030f 	and.w	r3, r5, #15
    b660:	2b01      	cmp	r3, #1
    b662:	d914      	bls.n	b68e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0xee>
    b664:	f1b8 0f00 	cmp.w	r8, #0
    b668:	d013      	beq.n	b692 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0xf2>
      // only enable if value is non zero and a tick handler has been set
      // (is not NULL, value is non zero ONLY for dtTimer & dtExplicitAlarm
      // (the rest can have 0 to account for midnight))
      Alarm[ID].Mode.isEnabled = true;
    b66a:	4420      	add	r0, r4
    b66c:	7b03      	ldrb	r3, [r0, #12]
    b66e:	f043 0310 	orr.w	r3, r3, #16
    b672:	7303      	strb	r3, [r0, #12]
//* Private Methods


void AlarmClass::updateNextTrigger()
{
  if (Mode.isEnabled) {
    b674:	06db      	lsls	r3, r3, #27
    b676:	d504      	bpl.n	b682 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0xe2>
    b678:	f7ff fd10 	bl	b09c <AlarmClass::updateNextTrigger() [clone .part.0]>
    b67c:	4630      	mov	r0, r6
    b67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b682:	4630      	mov	r0, r6
    b684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b688:	2008      	movs	r0, #8
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b68a:	4606      	mov	r6, r0
    b68c:	e7d7      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
}

void TimeAlarmsClass::enable(AlarmID_t ID)
{
  if (isAllocated(ID)) {
    if (( !(dtUseAbsoluteValue(Alarm[ID].Mode.alarmType) && (Alarm[ID].value == 0)) ) && (Alarm[ID].onTickHandler != NULL)) {
    b68e:	2f00      	cmp	r7, #0
    b690:	d1e8      	bne.n	b664 <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0xc4>
      // (is not NULL, value is non zero ONLY for dtTimer & dtExplicitAlarm
      // (the rest can have 0 to account for midnight))
      Alarm[ID].Mode.isEnabled = true;
      Alarm[ID].updateNextTrigger(); // trigger is updated whenever  this is called, even if already enabled
    } else {
      Alarm[ID].Mode.isEnabled = false;
    b692:	1823      	adds	r3, r4, r0
    b694:	4630      	mov	r0, r6
    b696:	7b1a      	ldrb	r2, [r3, #12]
    b698:	f36f 1204 	bfc	r2, #4, #1
    b69c:	731a      	strb	r2, [r3, #12]
    b69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6a2:	2001      	movs	r0, #1
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6a4:	4606      	mov	r6, r0
    b6a6:	e7ca      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6a8:	2002      	movs	r0, #2
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6aa:	4606      	mov	r6, r0
    b6ac:	e7c7      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6ae:	2003      	movs	r0, #3
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6b0:	4606      	mov	r6, r0
    b6b2:	e7c4      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6b4:	2004      	movs	r0, #4
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6b6:	4606      	mov	r6, r0
    b6b8:	e7c1      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6ba:	2005      	movs	r0, #5
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6bc:	4606      	mov	r6, r0
    b6be:	e7be      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6c0:	2006      	movs	r0, #6
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6c2:	4606      	mov	r6, r0
    b6c4:	e7bb      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6c6:	2007      	movs	r0, #7
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6c8:	4606      	mov	r6, r0
    b6ca:	e7b8      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6cc:	2009      	movs	r0, #9
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6ce:	4606      	mov	r6, r0
    b6d0:	e7b5      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
      if (Alarm[id].Mode.alarmType == dtNotAllocated) {
    b6d2:	200b      	movs	r0, #11
// attempt to create an alarm and return true if successful
AlarmID_t TimeAlarmsClass::create(time_t value, OnTick_t onTickHandler, uint8_t isOneShot, dtAlarmPeriod_t alarmType)
{
  if ( ! ( (dtIsAlarm(alarmType) && now() < SECS_PER_YEAR) || (dtUseAbsoluteValue(alarmType) && (value == 0)) ) ) {
    // only create alarm ids if the time is at least Jan 1 1971
    for (uint8_t id = 0; id < dtNBR_ALARMS; id++) {
    b6d4:	4606      	mov	r6, r0
    b6d6:	e7b2      	b.n	b63e <TimeAlarmsClass::create(long, void (*)(), unsigned char, dtAlarmPeriod_t)+0x9e>
    b6d8:	01e1337f 	.word	0x01e1337f

0000b6dc <_GLOBAL__sub_I__ZN10AlarmClassC2Ev>:
  }
  return dtINVALID_ALARM_ID; // no IDs available or time is invalid
}

// make one instance for the user to use
TimeAlarmsClass Alarm = TimeAlarmsClass() ;
    b6dc:	4801      	ldr	r0, [pc, #4]	; (b6e4 <_GLOBAL__sub_I__ZN10AlarmClassC2Ev+0x8>)
    b6de:	f7ff bd9d 	b.w	b21c <TimeAlarmsClass::TimeAlarmsClass()>
    b6e2:	bf00      	nop
    b6e4:	1fff668c 	.word	0x1fff668c

0000b6e8 <TinyGPS::TinyGPS()>:
#define _GNGNS_TERM   "GNGNS"
#define _GNGSA_TERM   "GNGSA"
#define _GPGSV_TERM   "GPGSV"
#define _GLGSV_TERM   "GLGSV"

TinyGPS::TinyGPS()
    b6e8:	b470      	push	{r4, r5, r6}
  ,  _term_offset(0)
  ,  _gps_data_good(false)
#ifndef _GPS_NO_STATS
  ,  _encoded_characters(0)
  ,  _good_sentences(0)
  ,  _failed_checksum(0)
    b6ea:	2200      	movs	r2, #0
    b6ec:	f04f 34ff 	mov.w	r4, #4294967295
    b6f0:	4912      	ldr	r1, [pc, #72]	; (b73c <TinyGPS::TinyGPS()+0x54>)
    b6f2:	6004      	str	r4, [r0, #0]
    b6f4:	26ff      	movs	r6, #255	; 0xff
    b6f6:	2506      	movs	r5, #6
    b6f8:	f8a0 6040 	strh.w	r6, [r0, #64]	; 0x40
    b6fc:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    b700:	6384      	str	r4, [r0, #56]	; 0x38
    b702:	6444      	str	r4, [r0, #68]	; 0x44
    b704:	64c4      	str	r4, [r0, #76]	; 0x4c
    b706:	6082      	str	r2, [r0, #8]
    b708:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
    b70c:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
    b710:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
    b714:	f880 2067 	strb.w	r2, [r0, #103]	; 0x67
    b718:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    b71c:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
    b720:	f8a0 20dc 	strh.w	r2, [r0, #220]	; 0xdc
    b724:	f8a0 20de 	strh.w	r2, [r0, #222]	; 0xde
#endif
{
  _term[0] = '\0';
    b728:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
  ,  _term_offset(0)
  ,  _gps_data_good(false)
#ifndef _GPS_NO_STATS
  ,  _encoded_characters(0)
  ,  _good_sentences(0)
  ,  _failed_checksum(0)
    b72c:	6101      	str	r1, [r0, #16]
    b72e:	6181      	str	r1, [r0, #24]
    b730:	6201      	str	r1, [r0, #32]
    b732:	6281      	str	r1, [r0, #40]	; 0x28
    b734:	6301      	str	r1, [r0, #48]	; 0x30
#endif
{
  _term[0] = '\0';
}
    b736:	bc70      	pop	{r4, r5, r6}
    b738:	4770      	bx	lr
    b73a:	bf00      	nop
    b73c:	3b9ac9ff 	.word	0x3b9ac9ff

0000b740 <TinyGPS::term_complete()>:
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
    b740:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (_is_checksum_term)
    b742:	f890 5055 	ldrb.w	r5, [r0, #85]	; 0x55
#define COMBINE(sentence_type, term_number) (((unsigned)(sentence_type) << 5) | term_number)

// Processes a just-completed term
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
    b746:	b083      	sub	sp, #12
  if (_is_checksum_term)
    b748:	b335      	cbz	r5, b798 <TinyGPS::term_complete()+0x58>
  {
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    b74a:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
//
// internal utilities
//
int TinyGPS::from_hex(char a) 
{
  if (a >= 'A' && a <= 'F')
    b74e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    b752:	2a05      	cmp	r2, #5
    b754:	f240 81b4 	bls.w	bac0 <TinyGPS::term_complete()+0x380>
    return a - 'A' + 10;
  else if (a >= 'a' && a <= 'f')
    b758:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    b75c:	2a05      	cmp	r2, #5
    return a - 'a' + 10;
    b75e:	bf94      	ite	ls
    b760:	3b57      	subls	r3, #87	; 0x57
  else
    return a - '0';
    b762:	3b30      	subhi	r3, #48	; 0x30
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
  if (_is_checksum_term)
  {
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    b764:	f890 2057 	ldrb.w	r2, [r0, #87]	; 0x57
//
// internal utilities
//
int TinyGPS::from_hex(char a) 
{
  if (a >= 'A' && a <= 'F')
    b768:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
  if (_is_checksum_term)
  {
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    b76c:	011b      	lsls	r3, r3, #4
//
// internal utilities
//
int TinyGPS::from_hex(char a) 
{
  if (a >= 'A' && a <= 'F')
    b76e:	2905      	cmp	r1, #5
// Returns true if new sentence has just passed checksum test and is validated
bool TinyGPS::term_complete()
{
  if (_is_checksum_term)
  {
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    b770:	b2db      	uxtb	r3, r3
//
// internal utilities
//
int TinyGPS::from_hex(char a) 
{
  if (a >= 'A' && a <= 'F')
    b772:	f200 81a7 	bhi.w	bac4 <TinyGPS::term_complete()+0x384>
    return a - 'A' + 10;
    b776:	3a37      	subs	r2, #55	; 0x37
bool TinyGPS::term_complete()
{
  if (_is_checksum_term)
  {
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    if (checksum == _parity)
    b778:	4413      	add	r3, r2
    b77a:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
    b77e:	b2db      	uxtb	r3, r3
    b780:	429a      	cmp	r2, r3
    b782:	f000 81ac 	beq.w	bade <TinyGPS::term_complete()+0x39e>
      }
    }

#ifndef _GPS_NO_STATS
    else
      ++_failed_checksum;
    b786:	f8b0 30de 	ldrh.w	r3, [r0, #222]	; 0xde
    b78a:	3301      	adds	r3, #1
    b78c:	f8a0 30de 	strh.w	r3, [r0, #222]	; 0xde
#endif
    return false;
    b790:	2500      	movs	r5, #0
      }
      break;
  }

  return false;
}
    b792:	4628      	mov	r0, r5
    b794:	b003      	add	sp, #12
    b796:	bdf0      	pop	{r4, r5, r6, r7, pc}
#endif
    return false;
  }

  // the first term determines the sentence type
  if (_term_number == 0)
    b798:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
    b79c:	b9cb      	cbnz	r3, b7d2 <TinyGPS::term_complete()+0x92>
  return ret;
}

int TinyGPS::gpsstrcmp(const char *str1, const char *str2)
{
  while (*str1 && *str1 == *str2)
    b79e:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
  }

  // the first term determines the sentence type
  if (_term_number == 0)
  {
    if (!gpsstrcmp(_term, _GPRMC_TERM) || !gpsstrcmp(_term, _GNRMC_TERM))
    b7a2:	f100 0656 	add.w	r6, r0, #86	; 0x56
  return ret;
}

int TinyGPS::gpsstrcmp(const char *str1, const char *str2)
{
  while (*str1 && *str1 == *str2)
    b7a6:	b173      	cbz	r3, b7c6 <TinyGPS::term_complete()+0x86>
    b7a8:	2b47      	cmp	r3, #71	; 0x47
    b7aa:	f040 841f 	bne.w	bfec <TinyGPS::term_complete()+0x8ac>
    b7ae:	49e4      	ldr	r1, [pc, #912]	; (bb40 <TinyGPS::term_complete()+0x400>)
    b7b0:	4632      	mov	r2, r6
    b7b2:	e004      	b.n	b7be <TinyGPS::term_complete()+0x7e>
    b7b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    b7b8:	429c      	cmp	r4, r3
    b7ba:	f040 81b4 	bne.w	bb26 <TinyGPS::term_complete()+0x3e6>
    b7be:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d1f6      	bne.n	b7b4 <TinyGPS::term_complete()+0x74>

  // the first term determines the sentence type
  if (_term_number == 0)
  {
    if (!gpsstrcmp(_term, _GPRMC_TERM) || !gpsstrcmp(_term, _GNRMC_TERM))
      _sentence_type = _GPS_SENTENCE_GPRMC;
    b7c6:	2301      	movs	r3, #1
    b7c8:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
      }
      break;
  }

  return false;
}
    b7cc:	4628      	mov	r0, r5
    b7ce:	b003      	add	sp, #12
    b7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else
      _sentence_type = _GPS_SENTENCE_OTHER;
    return false;
  }

  if (_sentence_type != _GPS_SENTENCE_OTHER && _term[0])
    b7d2:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    b7d6:	2906      	cmp	r1, #6
    b7d8:	d0da      	beq.n	b790 <TinyGPS::term_complete()+0x50>
    b7da:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
    b7de:	2a00      	cmp	r2, #0
    b7e0:	d0d6      	beq.n	b790 <TinyGPS::term_complete()+0x50>
    switch(COMBINE(_sentence_type, _term_number))
    b7e2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    b7e6:	3b01      	subs	r3, #1
    b7e8:	4604      	mov	r4, r0
    b7ea:	2bb2      	cmp	r3, #178	; 0xb2
    b7ec:	d8d1      	bhi.n	b792 <TinyGPS::term_complete()+0x52>
    b7ee:	a101      	add	r1, pc, #4	; (adr r1, b7f4 <TinyGPS::term_complete()+0xb4>)
    b7f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    b7f4:	0000bbb5 	.word	0x0000bbb5
    b7f8:	0000be97 	.word	0x0000be97
    b7fc:	0000be89 	.word	0x0000be89
    b800:	0000bf0d 	.word	0x0000bf0d
    b804:	0000bc87 	.word	0x0000bc87
    b808:	0000be6f 	.word	0x0000be6f
    b80c:	0000be61 	.word	0x0000be61
    b810:	0000bcf3 	.word	0x0000bcf3
    b814:	0000bc95 	.word	0x0000bc95
    b818:	0000b793 	.word	0x0000b793
    b81c:	0000b793 	.word	0x0000b793
    b820:	0000b793 	.word	0x0000b793
    b824:	0000b793 	.word	0x0000b793
    b828:	0000b793 	.word	0x0000b793
    b82c:	0000b793 	.word	0x0000b793
    b830:	0000b793 	.word	0x0000b793
    b834:	0000b793 	.word	0x0000b793
    b838:	0000b793 	.word	0x0000b793
    b83c:	0000b793 	.word	0x0000b793
    b840:	0000b793 	.word	0x0000b793
    b844:	0000b793 	.word	0x0000b793
    b848:	0000b793 	.word	0x0000b793
    b84c:	0000b793 	.word	0x0000b793
    b850:	0000b793 	.word	0x0000b793
    b854:	0000b793 	.word	0x0000b793
    b858:	0000b793 	.word	0x0000b793
    b85c:	0000b793 	.word	0x0000b793
    b860:	0000b793 	.word	0x0000b793
    b864:	0000b793 	.word	0x0000b793
    b868:	0000b793 	.word	0x0000b793
    b86c:	0000b793 	.word	0x0000b793
    b870:	0000b793 	.word	0x0000b793
    b874:	0000bbb5 	.word	0x0000bbb5
    b878:	0000bdf3 	.word	0x0000bdf3
    b87c:	0000be97 	.word	0x0000be97
    b880:	0000be89 	.word	0x0000be89
    b884:	0000bf0d 	.word	0x0000bf0d
    b888:	0000bc87 	.word	0x0000bc87
    b88c:	0000bd95 	.word	0x0000bd95
    b890:	0000be03 	.word	0x0000be03
    b894:	0000bc5b 	.word	0x0000bc5b
    b898:	0000b793 	.word	0x0000b793
    b89c:	0000b793 	.word	0x0000b793
    b8a0:	0000b793 	.word	0x0000b793
    b8a4:	0000b793 	.word	0x0000b793
    b8a8:	0000b793 	.word	0x0000b793
    b8ac:	0000b793 	.word	0x0000b793
    b8b0:	0000b793 	.word	0x0000b793
    b8b4:	0000b793 	.word	0x0000b793
    b8b8:	0000b793 	.word	0x0000b793
    b8bc:	0000b793 	.word	0x0000b793
    b8c0:	0000b793 	.word	0x0000b793
    b8c4:	0000b793 	.word	0x0000b793
    b8c8:	0000b793 	.word	0x0000b793
    b8cc:	0000b793 	.word	0x0000b793
    b8d0:	0000b793 	.word	0x0000b793
    b8d4:	0000b793 	.word	0x0000b793
    b8d8:	0000b793 	.word	0x0000b793
    b8dc:	0000b793 	.word	0x0000b793
    b8e0:	0000b793 	.word	0x0000b793
    b8e4:	0000b793 	.word	0x0000b793
    b8e8:	0000b793 	.word	0x0000b793
    b8ec:	0000b793 	.word	0x0000b793
    b8f0:	0000b793 	.word	0x0000b793
    b8f4:	0000bbb5 	.word	0x0000bbb5
    b8f8:	0000be97 	.word	0x0000be97
    b8fc:	0000be89 	.word	0x0000be89
    b900:	0000bf0d 	.word	0x0000bf0d
    b904:	0000bc87 	.word	0x0000bc87
    b908:	0000bd87 	.word	0x0000bd87
    b90c:	0000be61 	.word	0x0000be61
    b910:	0000b793 	.word	0x0000b793
    b914:	0000b793 	.word	0x0000b793
    b918:	0000b793 	.word	0x0000b793
    b91c:	0000b793 	.word	0x0000b793
    b920:	0000b793 	.word	0x0000b793
    b924:	0000b793 	.word	0x0000b793
    b928:	0000b793 	.word	0x0000b793
    b92c:	0000b793 	.word	0x0000b793
    b930:	0000b793 	.word	0x0000b793
    b934:	0000b793 	.word	0x0000b793
    b938:	0000b793 	.word	0x0000b793
    b93c:	0000b793 	.word	0x0000b793
    b940:	0000b793 	.word	0x0000b793
    b944:	0000b793 	.word	0x0000b793
    b948:	0000b793 	.word	0x0000b793
    b94c:	0000b793 	.word	0x0000b793
    b950:	0000b793 	.word	0x0000b793
    b954:	0000b793 	.word	0x0000b793
    b958:	0000b793 	.word	0x0000b793
    b95c:	0000b793 	.word	0x0000b793
    b960:	0000b793 	.word	0x0000b793
    b964:	0000b793 	.word	0x0000b793
    b968:	0000b793 	.word	0x0000b793
    b96c:	0000b793 	.word	0x0000b793
    b970:	0000b793 	.word	0x0000b793
    b974:	0000b793 	.word	0x0000b793
    b978:	0000b793 	.word	0x0000b793
    b97c:	0000b793 	.word	0x0000b793
    b980:	0000b793 	.word	0x0000b793
    b984:	0000b793 	.word	0x0000b793
    b988:	0000b793 	.word	0x0000b793
    b98c:	0000b793 	.word	0x0000b793
    b990:	0000b793 	.word	0x0000b793
    b994:	0000b793 	.word	0x0000b793
    b998:	0000b793 	.word	0x0000b793
    b99c:	0000b793 	.word	0x0000b793
    b9a0:	0000b793 	.word	0x0000b793
    b9a4:	0000b793 	.word	0x0000b793
    b9a8:	0000b793 	.word	0x0000b793
    b9ac:	0000b793 	.word	0x0000b793
    b9b0:	0000b793 	.word	0x0000b793
    b9b4:	0000b793 	.word	0x0000b793
    b9b8:	0000b793 	.word	0x0000b793
    b9bc:	0000b793 	.word	0x0000b793
    b9c0:	0000b793 	.word	0x0000b793
    b9c4:	0000b793 	.word	0x0000b793
    b9c8:	0000b793 	.word	0x0000b793
    b9cc:	0000b793 	.word	0x0000b793
    b9d0:	0000b793 	.word	0x0000b793
    b9d4:	0000b793 	.word	0x0000b793
    b9d8:	0000b793 	.word	0x0000b793
    b9dc:	0000b793 	.word	0x0000b793
    b9e0:	0000b793 	.word	0x0000b793
    b9e4:	0000b793 	.word	0x0000b793
    b9e8:	0000b793 	.word	0x0000b793
    b9ec:	0000b793 	.word	0x0000b793
    b9f0:	0000b793 	.word	0x0000b793
    b9f4:	0000b793 	.word	0x0000b793
    b9f8:	0000bc27 	.word	0x0000bc27
    b9fc:	0000b793 	.word	0x0000b793
    ba00:	0000bc1b 	.word	0x0000bc1b
    ba04:	0000b793 	.word	0x0000b793
    ba08:	0000b793 	.word	0x0000b793
    ba0c:	0000bd51 	.word	0x0000bd51
    ba10:	0000bc1b 	.word	0x0000bc1b
    ba14:	0000b793 	.word	0x0000b793
    ba18:	0000b793 	.word	0x0000b793
    ba1c:	0000bd51 	.word	0x0000bd51
    ba20:	0000bc1b 	.word	0x0000bc1b
    ba24:	0000b793 	.word	0x0000b793
    ba28:	0000b793 	.word	0x0000b793
    ba2c:	0000bd51 	.word	0x0000bd51
    ba30:	0000bc1b 	.word	0x0000bc1b
    ba34:	0000b793 	.word	0x0000b793
    ba38:	0000b793 	.word	0x0000b793
    ba3c:	0000bd51 	.word	0x0000bd51
    ba40:	0000b793 	.word	0x0000b793
    ba44:	0000b793 	.word	0x0000b793
    ba48:	0000b793 	.word	0x0000b793
    ba4c:	0000b793 	.word	0x0000b793
    ba50:	0000b793 	.word	0x0000b793
    ba54:	0000b793 	.word	0x0000b793
    ba58:	0000b793 	.word	0x0000b793
    ba5c:	0000b793 	.word	0x0000b793
    ba60:	0000b793 	.word	0x0000b793
    ba64:	0000b793 	.word	0x0000b793
    ba68:	0000b793 	.word	0x0000b793
    ba6c:	0000b793 	.word	0x0000b793
    ba70:	0000b793 	.word	0x0000b793
    ba74:	0000b793 	.word	0x0000b793
    ba78:	0000bc27 	.word	0x0000bc27
    ba7c:	0000b793 	.word	0x0000b793
    ba80:	0000bc1b 	.word	0x0000bc1b
    ba84:	0000b793 	.word	0x0000b793
    ba88:	0000b793 	.word	0x0000b793
    ba8c:	0000bd51 	.word	0x0000bd51
    ba90:	0000bc1b 	.word	0x0000bc1b
    ba94:	0000b793 	.word	0x0000b793
    ba98:	0000b793 	.word	0x0000b793
    ba9c:	0000bd51 	.word	0x0000bd51
    baa0:	0000bc1b 	.word	0x0000bc1b
    baa4:	0000b793 	.word	0x0000b793
    baa8:	0000b793 	.word	0x0000b793
    baac:	0000bd51 	.word	0x0000bd51
    bab0:	0000bc1b 	.word	0x0000bc1b
    bab4:	0000b793 	.word	0x0000b793
    bab8:	0000b793 	.word	0x0000b793
    babc:	0000bd51 	.word	0x0000bd51
// internal utilities
//
int TinyGPS::from_hex(char a) 
{
  if (a >= 'A' && a <= 'F')
    return a - 'A' + 10;
    bac0:	3b37      	subs	r3, #55	; 0x37
    bac2:	e64f      	b.n	b764 <TinyGPS::term_complete()+0x24>
  else if (a >= 'a' && a <= 'f')
    bac4:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    bac8:	2905      	cmp	r1, #5
    return a - 'a' + 10;
    baca:	bf94      	ite	ls
    bacc:	3a57      	subls	r2, #87	; 0x57
  else
    return a - '0';
    bace:	3a30      	subhi	r2, #48	; 0x30
bool TinyGPS::term_complete()
{
  if (_is_checksum_term)
  {
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    if (checksum == _parity)
    bad0:	4413      	add	r3, r2
    bad2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
    bad6:	b2db      	uxtb	r3, r3
    bad8:	429a      	cmp	r2, r3
    bada:	f47f ae54 	bne.w	b786 <TinyGPS::term_complete()+0x46>
    {
      if(_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
    bade:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
      {
          _time      = _new_time;
          _date      = _new_date;
      }
      if (_gps_data_good)
    bae2:	f890 5068 	ldrb.w	r5, [r0, #104]	; 0x68
  if (_is_checksum_term)
  {
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    if (checksum == _parity)
    {
      if(_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
    bae6:	2b01      	cmp	r3, #1
    bae8:	d049      	beq.n	bb7e <TinyGPS::term_complete()+0x43e>
      {
          _time      = _new_time;
          _date      = _new_date;
      }
      if (_gps_data_good)
    baea:	2d00      	cmp	r5, #0
    baec:	f43f ae50 	beq.w	b790 <TinyGPS::term_complete()+0x50>
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
    baf0:	f8b0 20dc 	ldrh.w	r2, [r0, #220]	; 0xdc
#endif
        _last_time_fix = _new_time_fix;
    baf4:	6c84      	ldr	r4, [r0, #72]	; 0x48
        _last_position_fix = _new_position_fix;
    baf6:	6d01      	ldr	r1, [r0, #80]	; 0x50
      if (_gps_data_good)
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
#endif
        _last_time_fix = _new_time_fix;
    baf8:	6444      	str	r4, [r0, #68]	; 0x44
          _date      = _new_date;
      }
      if (_gps_data_good)
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
    bafa:	3201      	adds	r2, #1
    bafc:	f8a0 20dc 	strh.w	r2, [r0, #220]	; 0xdc
#endif
        _last_time_fix = _new_time_fix;
        _last_position_fix = _new_position_fix;
    bb00:	64c1      	str	r1, [r0, #76]	; 0x4c

        switch(_sentence_type)
    bb02:	2b00      	cmp	r3, #0
    bb04:	f47f ae45 	bne.w	b792 <TinyGPS::term_complete()+0x52>
          _longitude = _new_longitude;
          _speed     = _new_speed;
          _course    = _new_course;
          break;
        case _GPS_SENTENCE_GPGGA:
          _altitude  = _new_altitude;
    bb08:	6a47      	ldr	r7, [r0, #36]	; 0x24
          _time      = _new_time;
    bb0a:	6846      	ldr	r6, [r0, #4]
          _latitude  = _new_latitude;
    bb0c:	6944      	ldr	r4, [r0, #20]
          _longitude = _new_longitude;
    bb0e:	69c1      	ldr	r1, [r0, #28]
          _numsats   = _new_numsats;
    bb10:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
          _hdop      = _new_hdop;
    bb14:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
          _longitude = _new_longitude;
          _speed     = _new_speed;
          _course    = _new_course;
          break;
        case _GPS_SENTENCE_GPGGA:
          _altitude  = _new_altitude;
    bb16:	6207      	str	r7, [r0, #32]
          _time      = _new_time;
    bb18:	6006      	str	r6, [r0, #0]
          _latitude  = _new_latitude;
    bb1a:	6104      	str	r4, [r0, #16]
          _longitude = _new_longitude;
    bb1c:	6181      	str	r1, [r0, #24]
          _numsats   = _new_numsats;
    bb1e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
          _hdop      = _new_hdop;
    bb22:	6383      	str	r3, [r0, #56]	; 0x38
          break;
    bb24:	e635      	b.n	b792 <TinyGPS::term_complete()+0x52>
    bb26:	4907      	ldr	r1, [pc, #28]	; (bb44 <TinyGPS::term_complete()+0x404>)
  return ret;
}

int TinyGPS::gpsstrcmp(const char *str1, const char *str2)
{
  while (*str1 && *str1 == *str2)
    bb28:	4632      	mov	r2, r6
    bb2a:	e003      	b.n	bb34 <TinyGPS::term_complete()+0x3f4>
    bb2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bb30:	429c      	cmp	r4, r3
    bb32:	d109      	bne.n	bb48 <TinyGPS::term_complete()+0x408>
    bb34:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    bb38:	2b00      	cmp	r3, #0
    bb3a:	d1f7      	bne.n	bb2c <TinyGPS::term_complete()+0x3ec>
    bb3c:	e643      	b.n	b7c6 <TinyGPS::term_complete()+0x86>
    bb3e:	bf00      	nop
    bb40:	000175dc 	.word	0x000175dc
    bb44:	000175e4 	.word	0x000175e4
    bb48:	49cc      	ldr	r1, [pc, #816]	; (be7c <TinyGPS::term_complete()+0x73c>)
    bb4a:	4632      	mov	r2, r6
    bb4c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    bb50:	2b00      	cmp	r3, #0
    bb52:	f43f ae39 	beq.w	b7c8 <TinyGPS::term_complete()+0x88>
    bb56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bb5a:	429c      	cmp	r4, r3
    bb5c:	d0f6      	beq.n	bb4c <TinyGPS::term_complete()+0x40c>
    bb5e:	49c8      	ldr	r1, [pc, #800]	; (be80 <TinyGPS::term_complete()+0x740>)
    bb60:	4632      	mov	r2, r6
    bb62:	e004      	b.n	bb6e <TinyGPS::term_complete()+0x42e>
    bb64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bb68:	429c      	cmp	r4, r3
    bb6a:	f040 8204 	bne.w	bf76 <TinyGPS::term_complete()+0x836>
    bb6e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    bb72:	2b00      	cmp	r3, #0
    bb74:	d1f6      	bne.n	bb64 <TinyGPS::term_complete()+0x424>
    if (!gpsstrcmp(_term, _GPRMC_TERM) || !gpsstrcmp(_term, _GNRMC_TERM))
      _sentence_type = _GPS_SENTENCE_GPRMC;
    else if (!gpsstrcmp(_term, _GPGGA_TERM))
      _sentence_type = _GPS_SENTENCE_GPGGA;
    else if (!gpsstrcmp(_term, _GNGNS_TERM))
      _sentence_type = _GPS_SENTENCE_GNGNS;
    bb76:	2302      	movs	r3, #2
    bb78:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    bb7c:	e609      	b.n	b792 <TinyGPS::term_complete()+0x52>
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    if (checksum == _parity)
    {
      if(_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
      {
          _time      = _new_time;
    bb7e:	6847      	ldr	r7, [r0, #4]
          _date      = _new_date;
    bb80:	68c2      	ldr	r2, [r0, #12]
    byte checksum = 16 * from_hex(_term[0]) + from_hex(_term[1]);
    if (checksum == _parity)
    {
      if(_sentence_type == _GPS_SENTENCE_GPRMC)   //set the time and date even if not tracking
      {
          _time      = _new_time;
    bb82:	6007      	str	r7, [r0, #0]
          _date      = _new_date;
    bb84:	6082      	str	r2, [r0, #8]
      }
      if (_gps_data_good)
    bb86:	2d00      	cmp	r5, #0
    bb88:	f43f ae02 	beq.w	b790 <TinyGPS::term_complete()+0x50>
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
    bb8c:	f8b0 30dc 	ldrh.w	r3, [r0, #220]	; 0xdc
#endif
        _last_time_fix = _new_time_fix;
    bb90:	6c86      	ldr	r6, [r0, #72]	; 0x48
        _last_position_fix = _new_position_fix;
    bb92:	6d04      	ldr	r4, [r0, #80]	; 0x50
        switch(_sentence_type)
        {
        case _GPS_SENTENCE_GPRMC:
          _time      = _new_time;
          _date      = _new_date;
          _latitude  = _new_latitude;
    bb94:	6941      	ldr	r1, [r0, #20]
        _last_position_fix = _new_position_fix;

        switch(_sentence_type)
        {
        case _GPS_SENTENCE_GPRMC:
          _time      = _new_time;
    bb96:	6007      	str	r7, [r0, #0]
          _date      = _new_date;
      }
      if (_gps_data_good)
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
    bb98:	3301      	adds	r3, #1
        {
        case _GPS_SENTENCE_GPRMC:
          _time      = _new_time;
          _date      = _new_date;
          _latitude  = _new_latitude;
          _longitude = _new_longitude;
    bb9a:	69c7      	ldr	r7, [r0, #28]

        switch(_sentence_type)
        {
        case _GPS_SENTENCE_GPRMC:
          _time      = _new_time;
          _date      = _new_date;
    bb9c:	6082      	str	r2, [r0, #8]
          _date      = _new_date;
      }
      if (_gps_data_good)
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
    bb9e:	f8a0 30dc 	strh.w	r3, [r0, #220]	; 0xdc
        case _GPS_SENTENCE_GPRMC:
          _time      = _new_time;
          _date      = _new_date;
          _latitude  = _new_latitude;
          _longitude = _new_longitude;
          _speed     = _new_speed;
    bba2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          _course    = _new_course;
    bba4:	6b43      	ldr	r3, [r0, #52]	; 0x34
      if (_gps_data_good)
      {
#ifndef _GPS_NO_STATS
        ++_good_sentences;
#endif
        _last_time_fix = _new_time_fix;
    bba6:	6446      	str	r6, [r0, #68]	; 0x44
        _last_position_fix = _new_position_fix;
    bba8:	64c4      	str	r4, [r0, #76]	; 0x4c
        switch(_sentence_type)
        {
        case _GPS_SENTENCE_GPRMC:
          _time      = _new_time;
          _date      = _new_date;
          _latitude  = _new_latitude;
    bbaa:	6101      	str	r1, [r0, #16]
          _longitude = _new_longitude;
    bbac:	6187      	str	r7, [r0, #24]
          _speed     = _new_speed;
    bbae:	6282      	str	r2, [r0, #40]	; 0x28
          _course    = _new_course;
    bbb0:	6303      	str	r3, [r0, #48]	; 0x30
          break;
    bbb2:	e5ee      	b.n	b792 <TinyGPS::term_complete()+0x52>

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
    bbb4:	2a2d      	cmp	r2, #45	; 0x2d
    bbb6:	bf0c      	ite	eq
    bbb8:	f890 1057 	ldrbeq.w	r1, [r0, #87]	; 0x57
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bbbc:	4611      	movne	r1, r2
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bbbe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bbc2:	bf14      	ite	ne
    bbc4:	f100 0756 	addne.w	r7, r0, #86	; 0x56
  bool isneg = *p == '-';
  if (isneg) ++p;
    bbc8:	f100 0757 	addeq.w	r7, r0, #87	; 0x57
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bbcc:	2b09      	cmp	r3, #9
    bbce:	f200 82c6 	bhi.w	c15e <TinyGPS::term_complete()+0xa1e>
    bbd2:	4638      	mov	r0, r7
    bbd4:	2300      	movs	r3, #0
    ret = 10 * ret + *str++ - '0';
    bbd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bbda:	eb01 0343 	add.w	r3, r1, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bbde:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    bbe2:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    bbe6:	2e09      	cmp	r6, #9
    ret = 10 * ret + *str++ - '0';
    bbe8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bbec:	d9f3      	bls.n	bbd6 <TinyGPS::term_complete()+0x496>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    bbee:	2164      	movs	r1, #100	; 0x64
    bbf0:	fb01 f303 	mul.w	r3, r1, r3
  while (gpsisdigit(*p)) ++p;
    bbf4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    bbf8:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    bbfc:	2809      	cmp	r0, #9
    bbfe:	d9f9      	bls.n	bbf4 <TinyGPS::term_complete()+0x4b4>
  if (*p == '.')
    bc00:	292e      	cmp	r1, #46	; 0x2e
    bc02:	f000 8243 	beq.w	c08c <TinyGPS::term_complete()+0x94c>
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
        ret += p[2] - '0';
    }
  }
  return isneg ? -ret : ret;
    bc06:	2a2d      	cmp	r2, #45	; 0x2d
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    bc08:	4a9e      	ldr	r2, [pc, #632]	; (be84 <TinyGPS::term_complete()+0x744>)
    bc0a:	bf08      	it	eq
    bc0c:	425b      	negeq	r3, r3
    switch(COMBINE(_sentence_type, _term_number))
  {
    case COMBINE(_GPS_SENTENCE_GPRMC, 1): // Time in both sentences
    case COMBINE(_GPS_SENTENCE_GPGGA, 1):
    case COMBINE(_GPS_SENTENCE_GNGNS, 1):
      _new_time = parse_decimal();
    bc0e:	6063      	str	r3, [r4, #4]
    bc10:	6813      	ldr	r3, [r2, #0]
    bc12:	9300      	str	r3, [sp, #0]
	return ret;
    bc14:	9b00      	ldr	r3, [sp, #0]
      _new_time_fix = millis();
    bc16:	64a3      	str	r3, [r4, #72]	; 0x48
      break;
    bc18:	e5bb      	b.n	b792 <TinyGPS::term_complete()+0x52>
    case COMBINE(_GPS_SENTENCE_GPGSV, 16):
    case COMBINE(_GPS_SENTENCE_GLGSV, 4):
    case COMBINE(_GPS_SENTENCE_GLGSV, 8):
    case COMBINE(_GPS_SENTENCE_GLGSV, 12):
    case COMBINE(_GPS_SENTENCE_GLGSV, 16):
      _tracked_satellites_index = atoi(_term);
    bc1a:	3056      	adds	r0, #86	; 0x56
    bc1c:	f006 f8a4 	bl	11d68 <atoi>
    bc20:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
      break;
    bc24:	e5b5      	b.n	b792 <TinyGPS::term_complete()+0x52>
      //_sats_used[
      break;
    case COMBINE(_GPS_SENTENCE_GPGSV, 2):   //beginning of sequence
    case COMBINE(_GPS_SENTENCE_GLGSV, 2):   //beginning of sequence
    {
      uint8_t msgId = atoi(_term)-1;  //start from 0
    bc26:	3056      	adds	r0, #86	; 0x56
    bc28:	f006 f89e 	bl	11d68 <atoi>
    bc2c:	3801      	subs	r0, #1
      if(msgId == 0) {
    bc2e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
        //http://geostar-navigation.com/file/geos3/geos_nmea_protocol_v3_0_eng.pdf
        if(_sentence_type == _GPS_SENTENCE_GPGSV) {
    bc32:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
      break;
    case COMBINE(_GPS_SENTENCE_GPGSV, 2):   //beginning of sequence
    case COMBINE(_GPS_SENTENCE_GLGSV, 2):   //beginning of sequence
    {
      uint8_t msgId = atoi(_term)-1;  //start from 0
      if(msgId == 0) {
    bc36:	d109      	bne.n	bc4c <TinyGPS::term_complete()+0x50c>
        //http://geostar-navigation.com/file/geos3/geos_nmea_protocol_v3_0_eng.pdf
        if(_sentence_type == _GPS_SENTENCE_GPGSV) {
    bc38:	2f04      	cmp	r7, #4
    bc3a:	f04f 0230 	mov.w	r2, #48	; 0x30
    bc3e:	4631      	mov	r1, r6
    bc40:	f000 8279 	beq.w	c136 <TinyGPS::term_complete()+0x9f6>
    bc44:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    bc48:	f006 fcd8 	bl	125fc <memset>
            tracked_sat_rec[x] = 0;
          }
        }
      }
      _sat_index = msgId*4;   //4 sattelites/line
      if(_sentence_type == _GPS_SENTENCE_GLGSV)
    bc4c:	2f05      	cmp	r7, #5
    bc4e:	f000 8217 	beq.w	c080 <TinyGPS::term_complete()+0x940>
          {
            tracked_sat_rec[x] = 0;
          }
        }
      }
      _sat_index = msgId*4;   //4 sattelites/line
    bc52:	00b6      	lsls	r6, r6, #2
    bc54:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    bc58:	e59a      	b.n	b790 <TinyGPS::term_complete()+0x50>
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bc5a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    bc5e:	2b09      	cmp	r3, #9
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      _new_course = parse_decimal();
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      _new_date = gpsatol(_term);
    bc60:	f100 0156 	add.w	r1, r0, #86	; 0x56
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bc64:	f04f 0300 	mov.w	r3, #0
    bc68:	d80b      	bhi.n	bc82 <TinyGPS::term_complete()+0x542>
    ret = 10 * ret + *str++ - '0';
    bc6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bc6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bc72:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    bc76:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    bc7a:	2809      	cmp	r0, #9
    ret = 10 * ret + *str++ - '0';
    bc7c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bc80:	d9f3      	bls.n	bc6a <TinyGPS::term_complete()+0x52a>
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      _new_course = parse_decimal();
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      _new_date = gpsatol(_term);
    bc82:	60e3      	str	r3, [r4, #12]
      break;
    bc84:	e585      	b.n	b792 <TinyGPS::term_complete()+0x52>
      _new_longitude = parse_degrees();
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 6): // E/W
    case COMBINE(_GPS_SENTENCE_GPGGA, 5):
    case COMBINE(_GPS_SENTENCE_GNGNS, 5):
      if (_term[0] == 'W')
    bc86:	2a57      	cmp	r2, #87	; 0x57
    bc88:	f47f ad82 	bne.w	b790 <TinyGPS::term_complete()+0x50>
        _new_longitude = -_new_longitude;
    bc8c:	69c3      	ldr	r3, [r0, #28]
    bc8e:	425b      	negs	r3, r3
    bc90:	61c3      	str	r3, [r0, #28]
    bc92:	e57e      	b.n	b792 <TinyGPS::term_complete()+0x52>

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
    bc94:	2a2d      	cmp	r2, #45	; 0x2d
    bc96:	bf0c      	ite	eq
    bc98:	f890 1057 	ldrbeq.w	r1, [r0, #87]	; 0x57
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bc9c:	4611      	movne	r1, r2
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bc9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    bca2:	b2db      	uxtb	r3, r3
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bca4:	bf14      	ite	ne
    bca6:	f100 0756 	addne.w	r7, r0, #86	; 0x56
  bool isneg = *p == '-';
  if (isneg) ++p;
    bcaa:	f100 0757 	addeq.w	r7, r0, #87	; 0x57
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bcae:	2b09      	cmp	r3, #9
    bcb0:	f200 8249 	bhi.w	c146 <TinyGPS::term_complete()+0xa06>
    bcb4:	4638      	mov	r0, r7
    bcb6:	2300      	movs	r3, #0
    ret = 10 * ret + *str++ - '0';
    bcb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bcbc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bcc0:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    bcc4:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    bcc8:	2e09      	cmp	r6, #9
    ret = 10 * ret + *str++ - '0';
    bcca:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bcce:	d9f3      	bls.n	bcb8 <TinyGPS::term_complete()+0x578>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    bcd0:	2164      	movs	r1, #100	; 0x64
    bcd2:	fb01 f303 	mul.w	r3, r1, r3
  while (gpsisdigit(*p)) ++p;
    bcd6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    bcda:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    bcde:	2809      	cmp	r0, #9
    bce0:	d9f9      	bls.n	bcd6 <TinyGPS::term_complete()+0x596>
  if (*p == '.')
    bce2:	292e      	cmp	r1, #46	; 0x2e
    bce4:	f000 81e3 	beq.w	c0ae <TinyGPS::term_complete()+0x96e>
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
        ret += p[2] - '0';
    }
  }
  return isneg ? -ret : ret;
    bce8:	2a2d      	cmp	r2, #45	; 0x2d
    bcea:	bf08      	it	eq
    bcec:	425b      	negeq	r3, r3
      break;
    case COMBINE(_GPS_SENTENCE_GPGGA, 8): // HDOP
      _new_hdop = parse_decimal();
      break;
    case COMBINE(_GPS_SENTENCE_GPGGA, 9): // Altitude (GPGGA)
      _new_altitude = parse_decimal();
    bcee:	6263      	str	r3, [r4, #36]	; 0x24
      break;
    bcf0:	e54f      	b.n	b792 <TinyGPS::term_complete()+0x52>

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
    bcf2:	2a2d      	cmp	r2, #45	; 0x2d
    bcf4:	bf0c      	ite	eq
    bcf6:	f890 1057 	ldrbeq.w	r1, [r0, #87]	; 0x57
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bcfa:	4611      	movne	r1, r2
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bcfc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    bd00:	b2db      	uxtb	r3, r3
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bd02:	bf14      	ite	ne
    bd04:	f100 0756 	addne.w	r7, r0, #86	; 0x56
  bool isneg = *p == '-';
  if (isneg) ++p;
    bd08:	f100 0757 	addeq.w	r7, r0, #87	; 0x57
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bd0c:	2b09      	cmp	r3, #9
    bd0e:	f200 8228 	bhi.w	c162 <TinyGPS::term_complete()+0xa22>
    bd12:	4638      	mov	r0, r7
    bd14:	2300      	movs	r3, #0
    ret = 10 * ret + *str++ - '0';
    bd16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bd1a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bd1e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    bd22:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    bd26:	2e09      	cmp	r6, #9
    ret = 10 * ret + *str++ - '0';
    bd28:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bd2c:	d9f3      	bls.n	bd16 <TinyGPS::term_complete()+0x5d6>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    bd2e:	2164      	movs	r1, #100	; 0x64
    bd30:	fb01 f303 	mul.w	r3, r1, r3
  while (gpsisdigit(*p)) ++p;
    bd34:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    bd38:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    bd3c:	2809      	cmp	r0, #9
    bd3e:	d9f9      	bls.n	bd34 <TinyGPS::term_complete()+0x5f4>
  if (*p == '.')
    bd40:	292e      	cmp	r1, #46	; 0x2e
    bd42:	f000 81e7 	beq.w	c114 <TinyGPS::term_complete()+0x9d4>
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
        ret += p[2] - '0';
    }
  }
  return isneg ? -ret : ret;
    bd46:	2a2d      	cmp	r2, #45	; 0x2d
    bd48:	bf08      	it	eq
    bd4a:	425b      	negeq	r3, r3
    case COMBINE(_GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA): GPS only
    case COMBINE(_GPS_SENTENCE_GNGNS, 7): //  GNGNS counts-in all constellations
      _new_numsats = (unsigned char)atoi(_term);
      break;
    case COMBINE(_GPS_SENTENCE_GPGGA, 8): // HDOP
      _new_hdop = parse_decimal();
    bd4c:	63e3      	str	r3, [r4, #60]	; 0x3c
      break;
    bd4e:	e520      	b.n	b792 <TinyGPS::term_complete()+0x52>
    case COMBINE(_GPS_SENTENCE_GPGSV, 19):
    case COMBINE(_GPS_SENTENCE_GLGSV, 7):   //strength
    case COMBINE(_GPS_SENTENCE_GLGSV, 11):
    case COMBINE(_GPS_SENTENCE_GLGSV, 15):
    case COMBINE(_GPS_SENTENCE_GLGSV, 19):
      uint8_t stren = (uint8_t)atoi(_term);
    bd50:	3056      	adds	r0, #86	; 0x56
    bd52:	f006 f809 	bl	11d68 <atoi>
      if(stren == 0)  //remove the record, 0dB strength
    bd56:	f010 0fff 	tst.w	r0, #255	; 0xff
    bd5a:	f000 8167 	beq.w	c02c <TinyGPS::term_complete()+0x8ec>
      {
        tracked_sat_rec[_sat_index + (_term_number-7)/4] = 0;
      }
      else
      {
        tracked_sat_rec[_sat_index + (_term_number-7)/4] = _tracked_satellites_index<<8 | stren<<1;
    bd5e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
    bd62:	f894 20d4 	ldrb.w	r2, [r4, #212]	; 0xd4
    bd66:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
    bd6a:	1fde      	subs	r6, r3, #7
    bd6c:	bf48      	it	mi
    bd6e:	1f1e      	submi	r6, r3, #4
    bd70:	eb02 02a6 	add.w	r2, r2, r6, asr #2
    bd74:	0043      	lsls	r3, r0, #1
    bd76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
    bd7a:	321c      	adds	r2, #28
    bd7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    bd80:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    bd84:	e505      	b.n	b792 <TinyGPS::term_complete()+0x52>
    case COMBINE(_GPS_SENTENCE_GNGNS, 5):
      if (_term[0] == 'W')
        _new_longitude = -_new_longitude;
      break;
    case COMBINE(_GPS_SENTENCE_GNGNS, 6):
      strncpy(_constellations, _term, 5);
    bd86:	f100 0156 	add.w	r1, r0, #86	; 0x56
    bd8a:	2205      	movs	r2, #5
    bd8c:	3069      	adds	r0, #105	; 0x69
    bd8e:	f007 f965 	bl	1305c <strncpy>
      break;
    bd92:	e4fe      	b.n	b792 <TinyGPS::term_complete()+0x52>

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
    bd94:	2a2d      	cmp	r2, #45	; 0x2d
    bd96:	bf0c      	ite	eq
    bd98:	f890 1057 	ldrbeq.w	r1, [r0, #87]	; 0x57
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bd9c:	4611      	movne	r1, r2
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bd9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    bda2:	b2db      	uxtb	r3, r3
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    bda4:	bf14      	ite	ne
    bda6:	f100 0756 	addne.w	r7, r0, #86	; 0x56
  bool isneg = *p == '-';
  if (isneg) ++p;
    bdaa:	f100 0757 	addeq.w	r7, r0, #87	; 0x57
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bdae:	2b09      	cmp	r3, #9
    bdb0:	f200 81d0 	bhi.w	c154 <TinyGPS::term_complete()+0xa14>
    bdb4:	4638      	mov	r0, r7
    bdb6:	2300      	movs	r3, #0
    ret = 10 * ret + *str++ - '0';
    bdb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bdbc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bdc0:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    bdc4:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    bdc8:	2e09      	cmp	r6, #9
    ret = 10 * ret + *str++ - '0';
    bdca:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bdce:	d9f3      	bls.n	bdb8 <TinyGPS::term_complete()+0x678>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    bdd0:	2164      	movs	r1, #100	; 0x64
    bdd2:	fb01 f303 	mul.w	r3, r1, r3
  while (gpsisdigit(*p)) ++p;
    bdd6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    bdda:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    bdde:	2809      	cmp	r0, #9
    bde0:	d9f9      	bls.n	bdd6 <TinyGPS::term_complete()+0x696>
  if (*p == '.')
    bde2:	292e      	cmp	r1, #46	; 0x2e
    bde4:	f000 8174 	beq.w	c0d0 <TinyGPS::term_complete()+0x990>
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
        ret += p[2] - '0';
    }
  }
  return isneg ? -ret : ret;
    bde8:	2a2d      	cmp	r2, #45	; 0x2d
    bdea:	bf08      	it	eq
    bdec:	425b      	negeq	r3, r3
      break;
    case COMBINE(_GPS_SENTENCE_GNGNS, 6):
      strncpy(_constellations, _term, 5);
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      _new_speed = parse_decimal();
    bdee:	62e3      	str	r3, [r4, #44]	; 0x2c
      break;
    bdf0:	e4cf      	b.n	b792 <TinyGPS::term_complete()+0x52>
    case COMBINE(_GPS_SENTENCE_GNGNS, 1):
      _new_time = parse_decimal();
      _new_time_fix = millis();
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 2): // GPRMC validity
      _gps_data_good = _term[0] == 'A';
    bdf2:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    bdf6:	fab2 f282 	clz	r2, r2
    bdfa:	0952      	lsrs	r2, r2, #5
    bdfc:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
      break;
    be00:	e4c7      	b.n	b792 <TinyGPS::term_complete()+0x52>

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
    be02:	2a2d      	cmp	r2, #45	; 0x2d
    be04:	bf0c      	ite	eq
    be06:	f890 1057 	ldrbeq.w	r1, [r0, #87]	; 0x57
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    be0a:	4611      	movne	r1, r2
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    be0c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    be10:	b2db      	uxtb	r3, r3
    return a - '0';
}

unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
    be12:	bf14      	ite	ne
    be14:	f100 0756 	addne.w	r7, r0, #86	; 0x56
  bool isneg = *p == '-';
  if (isneg) ++p;
    be18:	f100 0757 	addeq.w	r7, r0, #87	; 0x57
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    be1c:	2b09      	cmp	r3, #9
    be1e:	f200 8197 	bhi.w	c150 <TinyGPS::term_complete()+0xa10>
    be22:	4638      	mov	r0, r7
    be24:	2300      	movs	r3, #0
    ret = 10 * ret + *str++ - '0';
    be26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    be2a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    be2e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    be32:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    be36:	2e09      	cmp	r6, #9
    ret = 10 * ret + *str++ - '0';
    be38:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    be3c:	d9f3      	bls.n	be26 <TinyGPS::term_complete()+0x6e6>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    be3e:	2164      	movs	r1, #100	; 0x64
    be40:	fb01 f303 	mul.w	r3, r1, r3
  while (gpsisdigit(*p)) ++p;
    be44:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    be48:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    be4c:	2809      	cmp	r0, #9
    be4e:	d9f9      	bls.n	be44 <TinyGPS::term_complete()+0x704>
  if (*p == '.')
    be50:	292e      	cmp	r1, #46	; 0x2e
    be52:	f000 814e 	beq.w	c0f2 <TinyGPS::term_complete()+0x9b2>
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
        ret += p[2] - '0';
    }
  }
  return isneg ? -ret : ret;
    be56:	2a2d      	cmp	r2, #45	; 0x2d
    be58:	bf08      	it	eq
    be5a:	425b      	negeq	r3, r3
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 7): // Speed (GPRMC)
      _new_speed = parse_decimal();
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 8): // Course (GPRMC)
      _new_course = parse_decimal();
    be5c:	6363      	str	r3, [r4, #52]	; 0x34
      break;
    be5e:	e498      	b.n	b792 <TinyGPS::term_complete()+0x52>
    case COMBINE(_GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      _gps_data_good = _term[0] > '0';
      break;
    case COMBINE(_GPS_SENTENCE_GPGGA, 7): // Satellites used (GPGGA): GPS only
    case COMBINE(_GPS_SENTENCE_GNGNS, 7): //  GNGNS counts-in all constellations
      _new_numsats = (unsigned char)atoi(_term);
    be60:	3056      	adds	r0, #86	; 0x56
    be62:	f005 ff81 	bl	11d68 <atoi>
    be66:	b2c0      	uxtb	r0, r0
    be68:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
      break;
    be6c:	e491      	b.n	b792 <TinyGPS::term_complete()+0x52>
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 9): // Date (GPRMC)
      _new_date = gpsatol(_term);
      break;
    case COMBINE(_GPS_SENTENCE_GPGGA, 6): // Fix data (GPGGA)
      _gps_data_good = _term[0] > '0';
    be6e:	2a30      	cmp	r2, #48	; 0x30
    be70:	bf94      	ite	ls
    be72:	2200      	movls	r2, #0
    be74:	2201      	movhi	r2, #1
    be76:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
      break;
    be7a:	e48a      	b.n	b792 <TinyGPS::term_complete()+0x52>
    be7c:	000175ec 	.word	0x000175ec
    be80:	000175f4 	.word	0x000175f4
    be84:	1fff6804 	.word	0x1fff6804
      _new_position_fix = millis();
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 4): // N/S
    case COMBINE(_GPS_SENTENCE_GPGGA, 3):
    case COMBINE(_GPS_SENTENCE_GNGNS, 3):
      if (_term[0] == 'S')
    be88:	2a53      	cmp	r2, #83	; 0x53
    be8a:	f47f ac81 	bne.w	b790 <TinyGPS::term_complete()+0x50>
        _new_latitude = -_new_latitude;
    be8e:	6943      	ldr	r3, [r0, #20]
    be90:	425b      	negs	r3, r3
    be92:	6143      	str	r3, [r0, #20]
    be94:	e47d      	b.n	b792 <TinyGPS::term_complete()+0x52>
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    be96:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    be9a:	2b09      	cmp	r3, #9

// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
    be9c:	f100 0156 	add.w	r1, r0, #86	; 0x56
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bea0:	f200 815a 	bhi.w	c158 <TinyGPS::term_complete()+0xa18>
    bea4:	4608      	mov	r0, r1
    bea6:	2300      	movs	r3, #0
    ret = 10 * ret + *str++ - '0';
    bea8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    beac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    beb0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    beb4:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    beb8:	2e09      	cmp	r6, #9
    ret = 10 * ret + *str++ - '0';
    beba:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bebe:	d9f3      	bls.n	bea8 <TinyGPS::term_complete()+0x768>
// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    bec0:	4aa9      	ldr	r2, [pc, #676]	; (c168 <TinyGPS::term_complete()+0xa28>)
    bec2:	48aa      	ldr	r0, [pc, #680]	; (c16c <TinyGPS::term_complete()+0xa2c>)
    bec4:	fba2 6203 	umull	r6, r2, r2, r3
    bec8:	0952      	lsrs	r2, r2, #5
    beca:	2664      	movs	r6, #100	; 0x64
    becc:	fb06 3212 	mls	r2, r6, r2, r3
    bed0:	fb00 f602 	mul.w	r6, r0, r2
  for (p=_term; gpsisdigit(*p); ++p);
    bed4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    bed8:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    bedc:	2809      	cmp	r0, #9
    bede:	d9f9      	bls.n	bed4 <TinyGPS::term_complete()+0x794>
  if (*p == '.')
    bee0:	2a2e      	cmp	r2, #46	; 0x2e
    bee2:	f000 8088 	beq.w	bff6 <TinyGPS::term_complete()+0x8b6>
      _gps_data_good = _term[0] == 'A';
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 3): // Latitude
    case COMBINE(_GPS_SENTENCE_GPGGA, 2):
    case COMBINE(_GPS_SENTENCE_GNGNS, 2):
      _new_latitude = parse_degrees();
    bee6:	4aa0      	ldr	r2, [pc, #640]	; (c168 <TinyGPS::term_complete()+0xa28>)
    bee8:	49a1      	ldr	r1, [pc, #644]	; (c170 <TinyGPS::term_complete()+0xa30>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    beea:	4fa2      	ldr	r7, [pc, #648]	; (c174 <TinyGPS::term_complete()+0xa34>)
    beec:	48a2      	ldr	r0, [pc, #648]	; (c178 <TinyGPS::term_complete()+0xa38>)
    beee:	683f      	ldr	r7, [r7, #0]
    bef0:	9701      	str	r7, [sp, #4]
    bef2:	3603      	adds	r6, #3
    bef4:	fba2 2303 	umull	r2, r3, r2, r3
    bef8:	fba1 6106 	umull	r6, r1, r1, r6
    befc:	095a      	lsrs	r2, r3, #5
    befe:	0889      	lsrs	r1, r1, #2
    bf00:	fb00 1302 	mla	r3, r0, r2, r1
	return ret;
    bf04:	9a01      	ldr	r2, [sp, #4]
    bf06:	6163      	str	r3, [r4, #20]
      _new_position_fix = millis();
    bf08:	6522      	str	r2, [r4, #80]	; 0x50
      break;
    bf0a:	e442      	b.n	b792 <TinyGPS::term_complete()+0x52>
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bf0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
    bf10:	2b09      	cmp	r3, #9

// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
    bf12:	f100 0156 	add.w	r1, r0, #86	; 0x56
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bf16:	f200 8118 	bhi.w	c14a <TinyGPS::term_complete()+0xa0a>
    bf1a:	4608      	mov	r0, r1
    bf1c:	2300      	movs	r3, #0
    ret = 10 * ret + *str++ - '0';
    bf1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    bf22:	eb02 0343 	add.w	r3, r2, r3, lsl #1
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bf26:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    bf2a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
    bf2e:	2e09      	cmp	r6, #9
    ret = 10 * ret + *str++ - '0';
    bf30:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
}

long TinyGPS::gpsatol(const char *str)
{
  long ret = 0;
  while (gpsisdigit(*str))
    bf34:	d9f3      	bls.n	bf1e <TinyGPS::term_complete()+0x7de>
// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    bf36:	4a8c      	ldr	r2, [pc, #560]	; (c168 <TinyGPS::term_complete()+0xa28>)
    bf38:	488c      	ldr	r0, [pc, #560]	; (c16c <TinyGPS::term_complete()+0xa2c>)
    bf3a:	fba2 6203 	umull	r6, r2, r2, r3
    bf3e:	0952      	lsrs	r2, r2, #5
    bf40:	2664      	movs	r6, #100	; 0x64
    bf42:	fb06 3212 	mls	r2, r6, r2, r3
    bf46:	fb00 f602 	mul.w	r6, r0, r2
  for (p=_term; gpsisdigit(*p); ++p);
    bf4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    bf4e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    bf52:	2809      	cmp	r0, #9
    bf54:	d9f9      	bls.n	bf4a <TinyGPS::term_complete()+0x80a>
  if (*p == '.')
    bf56:	2a2e      	cmp	r2, #46	; 0x2e
    bf58:	d077      	beq.n	c04a <TinyGPS::term_complete()+0x90a>
        _new_latitude = -_new_latitude;
      break;
    case COMBINE(_GPS_SENTENCE_GPRMC, 5): // Longitude
    case COMBINE(_GPS_SENTENCE_GPGGA, 4):
    case COMBINE(_GPS_SENTENCE_GNGNS, 4):
      _new_longitude = parse_degrees();
    bf5a:	4a83      	ldr	r2, [pc, #524]	; (c168 <TinyGPS::term_complete()+0xa28>)
    bf5c:	4984      	ldr	r1, [pc, #528]	; (c170 <TinyGPS::term_complete()+0xa30>)
    bf5e:	4886      	ldr	r0, [pc, #536]	; (c178 <TinyGPS::term_complete()+0xa38>)
    bf60:	3603      	adds	r6, #3
    bf62:	fba2 2303 	umull	r2, r3, r2, r3
    bf66:	fba1 6106 	umull	r6, r1, r1, r6
    bf6a:	0889      	lsrs	r1, r1, #2
    bf6c:	095a      	lsrs	r2, r3, #5
    bf6e:	fb00 1302 	mla	r3, r0, r2, r1
    bf72:	61e3      	str	r3, [r4, #28]
      break;
    bf74:	e40d      	b.n	b792 <TinyGPS::term_complete()+0x52>
    bf76:	4981      	ldr	r1, [pc, #516]	; (c17c <TinyGPS::term_complete()+0xa3c>)
  return ret;
}

int TinyGPS::gpsstrcmp(const char *str1, const char *str2)
{
  while (*str1 && *str1 == *str2)
    bf78:	4632      	mov	r2, r6
    bf7a:	e003      	b.n	bf84 <TinyGPS::term_complete()+0x844>
    bf7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bf80:	429c      	cmp	r4, r3
    bf82:	d108      	bne.n	bf96 <TinyGPS::term_complete()+0x856>
    bf84:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    bf88:	2b00      	cmp	r3, #0
    bf8a:	d1f7      	bne.n	bf7c <TinyGPS::term_complete()+0x83c>
    else if (!gpsstrcmp(_term, _GPGGA_TERM))
      _sentence_type = _GPS_SENTENCE_GPGGA;
    else if (!gpsstrcmp(_term, _GNGNS_TERM))
      _sentence_type = _GPS_SENTENCE_GNGNS;
    else if (!gpsstrcmp(_term, _GNGSA_TERM) || !gpsstrcmp(_term, _GPGSA_TERM))
      _sentence_type = _GPS_SENTENCE_GNGSA;
    bf8c:	2303      	movs	r3, #3
    bf8e:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    bf92:	f7ff bbfe 	b.w	b792 <TinyGPS::term_complete()+0x52>
    bf96:	497a      	ldr	r1, [pc, #488]	; (c180 <TinyGPS::term_complete()+0xa40>)
  return ret;
}

int TinyGPS::gpsstrcmp(const char *str1, const char *str2)
{
  while (*str1 && *str1 == *str2)
    bf98:	4632      	mov	r2, r6
    bf9a:	e003      	b.n	bfa4 <TinyGPS::term_complete()+0x864>
    bf9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bfa0:	429c      	cmp	r4, r3
    bfa2:	d104      	bne.n	bfae <TinyGPS::term_complete()+0x86e>
    bfa4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    bfa8:	2b00      	cmp	r3, #0
    bfaa:	d1f7      	bne.n	bf9c <TinyGPS::term_complete()+0x85c>
    bfac:	e7ee      	b.n	bf8c <TinyGPS::term_complete()+0x84c>
    bfae:	4975      	ldr	r1, [pc, #468]	; (c184 <TinyGPS::term_complete()+0xa44>)
    bfb0:	4632      	mov	r2, r6
    bfb2:	e003      	b.n	bfbc <TinyGPS::term_complete()+0x87c>
    bfb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bfb8:	429c      	cmp	r4, r3
    bfba:	d108      	bne.n	bfce <TinyGPS::term_complete()+0x88e>
    bfbc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    bfc0:	2b00      	cmp	r3, #0
    bfc2:	d1f7      	bne.n	bfb4 <TinyGPS::term_complete()+0x874>
    else if (!gpsstrcmp(_term, _GNGNS_TERM))
      _sentence_type = _GPS_SENTENCE_GNGNS;
    else if (!gpsstrcmp(_term, _GNGSA_TERM) || !gpsstrcmp(_term, _GPGSA_TERM))
      _sentence_type = _GPS_SENTENCE_GNGSA;
    else if (!gpsstrcmp(_term, _GPGSV_TERM))
      _sentence_type = _GPS_SENTENCE_GPGSV;
    bfc4:	2304      	movs	r3, #4
    bfc6:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    bfca:	f7ff bbe2 	b.w	b792 <TinyGPS::term_complete()+0x52>
    bfce:	4a6e      	ldr	r2, [pc, #440]	; (c188 <TinyGPS::term_complete()+0xa48>)
    bfd0:	e003      	b.n	bfda <TinyGPS::term_complete()+0x89a>
  return ret;
}

int TinyGPS::gpsstrcmp(const char *str1, const char *str2)
{
  while (*str1 && *str1 == *str2)
    bfd2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    bfd6:	4299      	cmp	r1, r3
    bfd8:	d108      	bne.n	bfec <TinyGPS::term_complete()+0x8ac>
    bfda:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    bfde:	2b00      	cmp	r3, #0
    bfe0:	d1f7      	bne.n	bfd2 <TinyGPS::term_complete()+0x892>
    else if (!gpsstrcmp(_term, _GNGSA_TERM) || !gpsstrcmp(_term, _GPGSA_TERM))
      _sentence_type = _GPS_SENTENCE_GNGSA;
    else if (!gpsstrcmp(_term, _GPGSV_TERM))
      _sentence_type = _GPS_SENTENCE_GPGSV;
    else if (!gpsstrcmp(_term, _GLGSV_TERM))
      _sentence_type = _GPS_SENTENCE_GLGSV;
    bfe2:	2305      	movs	r3, #5
    bfe4:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    bfe8:	f7ff bbd3 	b.w	b792 <TinyGPS::term_complete()+0x52>
    else
      _sentence_type = _GPS_SENTENCE_OTHER;
    bfec:	2306      	movs	r3, #6
    bfee:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    bff2:	f7ff bbce 	b.w	b792 <TinyGPS::term_complete()+0x52>
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    bff6:	784f      	ldrb	r7, [r1, #1]
    bff8:	f1a7 0030 	sub.w	r0, r7, #48	; 0x30
    bffc:	b2c2      	uxtb	r2, r0
    bffe:	2a09      	cmp	r2, #9
    c000:	f101 0101 	add.w	r1, r1, #1
    c004:	f63f af6f 	bhi.w	bee6 <TinyGPS::term_complete()+0x7a6>
    {
      hundred1000ths_of_minute += mult * (*p - '0');
      mult /= 10;
    c008:	f8df e180 	ldr.w	lr, [pc, #384]	; c18c <TinyGPS::term_complete()+0xa4c>
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c00c:	f242 7210 	movw	r2, #10000	; 0x2710
    c010:	f811 7f01 	ldrb.w	r7, [r1, #1]!
    {
      hundred1000ths_of_minute += mult * (*p - '0');
    c014:	fb02 6600 	mla	r6, r2, r0, r6
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c018:	f1a7 0030 	sub.w	r0, r7, #48	; 0x30
    {
      hundred1000ths_of_minute += mult * (*p - '0');
      mult /= 10;
    c01c:	fbae 7202 	umull	r7, r2, lr, r2
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c020:	b2c7      	uxtb	r7, r0
    c022:	2f09      	cmp	r7, #9
    {
      hundred1000ths_of_minute += mult * (*p - '0');
      mult /= 10;
    c024:	ea4f 02d2 	mov.w	r2, r2, lsr #3
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c028:	d9f2      	bls.n	c010 <TinyGPS::term_complete()+0x8d0>
    c02a:	e75c      	b.n	bee6 <TinyGPS::term_complete()+0x7a6>
    case COMBINE(_GPS_SENTENCE_GLGSV, 15):
    case COMBINE(_GPS_SENTENCE_GLGSV, 19):
      uint8_t stren = (uint8_t)atoi(_term);
      if(stren == 0)  //remove the record, 0dB strength
      {
        tracked_sat_rec[_sat_index + (_term_number-7)/4] = 0;
    c02c:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
    c030:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
    c034:	1fd1      	subs	r1, r2, #7
    c036:	bf48      	it	mi
    c038:	1f11      	submi	r1, r2, #4
    c03a:	eb03 03a1 	add.w	r3, r3, r1, asr #2
    c03e:	331c      	adds	r3, #28
    c040:	2200      	movs	r2, #0
    c042:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    c046:	f7ff bba4 	b.w	b792 <TinyGPS::term_complete()+0x52>
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c04a:	784f      	ldrb	r7, [r1, #1]
    c04c:	f1a7 0030 	sub.w	r0, r7, #48	; 0x30
    c050:	b2c2      	uxtb	r2, r0
    c052:	2a09      	cmp	r2, #9
    c054:	f101 0101 	add.w	r1, r1, #1
    c058:	f63f af7f 	bhi.w	bf5a <TinyGPS::term_complete()+0x81a>
    {
      hundred1000ths_of_minute += mult * (*p - '0');
      mult /= 10;
    c05c:	f8df e12c 	ldr.w	lr, [pc, #300]	; c18c <TinyGPS::term_complete()+0xa4c>
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c060:	f242 7210 	movw	r2, #10000	; 0x2710
    c064:	f811 7f01 	ldrb.w	r7, [r1, #1]!
    {
      hundred1000ths_of_minute += mult * (*p - '0');
    c068:	fb02 6600 	mla	r6, r2, r0, r6
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c06c:	f1a7 0030 	sub.w	r0, r7, #48	; 0x30
    {
      hundred1000ths_of_minute += mult * (*p - '0');
      mult /= 10;
    c070:	fbae 7202 	umull	r7, r2, lr, r2
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c074:	b2c7      	uxtb	r7, r0
    c076:	2f09      	cmp	r7, #9
    {
      hundred1000ths_of_minute += mult * (*p - '0');
      mult /= 10;
    c078:	ea4f 02d2 	mov.w	r2, r2, lsr #3
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
  for (p=_term; gpsisdigit(*p); ++p);
  if (*p == '.')
  {
    unsigned long mult = 10000;
    while (gpsisdigit(*++p))
    c07c:	d9f2      	bls.n	c064 <TinyGPS::term_complete()+0x924>
    c07e:	e76c      	b.n	bf5a <TinyGPS::term_complete()+0x81a>
        }
      }
      _sat_index = msgId*4;   //4 sattelites/line
      if(_sentence_type == _GPS_SENTENCE_GLGSV)
      {
        _sat_index = msgId*4 + 12;   //Glonass offset by 12
    c080:	1cf3      	adds	r3, r6, #3
    c082:	009b      	lsls	r3, r3, #2
    c084:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
    c088:	f7ff bb83 	b.w	b792 <TinyGPS::term_complete()+0x52>
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    c08c:	7879      	ldrb	r1, [r7, #1]
    c08e:	3930      	subs	r1, #48	; 0x30
    c090:	b2c8      	uxtb	r0, r1
    c092:	2809      	cmp	r0, #9
    c094:	f63f adb7 	bhi.w	bc06 <TinyGPS::term_complete()+0x4c6>
    {
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
    c098:	78b8      	ldrb	r0, [r7, #2]
    c09a:	3830      	subs	r0, #48	; 0x30
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c09c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
      if (gpsisdigit(p[2]))
    c0a0:	b2c6      	uxtb	r6, r0
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c0a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      if (gpsisdigit(p[2]))
    c0a6:	2e09      	cmp	r6, #9
        ret += p[2] - '0';
    c0a8:	bf98      	it	ls
    c0aa:	181b      	addls	r3, r3, r0
    c0ac:	e5ab      	b.n	bc06 <TinyGPS::term_complete()+0x4c6>
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    c0ae:	7879      	ldrb	r1, [r7, #1]
    c0b0:	3930      	subs	r1, #48	; 0x30
    c0b2:	b2c8      	uxtb	r0, r1
    c0b4:	2809      	cmp	r0, #9
    c0b6:	f63f ae17 	bhi.w	bce8 <TinyGPS::term_complete()+0x5a8>
    {
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
    c0ba:	78b8      	ldrb	r0, [r7, #2]
    c0bc:	3830      	subs	r0, #48	; 0x30
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c0be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
      if (gpsisdigit(p[2]))
    c0c2:	b2c6      	uxtb	r6, r0
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c0c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      if (gpsisdigit(p[2]))
    c0c8:	2e09      	cmp	r6, #9
        ret += p[2] - '0';
    c0ca:	bf98      	it	ls
    c0cc:	181b      	addls	r3, r3, r0
    c0ce:	e60b      	b.n	bce8 <TinyGPS::term_complete()+0x5a8>
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    c0d0:	7879      	ldrb	r1, [r7, #1]
    c0d2:	3930      	subs	r1, #48	; 0x30
    c0d4:	b2c8      	uxtb	r0, r1
    c0d6:	2809      	cmp	r0, #9
    c0d8:	f63f ae86 	bhi.w	bde8 <TinyGPS::term_complete()+0x6a8>
    {
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
    c0dc:	78b8      	ldrb	r0, [r7, #2]
    c0de:	3830      	subs	r0, #48	; 0x30
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c0e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
      if (gpsisdigit(p[2]))
    c0e4:	b2c6      	uxtb	r6, r0
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c0e6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      if (gpsisdigit(p[2]))
    c0ea:	2e09      	cmp	r6, #9
        ret += p[2] - '0';
    c0ec:	bf98      	it	ls
    c0ee:	181b      	addls	r3, r3, r0
    c0f0:	e67a      	b.n	bde8 <TinyGPS::term_complete()+0x6a8>
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    c0f2:	7879      	ldrb	r1, [r7, #1]
    c0f4:	3930      	subs	r1, #48	; 0x30
    c0f6:	b2c8      	uxtb	r0, r1
    c0f8:	2809      	cmp	r0, #9
    c0fa:	f63f aeac 	bhi.w	be56 <TinyGPS::term_complete()+0x716>
    {
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
    c0fe:	78b8      	ldrb	r0, [r7, #2]
    c100:	3830      	subs	r0, #48	; 0x30
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c102:	eb01 0181 	add.w	r1, r1, r1, lsl #2
      if (gpsisdigit(p[2]))
    c106:	b2c6      	uxtb	r6, r0
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c108:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      if (gpsisdigit(p[2]))
    c10c:	2e09      	cmp	r6, #9
        ret += p[2] - '0';
    c10e:	bf98      	it	ls
    c110:	181b      	addls	r3, r3, r0
    c112:	e6a0      	b.n	be56 <TinyGPS::term_complete()+0x716>
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    c114:	7879      	ldrb	r1, [r7, #1]
    c116:	3930      	subs	r1, #48	; 0x30
    c118:	b2c8      	uxtb	r0, r1
    c11a:	2809      	cmp	r0, #9
    c11c:	f63f ae13 	bhi.w	bd46 <TinyGPS::term_complete()+0x606>
    {
      ret += 10 * (p[1] - '0');
      if (gpsisdigit(p[2]))
    c120:	78b8      	ldrb	r0, [r7, #2]
    c122:	3830      	subs	r0, #48	; 0x30
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c124:	eb01 0181 	add.w	r1, r1, r1, lsl #2
      if (gpsisdigit(p[2]))
    c128:	b2c6      	uxtb	r6, r0
  while (gpsisdigit(*p)) ++p;
  if (*p == '.')
  {
    if (gpsisdigit(p[1]))
    {
      ret += 10 * (p[1] - '0');
    c12a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
      if (gpsisdigit(p[2]))
    c12e:	2e09      	cmp	r6, #9
        ret += p[2] - '0';
    c130:	bf98      	it	ls
    c132:	181b      	addls	r3, r3, r0
    c134:	e607      	b.n	bd46 <TinyGPS::term_complete()+0x606>
    c136:	f104 0070 	add.w	r0, r4, #112	; 0x70
    c13a:	f006 fa5f 	bl	125fc <memset>
          {
            tracked_sat_rec[x] = 0;
          }
        }
      }
      _sat_index = msgId*4;   //4 sattelites/line
    c13e:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
    c142:	f7ff bb26 	b.w	b792 <TinyGPS::term_complete()+0x52>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    c146:	2300      	movs	r3, #0
    c148:	e5cb      	b.n	bce2 <TinyGPS::term_complete()+0x5a2>
// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    c14a:	2600      	movs	r6, #0

// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
    c14c:	4633      	mov	r3, r6
    c14e:	e702      	b.n	bf56 <TinyGPS::term_complete()+0x816>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    c150:	2300      	movs	r3, #0
    c152:	e67d      	b.n	be50 <TinyGPS::term_complete()+0x710>
    c154:	2300      	movs	r3, #0
    c156:	e644      	b.n	bde2 <TinyGPS::term_complete()+0x6a2>
// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
  unsigned long hundred1000ths_of_minute = (left_of_decimal % 100UL) * 100000UL;
    c158:	2600      	movs	r6, #0

// Parse a string in the form ddmm.mmmmmmm...
unsigned long TinyGPS::parse_degrees()
{
  char *p;
  unsigned long left_of_decimal = gpsatol(_term);
    c15a:	4633      	mov	r3, r6
    c15c:	e6c0      	b.n	bee0 <TinyGPS::term_complete()+0x7a0>
unsigned long TinyGPS::parse_decimal()
{
  char *p = _term;
  bool isneg = *p == '-';
  if (isneg) ++p;
  unsigned long ret = 100UL * gpsatol(p);
    c15e:	2300      	movs	r3, #0
    c160:	e54e      	b.n	bc00 <TinyGPS::term_complete()+0x4c0>
    c162:	2300      	movs	r3, #0
    c164:	e5ec      	b.n	bd40 <TinyGPS::term_complete()+0x600>
    c166:	bf00      	nop
    c168:	51eb851f 	.word	0x51eb851f
    c16c:	000186a0 	.word	0x000186a0
    c170:	aaaaaaab 	.word	0xaaaaaaab
    c174:	1fff6804 	.word	0x1fff6804
    c178:	000f4240 	.word	0x000f4240
    c17c:	000175fc 	.word	0x000175fc
    c180:	00017604 	.word	0x00017604
    c184:	0001760c 	.word	0x0001760c
    c188:	00017614 	.word	0x00017614
    c18c:	cccccccd 	.word	0xcccccccd

0000c190 <TinyGPS::encode(char)>:
bool TinyGPS::encode(char c)
{
  bool valid_sentence = false;

#ifndef _GPS_NO_STATS
  ++_encoded_characters;
    c190:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
//
// public methods
//

bool TinyGPS::encode(char c)
{
    c194:	b538      	push	{r3, r4, r5, lr}
    c196:	4603      	mov	r3, r0
  bool valid_sentence = false;

#ifndef _GPS_NO_STATS
  ++_encoded_characters;
    c198:	3201      	adds	r2, #1
#endif
  switch(c)
    c19a:	f1a1 000a 	sub.w	r0, r1, #10
bool TinyGPS::encode(char c)
{
  bool valid_sentence = false;

#ifndef _GPS_NO_STATS
  ++_encoded_characters;
    c19e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
#endif
  switch(c)
    c1a2:	2822      	cmp	r0, #34	; 0x22
    c1a4:	d83f      	bhi.n	c226 <TinyGPS::encode(char)+0x96>
    c1a6:	e8df f000 	tbb	[pc, r0]
    c1aa:	3e18      	.short	0x3e18
    c1ac:	3e3e183e 	.word	0x3e3e183e
    c1b0:	3e3e3e3e 	.word	0x3e3e3e3e
    c1b4:	3e3e3e3e 	.word	0x3e3e3e3e
    c1b8:	3e3e3e3e 	.word	0x3e3e3e3e
    c1bc:	3e3e3e3e 	.word	0x3e3e3e3e
    c1c0:	3e3e3e3e 	.word	0x3e3e3e3e
    c1c4:	3e3e3e2f 	.word	0x3e3e3e2f
    c1c8:	3e183e3e 	.word	0x3e183e3e
    c1cc:	12          	.byte	0x12
    c1cd:	00          	.byte	0x00
  {
  case ',': // term terminators
    _parity ^= c;
    c1ce:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    c1d2:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
    c1d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    c1da:	461d      	mov	r5, r3
  case '\r':
  case '\n':
  case '*':
    if (_term_offset < sizeof(_term))
    c1dc:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    c1e0:	2b0e      	cmp	r3, #14
    c1e2:	460c      	mov	r4, r1
    c1e4:	d932      	bls.n	c24c <TinyGPS::encode(char)+0xbc>
// public methods
//

bool TinyGPS::encode(char c)
{
  bool valid_sentence = false;
    c1e6:	2000      	movs	r0, #0
    if (_term_offset < sizeof(_term))
    {
      _term[_term_offset] = 0;
      valid_sentence = term_complete();
    }
    ++_term_number;
    c1e8:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    _term_offset = 0;
    _is_checksum_term = c == '*';
    c1ec:	f1a4 012a 	sub.w	r1, r4, #42	; 0x2a
    if (_term_offset < sizeof(_term))
    {
      _term[_term_offset] = 0;
      valid_sentence = term_complete();
    }
    ++_term_number;
    c1f0:	3301      	adds	r3, #1
    _term_offset = 0;
    c1f2:	2200      	movs	r2, #0
    _is_checksum_term = c == '*';
    c1f4:	fab1 f181 	clz	r1, r1
    c1f8:	0949      	lsrs	r1, r1, #5
    if (_term_offset < sizeof(_term))
    {
      _term[_term_offset] = 0;
      valid_sentence = term_complete();
    }
    ++_term_number;
    c1fa:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
    _term_offset = 0;
    c1fe:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
    _is_checksum_term = c == '*';
    c202:	f885 1055 	strb.w	r1, [r5, #85]	; 0x55
    return valid_sentence;
    c206:	bd38      	pop	{r3, r4, r5, pc}

  case '$': // sentence begin
    _term_number = _term_offset = 0;
    c208:	2000      	movs	r0, #0
    _parity = 0;
    _sentence_type = _GPS_SENTENCE_OTHER;
    c20a:	2206      	movs	r2, #6
    _term_offset = 0;
    _is_checksum_term = c == '*';
    return valid_sentence;

  case '$': // sentence begin
    _term_number = _term_offset = 0;
    c20c:	f883 0067 	strb.w	r0, [r3, #103]	; 0x67
    c210:	f883 0066 	strb.w	r0, [r3, #102]	; 0x66
    _parity = 0;
    c214:	f883 0054 	strb.w	r0, [r3, #84]	; 0x54
    _sentence_type = _GPS_SENTENCE_OTHER;
    c218:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    _is_checksum_term = false;
    c21c:	f883 0055 	strb.w	r0, [r3, #85]	; 0x55
    _gps_data_good = false;
    c220:	f883 0068 	strb.w	r0, [r3, #104]	; 0x68
    return valid_sentence;
    c224:	bd38      	pop	{r3, r4, r5, pc}
  }

  // ordinary characters
  if (_term_offset < sizeof(_term) - 1)
    c226:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
    c22a:	2a0d      	cmp	r2, #13
    c22c:	d805      	bhi.n	c23a <TinyGPS::encode(char)+0xaa>
    _term[_term_offset++] = c;
    c22e:	1898      	adds	r0, r3, r2
    c230:	3201      	adds	r2, #1
    c232:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    c236:	f880 1056 	strb.w	r1, [r0, #86]	; 0x56
  if (!_is_checksum_term)
    c23a:	f893 0055 	ldrb.w	r0, [r3, #85]	; 0x55
    c23e:	b968      	cbnz	r0, c25c <TinyGPS::encode(char)+0xcc>
    _parity ^= c;
    c240:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
    c244:	4051      	eors	r1, r2
    c246:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
    c24a:	bd38      	pop	{r3, r4, r5, pc}
  case '\r':
  case '\n':
  case '*':
    if (_term_offset < sizeof(_term))
    {
      _term[_term_offset] = 0;
    c24c:	442b      	add	r3, r5
    c24e:	2200      	movs	r2, #0
    c250:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
      valid_sentence = term_complete();
    c254:	4628      	mov	r0, r5
    c256:	f7ff fa73 	bl	b740 <TinyGPS::term_complete()>
    c25a:	e7c5      	b.n	c1e8 <TinyGPS::encode(char)+0x58>
  if (_term_offset < sizeof(_term) - 1)
    _term[_term_offset++] = c;
  if (!_is_checksum_term)
    _parity ^= c;

  return valid_sentence;
    c25c:	2000      	movs	r0, #0
}
    c25e:	bd38      	pop	{r3, r4, r5, pc}

0000c260 <TinyGPS::f_get_position(float*, float*, unsigned long*)>:
  if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ? 
   GPS_INVALID_AGE : millis() - _last_time_fix;
}

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
    c260:	b470      	push	{r4, r5, r6}

// lat/long in MILLIONTHs of a degree and age of fix in milliseconds
// (note: versions 12 and earlier gave this value in 100,000ths of a degree.
void TinyGPS::get_position(long *latitude, long *longitude, unsigned long *fix_age)
{
  if (latitude) *latitude = _latitude;
    c262:	6904      	ldr	r4, [r0, #16]
  if (longitude) *longitude = _longitude;
    c264:	6985      	ldr	r5, [r0, #24]
  if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ? 
   GPS_INVALID_AGE : millis() - _last_time_fix;
}

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
    c266:	b083      	sub	sp, #12
// (note: versions 12 and earlier gave this value in 100,000ths of a degree.
void TinyGPS::get_position(long *latitude, long *longitude, unsigned long *fix_age)
{
  if (latitude) *latitude = _latitude;
  if (longitude) *longitude = _longitude;
  if (fix_age) *fix_age = _last_position_fix == GPS_INVALID_FIX_TIME ? 
    c268:	b143      	cbz	r3, c27c <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x1c>
    c26a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   GPS_INVALID_AGE : millis() - _last_position_fix;
    c26c:	1c46      	adds	r6, r0, #1
    c26e:	d004      	beq.n	c27a <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x1a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c270:	4e13      	ldr	r6, [pc, #76]	; (c2c0 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x60>)
    c272:	6836      	ldr	r6, [r6, #0]
    c274:	9601      	str	r6, [sp, #4]
	return ret;
    c276:	9e01      	ldr	r6, [sp, #4]
    c278:	1a30      	subs	r0, r6, r0
    c27a:	6018      	str	r0, [r3, #0]

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
  long lat, lon;
  get_position(&lat, &lon, fix_age);
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    c27c:	4b11      	ldr	r3, [pc, #68]	; (c2c4 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x64>)
    c27e:	429c      	cmp	r4, r3
    c280:	d014      	beq.n	c2ac <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x4c>
    c282:	ee07 4a90 	vmov	s15, r4
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    c286:	ee07 5a10 	vmov	s14, r5

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
  long lat, lon;
  get_position(&lat, &lon, fix_age);
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    c28a:	eddf 6a0f 	vldr	s13, [pc, #60]	; c2c8 <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x68>
    c28e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    c292:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
  long lat, lon;
  get_position(&lat, &lon, fix_age);
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    c296:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    c29a:	eec7 7a26 	vdiv.f32	s15, s14, s13

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
  long lat, lon;
  get_position(&lat, &lon, fix_age);
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    c29e:	ed81 6a00 	vstr	s12, [r1]
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    c2a2:	edc2 7a00 	vstr	s15, [r2]
}
    c2a6:	b003      	add	sp, #12
    c2a8:	bc70      	pop	{r4, r5, r6}
    c2aa:	4770      	bx	lr

void TinyGPS::f_get_position(float *latitude, float *longitude, unsigned long *fix_age)
{
  long lat, lon;
  get_position(&lat, &lon, fix_age);
  *latitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lat / 1000000.0);
    c2ac:	eddf 7a07 	vldr	s15, [pc, #28]	; c2cc <TinyGPS::f_get_position(float*, float*, unsigned long*)+0x6c>
    c2b0:	edc1 7a00 	vstr	s15, [r1]
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
    c2b4:	edc2 7a00 	vstr	s15, [r2]
}
    c2b8:	b003      	add	sp, #12
    c2ba:	bc70      	pop	{r4, r5, r6}
    c2bc:	4770      	bx	lr
    c2be:	bf00      	nop
    c2c0:	1fff6804 	.word	0x1fff6804
    c2c4:	3b9ac9ff 	.word	0x3b9ac9ff
    c2c8:	49742400 	.word	0x49742400
    c2cc:	447a0000 	.word	0x447a0000

0000c2d0 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)>:

void TinyGPS::crack_datetime(int *year, byte *month, byte *day, 
  byte *hour, byte *minute, byte *second, byte *hundredths, unsigned long *age)
{
    c2d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c2d4:	b083      	sub	sp, #12
}

// date as ddmmyy, time as hhmmsscc, and age in milliseconds
void TinyGPS::get_datetime(unsigned long *date, unsigned long *time, unsigned long *age)
{
  if (date) *date = _date;
    c2d6:	6884      	ldr	r4, [r0, #8]
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
}

void TinyGPS::crack_datetime(int *year, byte *month, byte *day, 
  byte *hour, byte *minute, byte *second, byte *hundredths, unsigned long *age)
{
    c2d8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38

// date as ddmmyy, time as hhmmsscc, and age in milliseconds
void TinyGPS::get_datetime(unsigned long *date, unsigned long *time, unsigned long *age)
{
  if (date) *date = _date;
  if (time) *time = _time;
    c2dc:	6805      	ldr	r5, [r0, #0]
  *longitude = lat == GPS_INVALID_ANGLE ? GPS_INVALID_F_ANGLE : (lon / 1000000.0);
}

void TinyGPS::crack_datetime(int *year, byte *month, byte *day, 
  byte *hour, byte *minute, byte *second, byte *hundredths, unsigned long *age)
{
    c2de:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    c2e2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    c2e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    c2e8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
// date as ddmmyy, time as hhmmsscc, and age in milliseconds
void TinyGPS::get_datetime(unsigned long *date, unsigned long *time, unsigned long *age)
{
  if (date) *date = _date;
  if (time) *time = _time;
  if (age) *age = _last_time_fix == GPS_INVALID_FIX_TIME ? 
    c2ea:	f1b8 0f00 	cmp.w	r8, #0
    c2ee:	d00f      	beq.n	c310 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x40>
    c2f0:	6c40      	ldr	r0, [r0, #68]	; 0x44
   GPS_INVALID_AGE : millis() - _last_time_fix;
    c2f2:	f1b0 3fff 	cmp.w	r0, #4294967295
    c2f6:	d009      	beq.n	c30c <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x3c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c2f8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; c3c8 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf8>
    c2fc:	f8d9 9000 	ldr.w	r9, [r9]
    c300:	f8cd 9004 	str.w	r9, [sp, #4]
	return ret;
    c304:	f8dd 9004 	ldr.w	r9, [sp, #4]
    c308:	ebc0 0009 	rsb	r0, r0, r9
    c30c:	f8c8 0000 	str.w	r0, [r8]
void TinyGPS::crack_datetime(int *year, byte *month, byte *day, 
  byte *hour, byte *minute, byte *second, byte *hundredths, unsigned long *age)
{
  unsigned long date, time;
  get_datetime(&date, &time, age);
  if (year) 
    c310:	b179      	cbz	r1, c332 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x62>
  {
    *year = date % 100;
    c312:	482a      	ldr	r0, [pc, #168]	; (c3bc <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    c314:	fba0 8004 	umull	r8, r0, r0, r4
    c318:	0940      	lsrs	r0, r0, #5
    c31a:	f04f 0864 	mov.w	r8, #100	; 0x64
    c31e:	fb08 4010 	mls	r0, r8, r0, r4
    *year += *year > 80 ? 1900 : 2000;
    c322:	2851      	cmp	r0, #81	; 0x51
    c324:	f240 786c 	movw	r8, #1900	; 0x76c
    c328:	bf38      	it	cc
    c32a:	f44f 68fa 	movcc.w	r8, #2000	; 0x7d0
    c32e:	4440      	add	r0, r8
    c330:	6008      	str	r0, [r1, #0]
  }
  if (month) *month = (date / 100) % 100;
    c332:	b15a      	cbz	r2, c34c <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x7c>
    c334:	4921      	ldr	r1, [pc, #132]	; (c3bc <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    c336:	fba1 0804 	umull	r0, r8, r1, r4
    c33a:	ea4f 1858 	mov.w	r8, r8, lsr #5
    c33e:	fba1 0108 	umull	r0, r1, r1, r8
    c342:	0948      	lsrs	r0, r1, #5
    c344:	2164      	movs	r1, #100	; 0x64
    c346:	fb01 8110 	mls	r1, r1, r0, r8
    c34a:	7011      	strb	r1, [r2, #0]
  if (day) *day = date / 10000;
    c34c:	b123      	cbz	r3, c358 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x88>
    c34e:	4a1c      	ldr	r2, [pc, #112]	; (c3c0 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf0>)
    c350:	fba2 2404 	umull	r2, r4, r2, r4
    c354:	0b64      	lsrs	r4, r4, #13
    c356:	701c      	strb	r4, [r3, #0]
  if (hour) *hour = time / 1000000;
    c358:	f1bc 0f00 	cmp.w	ip, #0
    c35c:	d005      	beq.n	c36a <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0x9a>
    c35e:	4b19      	ldr	r3, [pc, #100]	; (c3c4 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf4>)
    c360:	fba3 2305 	umull	r2, r3, r3, r5
    c364:	0c9b      	lsrs	r3, r3, #18
    c366:	f88c 3000 	strb.w	r3, [ip]
  if (minute) *minute = (time / 10000) % 100;
    c36a:	f1be 0f00 	cmp.w	lr, #0
    c36e:	d00c      	beq.n	c38a <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xba>
    c370:	4b13      	ldr	r3, [pc, #76]	; (c3c0 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xf0>)
    c372:	4a12      	ldr	r2, [pc, #72]	; (c3bc <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    c374:	fba3 1305 	umull	r1, r3, r3, r5
    c378:	0b5b      	lsrs	r3, r3, #13
    c37a:	fba2 1203 	umull	r1, r2, r2, r3
    c37e:	0952      	lsrs	r2, r2, #5
    c380:	2164      	movs	r1, #100	; 0x64
    c382:	fb01 3312 	mls	r3, r1, r2, r3
    c386:	f88e 3000 	strb.w	r3, [lr]
  if (second) *second = (time / 100) % 100;
    c38a:	b157      	cbz	r7, c3a2 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xd2>
    c38c:	4b0b      	ldr	r3, [pc, #44]	; (c3bc <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    c38e:	fba3 2105 	umull	r2, r1, r3, r5
    c392:	0949      	lsrs	r1, r1, #5
    c394:	fba3 2301 	umull	r2, r3, r3, r1
    c398:	095a      	lsrs	r2, r3, #5
    c39a:	2364      	movs	r3, #100	; 0x64
    c39c:	fb03 1312 	mls	r3, r3, r2, r1
    c3a0:	703b      	strb	r3, [r7, #0]
  if (hundredths) *hundredths = time % 100;
    c3a2:	b13e      	cbz	r6, c3b4 <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xe4>
    c3a4:	4b05      	ldr	r3, [pc, #20]	; (c3bc <TinyGPS::crack_datetime(int*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned char*, unsigned long*)+0xec>)
    c3a6:	fba3 2305 	umull	r2, r3, r3, r5
    c3aa:	095b      	lsrs	r3, r3, #5
    c3ac:	2264      	movs	r2, #100	; 0x64
    c3ae:	fb02 5513 	mls	r5, r2, r3, r5
    c3b2:	7035      	strb	r5, [r6, #0]
}
    c3b4:	b003      	add	sp, #12
    c3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c3ba:	bf00      	nop
    c3bc:	51eb851f 	.word	0x51eb851f
    c3c0:	d1b71759 	.word	0xd1b71759
    c3c4:	431bde83 	.word	0x431bde83
    c3c8:	1fff6804 	.word	0x1fff6804

0000c3cc <TwoWire::available()>:
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
	}
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    c3cc:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    c3d0:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
	}
    c3d4:	1a10      	subs	r0, r2, r0
    c3d6:	4770      	bx	lr

0000c3d8 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    c3d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    c3dc:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    c3e0:	429a      	cmp	r2, r3
    c3e2:	d905      	bls.n	c3f0 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    c3e4:	1c5a      	adds	r2, r3, #1
    c3e6:	4403      	add	r3, r0
    c3e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    c3ec:	7e18      	ldrb	r0, [r3, #24]
    c3ee:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    c3f0:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    c3f4:	4770      	bx	lr
    c3f6:	bf00      	nop

0000c3f8 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    c3f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    c3fc:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    c400:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    c402:	bf86      	itte	hi
    c404:	181b      	addhi	r3, r3, r0
    c406:	7e18      	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    c408:	f04f 30ff 	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    c40c:	4770      	bx	lr
    c40e:	bf00      	nop

0000c410 <TwoWire::flush()>:
	virtual void flush(void) {
    c410:	4770      	bx	lr
    c412:	bf00      	nop

0000c414 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    c414:	b538      	push	{r3, r4, r5, lr}
    c416:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
    c418:	f8b0 005e 	ldrh.w	r0, [r0, #94]	; 0x5e
    c41c:	b190      	cbz	r0, c444 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    c41e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    c422:	4614      	mov	r4, r2
    c424:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    c428:	4294      	cmp	r4, r2
    c42a:	d80c      	bhi.n	c446 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    c42c:	f105 003b 	add.w	r0, r5, #59	; 0x3b
    c430:	4418      	add	r0, r3
    c432:	4622      	mov	r2, r4
    c434:	f002 f922 	bl	e67c <memcpy>
		txBufferLength += quantity;
    c438:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    c43c:	4423      	add	r3, r4
    c43e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    c442:	4620      	mov	r0, r4
		return quantity;
	}
	return 0;
}
    c444:	bd38      	pop	{r3, r4, r5, pc}
    c446:	2001      	movs	r0, #1
    c448:	4614      	mov	r4, r2
    c44a:	7128      	strb	r0, [r5, #4]
    c44c:	e7ee      	b.n	c42c <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    c44e:	bf00      	nop

0000c450 <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    c450:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    c454:	b16b      	cbz	r3, c472 <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    c456:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    c45a:	2b20      	cmp	r3, #32
    c45c:	d807      	bhi.n	c46e <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    c45e:	18c2      	adds	r2, r0, r3
    c460:	3301      	adds	r3, #1
    c462:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    c466:	2001      	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    c468:	f882 103b 	strb.w	r1, [r2, #59]	; 0x3b
    c46c:	4770      	bx	lr
    c46e:	2301      	movs	r3, #1
    c470:	7103      	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    c472:	2000      	movs	r0, #0
    c474:	4770      	bx	lr
    c476:	bf00      	nop

0000c478 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    c478:	2300      	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    c47a:	6942      	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    c47c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    c480:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    c484:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    c488:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    c48c:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    c490:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    c494:	ca06      	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    c496:	b430      	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    c498:	680d      	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    c49a:	6904      	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    c49c:	6643      	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    c49e:	432a      	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    c4a0:	6683      	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    c4a2:	600a      	str	r2, [r1, #0]
	port().C1 = 0;
    c4a4:	70a3      	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c4a6:	6942      	ldr	r2, [r0, #20]
    c4a8:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    c4ac:	4916      	ldr	r1, [pc, #88]	; (c508 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    c4ae:	6814      	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c4b0:	4413      	add	r3, r2
    c4b2:	7a1d      	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c4b4:	7b5b      	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c4b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c4ba:	021b      	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c4bc:	686d      	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c4be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    c4c2:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    c4c6:	602b      	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    c4c8:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    c4cc:	4413      	add	r3, r2
    c4ce:	7c9d      	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c4d0:	7ddb      	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    c4d2:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c4d6:	021b      	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    c4d8:	6849      	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c4da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    c4de:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    c4e2:	600b      	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    c4e4:	6821      	ldr	r1, [r4, #0]
    c4e6:	6853      	ldr	r3, [r2, #4]
    c4e8:	4219      	tst	r1, r3
    c4ea:	d005      	beq.n	c4f8 <TwoWire::begin()+0x80>
    c4ec:	6903      	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV64; // 1.0 MHz
	}
	port().FLT = 4;
#elif F_BUS == 60000000
	if (frequency < 400000) {
		port().F = 0x2C;	// 104 kHz
    c4ee:	222c      	movs	r2, #44	; 0x2c
    c4f0:	705a      	strb	r2, [r3, #1]
    c4f2:	6903      	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1C; // 416 kHz
	} else {
		port().F = 0x12; // 938 kHz
	}
	port().FLT = 4;
    c4f4:	2204      	movs	r2, #4
    c4f6:	719a      	strb	r2, [r3, #6]
    c4f8:	6903      	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    c4fa:	2220      	movs	r2, #32
    c4fc:	715a      	strb	r2, [r3, #5]
    c4fe:	6903      	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    c500:	2280      	movs	r2, #128	; 0x80
    c502:	709a      	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    c504:	bc30      	pop	{r4, r5}
    c506:	4770      	bx	lr
    c508:	0001778c 	.word	0x0001778c

0000c50c <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    c50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c510:	4f37      	ldr	r7, [pc, #220]	; (c5f0 <L_1710_delayMicroseconds+0x18>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c512:	f8df 90e0 	ldr.w	r9, [pc, #224]	; c5f4 <L_1710_delayMicroseconds+0x1c>
    c516:	683b      	ldr	r3, [r7, #0]
    c518:	6902      	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    c51a:	b082      	sub	sp, #8
    c51c:	4606      	mov	r6, r0
    c51e:	9300      	str	r3, [sp, #0]
	return ret;
    c520:	f8dd 8000 	ldr.w	r8, [sp]
	bool reset=false;
    c524:	2100      	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
#endif
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
	);
    c526:	f44f 7596 	mov.w	r5, #300	; 0x12c
	uint8_t i2c_status(void) {
		return port().S;
    c52a:	78d3      	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    c52c:	069b      	lsls	r3, r3, #26
    c52e:	d55b      	bpl.n	c5e8 <L_1710_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c530:	683b      	ldr	r3, [r7, #0]
    c532:	9301      	str	r3, [sp, #4]
	return ret;
    c534:	9b01      	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    c536:	ebc8 0303 	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    c53a:	2b0f      	cmp	r3, #15
    c53c:	d9f5      	bls.n	c52a <TwoWire::wait_idle()+0x1e>
    c53e:	b149      	cbz	r1, c554 <TwoWire::wait_idle()+0x48>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    c540:	2b10      	cmp	r3, #16
    c542:	d0f2      	beq.n	c52a <TwoWire::wait_idle()+0x1e>
			// bus stuck busy too long
			port().C1 = 0;
    c544:	2000      	movs	r0, #0
    c546:	7090      	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    c548:	6933      	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    c54a:	2280      	movs	r2, #128	; 0x80
    c54c:	709a      	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    c54e:	b002      	add	sp, #8
    c550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    c554:	6972      	ldr	r2, [r6, #20]
    c556:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    c55a:	4413      	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    c55c:	2105      	movs	r1, #5
    c55e:	7a18      	ldrb	r0, [r3, #8]
    c560:	f002 fd0e 	bl	ef80 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    c564:	6972      	ldr	r2, [r6, #20]
    c566:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    c56a:	4413      	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    c56c:	2101      	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    c56e:	f893 a012 	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    c572:	4650      	mov	r0, sl
    c574:	f002 fd04 	bl	ef80 <pinMode>
    c578:	2409      	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    c57a:	2100      	movs	r1, #0
    c57c:	4650      	mov	r0, sl
    c57e:	f002 fccd 	bl	ef1c <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
#endif
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
	);
    c582:	462b      	mov	r3, r5

0000c584 <L_1647_delayMicroseconds>:
    c584:	3b01      	subs	r3, #1
    c586:	d1fd      	bne.n	c584 <L_1647_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    c588:	2101      	movs	r1, #1
    c58a:	4650      	mov	r0, sl
    c58c:	f002 fcc6 	bl	ef1c <digitalWrite>
    c590:	462b      	mov	r3, r5

0000c592 <L_1661_delayMicroseconds>:
    c592:	3b01      	subs	r3, #1
    c594:	d1fd      	bne.n	c592 <L_1661_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    c596:	3c01      	subs	r4, #1
    c598:	d1ef      	bne.n	c57a <TwoWire::wait_idle()+0x6e>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c59a:	6970      	ldr	r0, [r6, #20]
    c59c:	f896 1061 	ldrb.w	r1, [r6, #97]	; 0x61
    c5a0:	4401      	add	r1, r0
    c5a2:	f44f 7216 	mov.w	r2, #600	; 0x258
    c5a6:	7a0c      	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c5a8:	7b4b      	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c5aa:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c5ae:	021b      	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    c5b0:	6849      	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c5b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    c5b6:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    c5ba:	600b      	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    c5bc:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    c5c0:	4403      	add	r3, r0
    c5c2:	7c99      	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c5c4:	7ddb      	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    c5c6:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c5ca:	021b      	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    c5cc:	6849      	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    c5ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    c5d2:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    c5d6:	600b      	str	r3, [r1, #0]

0000c5d8 <L_1710_delayMicroseconds>:
    c5d8:	3a01      	subs	r2, #1
    c5da:	d1fd      	bne.n	c5d8 <L_1710_delayMicroseconds>
    c5dc:	6932      	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    c5de:	78d3      	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    c5e0:	069b      	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    c5e2:	f04f 0101 	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    c5e6:	d4a3      	bmi.n	c530 <TwoWire::wait_idle()+0x24>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    c5e8:	2001      	movs	r0, #1
}
    c5ea:	b002      	add	sp, #8
    c5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5f0:	1fff6804 	.word	0x1fff6804
    c5f4:	0001778c 	.word	0x0001778c

0000c5f8 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    c5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    c5fa:	6903      	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    c5fc:	2212      	movs	r2, #18
    c5fe:	70da      	strb	r2, [r3, #3]
    c600:	6902      	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    c602:	7893      	ldrb	r3, [r2, #2]
    c604:	f003 0320 	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    c608:	b085      	sub	sp, #20
    c60a:	4604      	mov	r4, r0
    c60c:	460d      	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    c60e:	2b00      	cmp	r3, #0
    c610:	d05e      	beq.n	c6d0 <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    c612:	23b4      	movs	r3, #180	; 0xb4
    c614:	7093      	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c616:	493c      	ldr	r1, [pc, #240]	; (c708 <TwoWire::endTransmission(unsigned char)+0x110>)
    c618:	6922      	ldr	r2, [r4, #16]
    c61a:	680b      	ldr	r3, [r1, #0]
    c61c:	9300      	str	r3, [sp, #0]
	return ret;
    c61e:	9e00      	ldr	r6, [sp, #0]
    c620:	e005      	b.n	c62e <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c622:	680b      	ldr	r3, [r1, #0]
    c624:	9301      	str	r3, [sp, #4]
	return ret;
    c626:	9b01      	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    c628:	1b9b      	subs	r3, r3, r6
    c62a:	2b04      	cmp	r3, #4
    c62c:	d842      	bhi.n	c6b4 <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    c62e:	78d3      	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    c630:	f003 0320 	and.w	r3, r3, #32
    c634:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    c638:	2b00      	cmp	r3, #0
    c63a:	d0f2      	beq.n	c622 <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    c63c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    c640:	2b00      	cmp	r3, #0
    c642:	d031      	beq.n	c6a8 <TwoWire::endTransmission(unsigned char)+0xb0>
    c644:	f04f 0e00 	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    c648:	f04f 0c02 	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    c64c:	eb04 030e 	add.w	r3, r4, lr
    c650:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    c654:	7113      	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c656:	680b      	ldr	r3, [r1, #0]
    c658:	9303      	str	r3, [sp, #12]
	return ret;
    c65a:	9f03      	ldr	r7, [sp, #12]
    c65c:	6920      	ldr	r0, [r4, #16]
    c65e:	e007      	b.n	c670 <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    c660:	069b      	lsls	r3, r3, #26
    c662:	d50d      	bpl.n	c680 <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c664:	680b      	ldr	r3, [r1, #0]
    c666:	9302      	str	r3, [sp, #8]
	return ret;
    c668:	9b02      	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    c66a:	1bdb      	subs	r3, r3, r7
    c66c:	2b05      	cmp	r3, #5
    c66e:	d828      	bhi.n	c6c2 <TwoWire::endTransmission(unsigned char)+0xca>
    c670:	78c3      	ldrb	r3, [r0, #3]
    c672:	b2db      	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    c674:	f003 0202 	and.w	r2, r3, #2
    c678:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    c67c:	2a00      	cmp	r2, #0
    c67e:	d0ef      	beq.n	c660 <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    c680:	f880 c003 	strb.w	ip, [r0, #3]
    c684:	6926      	ldr	r6, [r4, #16]
    c686:	78f3      	ldrb	r3, [r6, #3]
    c688:	b2db      	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    c68a:	06df      	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    c68c:	4632      	mov	r2, r6
    c68e:	d42d      	bmi.n	c6ec <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    c690:	069f      	lsls	r7, r3, #26
    c692:	d52b      	bpl.n	c6ec <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    c694:	07db      	lsls	r3, r3, #31
    c696:	d431      	bmi.n	c6fc <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    c698:	f10e 0e01 	add.w	lr, lr, #1
    c69c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    c6a0:	fa5f fe8e 	uxtb.w	lr, lr
    c6a4:	4573      	cmp	r3, lr
    c6a6:	d8d1      	bhi.n	c64c <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    c6a8:	2000      	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    c6aa:	bb1d      	cbnz	r5, c6f4 <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    c6ac:	2300      	movs	r3, #0
    c6ae:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    c6b2:	e004      	b.n	c6be <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    c6b4:	7090      	strb	r0, [r2, #2]
    c6b6:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    c6b8:	2280      	movs	r2, #128	; 0x80
    c6ba:	709a      	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    c6bc:	2004      	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    c6be:	b005      	add	sp, #20
    c6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    c6c2:	7086      	strb	r6, [r0, #2]
    c6c4:	6923      	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    c6c6:	2280      	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    c6c8:	2004      	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    c6ca:	709a      	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    c6cc:	b005      	add	sp, #20
    c6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6d0:	f003 06ff 	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    c6d4:	f7ff ff1a 	bl	c50c <TwoWire::wait_idle()>
    c6d8:	b910      	cbnz	r0, c6e0 <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    c6da:	2004      	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    c6dc:	b005      	add	sp, #20
    c6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c6e0:	6923      	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    c6e2:	f884 605f 	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    c6e6:	22b0      	movs	r2, #176	; 0xb0
    c6e8:	709a      	strb	r2, [r3, #2]
    c6ea:	e794      	b.n	c616 <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    c6ec:	2380      	movs	r3, #128	; 0x80
    c6ee:	70b3      	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    c6f0:	2004      	movs	r0, #4
    c6f2:	e7da      	b.n	c6aa <TwoWire::endTransmission(unsigned char)+0xb2>
    c6f4:	6926      	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    c6f6:	2380      	movs	r3, #128	; 0x80
    c6f8:	70b3      	strb	r3, [r6, #2]
    c6fa:	e7d7      	b.n	c6ac <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    c6fc:	f1be 0f00 	cmp.w	lr, #0
    c700:	bf0c      	ite	eq
    c702:	2002      	moveq	r0, #2
    c704:	2003      	movne	r0, #3
    c706:	e7f6      	b.n	c6f6 <TwoWire::endTransmission(unsigned char)+0xfe>
    c708:	1fff6804 	.word	0x1fff6804

0000c70c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c710:	6906      	ldr	r6, [r0, #16]
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    c712:	2500      	movs	r5, #0
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    c714:	2712      	movs	r7, #18
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    c716:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	rxBufferLength = 0;
    c71a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    c71e:	70f7      	strb	r7, [r6, #3]
    c720:	f8d0 c010 	ldr.w	ip, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    c724:	f89c e002 	ldrb.w	lr, [ip, #2]
    c728:	f00e 0e20 	and.w	lr, lr, #32
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    c72c:	b088      	sub	sp, #32
    c72e:	4604      	mov	r4, r0
    c730:	4688      	mov	r8, r1
    c732:	4615      	mov	r5, r2
    c734:	461e      	mov	r6, r3
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    c736:	f1be 0f00 	cmp.w	lr, #0
    c73a:	d049      	beq.n	c7d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc4>
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    c73c:	23b4      	movs	r3, #180	; 0xb4
    c73e:	f88c 3002 	strb.w	r3, [ip, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c742:	4b79      	ldr	r3, [pc, #484]	; (c928 <L_3206_delayMicroseconds+0x1c>)
    c744:	6921      	ldr	r1, [r4, #16]
    c746:	681a      	ldr	r2, [r3, #0]
    c748:	9200      	str	r2, [sp, #0]
	return ret;
    c74a:	f8dd e000 	ldr.w	lr, [sp]
    c74e:	e006      	b.n	c75e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c750:	681a      	ldr	r2, [r3, #0]
    c752:	9201      	str	r2, [sp, #4]
	return ret;
    c754:	9801      	ldr	r0, [sp, #4]
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
    c756:	ebce 0000 	rsb	r0, lr, r0
    c75a:	2804      	cmp	r0, #4
    c75c:	d830      	bhi.n	c7c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
	uint8_t i2c_status(void) {
		return port().S;
    c75e:	78c8      	ldrb	r0, [r1, #3]
    c760:	f000 0020 	and.w	r0, r0, #32

	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    c764:	f000 07ff 	and.w	r7, r0, #255	; 0xff
    c768:	2800      	cmp	r0, #0
    c76a:	d0f1      	beq.n	c750 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
			//Serial.printf("requestFrom err2\n");
			return 0; // error generating start condition
		}
	}
	// send the address
	port().D = (address << 1) | 1;
    c76c:	ea4f 0248 	mov.w	r2, r8, lsl #1
    c770:	f042 0201 	orr.w	r2, r2, #1
    c774:	b2d2      	uxtb	r2, r2
    c776:	710a      	strb	r2, [r1, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c778:	681a      	ldr	r2, [r3, #0]
    c77a:	9202      	str	r2, [sp, #8]
	return ret;
    c77c:	f8dd e008 	ldr.w	lr, [sp, #8]
    c780:	6920      	ldr	r0, [r4, #16]
    c782:	e006      	b.n	c792 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c784:	681a      	ldr	r2, [r3, #0]
    c786:	9203      	str	r2, [sp, #12]
	return ret;
    c788:	9903      	ldr	r1, [sp, #12]
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    c78a:	ebce 0101 	rsb	r1, lr, r1
    c78e:	2905      	cmp	r1, #5
    c790:	d82a      	bhi.n	c7e8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xdc>
		}
	}
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    c792:	78c1      	ldrb	r1, [r0, #3]
    c794:	f001 0102 	and.w	r1, r1, #2
    c798:	f001 07ff 	and.w	r7, r1, #255	; 0xff
    c79c:	2900      	cmp	r1, #0
    c79e:	d0f1      	beq.n	c784 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("requestFrom err3\n");
			return 0; // clock stretch too long (during address)
		}
	}
	port().S = I2C_S_IICIF;
    c7a0:	f04f 0c02 	mov.w	ip, #2
    c7a4:	f880 c003 	strb.w	ip, [r0, #3]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    c7a8:	6922      	ldr	r2, [r4, #16]
	uint8_t i2c_status(void) {
		return port().S;
    c7aa:	78d1      	ldrb	r1, [r2, #3]
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
    c7ac:	f011 0711 	ands.w	r7, r1, #17
    c7b0:	d122      	bne.n	c7f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
		//Serial.printf("requestFrom err4\n");
		return 0;
	}
	if (length == 0) {
    c7b2:	bb2d      	cbnz	r5, c800 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
    c7b4:	2e00      	cmp	r6, #0
    c7b6:	bf0c      	ite	eq
    c7b8:	23a0      	moveq	r3, #160	; 0xa0
    c7ba:	2380      	movne	r3, #128	; 0x80
    c7bc:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err5\n");
		return 0;
    c7be:	e003      	b.n	c7c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    c7c0:	708f      	strb	r7, [r1, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    c7c2:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    c7c4:	2280      	movs	r2, #128	; 0x80
    c7c6:	709a      	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    c7c8:	4638      	mov	r0, r7
    c7ca:	b008      	add	sp, #32
    c7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7d0:	f00e 07ff 	and.w	r7, lr, #255	; 0xff
	if (port().C1 & I2C_C1_MST) {
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    c7d4:	f7ff fe9a 	bl	c50c <TwoWire::wait_idle()>
    c7d8:	2800      	cmp	r0, #0
    c7da:	d0f5      	beq.n	c7c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    c7dc:	6923      	ldr	r3, [r4, #16]
			//Serial.printf("requestFrom err1\n");
			return 0; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    c7de:	f884 705f 	strb.w	r7, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    c7e2:	22b0      	movs	r2, #176	; 0xb0
    c7e4:	709a      	strb	r2, [r3, #2]
    c7e6:	e7ac      	b.n	c742 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x36>
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    c7e8:	7087      	strb	r7, [r0, #2]
    c7ea:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    c7ec:	2280      	movs	r2, #128	; 0x80
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    c7ee:	4638      	mov	r0, r7
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    c7f0:	709a      	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    c7f2:	b008      	add	sp, #32
    c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	port().S = I2C_S_IICIF;
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
		// the slave device did not acknowledge
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
    c7f8:	2380      	movs	r3, #128	; 0x80
    c7fa:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err4\n");
		return 0;
    c7fc:	2700      	movs	r7, #0
    c7fe:	e7e3      	b.n	c7c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
    c800:	2d01      	cmp	r5, #1
    c802:	d077      	beq.n	c8f4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1e8>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
    c804:	21a0      	movs	r1, #160	; 0xa0
    c806:	7091      	strb	r1, [r2, #2]
    c808:	6921      	ldr	r1, [r4, #16]
	}
	tmp = port().D; // initiate the first receive
    c80a:	790a      	ldrb	r2, [r1, #4]
    c80c:	46be      	mov	lr, r7
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    c80e:	4667      	mov	r7, ip
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    c810:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c814:	681a      	ldr	r2, [r3, #0]
    c816:	9204      	str	r2, [sp, #16]
	return ret;
    c818:	9804      	ldr	r0, [sp, #16]
    c81a:	e005      	b.n	c828 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c81c:	681a      	ldr	r2, [r3, #0]
    c81e:	9205      	str	r2, [sp, #20]
	return ret;
    c820:	9a05      	ldr	r2, [sp, #20]
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
    c822:	1a12      	subs	r2, r2, r0
    c824:	2a05      	cmp	r2, #5
    c826:	d84c      	bhi.n	c8c2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b6>
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
    c828:	78ca      	ldrb	r2, [r1, #3]
    c82a:	f002 0202 	and.w	r2, r2, #2
    c82e:	f002 08ff 	and.w	r8, r2, #255	; 0xff
    c832:	2a00      	cmp	r2, #0
    c834:	d0f2      	beq.n	c81c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    c836:	70cf      	strb	r7, [r1, #3]
    c838:	6921      	ldr	r1, [r4, #16]
		status = port().S;
    c83a:	78ca      	ldrb	r2, [r1, #3]
    c83c:	b2d2      	uxtb	r2, r2
		if ((status & I2C_S_ARBL)) {
    c83e:	f012 0f10 	tst.w	r2, #16
    c842:	4608      	mov	r0, r1
    c844:	d15c      	bne.n	c900 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f4>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7a\n");
			return count;
		}
		if (!(status & I2C_S_BUSY)) {
    c846:	0692      	lsls	r2, r2, #26
    c848:	d55a      	bpl.n	c900 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f4>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
    c84a:	3d01      	subs	r5, #1
    c84c:	b2ed      	uxtb	r5, r5
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    c84e:	2d01      	cmp	r5, #1
    c850:	d04b      	beq.n	c8ea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1de>
		if (count < BUFFER_LENGTH) {
    c852:	f1be 0f1f 	cmp.w	lr, #31
    c856:	d93d      	bls.n	c8d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1c8>
			rxBuffer[count++] = port().D;
		} else {
			tmp = port().D;
    c858:	790a      	ldrb	r2, [r1, #4]
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
    c85a:	2d01      	cmp	r5, #1
    c85c:	d1da      	bne.n	c814 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c85e:	681a      	ldr	r2, [r3, #0]
    c860:	9206      	str	r2, [sp, #24]
	return ret;
    c862:	9d06      	ldr	r5, [sp, #24]
    c864:	e005      	b.n	c872 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x166>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    c866:	681a      	ldr	r2, [r3, #0]
    c868:	9207      	str	r2, [sp, #28]
	return ret;
    c86a:	9a07      	ldr	r2, [sp, #28]
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    c86c:	1b52      	subs	r2, r2, r5
    c86e:	2a05      	cmp	r2, #5
    c870:	d855      	bhi.n	c91e <L_3206_delayMicroseconds+0x12>
		} else {
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    c872:	78c2      	ldrb	r2, [r0, #3]
    c874:	f002 0202 	and.w	r2, r2, #2
    c878:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    c87c:	2a00      	cmp	r2, #0
    c87e:	d0f2      	beq.n	c866 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15a>
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
		}
	}
	port().S = I2C_S_IICIF;
    c880:	2302      	movs	r3, #2
    c882:	70c3      	strb	r3, [r0, #3]
    c884:	6922      	ldr	r2, [r4, #16]
	status = port().S;
    c886:	78d3      	ldrb	r3, [r2, #3]
    c888:	b2db      	uxtb	r3, r3
	if ((status & I2C_S_ARBL)) {
    c88a:	06d9      	lsls	r1, r3, #27
    c88c:	d43a      	bmi.n	c904 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f8>
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
		//Serial.printf("requestFrom err9a\n");
		return count;
	}
	if (!(status & I2C_S_BUSY)) {
    c88e:	069b      	lsls	r3, r3, #26
    c890:	d536      	bpl.n	c900 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f4>
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    c892:	23b0      	movs	r3, #176	; 0xb0
    c894:	7093      	strb	r3, [r2, #2]
	if (count < BUFFER_LENGTH) {
    c896:	f1be 0f1f 	cmp.w	lr, #31
    c89a:	6923      	ldr	r3, [r4, #16]
    c89c:	d841      	bhi.n	c922 <L_3206_delayMicroseconds+0x16>
		rxBuffer[count++] = port().D;
    c89e:	eb04 020e 	add.w	r2, r4, lr
    c8a2:	7919      	ldrb	r1, [r3, #4]
    c8a4:	7611      	strb	r1, [r2, #24]
    c8a6:	f10e 0e01 	add.w	lr, lr, #1
    c8aa:	fa5f fe8e 	uxtb.w	lr, lr
	} else {
		tmp = port().D;
	}
#if F_CPU > 120000000
	__asm__("nop");
    c8ae:	bf00      	nop
	__asm__("nop");
    c8b0:	bf00      	nop
	__asm__("nop");
    c8b2:	bf00      	nop
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
    c8b4:	b10e      	cbz	r6, c8ba <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1ae>
    c8b6:	2280      	movs	r2, #128	; 0x80
    c8b8:	709a      	strb	r2, [r3, #2]
	rxBufferLength = count;
    c8ba:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
	return count;
    c8be:	4677      	mov	r7, lr
    c8c0:	e782      	b.n	c7c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    c8c2:	f881 8002 	strb.w	r8, [r1, #2]
    c8c6:	6923      	ldr	r3, [r4, #16]
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    c8c8:	2280      	movs	r2, #128	; 0x80
    c8ca:	709a      	strb	r2, [r3, #2]
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    c8cc:	4677      	mov	r7, lr
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
			rxBufferLength = count;
    c8ce:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    c8d2:	e779      	b.n	c7c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
		if (count < BUFFER_LENGTH) {
			rxBuffer[count++] = port().D;
    c8d4:	eb04 020e 	add.w	r2, r4, lr
    c8d8:	f891 8004 	ldrb.w	r8, [r1, #4]
    c8dc:	f882 8018 	strb.w	r8, [r2, #24]
    c8e0:	f10e 0e01 	add.w	lr, lr, #1
    c8e4:	fa5f fe8e 	uxtb.w	lr, lr
    c8e8:	e7b7      	b.n	c85a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x14e>
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    c8ea:	f881 c002 	strb.w	ip, [r1, #2]
    c8ee:	6921      	ldr	r1, [r4, #16]
    c8f0:	4608      	mov	r0, r1
    c8f2:	e7ae      	b.n	c852 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x146>
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    c8f4:	21a8      	movs	r1, #168	; 0xa8
    c8f6:	7091      	strb	r1, [r2, #2]
    c8f8:	6920      	ldr	r0, [r4, #16]


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
    c8fa:	46be      	mov	lr, r7
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
    c8fc:	7902      	ldrb	r2, [r0, #4]
    c8fe:	e7ae      	b.n	c85e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x152>
    c900:	4677      	mov	r7, lr
    c902:	e761      	b.n	c7c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	if ((status & I2C_S_ARBL)) {
		// we lost bus arbitration to another master
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
    c904:	2110      	movs	r1, #16
#else
		"subs   %0, #1"				"\n\t"
#endif
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
	);
    c906:	f44f 7396 	mov.w	r3, #300	; 0x12c
    c90a:	70d1      	strb	r1, [r2, #3]

0000c90c <L_3206_delayMicroseconds>:
    c90c:	3b01      	subs	r3, #1
    c90e:	d1fd      	bne.n	c90c <L_3206_delayMicroseconds>
    c910:	6922      	ldr	r2, [r4, #16]
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    c912:	7893      	ldrb	r3, [r2, #2]
    c914:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		//Serial.printf("requestFrom err9a\n");
		return count;
    c918:	4677      	mov	r7, lr
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    c91a:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err9a\n");
		return count;
    c91c:	e754      	b.n	c7c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    c91e:	7081      	strb	r1, [r0, #2]
    c920:	e7d1      	b.n	c8c6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1ba>
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
	if (count < BUFFER_LENGTH) {
		rxBuffer[count++] = port().D;
	} else {
		tmp = port().D;
    c922:	791a      	ldrb	r2, [r3, #4]
    c924:	e7c3      	b.n	c8ae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1a2>
    c926:	bf00      	nop
    c928:	1fff6804 	.word	0x1fff6804

0000c92c <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    c92c:	b538      	push	{r3, r4, r5, lr}
    c92e:	4d4b      	ldr	r5, [pc, #300]	; (ca5c <i2c0_isr+0x130>)
    c930:	692a      	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    c932:	78d4      	ldrb	r4, [r2, #3]
    c934:	b2e4      	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    c936:	06e1      	lsls	r1, r4, #27
    c938:	d525      	bpl.n	c986 <i2c0_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    c93a:	2310      	movs	r3, #16
    c93c:	70d3      	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    c93e:	0663      	lsls	r3, r4, #25
    c940:	d520      	bpl.n	c984 <i2c0_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    c942:	f004 0404 	and.w	r4, r4, #4
    c946:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    c94a:	2c00      	cmp	r4, #0
    c94c:	d05d      	beq.n	ca0a <i2c0_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    c94e:	4944      	ldr	r1, [pc, #272]	; (ca60 <i2c0_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    c950:	6e6a      	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    c952:	4c42      	ldr	r4, [pc, #264]	; (ca5c <i2c0_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    c954:	2300      	movs	r3, #0
    c956:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
    c958:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    c95c:	2a00      	cmp	r2, #0
    c95e:	d068      	beq.n	ca32 <i2c0_isr+0x106>
				user_onRequest();
    c960:	4790      	blx	r2
			}
			if (txBufferLength == 0) {
    c962:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    c966:	2b00      	cmp	r3, #0
    c968:	d063      	beq.n	ca32 <i2c0_isr+0x106>
    c96a:	692b      	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    c96c:	22d0      	movs	r2, #208	; 0xd0
    c96e:	709a      	strb	r2, [r3, #2]
    c970:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    c972:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
    c976:	711a      	strb	r2, [r3, #4]
    c978:	692b      	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    c97a:	2201      	movs	r2, #1
    c97c:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    c980:	2202      	movs	r2, #2
    c982:	70da      	strb	r2, [r3, #3]
    c984:	bd38      	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    c986:	f004 0340 	and.w	r3, r4, #64	; 0x40
    c98a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    c98e:	2b00      	cmp	r3, #0
    c990:	d1d7      	bne.n	c942 <i2c0_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    c992:	7993      	ldrb	r3, [r2, #6]
    c994:	b2db      	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    c996:	f003 0160 	and.w	r1, r3, #96	; 0x60
    c99a:	2960      	cmp	r1, #96	; 0x60
    c99c:	d050      	beq.n	ca40 <i2c0_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    c99e:	7893      	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    c9a0:	f003 0310 	and.w	r3, r3, #16
    c9a4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    c9a8:	b1bb      	cbz	r3, c9da <i2c0_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    c9aa:	f014 0401 	ands.w	r4, r4, #1
    c9ae:	d139      	bne.n	ca24 <i2c0_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    c9b0:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
    c9b4:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
    c9b8:	4928      	ldr	r1, [pc, #160]	; (ca5c <i2c0_isr+0x130>)
    c9ba:	4298      	cmp	r0, r3
    c9bc:	d94c      	bls.n	ca58 <i2c0_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    c9be:	18c8      	adds	r0, r1, r3
    c9c0:	3301      	adds	r3, #1
    c9c2:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
    c9c6:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    c9ca:	7110      	strb	r0, [r2, #4]
    c9cc:	692b      	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    c9ce:	22d0      	movs	r2, #208	; 0xd0
    c9d0:	709a      	strb	r2, [r3, #2]
    c9d2:	692b      	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    c9d4:	2202      	movs	r2, #2
    c9d6:	70da      	strb	r2, [r3, #3]
    c9d8:	e7d4      	b.n	c984 <i2c0_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    c9da:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    c9de:	7993      	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    c9e0:	481e      	ldr	r0, [pc, #120]	; (ca5c <i2c0_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    c9e2:	f043 0320 	orr.w	r3, r3, #32
    c9e6:	7193      	strb	r3, [r2, #6]
    c9e8:	692b      	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    c9ea:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    c9ee:	791a      	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    c9f0:	291f      	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    c9f2:	b2d2      	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    c9f4:	d8c4      	bhi.n	c980 <i2c0_isr+0x54>
    c9f6:	4c1a      	ldr	r4, [pc, #104]	; (ca60 <i2c0_isr+0x134>)
    c9f8:	7824      	ldrb	r4, [r4, #0]
    c9fa:	2c00      	cmp	r4, #0
    c9fc:	d0c0      	beq.n	c980 <i2c0_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    c9fe:	1844      	adds	r4, r0, r1
    ca00:	3101      	adds	r1, #1
    ca02:	7622      	strb	r2, [r4, #24]
    ca04:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
    ca08:	e7ba      	b.n	c980 <i2c0_isr+0x54>
    ca0a:	692a      	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    ca0c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    ca10:	23c0      	movs	r3, #192	; 0xc0
    ca12:	7093      	strb	r3, [r2, #2]
    ca14:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    ca16:	4a12      	ldr	r2, [pc, #72]	; (ca60 <i2c0_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    ca18:	7919      	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    ca1a:	2101      	movs	r1, #1
    ca1c:	7011      	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    ca1e:	2202      	movs	r2, #2
    ca20:	70da      	strb	r2, [r3, #3]
    ca22:	e7af      	b.n	c984 <i2c0_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    ca24:	23c0      	movs	r3, #192	; 0xc0
    ca26:	7093      	strb	r3, [r2, #2]
    ca28:	692b      	ldr	r3, [r5, #16]
			data = port().D;
    ca2a:	791a      	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    ca2c:	2202      	movs	r2, #2
    ca2e:	70da      	strb	r2, [r3, #3]
    ca30:	e7a8      	b.n	c984 <i2c0_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    ca32:	2201      	movs	r2, #1
				txBuffer[0] = 0;
    ca34:	2300      	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    ca36:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    ca3a:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
    ca3e:	e794      	b.n	c96a <i2c0_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    ca40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ca44:	7193      	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    ca46:	6eab      	ldr	r3, [r5, #104]	; 0x68
    ca48:	b123      	cbz	r3, ca54 <i2c0_isr+0x128>
			rxBufferIndex = 0;
    ca4a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    ca4e:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
    ca52:	4798      	blx	r3
    ca54:	692a      	ldr	r2, [r5, #16]
    ca56:	e7a2      	b.n	c99e <i2c0_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    ca58:	7114      	strb	r4, [r2, #4]
    ca5a:	e7b7      	b.n	c9cc <i2c0_isr+0xa0>
    ca5c:	1fff49fc 	.word	0x1fff49fc
    ca60:	1fff6750 	.word	0x1fff6750

0000ca64 <i2c1_isr>:
void i2c0_isr(void) { Wire.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    ca64:	b538      	push	{r3, r4, r5, lr}
    ca66:	4d4b      	ldr	r5, [pc, #300]	; (cb94 <i2c1_isr+0x130>)
    ca68:	692a      	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    ca6a:	78d4      	ldrb	r4, [r2, #3]
    ca6c:	b2e4      	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    ca6e:	06e1      	lsls	r1, r4, #27
    ca70:	d525      	bpl.n	cabe <i2c1_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    ca72:	2310      	movs	r3, #16
    ca74:	70d3      	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    ca76:	0663      	lsls	r3, r4, #25
    ca78:	d520      	bpl.n	cabc <i2c1_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    ca7a:	f004 0404 	and.w	r4, r4, #4
    ca7e:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    ca82:	2c00      	cmp	r4, #0
    ca84:	d05d      	beq.n	cb42 <i2c1_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    ca86:	4944      	ldr	r1, [pc, #272]	; (cb98 <i2c1_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    ca88:	6e6a      	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    ca8a:	4c42      	ldr	r4, [pc, #264]	; (cb94 <i2c1_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    ca8c:	2300      	movs	r3, #0
    ca8e:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
    ca90:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    ca94:	2a00      	cmp	r2, #0
    ca96:	d068      	beq.n	cb6a <i2c1_isr+0x106>
				user_onRequest();
    ca98:	4790      	blx	r2
			}
			if (txBufferLength == 0) {
    ca9a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d063      	beq.n	cb6a <i2c1_isr+0x106>
    caa2:	692b      	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    caa4:	22d0      	movs	r2, #208	; 0xd0
    caa6:	709a      	strb	r2, [r3, #2]
    caa8:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    caaa:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
    caae:	711a      	strb	r2, [r3, #4]
    cab0:	692b      	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    cab2:	2201      	movs	r2, #1
    cab4:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cab8:	2202      	movs	r2, #2
    caba:	70da      	strb	r2, [r3, #3]
    cabc:	bd38      	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    cabe:	f004 0340 	and.w	r3, r4, #64	; 0x40
    cac2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cac6:	2b00      	cmp	r3, #0
    cac8:	d1d7      	bne.n	ca7a <i2c1_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    caca:	7993      	ldrb	r3, [r2, #6]
    cacc:	b2db      	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    cace:	f003 0160 	and.w	r1, r3, #96	; 0x60
    cad2:	2960      	cmp	r1, #96	; 0x60
    cad4:	d050      	beq.n	cb78 <i2c1_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    cad6:	7893      	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    cad8:	f003 0310 	and.w	r3, r3, #16
    cadc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    cae0:	b1bb      	cbz	r3, cb12 <i2c1_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    cae2:	f014 0401 	ands.w	r4, r4, #1
    cae6:	d139      	bne.n	cb5c <i2c1_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    cae8:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
    caec:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
    caf0:	4928      	ldr	r1, [pc, #160]	; (cb94 <i2c1_isr+0x130>)
    caf2:	4298      	cmp	r0, r3
    caf4:	d94c      	bls.n	cb90 <i2c1_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    caf6:	18c8      	adds	r0, r1, r3
    caf8:	3301      	adds	r3, #1
    cafa:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
    cafe:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    cb02:	7110      	strb	r0, [r2, #4]
    cb04:	692b      	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    cb06:	22d0      	movs	r2, #208	; 0xd0
    cb08:	709a      	strb	r2, [r3, #2]
    cb0a:	692b      	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cb0c:	2202      	movs	r2, #2
    cb0e:	70da      	strb	r2, [r3, #3]
    cb10:	e7d4      	b.n	cabc <i2c1_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    cb12:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    cb16:	7993      	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    cb18:	481e      	ldr	r0, [pc, #120]	; (cb94 <i2c1_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    cb1a:	f043 0320 	orr.w	r3, r3, #32
    cb1e:	7193      	strb	r3, [r2, #6]
    cb20:	692b      	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    cb22:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    cb26:	791a      	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    cb28:	291f      	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    cb2a:	b2d2      	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    cb2c:	d8c4      	bhi.n	cab8 <i2c1_isr+0x54>
    cb2e:	4c1a      	ldr	r4, [pc, #104]	; (cb98 <i2c1_isr+0x134>)
    cb30:	7824      	ldrb	r4, [r4, #0]
    cb32:	2c00      	cmp	r4, #0
    cb34:	d0c0      	beq.n	cab8 <i2c1_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    cb36:	1844      	adds	r4, r0, r1
    cb38:	3101      	adds	r1, #1
    cb3a:	7622      	strb	r2, [r4, #24]
    cb3c:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
    cb40:	e7ba      	b.n	cab8 <i2c1_isr+0x54>
    cb42:	692a      	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    cb44:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    cb48:	23c0      	movs	r3, #192	; 0xc0
    cb4a:	7093      	strb	r3, [r2, #2]
    cb4c:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    cb4e:	4a12      	ldr	r2, [pc, #72]	; (cb98 <i2c1_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    cb50:	7919      	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    cb52:	2101      	movs	r1, #1
    cb54:	7011      	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cb56:	2202      	movs	r2, #2
    cb58:	70da      	strb	r2, [r3, #3]
    cb5a:	e7af      	b.n	cabc <i2c1_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    cb5c:	23c0      	movs	r3, #192	; 0xc0
    cb5e:	7093      	strb	r3, [r2, #2]
    cb60:	692b      	ldr	r3, [r5, #16]
			data = port().D;
    cb62:	791a      	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cb64:	2202      	movs	r2, #2
    cb66:	70da      	strb	r2, [r3, #3]
    cb68:	e7a8      	b.n	cabc <i2c1_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    cb6a:	2201      	movs	r2, #1
				txBuffer[0] = 0;
    cb6c:	2300      	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    cb6e:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    cb72:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
    cb76:	e794      	b.n	caa2 <i2c1_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    cb78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    cb7c:	7193      	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    cb7e:	6eab      	ldr	r3, [r5, #104]	; 0x68
    cb80:	b123      	cbz	r3, cb8c <i2c1_isr+0x128>
			rxBufferIndex = 0;
    cb82:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    cb86:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
    cb8a:	4798      	blx	r3
    cb8c:	692a      	ldr	r2, [r5, #16]
    cb8e:	e7a2      	b.n	cad6 <i2c1_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    cb90:	7114      	strb	r4, [r2, #4]
    cb92:	e7b7      	b.n	cb04 <i2c1_isr+0xa0>
    cb94:	1fff4a68 	.word	0x1fff4a68
    cb98:	1fff6750 	.word	0x1fff6750

0000cb9c <i2c2_isr>:
void i2c1_isr(void) { Wire1.isr(); }
#endif
#ifdef WIRE_IMPLEMENT_WIRE2
constexpr uintptr_t i2c2_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C2));
TwoWire Wire2(i2c2_addr, TwoWire::i2c2_hardware);
void i2c2_isr(void) { Wire2.isr(); }
    cb9c:	b538      	push	{r3, r4, r5, lr}
    cb9e:	4d4b      	ldr	r5, [pc, #300]	; (cccc <i2c2_isr+0x130>)
    cba0:	692a      	ldr	r2, [r5, #16]
void TwoWire::isr(void)
{
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    cba2:	78d4      	ldrb	r4, [r2, #3]
    cba4:	b2e4      	uxtb	r4, r4
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    cba6:	06e1      	lsls	r1, r4, #27
    cba8:	d525      	bpl.n	cbf6 <i2c2_isr+0x5a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    cbaa:	2310      	movs	r3, #16
    cbac:	70d3      	strb	r3, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    cbae:	0663      	lsls	r3, r4, #25
    cbb0:	d520      	bpl.n	cbf4 <i2c2_isr+0x58>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    cbb2:	f004 0404 	and.w	r4, r4, #4
    cbb6:	f004 03ff 	and.w	r3, r4, #255	; 0xff
    cbba:	2c00      	cmp	r4, #0
    cbbc:	d05d      	beq.n	cc7a <i2c2_isr+0xde>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    cbbe:	4944      	ldr	r1, [pc, #272]	; (ccd0 <i2c2_isr+0x134>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    cbc0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
			txBufferLength = 0;
    cbc2:	4c42      	ldr	r4, [pc, #264]	; (cccc <i2c2_isr+0x130>)
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    cbc4:	2300      	movs	r3, #0
    cbc6:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
    cbc8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			if (user_onRequest != NULL) {
    cbcc:	2a00      	cmp	r2, #0
    cbce:	d068      	beq.n	cca2 <i2c2_isr+0x106>
				user_onRequest();
    cbd0:	4790      	blx	r2
			}
			if (txBufferLength == 0) {
    cbd2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    cbd6:	2b00      	cmp	r3, #0
    cbd8:	d063      	beq.n	cca2 <i2c2_isr+0x106>
    cbda:	692b      	ldr	r3, [r5, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    cbdc:	22d0      	movs	r2, #208	; 0xd0
    cbde:	709a      	strb	r2, [r3, #2]
    cbe0:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
    cbe2:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
    cbe6:	711a      	strb	r2, [r3, #4]
    cbe8:	692b      	ldr	r3, [r5, #16]
			txBufferIndex = 1;
    cbea:	2201      	movs	r2, #1
    cbec:	f885 205c 	strb.w	r2, [r5, #92]	; 0x5c
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cbf0:	2202      	movs	r2, #2
    cbf2:	70da      	strb	r2, [r3, #3]
    cbf4:	bd38      	pop	{r3, r4, r5, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    cbf6:	f004 0340 	and.w	r3, r4, #64	; 0x40
    cbfa:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    cbfe:	2b00      	cmp	r3, #0
    cc00:	d1d7      	bne.n	cbb2 <i2c2_isr+0x16>
		}
		port().S = I2C_S_IICIF;
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
    cc02:	7993      	ldrb	r3, [r2, #6]
    cc04:	b2db      	uxtb	r3, r3
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
    cc06:	f003 0160 	and.w	r1, r3, #96	; 0x60
    cc0a:	2960      	cmp	r1, #96	; 0x60
    cc0c:	d050      	beq.n	ccb0 <i2c2_isr+0x114>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    cc0e:	7893      	ldrb	r3, [r2, #2]
	if (c1 & I2C_C1_TX) {
    cc10:	f003 0310 	and.w	r3, r3, #16
    cc14:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    cc18:	b1bb      	cbz	r3, cc4a <i2c2_isr+0xae>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    cc1a:	f014 0401 	ands.w	r4, r4, #1
    cc1e:	d139      	bne.n	cc94 <i2c2_isr+0xf8>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    cc20:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
    cc24:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
    cc28:	4928      	ldr	r1, [pc, #160]	; (cccc <i2c2_isr+0x130>)
    cc2a:	4298      	cmp	r0, r3
    cc2c:	d94c      	bls.n	ccc8 <i2c2_isr+0x12c>
				port().D = txBuffer[txBufferIndex++];
    cc2e:	18c8      	adds	r0, r1, r3
    cc30:	3301      	adds	r3, #1
    cc32:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
    cc36:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
    cc3a:	7110      	strb	r0, [r2, #4]
    cc3c:	692b      	ldr	r3, [r5, #16]
			} else {
				port().D = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    cc3e:	22d0      	movs	r2, #208	; 0xd0
    cc40:	709a      	strb	r2, [r3, #2]
    cc42:	692b      	ldr	r3, [r5, #16]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cc44:	2202      	movs	r2, #2
    cc46:	70da      	strb	r2, [r3, #3]
    cc48:	e7d4      	b.n	cbf4 <i2c2_isr+0x58>
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    cc4a:	f885 1060 	strb.w	r1, [r5, #96]	; 0x60
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    cc4e:	7993      	ldrb	r3, [r2, #6]
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    cc50:	481e      	ldr	r0, [pc, #120]	; (cccc <i2c2_isr+0x130>)
		#ifdef WIRE_HAS_STOP_INTERRUPT
		port().FLT |= I2C_FLT_STOPIE;
    cc52:	f043 0320 	orr.w	r3, r3, #32
    cc56:	7193      	strb	r3, [r2, #6]
    cc58:	692b      	ldr	r3, [r5, #16]
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    cc5a:	f895 1039 	ldrb.w	r1, [r5, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    cc5e:	791a      	ldrb	r2, [r3, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    cc60:	291f      	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    cc62:	b2d2      	uxtb	r2, r2
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    cc64:	d8c4      	bhi.n	cbf0 <i2c2_isr+0x54>
    cc66:	4c1a      	ldr	r4, [pc, #104]	; (ccd0 <i2c2_isr+0x134>)
    cc68:	7824      	ldrb	r4, [r4, #0]
    cc6a:	2c00      	cmp	r4, #0
    cc6c:	d0c0      	beq.n	cbf0 <i2c2_isr+0x54>
			rxBuffer[rxBufferLength++] = data;
    cc6e:	1844      	adds	r4, r0, r1
    cc70:	3101      	adds	r1, #1
    cc72:	7622      	strb	r2, [r4, #24]
    cc74:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
    cc78:	e7ba      	b.n	cbf0 <i2c2_isr+0x54>
    cc7a:	692a      	ldr	r2, [r5, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    cc7c:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    cc80:	23c0      	movs	r3, #192	; 0xc0
    cc82:	7093      	strb	r3, [r2, #2]
    cc84:	692b      	ldr	r3, [r5, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    cc86:	4a12      	ldr	r2, [pc, #72]	; (ccd0 <i2c2_isr+0x134>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    cc88:	7919      	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    cc8a:	2101      	movs	r1, #1
    cc8c:	7011      	strb	r1, [r2, #0]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cc8e:	2202      	movs	r2, #2
    cc90:	70da      	strb	r2, [r3, #3]
    cc92:	e7af      	b.n	cbf4 <i2c2_isr+0x58>
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    cc94:	23c0      	movs	r3, #192	; 0xc0
    cc96:	7093      	strb	r3, [r2, #2]
    cc98:	692b      	ldr	r3, [r5, #16]
			data = port().D;
    cc9a:	791a      	ldrb	r2, [r3, #4]
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
			rxBuffer[rxBufferLength++] = data;
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    cc9c:	2202      	movs	r2, #2
    cc9e:	70da      	strb	r2, [r3, #3]
    cca0:	e7a8      	b.n	cbf4 <i2c2_isr+0x58>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    cca2:	2201      	movs	r2, #1
				txBuffer[0] = 0;
    cca4:	2300      	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    cca6:	f885 205d 	strb.w	r2, [r5, #93]	; 0x5d
				txBuffer[0] = 0;
    ccaa:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
    ccae:	e794      	b.n	cbda <i2c2_isr+0x3e>
		return;
	}
	#if defined(WIRE_HAS_STOP_INTERRUPT)
	c1 = port().FLT;
	if ((c1 & I2C_FLT_STOPF) && (c1 & I2C_FLT_STOPIE)) {
		port().FLT = c1 & ~I2C_FLT_STOPIE;
    ccb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ccb4:	7193      	strb	r3, [r2, #6]
		if (user_onReceive != NULL) {
    ccb6:	6eab      	ldr	r3, [r5, #104]	; 0x68
    ccb8:	b123      	cbz	r3, ccc4 <i2c2_isr+0x128>
			rxBufferIndex = 0;
    ccba:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
			user_onReceive(rxBufferLength);
    ccbe:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
    ccc2:	4798      	blx	r3
    ccc4:	692a      	ldr	r2, [r5, #16]
    ccc6:	e7a2      	b.n	cc0e <i2c2_isr+0x72>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
				port().D = txBuffer[txBufferIndex++];
			} else {
				port().D = 0;
    ccc8:	7114      	strb	r4, [r2, #4]
    ccca:	e7b7      	b.n	cc3c <i2c2_isr+0xa0>
    cccc:	1fff4990 	.word	0x1fff4990
    ccd0:	1fff6750 	.word	0x1fff6750

0000ccd4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
    ccd4:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
    ccd8:	bf28      	it	cs
    ccda:	f44f 7160 	movcs.w	r1, #896	; 0x380
    ccde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cce0:	4606      	mov	r6, r0
    cce2:	460d      	mov	r5, r1
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
    cce4:	b672      	cpsid	i
	memory_pool = data;
    cce6:	4a12      	ldr	r2, [pc, #72]	; (cd30 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5c>)
	memory_pool_first_mask = 0;
    cce8:	4b12      	ldr	r3, [pc, #72]	; (cd34 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x60>)

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
	__disable_irq();
	memory_pool = data;
    ccea:	6016      	str	r6, [r2, #0]
	memory_pool_first_mask = 0;
    ccec:	2400      	movs	r4, #0
    ccee:	4812      	ldr	r0, [pc, #72]	; (cd38 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
    ccf0:	801c      	strh	r4, [r3, #0]
    ccf2:	4621      	mov	r1, r4
    ccf4:	2270      	movs	r2, #112	; 0x70
    ccf6:	f005 fc81 	bl	125fc <memset>
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    ccfa:	b1bd      	cbz	r5, cd2c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x58>
    ccfc:	4f0e      	ldr	r7, [pc, #56]	; (cd38 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>)
    ccfe:	4621      	mov	r1, r4
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    cd00:	2401      	movs	r4, #1
    cd02:	0948      	lsrs	r0, r1, #5
    cd04:	f001 021f 	and.w	r2, r1, #31
    cd08:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
    cd0c:	fa04 f202 	lsl.w	r2, r4, r2
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    cd10:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    cd12:	4313      	orrs	r3, r2
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    cd14:	42a9      	cmp	r1, r5
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
    cd16:	f847 3020 	str.w	r3, [r7, r0, lsl #2]
	memory_pool = data;
	memory_pool_first_mask = 0;
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
    cd1a:	d1f2      	bne.n	cd02 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x2e>
    cd1c:	4630      	mov	r0, r6
    cd1e:	2300      	movs	r3, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
    cd20:	8043      	strh	r3, [r0, #2]
		memory_pool_available_mask[i] = 0;
	}
	for (i=0; i < num; i++) {
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
	}
	for (i=0; i < num; i++) {
    cd22:	3301      	adds	r3, #1
    cd24:	42ab      	cmp	r3, r5
    cd26:	f500 7082 	add.w	r0, r0, #260	; 0x104
    cd2a:	d1f9      	bne.n	cd20 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x4c>
		data[i].memory_pool_index = i;
	}
	__enable_irq();
    cd2c:	b662      	cpsie	i

}
    cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cd30:	1fff675c 	.word	0x1fff675c
    cd34:	1fff67d6 	.word	0x1fff67d6
    cd38:	1fff6764 	.word	0x1fff6764

0000cd3c <AudioStream::allocate()>:

// Allocate 1 audio data block.  If successful
// the caller is the only owner of this new block
audio_block_t * AudioStream::allocate(void)
{
    cd3c:	b4f0      	push	{r4, r5, r6, r7}
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    cd3e:	b672      	cpsid	i
	index = memory_pool_first_mask;
    cd40:	4f23      	ldr	r7, [pc, #140]	; (cdd0 <AudioStream::allocate()+0x94>)
	p += index;
    cd42:	4e24      	ldr	r6, [pc, #144]	; (cdd4 <AudioStream::allocate()+0x98>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    cd44:	883c      	ldrh	r4, [r7, #0]
	p += index;
	while (1) {
		if (p >= end) {
    cd46:	f106 0370 	add.w	r3, r6, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    cd4a:	eb06 0084 	add.w	r0, r6, r4, lsl #2
	while (1) {
		if (p >= end) {
    cd4e:	4298      	cmp	r0, r3
    cd50:	d212      	bcs.n	cd78 <AudioStream::allocate()+0x3c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    cd52:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
		if (avail) break;
    cd56:	b999      	cbnz	r1, cd80 <AudioStream::allocate()+0x44>
    cd58:	1d02      	adds	r2, r0, #4
    cd5a:	f106 0573 	add.w	r5, r6, #115	; 0x73
    cd5e:	1c63      	adds	r3, r4, #1
    cd60:	1aad      	subs	r5, r5, r2
    cd62:	eb03 0595 	add.w	r5, r3, r5, lsr #2
    cd66:	e003      	b.n	cd70 <AudioStream::allocate()+0x34>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    cd68:	f852 1b04 	ldr.w	r1, [r2], #4
		if (avail) break;
    cd6c:	b941      	cbnz	r1, cd80 <AudioStream::allocate()+0x44>
    cd6e:	3301      	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    cd70:	42ab      	cmp	r3, r5
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    cd72:	461c      	mov	r4, r3
		p++;
    cd74:	4610      	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    cd76:	d1f7      	bne.n	cd68 <AudioStream::allocate()+0x2c>
			__enable_irq();
    cd78:	b662      	cpsie	i
			//Serial.println("alloc:null");
			return NULL;
    cd7a:	2000      	movs	r0, #0
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    cd7c:	bcf0      	pop	{r4, r5, r6, r7}
    cd7e:	4770      	bx	lr
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    cd80:	fab1 f381 	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    cd84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cd88:	40da      	lsrs	r2, r3
    cd8a:	ea21 0102 	bic.w	r1, r1, r2
	*p = avail;
    cd8e:	6001      	str	r1, [r0, #0]
	if (!avail) index++;
    cd90:	b901      	cbnz	r1, cd94 <AudioStream::allocate()+0x58>
    cd92:	3401      	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    cd94:	4910      	ldr	r1, [pc, #64]	; (cdd8 <AudioStream::allocate()+0x9c>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    cd96:	803c      	strh	r4, [r7, #0]
	used = memory_used + 1;
    cd98:	880a      	ldrh	r2, [r1, #0]
    cd9a:	3201      	adds	r2, #1
	memory_used = used;
    cd9c:	b294      	uxth	r4, r2
    cd9e:	800c      	strh	r4, [r1, #0]
	__enable_irq();
    cda0:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    cda2:	1b80      	subs	r0, r0, r6
    cda4:	1080      	asrs	r0, r0, #2
    cda6:	ebc3 1040 	rsb	r0, r3, r0, lsl #5
    cdaa:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    cdae:	0083      	lsls	r3, r0, #2
    cdb0:	480a      	ldr	r0, [pc, #40]	; (cddc <AudioStream::allocate()+0xa0>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    cdb2:	490b      	ldr	r1, [pc, #44]	; (cde0 <AudioStream::allocate()+0xa4>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    cdb4:	6800      	ldr	r0, [r0, #0]
    cdb6:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
    cdba:	331c      	adds	r3, #28
	block->ref_count = 1;
    cdbc:	2501      	movs	r5, #1
    cdbe:	54c5      	strb	r5, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    cdc0:	880d      	ldrh	r5, [r1, #0]
    cdc2:	42aa      	cmp	r2, r5
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    cdc4:	4418      	add	r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    cdc6:	bf88      	it	hi
    cdc8:	800c      	strhhi	r4, [r1, #0]
	//Serial.print("alloc:");
	//Serial.println((uint32_t)block, HEX);
	return block;
}
    cdca:	bcf0      	pop	{r4, r5, r6, r7}
    cdcc:	4770      	bx	lr
    cdce:	bf00      	nop
    cdd0:	1fff67d6 	.word	0x1fff67d6
    cdd4:	1fff6764 	.word	0x1fff6764
    cdd8:	1fff67d8 	.word	0x1fff67d8
    cddc:	1fff675c 	.word	0x1fff675c
    cde0:	1fff6758 	.word	0x1fff6758

0000cde4 <AudioStream::release(audio_block_struct*)>:
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
    cde4:	8842      	ldrh	r2, [r0, #2]
	uint32_t index = block->memory_pool_index >> 5;

	__disable_irq();
    cde6:	b672      	cpsid	i
	if (block->ref_count > 1) {
    cde8:	7803      	ldrb	r3, [r0, #0]
    cdea:	2b01      	cmp	r3, #1
    cdec:	d903      	bls.n	cdf6 <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
    cdee:	3b01      	subs	r3, #1
    cdf0:	7003      	strb	r3, [r0, #0]
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
	}
	__enable_irq();
    cdf2:	b662      	cpsie	i
    cdf4:	4770      	bx	lr
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
	//if (block == NULL) return;
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
	uint32_t index = block->memory_pool_index >> 5;
    cdf6:	1153      	asrs	r3, r2, #5

// Release ownership of a data block.  If no
// other streams have ownership, the block is
// returned to the free pool
void AudioStream::release(audio_block_t *block)
{
    cdf8:	b470      	push	{r4, r5, r6}
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    cdfa:	4c0c      	ldr	r4, [pc, #48]	; (ce2c <AudioStream::release(audio_block_struct*)+0x48>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    cdfc:	4d0c      	ldr	r5, [pc, #48]	; (ce30 <AudioStream::release(audio_block_struct*)+0x4c>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    cdfe:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    ce02:	882e      	ldrh	r6, [r5, #0]
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    ce04:	43d2      	mvns	r2, r2
    ce06:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    ce0a:	f002 021f 	and.w	r2, r2, #31
    ce0e:	fa20 f202 	lsr.w	r2, r0, r2
    ce12:	4311      	orrs	r1, r2
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
		memory_used--;
    ce14:	4a07      	ldr	r2, [pc, #28]	; (ce34 <AudioStream::release(audio_block_struct*)+0x50>)
	if (block->ref_count > 1) {
		block->ref_count--;
	} else {
		//Serial.print("reles:");
		//Serial.println((uint32_t)block, HEX);
		memory_pool_available_mask[index] |= mask;
    ce16:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
    ce1a:	42b3      	cmp	r3, r6
    ce1c:	bf38      	it	cc
    ce1e:	802b      	strhcc	r3, [r5, #0]
		memory_used--;
    ce20:	8813      	ldrh	r3, [r2, #0]
    ce22:	3b01      	subs	r3, #1
    ce24:	8013      	strh	r3, [r2, #0]
	}
	__enable_irq();
    ce26:	b662      	cpsie	i
}
    ce28:	bc70      	pop	{r4, r5, r6}
    ce2a:	4770      	bx	lr
    ce2c:	1fff6764 	.word	0x1fff6764
    ce30:	1fff67d6 	.word	0x1fff67d6
    ce34:	1fff67d8 	.word	0x1fff67d8

0000ce38 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    ce38:	68c3      	ldr	r3, [r0, #12]
    ce3a:	b1b3      	cbz	r3, ce6a <AudioStream::transmit(audio_block_struct*, unsigned char)+0x32>
// owned by this object.  Normally, a block must be released
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
    ce3c:	b430      	push	{r4, r5}
    ce3e:	e001      	b.n	ce44 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    ce40:	68db      	ldr	r3, [r3, #12]
    ce42:	b18b      	cbz	r3, ce68 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
    ce44:	7a18      	ldrb	r0, [r3, #8]
    ce46:	4290      	cmp	r0, r2
    ce48:	d1fa      	bne.n	ce40 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
			if (c->dst.inputQueue[c->dest_index] == NULL) {
    ce4a:	6858      	ldr	r0, [r3, #4]
    ce4c:	7a5c      	ldrb	r4, [r3, #9]
    ce4e:	6900      	ldr	r0, [r0, #16]
    ce50:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    ce54:	2d00      	cmp	r5, #0
    ce56:	d1f3      	bne.n	ce40 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x8>
				c->dst.inputQueue[c->dest_index] = block;
    ce58:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
				block->ref_count++;
    ce5c:	7808      	ldrb	r0, [r1, #0]
    ce5e:	3001      	adds	r0, #1
    ce60:	7008      	strb	r0, [r1, #0]
// by the caller after it's transmitted.  This allows the
// caller to transmit to same block to more than 1 output,
// and then release it once after all transmit calls.
void AudioStream::transmit(audio_block_t *block, unsigned char index)
{
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
    ce62:	68db      	ldr	r3, [r3, #12]
    ce64:	2b00      	cmp	r3, #0
    ce66:	d1ed      	bne.n	ce44 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xc>
				c->dst.inputQueue[c->dest_index] = block;
				block->ref_count++;
			}
		}
	}
}
    ce68:	bc30      	pop	{r4, r5}
    ce6a:	4770      	bx	lr

0000ce6c <AudioStream::receiveReadOnly(unsigned int)>:
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    ce6c:	7a43      	ldrb	r3, [r0, #9]
    ce6e:	428b      	cmp	r3, r1
    ce70:	d906      	bls.n	ce80 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
    ce72:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
    ce74:	2200      	movs	r2, #0
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
    ce76:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    ce7a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
    ce7e:	4770      	bx	lr
// may be shared with other streams, so it must not be written
audio_block_t * AudioStream::receiveReadOnly(unsigned int index)
{
	audio_block_t *in;

	if (index >= num_inputs) return NULL;
    ce80:	2000      	movs	r0, #0
	in = inputQueue[index];
	inputQueue[index] = NULL;
	return in;
}
    ce82:	4770      	bx	lr

0000ce84 <AudioStream::receiveWritable(unsigned int)>:

// Receive block from an input.  The block will not
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
    ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    ce86:	7a43      	ldrb	r3, [r0, #9]
    ce88:	428b      	cmp	r3, r1
    ce8a:	d963      	bls.n	cf54 <AudioStream::receiveWritable(unsigned int)+0xd0>
	in = inputQueue[index];
    ce8c:	6903      	ldr	r3, [r0, #16]
    ce8e:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
    ce92:	2200      	movs	r2, #0
    ce94:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
    ce98:	2d00      	cmp	r5, #0
    ce9a:	d05b      	beq.n	cf54 <AudioStream::receiveWritable(unsigned int)+0xd0>
    ce9c:	782b      	ldrb	r3, [r5, #0]
    ce9e:	2b01      	cmp	r3, #1
    cea0:	d924      	bls.n	ceec <AudioStream::receiveWritable(unsigned int)+0x68>
	audio_block_t *block;
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
    cea2:	b672      	cpsid	i
	index = memory_pool_first_mask;
    cea4:	f8df e0c0 	ldr.w	lr, [pc, #192]	; cf68 <AudioStream::receiveWritable(unsigned int)+0xe4>
	p += index;
    cea8:	4f2b      	ldr	r7, [pc, #172]	; (cf58 <AudioStream::receiveWritable(unsigned int)+0xd4>)
	uint32_t used;

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
    ceaa:	f8be 4000 	ldrh.w	r4, [lr]
	p += index;
	while (1) {
		if (p >= end) {
    ceae:	f107 0370 	add.w	r3, r7, #112	; 0x70

	p = memory_pool_available_mask;
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
    ceb2:	eb07 0084 	add.w	r0, r7, r4, lsl #2
	while (1) {
		if (p >= end) {
    ceb6:	4298      	cmp	r0, r3
    ceb8:	d212      	bcs.n	cee0 <AudioStream::receiveWritable(unsigned int)+0x5c>
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    ceba:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
		if (avail) break;
    cebe:	b9b9      	cbnz	r1, cef0 <AudioStream::receiveWritable(unsigned int)+0x6c>
    cec0:	1d02      	adds	r2, r0, #4
    cec2:	f107 0673 	add.w	r6, r7, #115	; 0x73
    cec6:	1c63      	adds	r3, r4, #1
    cec8:	1ab6      	subs	r6, r6, r2
    ceca:	eb03 0696 	add.w	r6, r3, r6, lsr #2
    cece:	e003      	b.n	ced8 <AudioStream::receiveWritable(unsigned int)+0x54>
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
    ced0:	f852 1b04 	ldr.w	r1, [r2], #4
		if (avail) break;
    ced4:	b961      	cbnz	r1, cef0 <AudioStream::receiveWritable(unsigned int)+0x6c>
    ced6:	3301      	adds	r3, #1
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    ced8:	42b3      	cmp	r3, r6
			//Serial.println("alloc:null");
			return NULL;
		}
		avail = *p;
		if (avail) break;
		index++;
    ceda:	461c      	mov	r4, r3
		p++;
    cedc:	4610      	mov	r0, r2
	end = p + NUM_MASKS;
	__disable_irq();
	index = memory_pool_first_mask;
	p += index;
	while (1) {
		if (p >= end) {
    cede:	d1f7      	bne.n	ced0 <AudioStream::receiveWritable(unsigned int)+0x4c>
			__enable_irq();
    cee0:	b662      	cpsie	i
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
		if (p) memcpy(p->data, in->data, sizeof(p->data));
		in->ref_count--;
    cee2:	782b      	ldrb	r3, [r5, #0]
    cee4:	3b01      	subs	r3, #1
    cee6:	702b      	strb	r3, [r5, #0]
	p += index;
	while (1) {
		if (p >= end) {
			__enable_irq();
			//Serial.println("alloc:null");
			return NULL;
    cee8:	2000      	movs	r0, #0
    ceea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ceec:	4628      	mov	r0, r5
    ceee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		avail = *p;
		if (avail) break;
		index++;
		p++;
	}
	n = __builtin_clz(avail);
    cef0:	fab1 f381 	clz	r3, r1
	avail &= ~(0x80000000 >> n);
    cef4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cef8:	40da      	lsrs	r2, r3
    cefa:	ea21 0102 	bic.w	r1, r1, r2
	*p = avail;
    cefe:	6001      	str	r1, [r0, #0]
	if (!avail) index++;
    cf00:	b901      	cbnz	r1, cf04 <AudioStream::receiveWritable(unsigned int)+0x80>
    cf02:	3401      	adds	r4, #1
	memory_pool_first_mask = index;
	used = memory_used + 1;
    cf04:	4a15      	ldr	r2, [pc, #84]	; (cf5c <AudioStream::receiveWritable(unsigned int)+0xd8>)
	}
	n = __builtin_clz(avail);
	avail &= ~(0x80000000 >> n);
	*p = avail;
	if (!avail) index++;
	memory_pool_first_mask = index;
    cf06:	f8ae 4000 	strh.w	r4, [lr]
	used = memory_used + 1;
    cf0a:	8811      	ldrh	r1, [r2, #0]
    cf0c:	3101      	adds	r1, #1
	memory_used = used;
    cf0e:	b28e      	uxth	r6, r1
    cf10:	8016      	strh	r6, [r2, #0]
	__enable_irq();
    cf12:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    cf14:	1bc0      	subs	r0, r0, r7
    cf16:	1080      	asrs	r0, r0, #2
    cf18:	ebc3 1040 	rsb	r0, r3, r0, lsl #5
    cf1c:	eb00 1080 	add.w	r0, r0, r0, lsl #6
    cf20:	4b0f      	ldr	r3, [pc, #60]	; (cf60 <AudioStream::receiveWritable(unsigned int)+0xdc>)
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    cf22:	4f10      	ldr	r7, [pc, #64]	; (cf64 <AudioStream::receiveWritable(unsigned int)+0xe0>)
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    cf24:	0082      	lsls	r2, r0, #2
    cf26:	6818      	ldr	r0, [r3, #0]
    cf28:	f502 53fb 	add.w	r3, r2, #8032	; 0x1f60
    cf2c:	331c      	adds	r3, #28
	block->ref_count = 1;
    cf2e:	2201      	movs	r2, #1
    cf30:	54c2      	strb	r2, [r0, r3]
	if (used > memory_used_max) memory_used_max = used;
    cf32:	883a      	ldrh	r2, [r7, #0]
    cf34:	4291      	cmp	r1, r2
	memory_pool_first_mask = index;
	used = memory_used + 1;
	memory_used = used;
	__enable_irq();
	index = p - memory_pool_available_mask;
	block = memory_pool + ((index << 5) + (31 - n));
    cf36:	eb00 0403 	add.w	r4, r0, r3
	block->ref_count = 1;
	if (used > memory_used_max) memory_used_max = used;
    cf3a:	d900      	bls.n	cf3e <AudioStream::receiveWritable(unsigned int)+0xba>
    cf3c:	803e      	strh	r6, [r7, #0]
	if (index >= num_inputs) return NULL;
	in = inputQueue[index];
	inputQueue[index] = NULL;
	if (in && in->ref_count > 1) {
		p = allocate();
		if (p) memcpy(p->data, in->data, sizeof(p->data));
    cf3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    cf42:	1d29      	adds	r1, r5, #4
    cf44:	1d20      	adds	r0, r4, #4
    cf46:	f001 fb99 	bl	e67c <memcpy>
		in->ref_count--;
    cf4a:	782b      	ldrb	r3, [r5, #0]
    cf4c:	3b01      	subs	r3, #1
    cf4e:	702b      	strb	r3, [r5, #0]
    cf50:	4620      	mov	r0, r4
    cf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// be shared, so its contents may be changed.
audio_block_t * AudioStream::receiveWritable(unsigned int index)
{
	audio_block_t *in, *p;

	if (index >= num_inputs) return NULL;
    cf54:	2000      	movs	r0, #0
    cf56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf58:	1fff6764 	.word	0x1fff6764
    cf5c:	1fff67d8 	.word	0x1fff67d8
    cf60:	1fff675c 	.word	0x1fff675c
    cf64:	1fff6758 	.word	0x1fff6758
    cf68:	1fff67d6 	.word	0x1fff67d6

0000cf6c <AudioConnection::connect()>:

void AudioConnection::connect(void)
{
	AudioConnection *p;

	if (isConnected) return;
    cf6c:	7c03      	ldrb	r3, [r0, #16]
    cf6e:	bb23      	cbnz	r3, cfba <AudioConnection::connect()+0x4e>
	if (dest_index > dst.num_inputs) return;
    cf70:	6843      	ldr	r3, [r0, #4]
    cf72:	7a42      	ldrb	r2, [r0, #9]
    cf74:	7a5b      	ldrb	r3, [r3, #9]
    cf76:	429a      	cmp	r2, r3
    cf78:	d81f      	bhi.n	cfba <AudioConnection::connect()+0x4e>
	return in;
}


void AudioConnection::connect(void)
{
    cf7a:	b430      	push	{r4, r5}
	AudioConnection *p;

	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
    cf7c:	b672      	cpsid	i
	p = src.destination_list;
    cf7e:	6804      	ldr	r4, [r0, #0]
    cf80:	68e3      	ldr	r3, [r4, #12]
	if (p == NULL) {
    cf82:	b32b      	cbz	r3, cfd0 <AudioConnection::connect()+0x64>
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    cf84:	68da      	ldr	r2, [r3, #12]
    cf86:	b132      	cbz	r2, cf96 <AudioConnection::connect()+0x2a>
			if (&p->src == &this->src && &p->dst == &this->dst
    cf88:	6819      	ldr	r1, [r3, #0]
    cf8a:	428c      	cmp	r4, r1
    cf8c:	d016      	beq.n	cfbc <AudioConnection::connect()+0x50>
	return in;
}


void AudioConnection::connect(void)
{
    cf8e:	4613      	mov	r3, r2
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
    cf90:	68da      	ldr	r2, [r3, #12]
    cf92:	2a00      	cmp	r2, #0
    cf94:	d1f8      	bne.n	cf88 <AudioConnection::connect()+0x1c>
				__enable_irq();
				return;
			}
			p = p->next_dest;
		}
		p->next_dest = this;
    cf96:	60d8      	str	r0, [r3, #12]
	}
	this->next_dest = NULL;
    cf98:	2300      	movs	r3, #0
    cf9a:	60c3      	str	r3, [r0, #12]
	src.numConnections++;
    cf9c:	7aa3      	ldrb	r3, [r4, #10]
    cf9e:	3301      	adds	r3, #1
    cfa0:	72a3      	strb	r3, [r4, #10]
	src.active = true;
    cfa2:	6802      	ldr	r2, [r0, #0]

	dst.numConnections++;
    cfa4:	6841      	ldr	r1, [r0, #4]
		}
		p->next_dest = this;
	}
	this->next_dest = NULL;
	src.numConnections++;
	src.active = true;
    cfa6:	2301      	movs	r3, #1
    cfa8:	7213      	strb	r3, [r2, #8]

	dst.numConnections++;
    cfaa:	7a8a      	ldrb	r2, [r1, #10]
    cfac:	441a      	add	r2, r3
    cfae:	728a      	strb	r2, [r1, #10]
	dst.active = true;
    cfb0:	6842      	ldr	r2, [r0, #4]
    cfb2:	7213      	strb	r3, [r2, #8]

	isConnected = true;
    cfb4:	7403      	strb	r3, [r0, #16]

	__enable_irq();
    cfb6:	b662      	cpsie	i
}
    cfb8:	bc30      	pop	{r4, r5}
    cfba:	4770      	bx	lr
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
	} else {
		while (p->next_dest) {
			if (&p->src == &this->src && &p->dst == &this->dst
    cfbc:	685d      	ldr	r5, [r3, #4]
    cfbe:	6841      	ldr	r1, [r0, #4]
    cfc0:	428d      	cmp	r5, r1
    cfc2:	d1e4      	bne.n	cf8e <AudioConnection::connect()+0x22>
				&& p->src_index == this->src_index && p->dest_index == this->dest_index) {
    cfc4:	8919      	ldrh	r1, [r3, #8]
    cfc6:	8903      	ldrh	r3, [r0, #8]
    cfc8:	4299      	cmp	r1, r3
    cfca:	d0f4      	beq.n	cfb6 <AudioConnection::connect()+0x4a>
	return in;
}


void AudioConnection::connect(void)
{
    cfcc:	4613      	mov	r3, r2
    cfce:	e7df      	b.n	cf90 <AudioConnection::connect()+0x24>
	if (isConnected) return;
	if (dest_index > dst.num_inputs) return;
	__disable_irq();
	p = src.destination_list;
	if (p == NULL) {
		src.destination_list = this;
    cfd0:	60e0      	str	r0, [r4, #12]
    cfd2:	e7e1      	b.n	cf98 <AudioConnection::connect()+0x2c>

0000cfd4 <AudioConnection::disconnect()>:

void AudioConnection::disconnect(void)
{
	AudioConnection *p;

	if (!isConnected) return;
    cfd4:	7c03      	ldrb	r3, [r0, #16]
    cfd6:	b34b      	cbz	r3, d02c <AudioConnection::disconnect()+0x58>
	if (dest_index > dst.num_inputs) return;
    cfd8:	6843      	ldr	r3, [r0, #4]
    cfda:	7a42      	ldrb	r2, [r0, #9]
    cfdc:	7a5b      	ldrb	r3, [r3, #9]
    cfde:	429a      	cmp	r2, r3
    cfe0:	d824      	bhi.n	d02c <AudioConnection::disconnect()+0x58>
	__disable_irq();
    cfe2:	b672      	cpsid	i
	// Remove destination from source list
	p = src.destination_list;
    cfe4:	6802      	ldr	r2, [r0, #0]
    cfe6:	68d3      	ldr	r3, [r2, #12]
	if (p == NULL) {
    cfe8:	b303      	cbz	r3, d02c <AudioConnection::disconnect()+0x58>
		return;
	} else if (p == this) {
    cfea:	4298      	cmp	r0, r3
    cfec:	d102      	bne.n	cff4 <AudioConnection::disconnect()+0x20>
    cfee:	e01e      	b.n	d02e <AudioConnection::disconnect()+0x5a>
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
			if (p == this) {
    cff0:	4298      	cmp	r0, r3
    cff2:	d002      	beq.n	cffa <AudioConnection::disconnect()+0x26>
				} else {
					p = NULL;
					break;
				}
			}
			p = p->next_dest;
    cff4:	68db      	ldr	r3, [r3, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
		}
	} else {
		while (p) {
    cff6:	2b00      	cmp	r3, #0
    cff8:	d1fa      	bne.n	cff0 <AudioConnection::disconnect()+0x1c>
			}
			p = p->next_dest;
		}
	}
	//Remove possible pending src block from destination
	dst.inputQueue[dest_index] = NULL;
    cffa:	6843      	ldr	r3, [r0, #4]
    cffc:	7a42      	ldrb	r2, [r0, #9]
    cffe:	691b      	ldr	r3, [r3, #16]
    d000:	2100      	movs	r1, #0
    d002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//Check if the disconnected AudioStream objects should still be active
	src.numConnections--;
    d006:	6802      	ldr	r2, [r0, #0]
    d008:	7a93      	ldrb	r3, [r2, #10]
    d00a:	3b01      	subs	r3, #1
    d00c:	7293      	strb	r3, [r2, #10]
	if (src.numConnections == 0) {
    d00e:	6803      	ldr	r3, [r0, #0]
    d010:	7a9a      	ldrb	r2, [r3, #10]
    d012:	b902      	cbnz	r2, d016 <AudioConnection::disconnect()+0x42>
		src.active = false;
    d014:	721a      	strb	r2, [r3, #8]
	}

	dst.numConnections--;
    d016:	6842      	ldr	r2, [r0, #4]
    d018:	7a93      	ldrb	r3, [r2, #10]
    d01a:	3b01      	subs	r3, #1
    d01c:	7293      	strb	r3, [r2, #10]
	if (dst.numConnections == 0) {
    d01e:	6843      	ldr	r3, [r0, #4]
    d020:	7a9a      	ldrb	r2, [r3, #10]
    d022:	b902      	cbnz	r2, d026 <AudioConnection::disconnect()+0x52>
		dst.active = false;
    d024:	721a      	strb	r2, [r3, #8]
	}

	isConnected = false;
    d026:	2300      	movs	r3, #0
    d028:	7403      	strb	r3, [r0, #16]

	__enable_irq();
    d02a:	b662      	cpsie	i
    d02c:	4770      	bx	lr
	// Remove destination from source list
	p = src.destination_list;
	if (p == NULL) {
		return;
	} else if (p == this) {
		if (p->next_dest) {
    d02e:	68c3      	ldr	r3, [r0, #12]
			src.destination_list = next_dest;
		} else {
			src.destination_list = NULL;
    d030:	60d3      	str	r3, [r2, #12]
    d032:	e7e2      	b.n	cffa <AudioConnection::disconnect()+0x26>

0000d034 <AudioStream::update_setup()>:
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    d034:	4b08      	ldr	r3, [pc, #32]	; (d058 <AudioStream::update_setup()+0x24>)
    d036:	781a      	ldrb	r2, [r3, #0]
    d038:	b95a      	cbnz	r2, d052 <AudioStream::update_setup()+0x1e>
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    d03a:	4808      	ldr	r0, [pc, #32]	; (d05c <AudioStream::update_setup()+0x28>)
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    d03c:	4908      	ldr	r1, [pc, #32]	; (d060 <AudioStream::update_setup()+0x2c>)
// input and output based on interrupts, must check this variable in
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
    d03e:	b410      	push	{r4}
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
    d040:	24d0      	movs	r4, #208	; 0xd0
    d042:	7004      	strb	r4, [r0, #0]
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    d044:	2201      	movs	r2, #1
	update_scheduled = true;
	return true;
    d046:	4610      	mov	r0, r2

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
    d048:	600a      	str	r2, [r1, #0]
	update_scheduled = true;
    d04a:	701a      	strb	r2, [r3, #0]
	return true;
}
    d04c:	f85d 4b04 	ldr.w	r4, [sp], #4
    d050:	4770      	bx	lr
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
    d052:	2000      	movs	r0, #0
    d054:	4770      	bx	lr
    d056:	bf00      	nop
    d058:	1fff6760 	.word	0x1fff6760
    d05c:	e000e440 	.word	0xe000e440
    d060:	e000e108 	.word	0xe000e108

0000d064 <software_isr>:

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    d064:	491a      	ldr	r1, [pc, #104]	; (d0d0 <software_isr+0x6c>)
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    d066:	4a1b      	ldr	r2, [pc, #108]	; (d0d4 <software_isr+0x70>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    d068:	481b      	ldr	r0, [pc, #108]	; (d0d8 <software_isr+0x74>)
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
    d06a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    d06c:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    d06e:	4d1b      	ldr	r5, [pc, #108]	; (d0dc <software_isr+0x78>)
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    d070:	6804      	ldr	r4, [r0, #0]

void software_isr(void) // AudioStream::update_all()
{
	AudioStream *p;

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
    d072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    d076:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
    d078:	6813      	ldr	r3, [r2, #0]
    d07a:	f043 0301 	orr.w	r3, r3, #1
    d07e:	6013      	str	r3, [r2, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
    d080:	682e      	ldr	r6, [r5, #0]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    d082:	b914      	cbnz	r4, d08a <software_isr+0x26>
    d084:	e015      	b.n	d0b2 <software_isr+0x4e>
    d086:	6964      	ldr	r4, [r4, #20]
    d088:	b19c      	cbz	r4, d0b2 <software_isr+0x4e>
		if (p->active) {
    d08a:	7a23      	ldrb	r3, [r4, #8]
    d08c:	2b00      	cmp	r3, #0
    d08e:	d0fa      	beq.n	d086 <software_isr+0x22>
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
    d090:	6823      	ldr	r3, [r4, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
    d092:	682f      	ldr	r7, [r5, #0]
			p->update();
    d094:	681b      	ldr	r3, [r3, #0]
    d096:	4620      	mov	r0, r4
    d098:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    d09a:	682b      	ldr	r3, [r5, #0]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    d09c:	88e1      	ldrh	r1, [r4, #6]
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
    d09e:	1bdb      	subs	r3, r3, r7
    d0a0:	091b      	lsrs	r3, r3, #4
			p->cpu_cycles = cycles;
    d0a2:	b29a      	uxth	r2, r3
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    d0a4:	428b      	cmp	r3, r1
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 4;
			p->cpu_cycles = cycles;
    d0a6:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
    d0a8:	bf88      	it	hi
    d0aa:	80e2      	strhhi	r2, [r4, #6]

	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA;
	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
    d0ac:	6964      	ldr	r4, [r4, #20]
    d0ae:	2c00      	cmp	r4, #0
    d0b0:	d1eb      	bne.n	d08a <software_isr+0x26>
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    d0b2:	4b0a      	ldr	r3, [pc, #40]	; (d0dc <software_isr+0x78>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    d0b4:	4a0a      	ldr	r2, [pc, #40]	; (d0e0 <software_isr+0x7c>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    d0b6:	681b      	ldr	r3, [r3, #0]
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    d0b8:	8810      	ldrh	r0, [r2, #0]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    d0ba:	4c0a      	ldr	r4, [pc, #40]	; (d0e4 <software_isr+0x80>)
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
    d0bc:	1b9b      	subs	r3, r3, r6
    d0be:	091b      	lsrs	r3, r3, #4
	AudioStream::cpu_cycles_total = totalcycles;
    d0c0:	b299      	uxth	r1, r3
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    d0c2:	4283      	cmp	r3, r0
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 4;;
	AudioStream::cpu_cycles_total = totalcycles;
    d0c4:	8021      	strh	r1, [r4, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
    d0c6:	d901      	bls.n	d0cc <software_isr+0x68>
		AudioStream::cpu_cycles_total_max = totalcycles;
    d0c8:	8011      	strh	r1, [r2, #0]
    d0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0ce:	bf00      	nop
    d0d0:	e000edfc 	.word	0xe000edfc
    d0d4:	e0001000 	.word	0xe0001000
    d0d8:	1fff6754 	.word	0x1fff6754
    d0dc:	e0001004 	.word	0xe0001004
    d0e0:	1fff67d4 	.word	0x1fff67d4
    d0e4:	1fff67da 	.word	0x1fff67da

0000d0e8 <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    d0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t ch = 0;

	__disable_irq();
    d0ea:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    d0ec:	b999      	cbnz	r1, d116 <DMAChannel::begin(bool)+0x2e>
    d0ee:	6804      	ldr	r4, [r0, #0]
    d0f0:	b18c      	cbz	r4, d116 <DMAChannel::begin(bool)+0x2e>
    d0f2:	7902      	ldrb	r2, [r0, #4]
    d0f4:	2a0f      	cmp	r2, #15
    d0f6:	d80e      	bhi.n	d116 <DMAChannel::begin(bool)+0x2e>
	  && (dma_channel_allocated_mask & (1 << channel))
    d0f8:	4943      	ldr	r1, [pc, #268]	; (d208 <DMAChannel::begin(bool)+0x120>)
    d0fa:	880b      	ldrh	r3, [r1, #0]
    d0fc:	fa43 f502 	asr.w	r5, r3, r2
    d100:	07ef      	lsls	r7, r5, #31
    d102:	d50a      	bpl.n	d11a <DMAChannel::begin(bool)+0x32>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    d104:	f102 7200 	add.w	r2, r2, #33554432	; 0x2000000
    d108:	f502 6290 	add.w	r2, r2, #1152	; 0x480
    d10c:	ebb4 1f42 	cmp.w	r4, r2, lsl #5
    d110:	d103      	bne.n	d11a <DMAChannel::begin(bool)+0x32>
		// DMA channel already allocated
		__enable_irq();
    d112:	b662      	cpsie	i
		return;
    d114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d116:	493c      	ldr	r1, [pc, #240]	; (d208 <DMAChannel::begin(bool)+0x120>)
    d118:	880b      	ldrh	r3, [r1, #0]
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    d11a:	f013 0201 	ands.w	r2, r3, #1
    d11e:	d026      	beq.n	d16e <DMAChannel::begin(bool)+0x86>
    d120:	079e      	lsls	r6, r3, #30
    d122:	d557      	bpl.n	d1d4 <DMAChannel::begin(bool)+0xec>
    d124:	075d      	lsls	r5, r3, #29
    d126:	d557      	bpl.n	d1d8 <DMAChannel::begin(bool)+0xf0>
    d128:	071c      	lsls	r4, r3, #28
    d12a:	d557      	bpl.n	d1dc <DMAChannel::begin(bool)+0xf4>
    d12c:	06da      	lsls	r2, r3, #27
    d12e:	d557      	bpl.n	d1e0 <DMAChannel::begin(bool)+0xf8>
    d130:	069f      	lsls	r7, r3, #26
    d132:	d557      	bpl.n	d1e4 <DMAChannel::begin(bool)+0xfc>
    d134:	065e      	lsls	r6, r3, #25
    d136:	d557      	bpl.n	d1e8 <DMAChannel::begin(bool)+0x100>
    d138:	061d      	lsls	r5, r3, #24
    d13a:	d557      	bpl.n	d1ec <DMAChannel::begin(bool)+0x104>
    d13c:	05dc      	lsls	r4, r3, #23
    d13e:	d557      	bpl.n	d1f0 <DMAChannel::begin(bool)+0x108>
    d140:	059a      	lsls	r2, r3, #22
    d142:	d557      	bpl.n	d1f4 <DMAChannel::begin(bool)+0x10c>
    d144:	055f      	lsls	r7, r3, #21
    d146:	d557      	bpl.n	d1f8 <DMAChannel::begin(bool)+0x110>
    d148:	051e      	lsls	r6, r3, #20
    d14a:	d557      	bpl.n	d1fc <DMAChannel::begin(bool)+0x114>
    d14c:	04dd      	lsls	r5, r3, #19
    d14e:	d557      	bpl.n	d200 <DMAChannel::begin(bool)+0x118>
    d150:	049c      	lsls	r4, r3, #18
    d152:	d557      	bpl.n	d204 <DMAChannel::begin(bool)+0x11c>
    d154:	045a      	lsls	r2, r3, #17
    d156:	d509      	bpl.n	d16c <DMAChannel::begin(bool)+0x84>
    d158:	0bda      	lsrs	r2, r3, #15
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    d15a:	bf08      	it	eq
    d15c:	220f      	moveq	r2, #15
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    d15e:	d006      	beq.n	d16e <DMAChannel::begin(bool)+0x86>
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
    d160:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    d162:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    d164:	2310      	movs	r3, #16
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
			__enable_irq();
			TCD = (TCD_t *)0;
    d166:	6002      	str	r2, [r0, #0]
			channel = DMA_MAX_CHANNELS;
    d168:	7103      	strb	r3, [r0, #4]
    d16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    d16c:	220e      	movs	r2, #14
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
    d16e:	2401      	movs	r4, #1
    d170:	4094      	lsls	r4, r2
    d172:	4323      	orrs	r3, r4
    d174:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    d176:	b662      	cpsie	i
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    d178:	4e24      	ldr	r6, [pc, #144]	; (d20c <DMAChannel::begin(bool)+0x124>)
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    d17a:	4d25      	ldr	r5, [pc, #148]	; (d210 <DMAChannel::begin(bool)+0x128>)
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    d17c:	f8df e09c 	ldr.w	lr, [pc, #156]	; d21c <DMAChannel::begin(bool)+0x134>
#endif
	DMA_CERQ = ch;
    d180:	4f24      	ldr	r7, [pc, #144]	; (d214 <DMAChannel::begin(bool)+0x12c>)
	DMA_CERR = ch;
    d182:	f8df c09c 	ldr.w	ip, [pc, #156]	; d220 <DMAChannel::begin(bool)+0x138>
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    d186:	b2d1      	uxtb	r1, r2
    d188:	7101      	strb	r1, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    d18a:	6834      	ldr	r4, [r6, #0]
    d18c:	f044 0402 	orr.w	r4, r4, #2
    d190:	6034      	str	r4, [r6, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    d192:	f102 7300 	add.w	r3, r2, #33554432	; 0x2000000
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    d196:	682a      	ldr	r2, [r5, #0]
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
    d198:	4c1f      	ldr	r4, [pc, #124]	; (d218 <DMAChannel::begin(bool)+0x130>)
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    d19a:	f5a6 2680 	sub.w	r6, r6, #262144	; 0x40000
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    d19e:	f042 0202 	orr.w	r2, r2, #2
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    d1a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
    d1a6:	3e28      	subs	r6, #40	; 0x28
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    d1a8:	602a      	str	r2, [r5, #0]
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    d1aa:	015b      	lsls	r3, r3, #5
	SIM_SCGC7 |= SIM_SCGC7_DMA;
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
    d1ac:	f240 4282 	movw	r2, #1154	; 0x482
    d1b0:	f8ce 2000 	str.w	r2, [lr]
#endif
	DMA_CERQ = ch;
    d1b4:	7039      	strb	r1, [r7, #0]
	DMA_CERR = ch;
	DMA_CEEI = ch;
	DMA_CINT = ch;
	TCD = (TCD_t *)(0x40009000 + ch * 32);
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    d1b6:	2200      	movs	r2, #0
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
	DMA_CERR = ch;
    d1b8:	f88c 1000 	strb.w	r1, [ip]
	DMA_CEEI = ch;
    d1bc:	7031      	strb	r1, [r6, #0]
	DMA_CINT = ch;
    d1be:	7021      	strb	r1, [r4, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    d1c0:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    d1c2:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    d1c4:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    d1c6:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    d1c8:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    d1ca:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    d1cc:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    d1ce:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    d1d0:	61da      	str	r2, [r3, #28]
    d1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    d1d4:	2201      	movs	r2, #1
    d1d6:	e7ca      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1d8:	2202      	movs	r2, #2
    d1da:	e7c8      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1dc:	2203      	movs	r2, #3
    d1de:	e7c6      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1e0:	2204      	movs	r2, #4
    d1e2:	e7c4      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1e4:	2205      	movs	r2, #5
    d1e6:	e7c2      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1e8:	2206      	movs	r2, #6
    d1ea:	e7c0      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1ec:	2207      	movs	r2, #7
    d1ee:	e7be      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1f0:	2208      	movs	r2, #8
    d1f2:	e7bc      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1f4:	2209      	movs	r2, #9
    d1f6:	e7ba      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1f8:	220a      	movs	r2, #10
    d1fa:	e7b8      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d1fc:	220b      	movs	r2, #11
    d1fe:	e7b6      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d200:	220c      	movs	r2, #12
    d202:	e7b4      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d204:	220d      	movs	r2, #13
    d206:	e7b2      	b.n	d16e <DMAChannel::begin(bool)+0x86>
    d208:	1fff67dc 	.word	0x1fff67dc
    d20c:	40048040 	.word	0x40048040
    d210:	4004803c 	.word	0x4004803c
    d214:	4000801a 	.word	0x4000801a
    d218:	4000801f 	.word	0x4000801f
    d21c:	40008000 	.word	0x40008000
    d220:	4000801e 	.word	0x4000801e

0000d224 <DMAChannel::release()>:
	*p++ = 0;
}

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    d224:	7903      	ldrb	r3, [r0, #4]
    d226:	2b0f      	cmp	r3, #15
    d228:	d812      	bhi.n	d250 <DMAChannel::release()+0x2c>
	DMA_CERQ = channel;
    d22a:	4a0a      	ldr	r2, [pc, #40]	; (d254 <DMAChannel::release()+0x30>)
	*p++ = 0;
	*p++ = 0;
}

void DMAChannel::release(void)
{
    d22c:	b410      	push	{r4}
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
    d22e:	7013      	strb	r3, [r2, #0]
	__disable_irq();
    d230:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    d232:	4909      	ldr	r1, [pc, #36]	; (d258 <DMAChannel::release()+0x34>)
    d234:	7904      	ldrb	r4, [r0, #4]
    d236:	880a      	ldrh	r2, [r1, #0]
    d238:	2301      	movs	r3, #1
    d23a:	40a3      	lsls	r3, r4
    d23c:	ea22 0303 	bic.w	r3, r2, r3
    d240:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    d242:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    d244:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
    d246:	2300      	movs	r3, #0
}
    d248:	f85d 4b04 	ldr.w	r4, [sp], #4
	if (channel >= DMA_MAX_CHANNELS) return;
	DMA_CERQ = channel;
	__disable_irq();
	dma_channel_allocated_mask &= ~(1 << channel);
	__enable_irq();
	channel = DMA_MAX_CHANNELS;
    d24c:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
    d24e:	6003      	str	r3, [r0, #0]
}
    d250:	4770      	bx	lr
    d252:	bf00      	nop
    d254:	4000801a 	.word	0x4000801a
    d258:	1fff67dc 	.word	0x1fff67dc

0000d25c <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    d25c:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d25e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d262:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    d264:	7f43      	ldrb	r3, [r0, #29]
    d266:	b933      	cbnz	r3, d276 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    d268:	7f01      	ldrb	r1, [r0, #28]
    d26a:	2901      	cmp	r1, #1
    d26c:	d008      	beq.n	d280 <EventResponder::triggerEventNotImmediate()+0x24>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    d26e:	2903      	cmp	r1, #3
    d270:	d010      	beq.n	d294 <EventResponder::triggerEventNotImmediate()+0x38>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    d272:	2301      	movs	r3, #1
    d274:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d276:	b902      	cbnz	r2, d27a <EventResponder::triggerEventNotImmediate()+0x1e>
    d278:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    d27a:	f85d 4b04 	ldr.w	r4, [sp], #4
    d27e:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    d280:	4c11      	ldr	r4, [pc, #68]	; (d2c8 <EventResponder::triggerEventNotImmediate()+0x6c>)
    d282:	6821      	ldr	r1, [r4, #0]
    d284:	b1a1      	cbz	r1, d2b0 <EventResponder::triggerEventNotImmediate()+0x54>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    d286:	4911      	ldr	r1, [pc, #68]	; (d2cc <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    d288:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    d28a:	680b      	ldr	r3, [r1, #0]
    d28c:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    d28e:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    d290:	6158      	str	r0, [r3, #20]
    d292:	e7ee      	b.n	d272 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    d294:	4c0e      	ldr	r4, [pc, #56]	; (d2d0 <EventResponder::triggerEventNotImmediate()+0x74>)
    d296:	6821      	ldr	r1, [r4, #0]
    d298:	b181      	cbz	r1, d2bc <EventResponder::triggerEventNotImmediate()+0x60>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    d29a:	490e      	ldr	r1, [pc, #56]	; (d2d4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    d29c:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    d29e:	680b      	ldr	r3, [r1, #0]
    d2a0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    d2a2:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    d2a4:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    d2a6:	4b0c      	ldr	r3, [pc, #48]	; (d2d8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    d2a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    d2ac:	6019      	str	r1, [r3, #0]
    d2ae:	e7e0      	b.n	d272 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    d2b0:	4b06      	ldr	r3, [pc, #24]	; (d2cc <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    d2b2:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    d2b4:	6181      	str	r1, [r0, #24]
				firstYield = this;
    d2b6:	6020      	str	r0, [r4, #0]
				lastYield = this;
    d2b8:	6018      	str	r0, [r3, #0]
    d2ba:	e7da      	b.n	d272 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    d2bc:	4b05      	ldr	r3, [pc, #20]	; (d2d4 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    d2be:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    d2c0:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    d2c2:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    d2c4:	6018      	str	r0, [r3, #0]
    d2c6:	e7ee      	b.n	d2a6 <EventResponder::triggerEventNotImmediate()+0x4a>
    d2c8:	1fff67f0 	.word	0x1fff67f0
    d2cc:	1fff67ec 	.word	0x1fff67ec
    d2d0:	1fff67e0 	.word	0x1fff67e0
    d2d4:	1fff67e4 	.word	0x1fff67e4
    d2d8:	e000ed04 	.word	0xe000ed04

0000d2dc <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
    d2dc:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d2de:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d2e2:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    d2e4:	4c0c      	ldr	r4, [pc, #48]	; (d318 <pendablesrvreq_isr+0x3c>)
    d2e6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d2e8:	b180      	cbz	r0, d30c <pendablesrvreq_isr+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    d2ea:	4e0c      	ldr	r6, [pc, #48]	; (d31c <pendablesrvreq_isr+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    d2ec:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    d2ee:	6943      	ldr	r3, [r0, #20]
    d2f0:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    d2f2:	b173      	cbz	r3, d312 <pendablesrvreq_isr+0x36>
				firstInterrupt->_prev = nullptr;
    d2f4:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d2f6:	b902      	cbnz	r2, d2fa <pendablesrvreq_isr+0x1e>
    d2f8:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    d2fa:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    d2fc:	6883      	ldr	r3, [r0, #8]
    d2fe:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d300:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d304:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    d306:	6820      	ldr	r0, [r4, #0]
		if (first) {
    d308:	2800      	cmp	r0, #0
    d30a:	d1f0      	bne.n	d2ee <pendablesrvreq_isr+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d30c:	b902      	cbnz	r2, d310 <pendablesrvreq_isr+0x34>
    d30e:	b662      	cpsie	i
    d310:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    d312:	6033      	str	r3, [r6, #0]
    d314:	e7ef      	b.n	d2f6 <pendablesrvreq_isr+0x1a>
    d316:	bf00      	nop
    d318:	1fff67e0 	.word	0x1fff67e0
    d31c:	1fff67e4 	.word	0x1fff67e4

0000d320 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    d320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	MillisTimer *timer = listActive;
    d324:	4e79      	ldr	r6, [pc, #484]	; (d50c <MillisTimer::runFromTimer()+0x1ec>)
    d326:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    d328:	2c00      	cmp	r4, #0
    d32a:	d031      	beq.n	d390 <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    d32c:	6823      	ldr	r3, [r4, #0]
    d32e:	2b00      	cmp	r3, #0
    d330:	d12c      	bne.n	d38c <MillisTimer::runFromTimer()+0x6c>
    d332:	f8df 91ec 	ldr.w	r9, [pc, #492]	; d520 <MillisTimer::runFromTimer()+0x200>
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    d336:	4f76      	ldr	r7, [pc, #472]	; (d510 <MillisTimer::runFromTimer()+0x1f0>)
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    d338:	f8df 81e8 	ldr.w	r8, [pc, #488]	; d524 <MillisTimer::runFromTimer()+0x204>
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    d33c:	461d      	mov	r5, r3
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    d33e:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    d340:	b103      	cbz	r3, d344 <MillisTimer::runFromTimer()+0x24>
    d342:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    d344:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    d346:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    d348:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    d34a:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    d34c:	681b      	ldr	r3, [r3, #0]
    d34e:	454b      	cmp	r3, r9
    d350:	d16a      	bne.n	d428 <MillisTimer::runFromTimer()+0x108>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    d352:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    d354:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    d356:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    d358:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    d35a:	d069      	beq.n	d430 <MillisTimer::runFromTimer()+0x110>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d35c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    d360:	b672      	cpsid	i
// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    d362:	7f43      	ldrb	r3, [r0, #29]
    d364:	b943      	cbnz	r3, d378 <MillisTimer::runFromTimer()+0x58>
		// not already triggered
		if (_type == EventTypeYield) {
    d366:	7f01      	ldrb	r1, [r0, #28]
    d368:	2901      	cmp	r1, #1
    d36a:	f000 8090 	beq.w	d48e <MillisTimer::runFromTimer()+0x16e>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    d36e:	2903      	cmp	r1, #3
    d370:	f000 8099 	beq.w	d4a6 <MillisTimer::runFromTimer()+0x186>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    d374:	2301      	movs	r3, #1
    d376:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d378:	b902      	cbnz	r2, d37c <MillisTimer::runFromTimer()+0x5c>
    d37a:	b662      	cpsie	i
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
    d37c:	6863      	ldr	r3, [r4, #4]
    d37e:	2b00      	cmp	r3, #0
    d380:	d13f      	bne.n	d402 <MillisTimer::runFromTimer()+0xe2>
    d382:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    d384:	b124      	cbz	r4, d390 <MillisTimer::runFromTimer()+0x70>
		if (timer->_ms > 0) {
    d386:	6823      	ldr	r3, [r4, #0]
    d388:	2b00      	cmp	r3, #0
    d38a:	d0d8      	beq.n	d33e <MillisTimer::runFromTimer()+0x1e>
			timer->_ms--;
    d38c:	3b01      	subs	r3, #1
    d38e:	6023      	str	r3, [r4, #0]
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d390:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    d394:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    d396:	4a5f      	ldr	r2, [pc, #380]	; (d514 <MillisTimer::runFromTimer()+0x1f4>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    d398:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    d39a:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    d39c:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    d39e:	b903      	cbnz	r3, d3a2 <MillisTimer::runFromTimer()+0x82>
    d3a0:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    d3a2:	2800      	cmp	r0, #0
    d3a4:	f000 80ad 	beq.w	d502 <MillisTimer::runFromTimer()+0x1e2>
    d3a8:	f04f 0800 	mov.w	r8, #0
    d3ac:	6835      	ldr	r5, [r6, #0]
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    d3ae:	46c4      	mov	ip, r8
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    d3b0:	f04f 0e02 	mov.w	lr, #2
    d3b4:	e00e      	b.n	d3d4 <MillisTimer::runFromTimer()+0xb4>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    d3b6:	1acb      	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    d3b8:	6085      	str	r5, [r0, #8]
		_prev = nullptr;
    d3ba:	f8c0 c00c 	str.w	ip, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    d3be:	4601      	mov	r1, r0
    d3c0:	602b      	str	r3, [r5, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    d3c2:	60e8      	str	r0, [r5, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    d3c4:	f04f 0801 	mov.w	r8, #1
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    d3c8:	f880 e014 	strb.w	lr, [r0, #20]
    d3cc:	460d      	mov	r5, r1
    d3ce:	4638      	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    d3d0:	2f00      	cmp	r7, #0
    d3d2:	d051      	beq.n	d478 <MillisTimer::runFromTimer()+0x158>
		MillisTimer *next = waiting->_next;
    d3d4:	6887      	ldr	r7, [r0, #8]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    d3d6:	2d00      	cmp	r5, #0
    d3d8:	d053      	beq.n	d482 <MillisTimer::runFromTimer()+0x162>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    d3da:	6803      	ldr	r3, [r0, #0]
    d3dc:	6829      	ldr	r1, [r5, #0]
    d3de:	428b      	cmp	r3, r1
    d3e0:	d3e9      	bcc.n	d3b6 <MillisTimer::runFromTimer()+0x96>
    d3e2:	462c      	mov	r4, r5
    d3e4:	e003      	b.n	d3ee <MillisTimer::runFromTimer()+0xce>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    d3e6:	6811      	ldr	r1, [r2, #0]
    d3e8:	428b      	cmp	r3, r1
    d3ea:	4614      	mov	r4, r2
    d3ec:	d335      	bcc.n	d45a <MillisTimer::runFromTimer()+0x13a>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    d3ee:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    d3f0:	1a5b      	subs	r3, r3, r1
    d3f2:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    d3f4:	2a00      	cmp	r2, #0
    d3f6:	d1f6      	bne.n	d3e6 <MillisTimer::runFromTimer()+0xc6>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    d3f8:	6082      	str	r2, [r0, #8]
		_prev = timer;
    d3fa:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    d3fc:	4629      	mov	r1, r5
    d3fe:	60a0      	str	r0, [r4, #8]
    d400:	e7e2      	b.n	d3c8 <MillisTimer::runFromTimer()+0xa8>
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    d402:	6830      	ldr	r0, [r6, #0]
    d404:	4a41      	ldr	r2, [pc, #260]	; (d50c <MillisTimer::runFromTimer()+0x1ec>)
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
    d406:	6023      	str	r3, [r4, #0]
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    d408:	2800      	cmp	r0, #0
    d40a:	d068      	beq.n	d4de <MillisTimer::runFromTimer()+0x1be>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    d40c:	6801      	ldr	r1, [r0, #0]
    d40e:	428b      	cmp	r3, r1
    d410:	d211      	bcs.n	d436 <MillisTimer::runFromTimer()+0x116>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    d412:	1acb      	subs	r3, r1, r3
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    d414:	60a0      	str	r0, [r4, #8]
		_prev = nullptr;
    d416:	60e5      	str	r5, [r4, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    d418:	6003      	str	r3, [r0, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    d41a:	60c4      	str	r4, [r0, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    d41c:	6014      	str	r4, [r2, #0]
    d41e:	4620      	mov	r0, r4
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    d420:	2302      	movs	r3, #2
    d422:	7523      	strb	r3, [r4, #20]
    d424:	4604      	mov	r4, r0
    d426:	e7ae      	b.n	d386 <MillisTimer::runFromTimer()+0x66>
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    d428:	4622      	mov	r2, r4
    d42a:	2100      	movs	r1, #0
    d42c:	4798      	blx	r3
    d42e:	e7a5      	b.n	d37c <MillisTimer::runFromTimer()+0x5c>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    d430:	6883      	ldr	r3, [r0, #8]
    d432:	4798      	blx	r3
    d434:	e7a2      	b.n	d37c <MillisTimer::runFromTimer()+0x5c>
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    d436:	4686      	mov	lr, r0
    d438:	e003      	b.n	d442 <MillisTimer::runFromTimer()+0x122>
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    d43a:	6811      	ldr	r1, [r2, #0]
    d43c:	428b      	cmp	r3, r1
    d43e:	4696      	mov	lr, r2
    d440:	d33e      	bcc.n	d4c0 <MillisTimer::runFromTimer()+0x1a0>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    d442:	f8de 2008 	ldr.w	r2, [lr, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    d446:	1a5b      	subs	r3, r3, r1
    d448:	6023      	str	r3, [r4, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    d44a:	2a00      	cmp	r2, #0
    d44c:	d1f5      	bne.n	d43a <MillisTimer::runFromTimer()+0x11a>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    d44e:	60a2      	str	r2, [r4, #8]
		_prev = timer;
    d450:	f8c4 e00c 	str.w	lr, [r4, #12]
		timer->_next = this;
    d454:	f8ce 4008 	str.w	r4, [lr, #8]
    d458:	e7e2      	b.n	d420 <MillisTimer::runFromTimer()+0x100>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    d45a:	68d2      	ldr	r2, [r2, #12]
    d45c:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    d45e:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    d460:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    d462:	68c2      	ldr	r2, [r0, #12]
				timer->_ms -= _ms;
    d464:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    d466:	4629      	mov	r1, r5
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    d468:	6090      	str	r0, [r2, #8]
    d46a:	460d      	mov	r5, r1
				timer->_ms -= _ms;
    d46c:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    d46e:	f880 e014 	strb.w	lr, [r0, #20]
    d472:	4638      	mov	r0, r7
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    d474:	2f00      	cmp	r7, #0
    d476:	d1ad      	bne.n	d3d4 <MillisTimer::runFromTimer()+0xb4>
    d478:	f1b8 0f00 	cmp.w	r8, #0
    d47c:	d143      	bne.n	d506 <MillisTimer::runFromTimer()+0x1e6>
    d47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    d482:	6085      	str	r5, [r0, #8]
		_prev = nullptr;
    d484:	60c5      	str	r5, [r0, #12]
    d486:	4601      	mov	r1, r0
    d488:	f04f 0801 	mov.w	r8, #1
    d48c:	e79c      	b.n	d3c8 <MillisTimer::runFromTimer()+0xa8>
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    d48e:	f8df e098 	ldr.w	lr, [pc, #152]	; d528 <MillisTimer::runFromTimer()+0x208>
    d492:	f8de 1000 	ldr.w	r1, [lr]
    d496:	b339      	cbz	r1, d4e8 <MillisTimer::runFromTimer()+0x1c8>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    d498:	491f      	ldr	r1, [pc, #124]	; (d518 <MillisTimer::runFromTimer()+0x1f8>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    d49a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    d49c:	680b      	ldr	r3, [r1, #0]
    d49e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    d4a0:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    d4a2:	6158      	str	r0, [r3, #20]
    d4a4:	e766      	b.n	d374 <MillisTimer::runFromTimer()+0x54>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    d4a6:	6839      	ldr	r1, [r7, #0]
    d4a8:	b329      	cbz	r1, d4f6 <MillisTimer::runFromTimer()+0x1d6>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    d4aa:	491c      	ldr	r1, [pc, #112]	; (d51c <MillisTimer::runFromTimer()+0x1fc>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    d4ac:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    d4ae:	680b      	ldr	r3, [r1, #0]
    d4b0:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    d4b2:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    d4b4:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    d4b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d4ba:	f8c8 3000 	str.w	r3, [r8]
    d4be:	e759      	b.n	d374 <MillisTimer::runFromTimer()+0x54>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    d4c0:	68d2      	ldr	r2, [r2, #12]
    d4c2:	60e2      	str	r2, [r4, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    d4c4:	f8c4 e008 	str.w	lr, [r4, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    d4c8:	f8ce 400c 	str.w	r4, [lr, #12]
				_prev->_next = this;
    d4cc:	68e2      	ldr	r2, [r4, #12]
				timer->_ms -= _ms;
    d4ce:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    d4d0:	2102      	movs	r1, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    d4d2:	6094      	str	r4, [r2, #8]
				timer->_ms -= _ms;
    d4d4:	f8ce 3000 	str.w	r3, [lr]
				_state = TimerActive;
    d4d8:	7521      	strb	r1, [r4, #20]
    d4da:	4604      	mov	r4, r0
    d4dc:	e753      	b.n	d386 <MillisTimer::runFromTimer()+0x66>

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    d4de:	60a0      	str	r0, [r4, #8]
		_prev = nullptr;
    d4e0:	60e0      	str	r0, [r4, #12]
		listActive = this;
    d4e2:	6014      	str	r4, [r2, #0]
    d4e4:	4620      	mov	r0, r4
    d4e6:	e79b      	b.n	d420 <MillisTimer::runFromTimer()+0x100>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    d4e8:	4b0b      	ldr	r3, [pc, #44]	; (d518 <MillisTimer::runFromTimer()+0x1f8>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    d4ea:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    d4ec:	6181      	str	r1, [r0, #24]
				firstYield = this;
    d4ee:	f8ce 0000 	str.w	r0, [lr]
				lastYield = this;
    d4f2:	6018      	str	r0, [r3, #0]
    d4f4:	e73e      	b.n	d374 <MillisTimer::runFromTimer()+0x54>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    d4f6:	4b09      	ldr	r3, [pc, #36]	; (d51c <MillisTimer::runFromTimer()+0x1fc>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    d4f8:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    d4fa:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    d4fc:	6038      	str	r0, [r7, #0]
				lastInterrupt = this;
    d4fe:	6018      	str	r0, [r3, #0]
    d500:	e7d9      	b.n	d4b6 <MillisTimer::runFromTimer()+0x196>
    d502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d506:	6031      	str	r1, [r6, #0]
    d508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d50c:	1fff67e8 	.word	0x1fff67e8
    d510:	1fff67e0 	.word	0x1fff67e0
    d514:	1fff67f8 	.word	0x1fff67f8
    d518:	1fff67ec 	.word	0x1fff67ec
    d51c:	1fff67e4 	.word	0x1fff67e4
    d520:	00006b75 	.word	0x00006b75
    d524:	e000ed04 	.word	0xe000ed04
    d528:	1fff67f0 	.word	0x1fff67f0

0000d52c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    d52c:	4a02      	ldr	r2, [pc, #8]	; (d538 <systick_isr+0xc>)
    d52e:	6813      	ldr	r3, [r2, #0]
    d530:	3301      	adds	r3, #1
    d532:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    d534:	f7ff bef4 	b.w	d320 <MillisTimer::runFromTimer()>
    d538:	1fff6804 	.word	0x1fff6804

0000d53c <HardwareSerial4::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial4_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial4_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial4_putchar(c); return 1; }
    d53c:	b508      	push	{r3, lr}
    d53e:	4608      	mov	r0, r1
    d540:	f002 f872 	bl	f628 <serial4_putchar>
    d544:	2001      	movs	r0, #1
    d546:	bd08      	pop	{r3, pc}

0000d548 <HardwareSerial4::write(unsigned char)>:
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
    d548:	b508      	push	{r3, lr}
    d54a:	4608      	mov	r0, r1
    d54c:	f002 f86c 	bl	f628 <serial4_putchar>
    d550:	2001      	movs	r0, #1
    d552:	bd08      	pop	{r3, pc}

0000d554 <HardwareSerial4::write(char const*)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial4_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    d554:	b538      	push	{r3, r4, r5, lr}
    d556:	4608      	mov	r0, r1
    d558:	460d      	mov	r5, r1
    d55a:	f005 fd11 	bl	12f80 <strlen>
    d55e:	4604      	mov	r4, r0
					  serial4_write((const uint8_t *)str, len);
    d560:	4601      	mov	r1, r0
    d562:	4628      	mov	r0, r5
    d564:	f002 f8b8 	bl	f6d8 <serial4_write>
					  return len; }
    d568:	4620      	mov	r0, r4
    d56a:	bd38      	pop	{r3, r4, r5, pc}

0000d56c <HardwareSerial4::write(unsigned char const*, unsigned int)>:
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    d56c:	b510      	push	{r4, lr}
					{ serial4_write(buffer, size); return size; }
    d56e:	4608      	mov	r0, r1
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
    d570:	4614      	mov	r4, r2
					{ serial4_write(buffer, size); return size; }
    d572:	4611      	mov	r1, r2
    d574:	f002 f8b0 	bl	f6d8 <serial4_write>
    d578:	4620      	mov	r0, r4
    d57a:	bd10      	pop	{r4, pc}

0000d57c <HardwareSerial4::clear()>:
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
	virtual int peek(void)          { return serial4_peek(); }
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
    d57c:	f002 b98e 	b.w	f89c <serial4_clear>

0000d580 <HardwareSerial4::attachCts(unsigned char)>:
	virtual void end(void)          { serial4_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
    d580:	b508      	push	{r3, lr}
    d582:	4608      	mov	r0, r1
    d584:	f002 f84e 	bl	f624 <serial4_set_cts>
    d588:	3000      	adds	r0, #0
    d58a:	bf18      	it	ne
    d58c:	2001      	movne	r0, #1
    d58e:	bd08      	pop	{r3, pc}

0000d590 <HardwareSerial4::attachRts(unsigned char)>:
					  serial4_format(format); }
	virtual void end(void)          { serial4_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
    d590:	b508      	push	{r3, lr}
    d592:	4608      	mov	r0, r1
    d594:	f002 f824 	bl	f5e0 <serial4_set_rts>
    d598:	3000      	adds	r0, #0
    d59a:	bf18      	it	ne
    d59c:	2001      	movne	r0, #1
    d59e:	bd08      	pop	{r3, pc}

0000d5a0 <HardwareSerial4::setTX(unsigned char, bool)>:
					  serial4_begin(BAUD2DIV3(baud));
					  serial4_format(format); }
	virtual void end(void)          { serial4_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
    d5a0:	4608      	mov	r0, r1
    d5a2:	4611      	mov	r1, r2
    d5a4:	f001 bfb6 	b.w	f514 <serial4_set_tx>

0000d5a8 <HardwareSerial4::setRX(unsigned char)>:
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial4_begin(BAUD2DIV3(baud));
					  serial4_format(format); }
	virtual void end(void)          { serial4_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
    d5a8:	4608      	mov	r0, r1
    d5aa:	f001 bfeb 	b.w	f584 <serial4_set_rx>
    d5ae:	bf00      	nop

0000d5b0 <HardwareSerial4::transmitterEnable(unsigned char)>:
	virtual void begin(uint32_t baud) { serial4_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial4_begin(BAUD2DIV3(baud));
					  serial4_format(format); }
	virtual void end(void)          { serial4_end(); }
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
    d5b0:	4608      	mov	r0, r1
    d5b2:	f001 bf93 	b.w	f4dc <serial4_set_transmit_pin>
    d5b6:	bf00      	nop

0000d5b8 <HardwareSerial4::end()>:
	constexpr HardwareSerial4() {}
	virtual void begin(uint32_t baud) { serial4_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
					  serial4_begin(BAUD2DIV3(baud));
					  serial4_format(format); }
	virtual void end(void)          { serial4_end(); }
    d5b8:	f001 bf34 	b.w	f424 <serial4_end>

0000d5bc <HardwareSerial4::begin(unsigned long)>:

class HardwareSerial4 : public HardwareSerial
{
public:
	constexpr HardwareSerial4() {}
	virtual void begin(uint32_t baud) { serial4_begin(BAUD2DIV3(baud)); }
    d5bc:	4b03      	ldr	r3, [pc, #12]	; (d5cc <HardwareSerial4::begin(unsigned long)+0x10>)
    d5be:	eb03 0051 	add.w	r0, r3, r1, lsr #1
    d5c2:	fbb0 f0f1 	udiv	r0, r0, r1
    d5c6:	f001 be87 	b.w	f2d8 <serial4_begin>
    d5ca:	bf00      	nop
    d5cc:	07270e00 	.word	0x07270e00

0000d5d0 <HardwareSerial4::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    d5d0:	b510      	push	{r4, lr}
					  serial4_begin(BAUD2DIV3(baud));
    d5d2:	4b06      	ldr	r3, [pc, #24]	; (d5ec <HardwareSerial4::begin(unsigned long, unsigned long)+0x1c>)
class HardwareSerial4 : public HardwareSerial
{
public:
	constexpr HardwareSerial4() {}
	virtual void begin(uint32_t baud) { serial4_begin(BAUD2DIV3(baud)); }
	virtual void begin(uint32_t baud, uint32_t format) {
    d5d4:	4614      	mov	r4, r2
					  serial4_begin(BAUD2DIV3(baud));
    d5d6:	eb03 0051 	add.w	r0, r3, r1, lsr #1
    d5da:	fbb0 f0f1 	udiv	r0, r0, r1
    d5de:	f001 fe7b 	bl	f2d8 <serial4_begin>
					  serial4_format(format); }
    d5e2:	4620      	mov	r0, r4
    d5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d5e8:	f001 bee6 	b.w	f3b8 <serial4_format>
    d5ec:	07270e00 	.word	0x07270e00

0000d5f0 <HardwareSerial4::peek()>:
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
	virtual int peek(void)          { return serial4_peek(); }
    d5f0:	f002 b93c 	b.w	f86c <serial4_peek>

0000d5f4 <HardwareSerial4::read()>:
	virtual int read(void)          { return serial4_getchar(); }
    d5f4:	f002 b906 	b.w	f804 <serial4_getchar>

0000d5f8 <HardwareSerial4::available()>:
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
    d5f8:	f002 b8f4 	b.w	f7e4 <serial4_available>

0000d5fc <HardwareSerial4::flush()>:
	virtual int peek(void)          { return serial4_peek(); }
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
    d5fc:	f002 b8d4 	b.w	f7a8 <serial4_flush>

0000d600 <HardwareSerial4::availableForWrite()>:
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
    d600:	f002 b8de 	b.w	f7c0 <serial4_write_buffer_free>

0000d604 <HardwareSerial4::write(int)>:
	using Print::write;
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
    d604:	6803      	ldr	r3, [r0, #0]
    d606:	4a06      	ldr	r2, [pc, #24]	; (d620 <HardwareSerial4::write(int)+0x1c>)
    d608:	681b      	ldr	r3, [r3, #0]
    d60a:	4293      	cmp	r3, r2
    d60c:	d105      	bne.n	d61a <HardwareSerial4::write(int)+0x16>
    d60e:	b510      	push	{r4, lr}
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
    d610:	b2c8      	uxtb	r0, r1
    d612:	f002 f809 	bl	f628 <serial4_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
    d616:	2001      	movs	r0, #1
    d618:	bd10      	pop	{r4, pc}
    d61a:	b2c9      	uxtb	r1, r1
    d61c:	4718      	bx	r3
    d61e:	bf00      	nop
    d620:	0000d549 	.word	0x0000d549

0000d624 <HardwareSerial4::write(unsigned long)>:
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    d624:	6803      	ldr	r3, [r0, #0]
    d626:	4a06      	ldr	r2, [pc, #24]	; (d640 <HardwareSerial4::write(unsigned long)+0x1c>)
    d628:	681b      	ldr	r3, [r3, #0]
    d62a:	4293      	cmp	r3, r2
    d62c:	d105      	bne.n	d63a <HardwareSerial4::write(unsigned long)+0x16>
    d62e:	b510      	push	{r4, lr}
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
    d630:	b2c8      	uxtb	r0, r1
    d632:	f001 fff9 	bl	f628 <serial4_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    d636:	2001      	movs	r0, #1
    d638:	bd10      	pop	{r4, pc}
    d63a:	b2c9      	uxtb	r1, r1
    d63c:	4718      	bx	r3
    d63e:	bf00      	nop
    d640:	0000d549 	.word	0x0000d549

0000d644 <HardwareSerial4::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    d644:	6803      	ldr	r3, [r0, #0]
    d646:	4a06      	ldr	r2, [pc, #24]	; (d660 <HardwareSerial4::write(long)+0x1c>)
    d648:	681b      	ldr	r3, [r3, #0]
    d64a:	4293      	cmp	r3, r2
    d64c:	d105      	bne.n	d65a <HardwareSerial4::write(long)+0x16>
    d64e:	b510      	push	{r4, lr}
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
    d650:	b2c8      	uxtb	r0, r1
    d652:	f001 ffe9 	bl	f628 <serial4_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
    d656:	2001      	movs	r0, #1
    d658:	bd10      	pop	{r4, pc}
    d65a:	b2c9      	uxtb	r1, r1
    d65c:	4718      	bx	r3
    d65e:	bf00      	nop
    d660:	0000d549 	.word	0x0000d549

0000d664 <HardwareSerial4::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    d664:	6803      	ldr	r3, [r0, #0]
    d666:	4a06      	ldr	r2, [pc, #24]	; (d680 <HardwareSerial4::write(unsigned int)+0x1c>)
    d668:	681b      	ldr	r3, [r3, #0]
    d66a:	4293      	cmp	r3, r2
    d66c:	d105      	bne.n	d67a <HardwareSerial4::write(unsigned int)+0x16>
    d66e:	b510      	push	{r4, lr}
	virtual int read(void)          { return serial4_getchar(); }
	virtual void flush(void)        { serial4_flush(); }
	virtual void clear(void)	{ serial4_clear(); }
	virtual int availableForWrite(void) { return serial4_write_buffer_free(); }
	using Print::write;
	virtual size_t write(uint8_t c) { serial4_putchar(c); return 1; }
    d670:	b2c8      	uxtb	r0, r1
    d672:	f001 ffd9 	bl	f628 <serial4_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    d676:	2001      	movs	r0, #1
    d678:	bd10      	pop	{r4, pc}
    d67a:	b2c9      	uxtb	r1, r1
    d67c:	4718      	bx	r3
    d67e:	bf00      	nop
    d680:	0000d549 	.word	0x0000d549

0000d684 <serialEvent4()>:
#ifdef HAS_KINETISK_UART3

HardwareSerial4 Serial4;

void serialEvent4() __attribute__((weak));
void serialEvent4() {}
    d684:	4770      	bx	lr
    d686:	bf00      	nop

0000d688 <dummy_funct()>:
	}
}
#endif

static void dummy_funct(void)
{
    d688:	4770      	bx	lr
    d68a:	bf00      	nop

0000d68c <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
#endif


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	if (channel) {
    d68c:	6803      	ldr	r3, [r0, #0]
uint8_t IntervalTimer::nvic_priorites[2] = {255, 255};
#endif


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
    d68e:	b4f0      	push	{r4, r5, r6, r7}
	if (channel) {
    d690:	b1fb      	cbz	r3, d6d2 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x46>
		channel->TCTRL = 0;
    d692:	2500      	movs	r5, #0
		channel->TFLG = 1;
    d694:	2401      	movs	r4, #1


bool IntervalTimer::beginCycles(void (*funct)(), uint32_t cycles)
{
	if (channel) {
		channel->TCTRL = 0;
    d696:	609d      	str	r5, [r3, #8]
		channel->TFLG = 1;
    d698:	60dc      	str	r4, [r3, #12]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
    d69a:	4c1d      	ldr	r4, [pc, #116]	; (d710 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x84>)
	funct_table[index] = funct;
	channel->LDVAL = cycles;
    d69c:	601a      	str	r2, [r3, #0]
				channel = NULL;
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
    d69e:	441c      	add	r4, r3
    d6a0:	1124      	asrs	r4, r4, #4
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    d6a2:	f104 0530 	add.w	r5, r4, #48	; 0x30
    d6a6:	116a      	asrs	r2, r5, #5
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
    d6a8:	2603      	movs	r6, #3
    d6aa:	609e      	str	r6, [r3, #8]
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    d6ac:	0092      	lsls	r2, r2, #2
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
    d6ae:	4b19      	ldr	r3, [pc, #100]	; (d714 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x88>)
    d6b0:	7906      	ldrb	r6, [r0, #4]
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
    d6b2:	4f19      	ldr	r7, [pc, #100]	; (d718 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x8c>)
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
    d6b4:	54e6      	strb	r6, [r4, r3]
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    d6b6:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
    d6ba:	2001      	movs	r0, #1
    d6bc:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    d6c0:	f005 051f 	and.w	r5, r5, #31
    d6c4:	fa00 f505 	lsl.w	r5, r0, r5
				return false;
			}
		}
	}
	int index = channel - KINETISK_PIT_CHANNELS;
	funct_table[index] = funct;
    d6c8:	f847 1024 	str.w	r1, [r7, r4, lsl #2]
	channel->LDVAL = cycles;
	channel->TCTRL = 3;
#if defined(KINETISK)
	NVIC_SET_PRIORITY(IRQ_PIT_CH0 + index, nvic_priority);
	NVIC_ENABLE_IRQ(IRQ_PIT_CH0 + index);
    d6cc:	6015      	str	r5, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[1]);
	}
	NVIC_ENABLE_IRQ(IRQ_PIT);
#endif
	return true;
}
    d6ce:	bcf0      	pop	{r4, r5, r6, r7}
    d6d0:	4770      	bx	lr
{
	if (channel) {
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		SIM_SCGC6 |= SIM_SCGC6_PIT;
    d6d2:	4d12      	ldr	r5, [pc, #72]	; (d71c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x90>)
    d6d4:	682c      	ldr	r4, [r5, #0]
    d6d6:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
    d6da:	602c      	str	r4, [r5, #0]
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
    d6dc:	bf00      	nop
		PIT_MCR = 1;
    d6de:	4d10      	ldr	r5, [pc, #64]	; (d720 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x94>)
		channel = KINETISK_PIT_CHANNELS;
    d6e0:	4c10      	ldr	r4, [pc, #64]	; (d724 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x98>)
		channel->TCTRL = 0;
		channel->TFLG = 1;
	} else {
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
    d6e2:	2601      	movs	r6, #1
    d6e4:	602e      	str	r6, [r5, #0]
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
    d6e6:	68a5      	ldr	r5, [r4, #8]
		channel->TFLG = 1;
	} else {
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
    d6e8:	6004      	str	r4, [r0, #0]
		while (1) {
			if (channel->TCTRL == 0) break;
    d6ea:	b17d      	cbz	r5, d70c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    d6ec:	3410      	adds	r4, #16
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
    d6ee:	68a5      	ldr	r5, [r4, #8]
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    d6f0:	6004      	str	r4, [r0, #0]
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
    d6f2:	b15d      	cbz	r5, d70c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    d6f4:	3410      	adds	r4, #16
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
    d6f6:	68a5      	ldr	r5, [r4, #8]
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    d6f8:	6004      	str	r4, [r0, #0]
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
    d6fa:	b13d      	cbz	r5, d70c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    d6fc:	3410      	adds	r4, #16
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
    d6fe:	68a5      	ldr	r5, [r4, #8]
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    d700:	6004      	str	r4, [r0, #0]
		SIM_SCGC6 |= SIM_SCGC6_PIT;
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
    d702:	b11d      	cbz	r5, d70c <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
				channel = NULL;
    d704:	6003      	str	r3, [r0, #0]
		NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[1]);
	}
	NVIC_ENABLE_IRQ(IRQ_PIT);
#endif
	return true;
}
    d706:	bcf0      	pop	{r4, r5, r6, r7}
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
				channel = NULL;
				return false;
    d708:	4618      	mov	r0, r3
		NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[1]);
	}
	NVIC_ENABLE_IRQ(IRQ_PIT);
#endif
	return true;
}
    d70a:	4770      	bx	lr
		__asm__ volatile("nop"); // solves timing problem on Teensy 3.5
		PIT_MCR = 1;
		channel = KINETISK_PIT_CHANNELS;
		while (1) {
			if (channel->TCTRL == 0) break;
			if (++channel >= KINETISK_PIT_CHANNELS + NUM_CHANNELS) {
    d70c:	4623      	mov	r3, r4
    d70e:	e7c4      	b.n	d69a <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xe>
    d710:	bffc8f00 	.word	0xbffc8f00
    d714:	e000e430 	.word	0xe000e430
    d718:	1fff4ae4 	.word	0x1fff4ae4
    d71c:	4004803c 	.word	0x4004803c
    d720:	40037000 	.word	0x40037000
    d724:	40037100 	.word	0x40037100

0000d728 <IntervalTimer::end()>:
	return true;
}


void IntervalTimer::end() {
	if (channel) {
    d728:	6801      	ldr	r1, [r0, #0]
    d72a:	b1a9      	cbz	r1, d758 <IntervalTimer::end()+0x30>
		int index = channel - KINETISK_PIT_CHANNELS;
    d72c:	4b0b      	ldr	r3, [pc, #44]	; (d75c <IntervalTimer::end()+0x34>)
#endif
	return true;
}


void IntervalTimer::end() {
    d72e:	b4f0      	push	{r4, r5, r6, r7}
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
    d730:	440b      	add	r3, r1
    d732:	111b      	asrs	r3, r3, #4
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
    d734:	4e0a      	ldr	r6, [pc, #40]	; (d760 <IntervalTimer::end()+0x38>)
    d736:	4f0b      	ldr	r7, [pc, #44]	; (d764 <IntervalTimer::end()+0x3c>)

void IntervalTimer::end() {
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    d738:	4d0b      	ldr	r5, [pc, #44]	; (d768 <IntervalTimer::end()+0x40>)
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
    d73a:	f846 7023 	str.w	r7, [r6, r3, lsl #2]

void IntervalTimer::end() {
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    d73e:	f103 0230 	add.w	r2, r3, #48	; 0x30
    d742:	f002 041f 	and.w	r4, r2, #31
    d746:	2301      	movs	r3, #1
    d748:	1152      	asrs	r2, r2, #5
    d74a:	40a3      	lsls	r3, r4
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
		channel->TCTRL = 0;
    d74c:	2400      	movs	r4, #0

void IntervalTimer::end() {
	if (channel) {
		int index = channel - KINETISK_PIT_CHANNELS;
#if defined(KINETISK)
		NVIC_DISABLE_IRQ(IRQ_PIT_CH0 + index);
    d74e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
#elif defined(KINETISL)
		// TODO: disable IRQ_PIT, but only if both instances ended
#endif
		funct_table[index] = dummy_funct;
		channel->TCTRL = 0;
    d752:	608c      	str	r4, [r1, #8]
			NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[0]);
		} else {
			NVIC_SET_PRIORITY(IRQ_PIT, nvic_priorites[1]);
		}
#endif
		channel = 0;
    d754:	6004      	str	r4, [r0, #0]
	}
}
    d756:	bcf0      	pop	{r4, r5, r6, r7}
    d758:	4770      	bx	lr
    d75a:	bf00      	nop
    d75c:	bffc8f00 	.word	0xbffc8f00
    d760:	1fff4ae4 	.word	0x1fff4ae4
    d764:	0000d689 	.word	0x0000d689
    d768:	e000e180 	.word	0xe000e180

0000d76c <pit0_isr>:


#if defined(KINETISK)
void pit0_isr()
{
	PIT_TFLG0 = 1;
    d76c:	4a02      	ldr	r2, [pc, #8]	; (d778 <pit0_isr+0xc>)
	funct_table[0]();
    d76e:	4b03      	ldr	r3, [pc, #12]	; (d77c <pit0_isr+0x10>)


#if defined(KINETISK)
void pit0_isr()
{
	PIT_TFLG0 = 1;
    d770:	2101      	movs	r1, #1
    d772:	6011      	str	r1, [r2, #0]
	funct_table[0]();
    d774:	681b      	ldr	r3, [r3, #0]
    d776:	4718      	bx	r3
    d778:	4003710c 	.word	0x4003710c
    d77c:	1fff4ae4 	.word	0x1fff4ae4

0000d780 <pit1_isr>:
}

void pit1_isr() {
	PIT_TFLG1 = 1;
    d780:	4a02      	ldr	r2, [pc, #8]	; (d78c <pit1_isr+0xc>)
	funct_table[1]();
    d782:	4b03      	ldr	r3, [pc, #12]	; (d790 <pit1_isr+0x10>)
	PIT_TFLG0 = 1;
	funct_table[0]();
}

void pit1_isr() {
	PIT_TFLG1 = 1;
    d784:	2101      	movs	r1, #1
    d786:	6011      	str	r1, [r2, #0]
	funct_table[1]();
    d788:	685b      	ldr	r3, [r3, #4]
    d78a:	4718      	bx	r3
    d78c:	4003711c 	.word	0x4003711c
    d790:	1fff4ae4 	.word	0x1fff4ae4

0000d794 <pit2_isr>:
}

void pit2_isr() {
	PIT_TFLG2 = 1;
    d794:	4a02      	ldr	r2, [pc, #8]	; (d7a0 <pit2_isr+0xc>)
	funct_table[2]();
    d796:	4b03      	ldr	r3, [pc, #12]	; (d7a4 <pit2_isr+0x10>)
	PIT_TFLG1 = 1;
	funct_table[1]();
}

void pit2_isr() {
	PIT_TFLG2 = 1;
    d798:	2101      	movs	r1, #1
    d79a:	6011      	str	r1, [r2, #0]
	funct_table[2]();
    d79c:	689b      	ldr	r3, [r3, #8]
    d79e:	4718      	bx	r3
    d7a0:	4003712c 	.word	0x4003712c
    d7a4:	1fff4ae4 	.word	0x1fff4ae4

0000d7a8 <pit3_isr>:
}

void pit3_isr() {
	PIT_TFLG3 = 1;
    d7a8:	4a02      	ldr	r2, [pc, #8]	; (d7b4 <pit3_isr+0xc>)
	funct_table[3]();
    d7aa:	4b03      	ldr	r3, [pc, #12]	; (d7b8 <pit3_isr+0x10>)
	PIT_TFLG2 = 1;
	funct_table[2]();
}

void pit3_isr() {
	PIT_TFLG3 = 1;
    d7ac:	2101      	movs	r1, #1
    d7ae:	6011      	str	r1, [r2, #0]
	funct_table[3]();
    d7b0:	68db      	ldr	r3, [r3, #12]
    d7b2:	4718      	bx	r3
    d7b4:	4003713c 	.word	0x4003713c
    d7b8:	1fff4ae4 	.word	0x1fff4ae4

0000d7bc <Print::write(unsigned char const*, unsigned int)>:

#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
    d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t count = 0;
	while (size--) count += write(*buffer++);
    d7be:	b172      	cbz	r2, d7de <Print::write(unsigned char const*, unsigned int)+0x22>
    d7c0:	4606      	mov	r6, r0
    d7c2:	460f      	mov	r7, r1
    d7c4:	4614      	mov	r4, r2
    d7c6:	2500      	movs	r5, #0
    d7c8:	6833      	ldr	r3, [r6, #0]
    d7ca:	f817 1b01 	ldrb.w	r1, [r7], #1
    d7ce:	681b      	ldr	r3, [r3, #0]
    d7d0:	4630      	mov	r0, r6
    d7d2:	4798      	blx	r3
    d7d4:	3c01      	subs	r4, #1
    d7d6:	4405      	add	r5, r0
    d7d8:	d1f6      	bne.n	d7c8 <Print::write(unsigned char const*, unsigned int)+0xc>
	return count;
}
    d7da:	4628      	mov	r0, r5
    d7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#include <Arduino.h>


size_t Print::write(const uint8_t *buffer, size_t size)
{
	size_t count = 0;
    d7de:	4615      	mov	r5, r2
    d7e0:	e7fb      	b.n	d7da <Print::write(unsigned char const*, unsigned int)+0x1e>
    d7e2:	bf00      	nop

0000d7e4 <Print::print(String const&)>:
	return count;
}


size_t Print::print(const String &s)
{
    d7e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d7e8:	688c      	ldr	r4, [r1, #8]
    d7ea:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    d7ec:	b1ec      	cbz	r4, d82a <Print::print(String const&)+0x46>
    d7ee:	2500      	movs	r5, #0
    d7f0:	4606      	mov	r6, r0
    d7f2:	4689      	mov	r9, r1
    d7f4:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    d7f6:	462b      	mov	r3, r5
    d7f8:	2221      	movs	r2, #33	; 0x21
    d7fa:	a901      	add	r1, sp, #4
    d7fc:	4648      	mov	r0, r9
    d7fe:	f000 fca3 	bl	e148 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    d802:	6832      	ldr	r2, [r6, #0]
    d804:	2c20      	cmp	r4, #32
    d806:	4623      	mov	r3, r4
    d808:	bf28      	it	cs
    d80a:	2320      	movcs	r3, #32
    d80c:	f8d2 8004 	ldr.w	r8, [r2, #4]
    d810:	a901      	add	r1, sp, #4
    d812:	461a      	mov	r2, r3
    d814:	4630      	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    d816:	441d      	add	r5, r3
		len -= nbytes;
    d818:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    d81a:	47c0      	blx	r8
    d81c:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    d81e:	2c00      	cmp	r4, #0
    d820:	d1e9      	bne.n	d7f6 <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    d822:	4638      	mov	r0, r7
    d824:	b00b      	add	sp, #44	; 0x2c
    d826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    d82a:	4627      	mov	r7, r4
    d82c:	e7f9      	b.n	d822 <Print::print(String const&)+0x3e>
    d82e:	bf00      	nop

0000d830 <Print::print(long)>:
	return count;
}


size_t Print::print(long n)
{
    d830:	b570      	push	{r4, r5, r6, lr}
	uint8_t sign=0;

	if (n < 0) {
    d832:	2900      	cmp	r1, #0
	return count;
}


size_t Print::print(long n)
{
    d834:	b08a      	sub	sp, #40	; 0x28
	uint8_t sign=0;

	if (n < 0) {
    d836:	db0c      	blt.n	d852 <Print::print(long)+0x22>
	} else if (base == 1) {
		base = 10;
	}


	if (n == 0) {
    d838:	d138      	bne.n	d8ac <Print::print(long)+0x7c>
		buf[sizeof(buf) - 1] = '0';
    d83a:	2330      	movs	r3, #48	; 0x30
    d83c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    d840:	2201      	movs	r2, #1
    d842:	2121      	movs	r1, #33	; 0x21
	}
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
    d844:	6803      	ldr	r3, [r0, #0]
    d846:	ac01      	add	r4, sp, #4
    d848:	685b      	ldr	r3, [r3, #4]
    d84a:	4421      	add	r1, r4
    d84c:	4798      	blx	r3
	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
}
    d84e:	b00a      	add	sp, #40	; 0x28
    d850:	bd70      	pop	{r4, r5, r6, pc}
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d852:	4b22      	ldr	r3, [pc, #136]	; (d8dc <Print::print(long)+0xac>)

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    d854:	4249      	negs	r1, r1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d856:	fba3 2301 	umull	r2, r3, r3, r1
    d85a:	08db      	lsrs	r3, r3, #3
    d85c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    d860:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    d864:	3130      	adds	r1, #48	; 0x30
    d866:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    d86a:	b383      	cbz	r3, d8ce <Print::print(long)+0x9e>
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    d86c:	262d      	movs	r6, #45	; 0x2d
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d86e:	4d1b      	ldr	r5, [pc, #108]	; (d8dc <Print::print(long)+0xac>)
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    d870:	2221      	movs	r2, #33	; 0x21
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d872:	fba5 4103 	umull	r4, r1, r5, r3
    d876:	08c9      	lsrs	r1, r1, #3
    d878:	eb01 0481 	add.w	r4, r1, r1, lsl #2
			n /= base;
			if (n == 0) break;
			i--;
    d87c:	3a01      	subs	r2, #1
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d87e:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
			n /= base;
			if (n == 0) break;
			i--;
    d882:	b2d2      	uxtb	r2, r2
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d884:	ac0a      	add	r4, sp, #40	; 0x28
    d886:	4414      	add	r4, r2
    d888:	3330      	adds	r3, #48	; 0x30
    d88a:	f804 3c24 	strb.w	r3, [r4, #-36]
			n /= base;
			if (n == 0) break;
    d88e:	460b      	mov	r3, r1
    d890:	2900      	cmp	r1, #0
    d892:	d1ee      	bne.n	d872 <Print::print(long)+0x42>
			i--;
		}
	}
	if (sign) {
    d894:	b1ee      	cbz	r6, d8d2 <Print::print(long)+0xa2>
		i--;
    d896:	3a01      	subs	r2, #1
    d898:	b2d2      	uxtb	r2, r2
		buf[i] = '-';
    d89a:	ab0a      	add	r3, sp, #40	; 0x28
    d89c:	4413      	add	r3, r2
    d89e:	4611      	mov	r1, r2
    d8a0:	222d      	movs	r2, #45	; 0x2d
    d8a2:	f803 2c24 	strb.w	r2, [r3, #-36]
    d8a6:	f1c1 0222 	rsb	r2, r1, #34	; 0x22
    d8aa:	e7cb      	b.n	d844 <Print::print(long)+0x14>
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d8ac:	4b0b      	ldr	r3, [pc, #44]	; (d8dc <Print::print(long)+0xac>)
    d8ae:	fba3 2301 	umull	r2, r3, r3, r1
    d8b2:	08db      	lsrs	r3, r3, #3
    d8b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    d8b8:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    d8bc:	3130      	adds	r1, #48	; 0x30
    d8be:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
    d8c2:	b10b      	cbz	r3, d8c8 <Print::print(long)+0x98>
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    d8c4:	2600      	movs	r6, #0
    d8c6:	e7d2      	b.n	d86e <Print::print(long)+0x3e>
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    d8c8:	2201      	movs	r2, #1
    d8ca:	2121      	movs	r1, #33	; 0x21
    d8cc:	e7ba      	b.n	d844 <Print::print(long)+0x14>
    d8ce:	2221      	movs	r2, #33	; 0x21
    d8d0:	e7e1      	b.n	d896 <Print::print(long)+0x66>
    d8d2:	4611      	mov	r1, r2
    d8d4:	f1c2 0222 	rsb	r2, r2, #34	; 0x22
    d8d8:	e7b4      	b.n	d844 <Print::print(long)+0x14>
    d8da:	bf00      	nop
    d8dc:	cccccccd 	.word	0xcccccccd

0000d8e0 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    d8e0:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    d8e2:	4a06      	ldr	r2, [pc, #24]	; (d8fc <Print::println()+0x1c>)
	return write(buf, 2);
    d8e4:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    d8e6:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    d8e8:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    d8ea:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    d8ec:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    d8ee:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    d8f2:	2202      	movs	r2, #2
    d8f4:	4798      	blx	r3
}
    d8f6:	b003      	add	sp, #12
    d8f8:	f85d fb04 	ldr.w	pc, [sp], #4
    d8fc:	00017738 	.word	0x00017738

0000d900 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    d900:	b510      	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    d902:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    d904:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    d906:	685b      	ldr	r3, [r3, #4]
    d908:	4798      	blx	r3
	return len;
}
    d90a:	4620      	mov	r0, r4
    d90c:	bd10      	pop	{r4, pc}
    d90e:	bf00      	nop

0000d910 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    d910:	b40e      	push	{r1, r2, r3}
    d912:	b500      	push	{lr}
    d914:	b082      	sub	sp, #8
    d916:	aa03      	add	r2, sp, #12
    d918:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    d91c:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    d91e:	f007 fad7 	bl	14ed0 <vdprintf>
#endif
}
    d922:	b002      	add	sp, #8
    d924:	f85d eb04 	ldr.w	lr, [sp], #4
    d928:	b003      	add	sp, #12
    d92a:	4770      	bx	lr

0000d92c <Stream::readStringUntil(char, unsigned int)>:
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    d92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d930:	460c      	mov	r4, r1
    d932:	b082      	sub	sp, #8
    d934:	4699      	mov	r9, r3
	String str;
    d936:	2100      	movs	r1, #0
	}
	return str;
}

String Stream::readStringUntil(char terminator, size_t max)
{
    d938:	4692      	mov	sl, r2
    d93a:	4680      	mov	r8, r0
	String str;
    d93c:	f000 f82e 	bl	d99c <String::String(char const*)>
	size_t length = 0;
	while (length < max) {
    d940:	f1b9 0f00 	cmp.w	r9, #0
    d944:	d01e      	beq.n	d984 <Stream::readStringUntil(char, unsigned int)+0x58>
    d946:	4d14      	ldr	r5, [pc, #80]	; (d998 <Stream::readStringUntil(char, unsigned int)+0x6c>)
    d948:	2700      	movs	r7, #0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    d94a:	682b      	ldr	r3, [r5, #0]
    d94c:	9301      	str	r3, [sp, #4]
	return ret;
    d94e:	9e01      	ldr	r6, [sp, #4]
    d950:	e008      	b.n	d964 <Stream::readStringUntil(char, unsigned int)+0x38>
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    if (c >= 0) return c;
    yield();
    d952:	f003 f8ed 	bl	10b30 <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    d956:	682b      	ldr	r3, [r5, #0]
    d958:	9300      	str	r3, [sp, #0]
	return ret;
    d95a:	9b00      	ldr	r3, [sp, #0]
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  unsigned long startMillis = millis();
  do {
    d95c:	68a2      	ldr	r2, [r4, #8]
    d95e:	1b9b      	subs	r3, r3, r6
    d960:	4293      	cmp	r3, r2
    d962:	d213      	bcs.n	d98c <Stream::readStringUntil(char, unsigned int)+0x60>
    c = read();
    d964:	6823      	ldr	r3, [r4, #0]
    d966:	4620      	mov	r0, r4
    d968:	695b      	ldr	r3, [r3, #20]
    d96a:	4798      	blx	r3
    if (c >= 0) return c;
    d96c:	2800      	cmp	r0, #0
    d96e:	dbf0      	blt.n	d952 <Stream::readStringUntil(char, unsigned int)+0x26>
		int c = timedRead();
		if (c < 0) {
			setReadError();
			break;	// timeout
		}
		if (c == 0 || c == terminator) break;
    d970:	d008      	beq.n	d984 <Stream::readStringUntil(char, unsigned int)+0x58>
    d972:	4582      	cmp	sl, r0
    d974:	d006      	beq.n	d984 <Stream::readStringUntil(char, unsigned int)+0x58>
	String & append(float num);
	String & append(double num)			{return append((float)num);}
	String & operator += (const String &rhs)	{return append(rhs);}
	String & operator += (const char *cstr)		{return append(cstr);}
	String & operator += (const __FlashStringHelper *pgmstr) {return append(pgmstr);}
	String & operator += (char c)			{return append(c);}
    d976:	b2c1      	uxtb	r1, r0
		str += (char)c;
		length++;
    d978:	3701      	adds	r7, #1
    d97a:	4640      	mov	r0, r8
    d97c:	f000 fa30 	bl	dde0 <String::append(char)>

String Stream::readStringUntil(char terminator, size_t max)
{
	String str;
	size_t length = 0;
	while (length < max) {
    d980:	45b9      	cmp	r9, r7
    d982:	d1e2      	bne.n	d94a <Stream::readStringUntil(char, unsigned int)+0x1e>
		if (c == 0 || c == terminator) break;
		str += (char)c;
		length++;
	}
	return str;
}
    d984:	4640      	mov	r0, r8
    d986:	b002      	add	sp, #8
    d988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	String readString(size_t max = 120);
	String readStringUntil(char terminator, size_t max = 120);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    d98c:	2301      	movs	r3, #1
    d98e:	4640      	mov	r0, r8
    d990:	7323      	strb	r3, [r4, #12]
    d992:	b002      	add	sp, #8
    d994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d998:	1fff6804 	.word	0x1fff6804

0000d99c <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    d99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    d99e:	2500      	movs	r5, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    d9a0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    d9a2:	6005      	str	r5, [r0, #0]
	capacity = 0;
    d9a4:	6045      	str	r5, [r0, #4]
	len = 0;
    d9a6:	6085      	str	r5, [r0, #8]
	flags = 0;
    d9a8:	7305      	strb	r5, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    d9aa:	b129      	cbz	r1, d9b8 <String::String(char const*)+0x1c>
    d9ac:	4608      	mov	r0, r1
    d9ae:	460e      	mov	r6, r1
    d9b0:	f005 fae6 	bl	12f80 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    d9b4:	4607      	mov	r7, r0
    d9b6:	b908      	cbnz	r0, d9bc <String::String(char const*)+0x20>

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}
    d9b8:	4620      	mov	r0, r4
    d9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    d9bc:	4628      	mov	r0, r5
    d9be:	1c79      	adds	r1, r7, #1
    d9c0:	f004 fe6e 	bl	126a0 <realloc>
	if (newbuffer) {
    d9c4:	4605      	mov	r5, r0
    d9c6:	b158      	cbz	r0, d9e0 <String::String(char const*)+0x44>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d9c8:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    d9ca:	e884 00a0 	stmia.w	r4, {r5, r7}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    d9ce:	b903      	cbnz	r3, d9d2 <String::String(char const*)+0x36>
    d9d0:	7003      	strb	r3, [r0, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    d9d2:	60a7      	str	r7, [r4, #8]
	strcpy(buffer, cstr);
    d9d4:	4631      	mov	r1, r6
    d9d6:	4628      	mov	r0, r5
    d9d8:	f005 fa70 	bl	12ebc <strcpy>

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}
    d9dc:	4620      	mov	r0, r4
    d9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    d9e0:	6820      	ldr	r0, [r4, #0]
    d9e2:	b110      	cbz	r0, d9ea <String::String(char const*)+0x4e>
			free(buffer);
    d9e4:	f004 fa4a 	bl	11e7c <free>
			buffer = NULL;
    d9e8:	6025      	str	r5, [r4, #0]
		}
		len = capacity = 0;
    d9ea:	2300      	movs	r3, #0
    d9ec:	6063      	str	r3, [r4, #4]
    d9ee:	60a3      	str	r3, [r4, #8]

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}
    d9f0:	4620      	mov	r0, r4
    d9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d9f4 <String::String(String const&)>:
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
    d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9f6:	4604      	mov	r4, r0
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    d9f8:	428c      	cmp	r4, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    d9fa:	f04f 0000 	mov.w	r0, #0
    d9fe:	6020      	str	r0, [r4, #0]
	capacity = 0;
    da00:	6060      	str	r0, [r4, #4]
	len = 0;
    da02:	60a0      	str	r0, [r4, #8]
	flags = 0;
    da04:	7320      	strb	r0, [r4, #12]
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    da06:	d002      	beq.n	da0e <String::String(String const&)+0x1a>
	return copy(rhs.buffer, rhs.len);
    da08:	688d      	ldr	r5, [r1, #8]
    da0a:	460b      	mov	r3, r1
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    da0c:	b90d      	cbnz	r5, da12 <String::String(String const&)+0x1e>

String::String(const String &value)
{
	init();
	*this = value;
}
    da0e:	4620      	mov	r0, r4
    da10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    da12:	1c69      	adds	r1, r5, #1
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
	return copy(rhs.buffer, rhs.len);
    da14:	681f      	ldr	r7, [r3, #0]
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    da16:	f004 fe43 	bl	126a0 <realloc>
	if (newbuffer) {
    da1a:	4606      	mov	r6, r0
    da1c:	b158      	cbz	r0, da36 <String::String(String const&)+0x42>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    da1e:	68a3      	ldr	r3, [r4, #8]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    da20:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    da22:	6065      	str	r5, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    da24:	b903      	cbnz	r3, da28 <String::String(String const&)+0x34>
    da26:	7003      	strb	r3, [r0, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    da28:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    da2a:	4639      	mov	r1, r7
    da2c:	4630      	mov	r0, r6
    da2e:	f005 fa45 	bl	12ebc <strcpy>

String::String(const String &value)
{
	init();
	*this = value;
}
    da32:	4620      	mov	r0, r4
    da34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    da36:	6820      	ldr	r0, [r4, #0]
    da38:	b110      	cbz	r0, da40 <String::String(String const&)+0x4c>
			free(buffer);
    da3a:	f004 fa1f 	bl	11e7c <free>
			buffer = NULL;
    da3e:	6026      	str	r6, [r4, #0]
		}
		len = capacity = 0;
    da40:	2300      	movs	r3, #0
    da42:	6063      	str	r3, [r4, #4]
    da44:	60a3      	str	r3, [r4, #8]

String::String(const String &value)
{
	init();
	*this = value;
}
    da46:	4620      	mov	r0, r4
    da48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    da4a:	bf00      	nop

0000da4c <String::String(int, unsigned char)>:
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    da4c:	b570      	push	{r4, r5, r6, lr}
    da4e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    da50:	2300      	movs	r3, #0
	char buf[4];
	utoa(c, buf, 10);
	*this = buf;
}

String::String(const int value, unsigned char base)
    da52:	b086      	sub	sp, #24
{
	init();
	char buf[18];
	itoa(value, buf, base);
    da54:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    da56:	6023      	str	r3, [r4, #0]
	capacity = 0;
    da58:	6063      	str	r3, [r4, #4]
	len = 0;
    da5a:	60a3      	str	r3, [r4, #8]
	flags = 0;
    da5c:	7323      	strb	r3, [r4, #12]

String::String(const int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    da5e:	a901      	add	r1, sp, #4
    da60:	f004 f9e8 	bl	11e34 <itoa>
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    da64:	a801      	add	r0, sp, #4
    da66:	f005 fa8b 	bl	12f80 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    da6a:	4605      	mov	r5, r0
    da6c:	b938      	cbnz	r0, da7e <String::String(int, unsigned char)+0x32>
		if (buffer) buffer[0] = 0;
    da6e:	6823      	ldr	r3, [r4, #0]
    da70:	b103      	cbz	r3, da74 <String::String(int, unsigned char)+0x28>
    da72:	7018      	strb	r0, [r3, #0]
		len = 0;
    da74:	2300      	movs	r3, #0
{
	init();
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}
    da76:	4620      	mov	r0, r4

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
    da78:	60a3      	str	r3, [r4, #8]
{
	init();
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}
    da7a:	b006      	add	sp, #24
    da7c:	bd70      	pop	{r4, r5, r6, pc}
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    da7e:	6863      	ldr	r3, [r4, #4]
    da80:	4298      	cmp	r0, r3
    da82:	d807      	bhi.n	da94 <String::String(int, unsigned char)+0x48>
    da84:	6820      	ldr	r0, [r4, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    da86:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    da88:	a901      	add	r1, sp, #4
    da8a:	f005 fa17 	bl	12ebc <strcpy>
{
	init();
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}
    da8e:	4620      	mov	r0, r4
    da90:	b006      	add	sp, #24
    da92:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    da94:	1c41      	adds	r1, r0, #1
    da96:	6820      	ldr	r0, [r4, #0]
    da98:	f004 fe02 	bl	126a0 <realloc>
	if (newbuffer) {
    da9c:	4606      	mov	r6, r0
    da9e:	b138      	cbz	r0, dab0 <String::String(int, unsigned char)+0x64>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    daa0:	68a3      	ldr	r3, [r4, #8]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    daa2:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    daa4:	6065      	str	r5, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    daa6:	2b00      	cmp	r3, #0
    daa8:	d1ed      	bne.n	da86 <String::String(int, unsigned char)+0x3a>
    daaa:	7003      	strb	r3, [r0, #0]
    daac:	6820      	ldr	r0, [r4, #0]
    daae:	e7ea      	b.n	da86 <String::String(int, unsigned char)+0x3a>
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    dab0:	6820      	ldr	r0, [r4, #0]
    dab2:	b110      	cbz	r0, daba <String::String(int, unsigned char)+0x6e>
			free(buffer);
    dab4:	f004 f9e2 	bl	11e7c <free>
			buffer = NULL;
    dab8:	6026      	str	r6, [r4, #0]
		}
		len = capacity = 0;
    daba:	2300      	movs	r3, #0
{
	init();
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}
    dabc:	4620      	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    dabe:	6063      	str	r3, [r4, #4]
    dac0:	60a3      	str	r3, [r4, #8]
{
	init();
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}
    dac2:	b006      	add	sp, #24
    dac4:	bd70      	pop	{r4, r5, r6, pc}
    dac6:	bf00      	nop

0000dac8 <String::String(unsigned int, unsigned char)>:

String::String(unsigned int value, unsigned char base)
    dac8:	b570      	push	{r4, r5, r6, lr}
    daca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    dacc:	2300      	movs	r3, #0
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    dace:	b086      	sub	sp, #24
{
	init();
	char buf[17];
  	utoa(value, buf, base);
    dad0:	4608      	mov	r0, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    dad2:	6023      	str	r3, [r4, #0]
	capacity = 0;
    dad4:	6063      	str	r3, [r4, #4]
	len = 0;
    dad6:	60a3      	str	r3, [r4, #8]
	flags = 0;
    dad8:	7323      	strb	r3, [r4, #12]

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
  	utoa(value, buf, base);
    dada:	a901      	add	r1, sp, #4
    dadc:	f007 f9d0 	bl	14e80 <utoa>
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
    dae0:	a801      	add	r0, sp, #4
    dae2:	f005 fa4d 	bl	12f80 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    dae6:	4605      	mov	r5, r0
    dae8:	b938      	cbnz	r0, dafa <String::String(unsigned int, unsigned char)+0x32>
		if (buffer) buffer[0] = 0;
    daea:	6823      	ldr	r3, [r4, #0]
    daec:	b103      	cbz	r3, daf0 <String::String(unsigned int, unsigned char)+0x28>
    daee:	7018      	strb	r0, [r3, #0]
		len = 0;
    daf0:	2300      	movs	r3, #0
{
	init();
	char buf[17];
  	utoa(value, buf, base);
	*this = buf;
}
    daf2:	4620      	mov	r0, r4

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
    daf4:	60a3      	str	r3, [r4, #8]
{
	init();
	char buf[17];
  	utoa(value, buf, base);
	*this = buf;
}
    daf6:	b006      	add	sp, #24
    daf8:	bd70      	pop	{r4, r5, r6, pc}
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dafa:	6863      	ldr	r3, [r4, #4]
    dafc:	4298      	cmp	r0, r3
    dafe:	d807      	bhi.n	db10 <String::String(unsigned int, unsigned char)+0x48>
    db00:	6820      	ldr	r0, [r4, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    db02:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    db04:	a901      	add	r1, sp, #4
    db06:	f005 f9d9 	bl	12ebc <strcpy>
{
	init();
	char buf[17];
  	utoa(value, buf, base);
	*this = buf;
}
    db0a:	4620      	mov	r0, r4
    db0c:	b006      	add	sp, #24
    db0e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    db10:	1c41      	adds	r1, r0, #1
    db12:	6820      	ldr	r0, [r4, #0]
    db14:	f004 fdc4 	bl	126a0 <realloc>
	if (newbuffer) {
    db18:	4606      	mov	r6, r0
    db1a:	b138      	cbz	r0, db2c <String::String(unsigned int, unsigned char)+0x64>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    db1c:	68a3      	ldr	r3, [r4, #8]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    db1e:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    db20:	6065      	str	r5, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    db22:	2b00      	cmp	r3, #0
    db24:	d1ed      	bne.n	db02 <String::String(unsigned int, unsigned char)+0x3a>
    db26:	7003      	strb	r3, [r0, #0]
    db28:	6820      	ldr	r0, [r4, #0]
    db2a:	e7ea      	b.n	db02 <String::String(unsigned int, unsigned char)+0x3a>
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    db2c:	6820      	ldr	r0, [r4, #0]
    db2e:	b110      	cbz	r0, db36 <String::String(unsigned int, unsigned char)+0x6e>
			free(buffer);
    db30:	f004 f9a4 	bl	11e7c <free>
			buffer = NULL;
    db34:	6026      	str	r6, [r4, #0]
		}
		len = capacity = 0;
    db36:	2300      	movs	r3, #0
{
	init();
	char buf[17];
  	utoa(value, buf, base);
	*this = buf;
}
    db38:	4620      	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    db3a:	6063      	str	r3, [r4, #4]
    db3c:	60a3      	str	r3, [r4, #8]
{
	init();
	char buf[17];
  	utoa(value, buf, base);
	*this = buf;
}
    db3e:	b006      	add	sp, #24
    db40:	bd70      	pop	{r4, r5, r6, pc}
    db42:	bf00      	nop

0000db44 <String::String(float, unsigned char)>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float num, unsigned char digits)
    db44:	b5f0      	push	{r4, r5, r6, r7, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    db46:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float num, unsigned char digits)
    db48:	b08b      	sub	sp, #44	; 0x2c
    db4a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    db4c:	6003      	str	r3, [r0, #0]
	capacity = 0;
    db4e:	6043      	str	r3, [r0, #4]
	len = 0;
    db50:	6083      	str	r3, [r0, #8]
	flags = 0;
    db52:	7303      	strb	r3, [r0, #12]

String::String(float num, unsigned char digits)
{
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
    db54:	466a      	mov	r2, sp
    db56:	1c88      	adds	r0, r1, #2
    db58:	f000 fee4 	bl	e924 <dtostrf>
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    db5c:	b138      	cbz	r0, db6e <String::String(float, unsigned char)+0x2a>
    db5e:	4606      	mov	r6, r0
		copy(cstr, strlen(cstr));
    db60:	f005 fa0e 	bl	12f80 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    db64:	4605      	mov	r5, r0
    db66:	b938      	cbnz	r0, db78 <String::String(float, unsigned char)+0x34>
		if (buffer) buffer[0] = 0;
    db68:	6823      	ldr	r3, [r4, #0]
    db6a:	b103      	cbz	r3, db6e <String::String(float, unsigned char)+0x2a>
    db6c:	7018      	strb	r0, [r3, #0]
		len = 0;
    db6e:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
{
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}
    db70:	4620      	mov	r0, r4

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
    db72:	60a3      	str	r3, [r4, #8]
String::String(float num, unsigned char digits)
{
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}
    db74:	b00b      	add	sp, #44	; 0x2c
    db76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    db78:	6863      	ldr	r3, [r4, #4]
    db7a:	4298      	cmp	r0, r3
    db7c:	d807      	bhi.n	db8e <String::String(float, unsigned char)+0x4a>
    db7e:	6820      	ldr	r0, [r4, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    db80:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    db82:	4631      	mov	r1, r6
    db84:	f005 f99a 	bl	12ebc <strcpy>
String::String(float num, unsigned char digits)
{
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}
    db88:	4620      	mov	r0, r4
    db8a:	b00b      	add	sp, #44	; 0x2c
    db8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    db8e:	1c41      	adds	r1, r0, #1
    db90:	6820      	ldr	r0, [r4, #0]
    db92:	f004 fd85 	bl	126a0 <realloc>
	if (newbuffer) {
    db96:	4607      	mov	r7, r0
    db98:	b138      	cbz	r0, dbaa <String::String(float, unsigned char)+0x66>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    db9a:	68a3      	ldr	r3, [r4, #8]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    db9c:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    db9e:	6065      	str	r5, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dba0:	2b00      	cmp	r3, #0
    dba2:	d1ed      	bne.n	db80 <String::String(float, unsigned char)+0x3c>
    dba4:	7003      	strb	r3, [r0, #0]
    dba6:	6820      	ldr	r0, [r4, #0]
    dba8:	e7ea      	b.n	db80 <String::String(float, unsigned char)+0x3c>
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    dbaa:	6820      	ldr	r0, [r4, #0]
    dbac:	b110      	cbz	r0, dbb4 <String::String(float, unsigned char)+0x70>
			free(buffer);
    dbae:	f004 f965 	bl	11e7c <free>
			buffer = NULL;
    dbb2:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    dbb4:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
{
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}
    dbb6:	4620      	mov	r0, r4
	if (!reserve(length)) {
		if (buffer) {
			free(buffer);
			buffer = NULL;
		}
		len = capacity = 0;
    dbb8:	6063      	str	r3, [r4, #4]
    dbba:	60a3      	str	r3, [r4, #8]
String::String(float num, unsigned char digits)
{
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}
    dbbc:	b00b      	add	sp, #44	; 0x2c
    dbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dbc0 <String::~String()>:

String::~String()
    dbc0:	b510      	push	{r4, lr}
    dbc2:	4604      	mov	r4, r0
{
	free(buffer);
    dbc4:	6800      	ldr	r0, [r0, #0]
    dbc6:	f004 f959 	bl	11e7c <free>
}
    dbca:	4620      	mov	r0, r4
    dbcc:	bd10      	pop	{r4, pc}
    dbce:	bf00      	nop

0000dbd0 <String::operator=(String const&)>:
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
    dbd0:	4288      	cmp	r0, r1
	rhs.capacity = 0;
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
    dbd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbd4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
    dbd6:	d006      	beq.n	dbe6 <String::operator=(String const&)+0x16>
	return copy(rhs.buffer, rhs.len);
    dbd8:	688d      	ldr	r5, [r1, #8]
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    dbda:	b935      	cbnz	r5, dbea <String::operator=(String const&)+0x1a>
		if (buffer) buffer[0] = 0;
    dbdc:	6803      	ldr	r3, [r0, #0]
    dbde:	b103      	cbz	r3, dbe2 <String::operator=(String const&)+0x12>
    dbe0:	701d      	strb	r5, [r3, #0]
		len = 0;
    dbe2:	2300      	movs	r3, #0
    dbe4:	60a3      	str	r3, [r4, #8]

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
	return copy(rhs.buffer, rhs.len);
}
    dbe6:	4620      	mov	r0, r4
    dbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dbea:	6843      	ldr	r3, [r0, #4]
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
	return copy(rhs.buffer, rhs.len);
    dbec:	680f      	ldr	r7, [r1, #0]
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dbee:	429d      	cmp	r5, r3
    dbf0:	d806      	bhi.n	dc00 <String::operator=(String const&)+0x30>
    dbf2:	6800      	ldr	r0, [r0, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    dbf4:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    dbf6:	4639      	mov	r1, r7
    dbf8:	f005 f960 	bl	12ebc <strcpy>

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
	return copy(rhs.buffer, rhs.len);
}
    dbfc:	4620      	mov	r0, r4
    dbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    dc00:	1c69      	adds	r1, r5, #1
    dc02:	6800      	ldr	r0, [r0, #0]
    dc04:	f004 fd4c 	bl	126a0 <realloc>
	if (newbuffer) {
    dc08:	4606      	mov	r6, r0
    dc0a:	b138      	cbz	r0, dc1c <String::operator=(String const&)+0x4c>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dc0c:	68a3      	ldr	r3, [r4, #8]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    dc0e:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    dc10:	6065      	str	r5, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dc12:	2b00      	cmp	r3, #0
    dc14:	d1ee      	bne.n	dbf4 <String::operator=(String const&)+0x24>
    dc16:	7003      	strb	r3, [r0, #0]
    dc18:	6820      	ldr	r0, [r4, #0]
    dc1a:	e7eb      	b.n	dbf4 <String::operator=(String const&)+0x24>
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    dc1c:	6820      	ldr	r0, [r4, #0]
    dc1e:	b110      	cbz	r0, dc26 <String::operator=(String const&)+0x56>
			free(buffer);
    dc20:	f004 f92c 	bl	11e7c <free>
			buffer = NULL;
    dc24:	6026      	str	r6, [r4, #0]
		}
		len = capacity = 0;
    dc26:	2300      	movs	r3, #0
    dc28:	6063      	str	r3, [r4, #4]
    dc2a:	60a3      	str	r3, [r4, #8]

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
	return copy(rhs.buffer, rhs.len);
}
    dc2c:	4620      	mov	r0, r4
    dc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dc30 <String::operator=(String&&)>:

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
    dc30:	4288      	cmp	r0, r1
	return copy(rhs.buffer, rhs.len);
}

#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
    dc32:	b538      	push	{r3, r4, r5, lr}
    dc34:	4605      	mov	r5, r0
	if (this != &rval) move(rval);
    dc36:	d012      	beq.n	dc5e <String::operator=(String&&)+0x2e>
	return *this;
}

void String::move(String &rhs)
{
	if (buffer) {
    dc38:	6800      	ldr	r0, [r0, #0]
    dc3a:	460c      	mov	r4, r1
    dc3c:	b128      	cbz	r0, dc4a <String::operator=(String&&)+0x1a>
		if (capacity >= rhs.len) {
    dc3e:	686a      	ldr	r2, [r5, #4]
    dc40:	688b      	ldr	r3, [r1, #8]
    dc42:	429a      	cmp	r2, r3
    dc44:	d20d      	bcs.n	dc62 <String::operator=(String&&)+0x32>
			strcpy(buffer, rhs.buffer);
			len = rhs.len;
			rhs.len = 0;
			return;
		} else {
			free(buffer);
    dc46:	f004 f919 	bl	11e7c <free>
		}
	}
	buffer = rhs.buffer;
    dc4a:	6823      	ldr	r3, [r4, #0]
	capacity = rhs.capacity;
    dc4c:	6861      	ldr	r1, [r4, #4]
	len = rhs.len;
    dc4e:	68a2      	ldr	r2, [r4, #8]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    dc50:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
    dc52:	2300      	movs	r3, #0
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
	capacity = rhs.capacity;
    dc54:	6069      	str	r1, [r5, #4]
	len = rhs.len;
    dc56:	60aa      	str	r2, [r5, #8]
	rhs.buffer = NULL;
    dc58:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
    dc5a:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
    dc5c:	60a3      	str	r3, [r4, #8]
#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
	return *this;
}
    dc5e:	4628      	mov	r0, r5
    dc60:	bd38      	pop	{r3, r4, r5, pc}

void String::move(String &rhs)
{
	if (buffer) {
		if (capacity >= rhs.len) {
			strcpy(buffer, rhs.buffer);
    dc62:	6809      	ldr	r1, [r1, #0]
    dc64:	f005 f92a 	bl	12ebc <strcpy>
			len = rhs.len;
    dc68:	68a3      	ldr	r3, [r4, #8]
    dc6a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
    dc6c:	2300      	movs	r3, #0
    dc6e:	60a3      	str	r3, [r4, #8]
#if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
	return *this;
}
    dc70:	4628      	mov	r0, r5
    dc72:	bd38      	pop	{r3, r4, r5, pc}

0000dc74 <String::operator=(char const*)>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc76:	4604      	mov	r4, r0
	if (cstr) {
    dc78:	b141      	cbz	r1, dc8c <String::operator=(char const*)+0x18>
		copy(cstr, strlen(cstr));
    dc7a:	4608      	mov	r0, r1
    dc7c:	460d      	mov	r5, r1
    dc7e:	f005 f97f 	bl	12f80 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    dc82:	4606      	mov	r6, r0
    dc84:	b930      	cbnz	r0, dc94 <String::operator=(char const*)+0x20>
		if (buffer) buffer[0] = 0;
    dc86:	6823      	ldr	r3, [r4, #0]
    dc88:	b103      	cbz	r3, dc8c <String::operator=(char const*)+0x18>
    dc8a:	7018      	strb	r0, [r3, #0]
		len = 0;
    dc8c:	2300      	movs	r3, #0
    dc8e:	60a3      	str	r3, [r4, #8]
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    dc90:	4620      	mov	r0, r4
    dc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dc94:	6863      	ldr	r3, [r4, #4]
    dc96:	4298      	cmp	r0, r3
    dc98:	d806      	bhi.n	dca8 <String::operator=(char const*)+0x34>
    dc9a:	6820      	ldr	r0, [r4, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    dc9c:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
    dc9e:	4629      	mov	r1, r5
    dca0:	f005 f90c 	bl	12ebc <strcpy>
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    dca4:	4620      	mov	r0, r4
    dca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    dca8:	1c41      	adds	r1, r0, #1
    dcaa:	6820      	ldr	r0, [r4, #0]
    dcac:	f004 fcf8 	bl	126a0 <realloc>
	if (newbuffer) {
    dcb0:	4607      	mov	r7, r0
    dcb2:	b138      	cbz	r0, dcc4 <String::operator=(char const*)+0x50>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dcb4:	68a3      	ldr	r3, [r4, #8]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    dcb6:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    dcb8:	6066      	str	r6, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dcba:	2b00      	cmp	r3, #0
    dcbc:	d1ee      	bne.n	dc9c <String::operator=(char const*)+0x28>
    dcbe:	7003      	strb	r3, [r0, #0]
    dcc0:	6820      	ldr	r0, [r4, #0]
    dcc2:	e7eb      	b.n	dc9c <String::operator=(char const*)+0x28>
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    dcc4:	6820      	ldr	r0, [r4, #0]
    dcc6:	b110      	cbz	r0, dcce <String::operator=(char const*)+0x5a>
			free(buffer);
    dcc8:	f004 f8d8 	bl	11e7c <free>
			buffer = NULL;
    dccc:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    dcce:	2300      	movs	r3, #0
    dcd0:	6063      	str	r3, [r4, #4]
    dcd2:	60a3      	str	r3, [r4, #8]
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
	}
	return *this;
}
    dcd4:	4620      	mov	r0, r4
    dcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dcd8 <String::append(String const&)>:
/*********************************************/
/*  Append                                   */
/*********************************************/

String & String::append(const String &s)
{
    dcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dcdc:	4604      	mov	r4, r0
	return append(s.buffer, s.len);
    dcde:	680d      	ldr	r5, [r1, #0]
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    dce0:	6800      	ldr	r0, [r0, #0]
/*  Append                                   */
/*********************************************/

String & String::append(const String &s)
{
	return append(s.buffer, s.len);
    dce2:	688e      	ldr	r6, [r1, #8]
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    dce4:	68a3      	ldr	r3, [r4, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    dce6:	4285      	cmp	r5, r0
    dce8:	d30a      	bcc.n	dd00 <String::append(String const&)+0x28>
    dcea:	18c2      	adds	r2, r0, r3
    dcec:	4295      	cmp	r5, r2
    dcee:	d207      	bcs.n	dd00 <String::append(String const&)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    dcf0:	ebc0 0805 	rsb	r8, r0, r5
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    dcf4:	f04f 0901 	mov.w	r9, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    dcf8:	b936      	cbnz	r6, dd08 <String::append(String const&)+0x30>
/*********************************************/

String & String::append(const String &s)
{
	return append(s.buffer, s.len);
}
    dcfa:	4620      	mov	r0, r4
    dcfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    dd00:	f04f 0900 	mov.w	r9, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    dd04:	2e00      	cmp	r6, #0
    dd06:	d0f8      	beq.n	dcfa <String::append(String const&)+0x22>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dd08:	6862      	ldr	r2, [r4, #4]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    dd0a:	18f7      	adds	r7, r6, r3
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dd0c:	42ba      	cmp	r2, r7
    dd0e:	d314      	bcc.n	dd3a <String::append(String const&)+0x62>
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
    dd10:	f1b9 0f00 	cmp.w	r9, #0
    dd14:	d00c      	beq.n	dd30 <String::append(String const&)+0x58>
		memcpy(buffer + len, buffer+buffer_offset, length);
    dd16:	4632      	mov	r2, r6
    dd18:	eb00 0108 	add.w	r1, r0, r8
    dd1c:	4418      	add	r0, r3
    dd1e:	f000 fcad 	bl	e67c <memcpy>
		buffer[newlen] = 0;
    dd22:	6823      	ldr	r3, [r4, #0]
    dd24:	2200      	movs	r2, #0
    dd26:	55da      	strb	r2, [r3, r7]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    dd28:	60a7      	str	r7, [r4, #8]
/*********************************************/

String & String::append(const String &s)
{
	return append(s.buffer, s.len);
}
    dd2a:	4620      	mov	r0, r4
    dd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    dd30:	4629      	mov	r1, r5
    dd32:	4418      	add	r0, r3
    dd34:	f005 f8c2 	bl	12ebc <strcpy>
    dd38:	e7f6      	b.n	dd28 <String::append(String const&)+0x50>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    dd3a:	1c79      	adds	r1, r7, #1
    dd3c:	f004 fcb0 	bl	126a0 <realloc>
	if (newbuffer) {
    dd40:	2800      	cmp	r0, #0
    dd42:	d0da      	beq.n	dcfa <String::append(String const&)+0x22>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dd44:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    dd46:	e884 0081 	stmia.w	r4, {r0, r7}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dd4a:	2b00      	cmp	r3, #0
    dd4c:	d1e0      	bne.n	dd10 <String::append(String const&)+0x38>
    dd4e:	7003      	strb	r3, [r0, #0]
    dd50:	6820      	ldr	r0, [r4, #0]
    dd52:	68a3      	ldr	r3, [r4, #8]
    dd54:	e7dc      	b.n	dd10 <String::append(String const&)+0x38>
    dd56:	bf00      	nop

0000dd58 <String::append(char const*)>:
	len = newlen;
	return *this;
}

String & String::append(const char *cstr)
{
    dd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd5c:	4604      	mov	r4, r0
	if (cstr) append(cstr, strlen(cstr));
    dd5e:	b181      	cbz	r1, dd82 <String::append(char const*)+0x2a>
    dd60:	4608      	mov	r0, r1
    dd62:	460d      	mov	r5, r1
    dd64:	f005 f90c 	bl	12f80 <strlen>
    dd68:	4606      	mov	r6, r0
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    dd6a:	6820      	ldr	r0, [r4, #0]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    dd6c:	68a3      	ldr	r3, [r4, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    dd6e:	4285      	cmp	r5, r0
    dd70:	d30a      	bcc.n	dd88 <String::append(char const*)+0x30>
    dd72:	18c2      	adds	r2, r0, r3
    dd74:	4295      	cmp	r5, r2
    dd76:	d207      	bcs.n	dd88 <String::append(char const*)+0x30>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    dd78:	ebc0 0805 	rsb	r8, r0, r5
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    dd7c:	f04f 0901 	mov.w	r9, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    dd80:	b936      	cbnz	r6, dd90 <String::append(char const*)+0x38>

String & String::append(const char *cstr)
{
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}
    dd82:	4620      	mov	r0, r4
    dd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    dd88:	f04f 0900 	mov.w	r9, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    dd8c:	2e00      	cmp	r6, #0
    dd8e:	d0f8      	beq.n	dd82 <String::append(char const*)+0x2a>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dd90:	6862      	ldr	r2, [r4, #4]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    dd92:	18f7      	adds	r7, r6, r3
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dd94:	42ba      	cmp	r2, r7
    dd96:	d314      	bcc.n	ddc2 <String::append(char const*)+0x6a>
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
    dd98:	f1b9 0f00 	cmp.w	r9, #0
    dd9c:	d00c      	beq.n	ddb8 <String::append(char const*)+0x60>
		memcpy(buffer + len, buffer+buffer_offset, length);
    dd9e:	4632      	mov	r2, r6
    dda0:	eb00 0108 	add.w	r1, r0, r8
    dda4:	4418      	add	r0, r3
    dda6:	f000 fc69 	bl	e67c <memcpy>
		buffer[newlen] = 0;
    ddaa:	6823      	ldr	r3, [r4, #0]
    ddac:	2200      	movs	r2, #0
    ddae:	55da      	strb	r2, [r3, r7]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    ddb0:	60a7      	str	r7, [r4, #8]

String & String::append(const char *cstr)
{
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}
    ddb2:	4620      	mov	r0, r4
    ddb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    ddb8:	4629      	mov	r1, r5
    ddba:	4418      	add	r0, r3
    ddbc:	f005 f87e 	bl	12ebc <strcpy>
    ddc0:	e7f6      	b.n	ddb0 <String::append(char const*)+0x58>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    ddc2:	1c79      	adds	r1, r7, #1
    ddc4:	f004 fc6c 	bl	126a0 <realloc>
	if (newbuffer) {
    ddc8:	2800      	cmp	r0, #0
    ddca:	d0da      	beq.n	dd82 <String::append(char const*)+0x2a>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    ddcc:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    ddce:	e884 0081 	stmia.w	r4, {r0, r7}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d1e0      	bne.n	dd98 <String::append(char const*)+0x40>
    ddd6:	7003      	strb	r3, [r0, #0]
    ddd8:	6820      	ldr	r0, [r4, #0]
    ddda:	68a3      	ldr	r3, [r4, #8]
    dddc:	e7dc      	b.n	dd98 <String::append(char const*)+0x40>
    ddde:	bf00      	nop

0000dde0 <String::append(char)>:
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    dde4:	6883      	ldr	r3, [r0, #8]
	if (cstr) append(cstr, strlen(cstr));
	return *this;
}

String & String::append(char c)
{
    dde6:	b082      	sub	sp, #8
    dde8:	4604      	mov	r4, r0
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    ddea:	6800      	ldr	r0, [r0, #0]
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    ddec:	f88d 1004 	strb.w	r1, [sp, #4]
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    ddf0:	ae01      	add	r6, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    ddf2:	2200      	movs	r2, #0
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    ddf4:	42b0      	cmp	r0, r6
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    ddf6:	f103 0501 	add.w	r5, r3, #1

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    ddfa:	f88d 2005 	strb.w	r2, [sp, #5]
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    ddfe:	d80d      	bhi.n	de1c <String::append(char)+0x3c>
    de00:	18c2      	adds	r2, r0, r3
    de02:	42b2      	cmp	r2, r6
    de04:	d90a      	bls.n	de1c <String::append(char)+0x3c>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    de06:	6861      	ldr	r1, [r4, #4]
    de08:	428d      	cmp	r5, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    de0a:	eba6 0700 	sub.w	r7, r6, r0
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    de0e:	d829      	bhi.n	de64 <String::append(char)+0x84>
    de10:	5dc3      	ldrb	r3, [r0, r7]
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
    de12:	7013      	strb	r3, [r2, #0]
		buffer[newlen] = 0;
    de14:	6823      	ldr	r3, [r4, #0]
    de16:	2200      	movs	r2, #0
    de18:	555a      	strb	r2, [r3, r5]
    de1a:	e006      	b.n	de2a <String::append(char)+0x4a>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    de1c:	6862      	ldr	r2, [r4, #4]
    de1e:	4295      	cmp	r5, r2
    de20:	d808      	bhi.n	de34 <String::append(char)+0x54>
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    de22:	4631      	mov	r1, r6
    de24:	4418      	add	r0, r3
    de26:	f005 f849 	bl	12ebc <strcpy>
	len = newlen;
    de2a:	60a5      	str	r5, [r4, #8]
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	append(buf, 1);
	return *this;
}
    de2c:	4620      	mov	r0, r4
    de2e:	b002      	add	sp, #8
    de30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    de34:	f04f 0800 	mov.w	r8, #0
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    de38:	1c99      	adds	r1, r3, #2
    de3a:	f004 fc31 	bl	126a0 <realloc>
	if (newbuffer) {
    de3e:	2800      	cmp	r0, #0
    de40:	d0f4      	beq.n	de2c <String::append(char)+0x4c>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    de42:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    de44:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    de48:	b913      	cbnz	r3, de50 <String::append(char)+0x70>
    de4a:	7003      	strb	r3, [r0, #0]
    de4c:	6820      	ldr	r0, [r4, #0]
    de4e:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
    de50:	f1b8 0f00 	cmp.w	r8, #0
    de54:	d0e5      	beq.n	de22 <String::append(char)+0x42>
    de56:	18c2      	adds	r2, r0, r3
    de58:	5dc3      	ldrb	r3, [r0, r7]
		memcpy(buffer + len, buffer+buffer_offset, length);
    de5a:	7013      	strb	r3, [r2, #0]
		buffer[newlen] = 0;
    de5c:	6823      	ldr	r3, [r4, #0]
    de5e:	2200      	movs	r2, #0
    de60:	555a      	strb	r2, [r3, r5]
    de62:	e7e2      	b.n	de2a <String::append(char)+0x4a>
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    de64:	f04f 0801 	mov.w	r8, #1
    de68:	e7e6      	b.n	de38 <String::append(char)+0x58>
    de6a:	bf00      	nop

0000de6c <String::append(unsigned int)>:
	append(buf, strlen(buf));
	return *this;
}

String & String::append(unsigned int num)
{
    de6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    de70:	b085      	sub	sp, #20
    de72:	460b      	mov	r3, r1
	char buf[11];
	ultoa((unsigned long)num, buf, 10);
    de74:	ad01      	add	r5, sp, #4
	append(buf, strlen(buf));
	return *this;
}

String & String::append(unsigned int num)
{
    de76:	4604      	mov	r4, r0
	char buf[11];
	ultoa((unsigned long)num, buf, 10);
    de78:	4629      	mov	r1, r5
    de7a:	4618      	mov	r0, r3
    de7c:	220a      	movs	r2, #10
    de7e:	f000 fd2b 	bl	e8d8 <ultoa>
	append(buf, strlen(buf));
    de82:	4628      	mov	r0, r5
    de84:	f005 f87c 	bl	12f80 <strlen>
    de88:	4606      	mov	r6, r0
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    de8a:	6820      	ldr	r0, [r4, #0]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    de8c:	68a3      	ldr	r3, [r4, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    de8e:	42a8      	cmp	r0, r5
    de90:	d80a      	bhi.n	dea8 <String::append(unsigned int)+0x3c>
    de92:	18c2      	adds	r2, r0, r3
    de94:	4295      	cmp	r5, r2
    de96:	d207      	bcs.n	dea8 <String::append(unsigned int)+0x3c>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    de98:	1a2f      	subs	r7, r5, r0
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    de9a:	f04f 0901 	mov.w	r9, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    de9e:	b93e      	cbnz	r6, deb0 <String::append(unsigned int)+0x44>
{
	char buf[11];
	ultoa((unsigned long)num, buf, 10);
	append(buf, strlen(buf));
	return *this;
}
    dea0:	4620      	mov	r0, r4
    dea2:	b005      	add	sp, #20
    dea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    dea8:	f04f 0900 	mov.w	r9, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    deac:	2e00      	cmp	r6, #0
    deae:	d0f7      	beq.n	dea0 <String::append(unsigned int)+0x34>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    deb0:	6862      	ldr	r2, [r4, #4]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    deb2:	eb06 0803 	add.w	r8, r6, r3
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    deb6:	4542      	cmp	r2, r8
    deb8:	d316      	bcc.n	dee8 <String::append(unsigned int)+0x7c>
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
    deba:	f1b9 0f00 	cmp.w	r9, #0
    debe:	d00e      	beq.n	dede <String::append(unsigned int)+0x72>
		memcpy(buffer + len, buffer+buffer_offset, length);
    dec0:	4632      	mov	r2, r6
    dec2:	19c1      	adds	r1, r0, r7
    dec4:	4418      	add	r0, r3
    dec6:	f000 fbd9 	bl	e67c <memcpy>
		buffer[newlen] = 0;
    deca:	6823      	ldr	r3, [r4, #0]
    decc:	2200      	movs	r2, #0
    dece:	f803 2008 	strb.w	r2, [r3, r8]
{
	char buf[11];
	ultoa((unsigned long)num, buf, 10);
	append(buf, strlen(buf));
	return *this;
}
    ded2:	4620      	mov	r0, r4
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    ded4:	f8c4 8008 	str.w	r8, [r4, #8]
{
	char buf[11];
	ultoa((unsigned long)num, buf, 10);
	append(buf, strlen(buf));
	return *this;
}
    ded8:	b005      	add	sp, #20
    deda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    dede:	4629      	mov	r1, r5
    dee0:	4418      	add	r0, r3
    dee2:	f004 ffeb 	bl	12ebc <strcpy>
    dee6:	e7f4      	b.n	ded2 <String::append(unsigned int)+0x66>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    dee8:	f108 0101 	add.w	r1, r8, #1
    deec:	f004 fbd8 	bl	126a0 <realloc>
	if (newbuffer) {
    def0:	2800      	cmp	r0, #0
    def2:	d0d5      	beq.n	dea0 <String::append(unsigned int)+0x34>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    def4:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    def6:	e884 0101 	stmia.w	r4, {r0, r8}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    defa:	2b00      	cmp	r3, #0
    defc:	d1dd      	bne.n	deba <String::append(unsigned int)+0x4e>
    defe:	7003      	strb	r3, [r0, #0]
    df00:	6820      	ldr	r0, [r4, #0]
    df02:	68a3      	ldr	r3, [r4, #8]
    df04:	e7d9      	b.n	deba <String::append(unsigned int)+0x4e>
    df06:	bf00      	nop

0000df08 <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    df08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df0c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    df0e:	680d      	ldr	r5, [r1, #0]
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    df10:	6800      	ldr	r0, [r0, #0]


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
    df12:	688e      	ldr	r6, [r1, #8]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    df14:	68a3      	ldr	r3, [r4, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    df16:	4285      	cmp	r5, r0
    df18:	d30a      	bcc.n	df30 <operator+(StringSumHelper const&, String const&)+0x28>
    df1a:	18c2      	adds	r2, r0, r3
    df1c:	4295      	cmp	r5, r2
    df1e:	d207      	bcs.n	df30 <operator+(StringSumHelper const&, String const&)+0x28>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    df20:	ebc0 0805 	rsb	r8, r0, r5
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    df24:	f04f 0901 	mov.w	r9, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    df28:	b936      	cbnz	r6, df38 <operator+(StringSumHelper const&, String const&)+0x30>
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
	return a;
}
    df2a:	4620      	mov	r0, r4
    df2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    df30:	f04f 0900 	mov.w	r9, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    df34:	2e00      	cmp	r6, #0
    df36:	d0f8      	beq.n	df2a <operator+(StringSumHelper const&, String const&)+0x22>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    df38:	6862      	ldr	r2, [r4, #4]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    df3a:	18f7      	adds	r7, r6, r3
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    df3c:	42ba      	cmp	r2, r7
    df3e:	d314      	bcc.n	df6a <operator+(StringSumHelper const&, String const&)+0x62>
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
    df40:	f1b9 0f00 	cmp.w	r9, #0
    df44:	d00c      	beq.n	df60 <operator+(StringSumHelper const&, String const&)+0x58>
		memcpy(buffer + len, buffer+buffer_offset, length);
    df46:	4632      	mov	r2, r6
    df48:	eb00 0108 	add.w	r1, r0, r8
    df4c:	4418      	add	r0, r3
    df4e:	f000 fb95 	bl	e67c <memcpy>
		buffer[newlen] = 0;
    df52:	6823      	ldr	r3, [r4, #0]
    df54:	2200      	movs	r2, #0
    df56:	55da      	strb	r2, [r3, r7]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    df58:	60a7      	str	r7, [r4, #8]
StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
	return a;
}
    df5a:	4620      	mov	r0, r4
    df5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    df60:	4629      	mov	r1, r5
    df62:	4418      	add	r0, r3
    df64:	f004 ffaa 	bl	12ebc <strcpy>
    df68:	e7f6      	b.n	df58 <operator+(StringSumHelper const&, String const&)+0x50>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    df6a:	1c79      	adds	r1, r7, #1
    df6c:	f004 fb98 	bl	126a0 <realloc>
	if (newbuffer) {
    df70:	2800      	cmp	r0, #0
    df72:	d0da      	beq.n	df2a <operator+(StringSumHelper const&, String const&)+0x22>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    df74:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    df76:	e884 0081 	stmia.w	r4, {r0, r7}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    df7a:	2b00      	cmp	r3, #0
    df7c:	d1e0      	bne.n	df40 <operator+(StringSumHelper const&, String const&)+0x38>
    df7e:	7003      	strb	r3, [r0, #0]
    df80:	6820      	ldr	r0, [r4, #0]
    df82:	68a3      	ldr	r3, [r4, #8]
    df84:	e7dc      	b.n	df40 <operator+(StringSumHelper const&, String const&)+0x38>
    df86:	bf00      	nop

0000df88 <operator+(StringSumHelper const&, char const*)>:
	a.append(rhs.buffer, rhs.len);
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    df88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df8c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
    df8e:	b181      	cbz	r1, dfb2 <operator+(StringSumHelper const&, char const*)+0x2a>
    df90:	4608      	mov	r0, r1
    df92:	460d      	mov	r5, r1
    df94:	f004 fff4 	bl	12f80 <strlen>
    df98:	4606      	mov	r6, r0
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    df9a:	6820      	ldr	r0, [r4, #0]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    df9c:	68a3      	ldr	r3, [r4, #8]
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    df9e:	4285      	cmp	r5, r0
    dfa0:	d30a      	bcc.n	dfb8 <operator+(StringSumHelper const&, char const*)+0x30>
    dfa2:	18c2      	adds	r2, r0, r3
    dfa4:	4295      	cmp	r5, r2
    dfa6:	d207      	bcs.n	dfb8 <operator+(StringSumHelper const&, char const*)+0x30>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    dfa8:	ebc0 0805 	rsb	r8, r0, r5
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    dfac:	f04f 0901 	mov.w	r9, #1
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    dfb0:	b936      	cbnz	r6, dfc0 <operator+(StringSumHelper const&, char const*)+0x38>
StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
	return a;
}
    dfb2:	4620      	mov	r0, r4
    dfb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
    dfb8:	f04f 0900 	mov.w	r9, #0
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
    dfbc:	2e00      	cmp	r6, #0
    dfbe:	d0f8      	beq.n	dfb2 <operator+(StringSumHelper const&, char const*)+0x2a>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dfc0:	6862      	ldr	r2, [r4, #4]
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    dfc2:	18f7      	adds	r7, r6, r3
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    dfc4:	42ba      	cmp	r2, r7
    dfc6:	d314      	bcc.n	dff2 <operator+(StringSumHelper const&, char const*)+0x6a>
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
    dfc8:	f1b9 0f00 	cmp.w	r9, #0
    dfcc:	d00c      	beq.n	dfe8 <operator+(StringSumHelper const&, char const*)+0x60>
		memcpy(buffer + len, buffer+buffer_offset, length);
    dfce:	4632      	mov	r2, r6
    dfd0:	eb00 0108 	add.w	r1, r0, r8
    dfd4:	4418      	add	r0, r3
    dfd6:	f000 fb51 	bl	e67c <memcpy>
		buffer[newlen] = 0;
    dfda:	6823      	ldr	r3, [r4, #0]
    dfdc:	2200      	movs	r2, #0
    dfde:	55da      	strb	r2, [r3, r7]
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
    dfe0:	60a7      	str	r7, [r4, #8]
StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
	return a;
}
    dfe2:	4620      	mov	r0, r4
    dfe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    dfe8:	4629      	mov	r1, r5
    dfea:	4418      	add	r0, r3
    dfec:	f004 ff66 	bl	12ebc <strcpy>
    dff0:	e7f6      	b.n	dfe0 <operator+(StringSumHelper const&, char const*)+0x58>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    dff2:	1c79      	adds	r1, r7, #1
    dff4:	f004 fb54 	bl	126a0 <realloc>
	if (newbuffer) {
    dff8:	2800      	cmp	r0, #0
    dffa:	d0da      	beq.n	dfb2 <operator+(StringSumHelper const&, char const*)+0x2a>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    dffc:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    dffe:	e884 0081 	stmia.w	r4, {r0, r7}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    e002:	2b00      	cmp	r3, #0
    e004:	d1e0      	bne.n	dfc8 <operator+(StringSumHelper const&, char const*)+0x40>
    e006:	7003      	strb	r3, [r0, #0]
    e008:	6820      	ldr	r0, [r4, #0]
    e00a:	68a3      	ldr	r3, [r4, #8]
    e00c:	e7dc      	b.n	dfc8 <operator+(StringSumHelper const&, char const*)+0x40>
    e00e:	bf00      	nop

0000e010 <operator+(StringSumHelper const&, char)>:
	a.append(pgmstr);
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    e010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    e014:	6883      	ldr	r3, [r0, #8]
	a.append(pgmstr);
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    e016:	b082      	sub	sp, #8
    e018:	4604      	mov	r4, r0
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    e01a:	6800      	ldr	r0, [r0, #0]
}

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
    e01c:	f88d 1004 	strb.w	r1, [sp, #4]
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    e020:	ae01      	add	r6, sp, #4

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    e022:	2200      	movs	r2, #0
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    e024:	42b0      	cmp	r0, r6
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    e026:	f103 0501 	add.w	r5, r3, #1

String & String::append(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    e02a:	f88d 2005 	strb.w	r2, [sp, #5]
String & String::append(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
    e02e:	d80d      	bhi.n	e04c <operator+(StringSumHelper const&, char)+0x3c>
    e030:	18c2      	adds	r2, r0, r3
    e032:	42b2      	cmp	r2, r6
    e034:	d90a      	bls.n	e04c <operator+(StringSumHelper const&, char)+0x3c>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    e036:	6861      	ldr	r1, [r4, #4]
    e038:	428d      	cmp	r5, r1
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
    e03a:	eba6 0700 	sub.w	r7, r6, r0
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    e03e:	d829      	bhi.n	e094 <operator+(StringSumHelper const&, char)+0x84>
    e040:	5dc3      	ldrb	r3, [r0, r7]
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
    e042:	7013      	strb	r3, [r2, #0]
		buffer[newlen] = 0;
    e044:	6823      	ldr	r3, [r4, #0]
    e046:	2200      	movs	r2, #0
    e048:	555a      	strb	r2, [r3, r5]
    e04a:	e006      	b.n	e05a <operator+(StringSumHelper const&, char)+0x4a>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    e04c:	6862      	ldr	r2, [r4, #4]
    e04e:	4295      	cmp	r5, r2
    e050:	d808      	bhi.n	e064 <operator+(StringSumHelper const&, char)+0x54>
	if ( self ) {
		memcpy(buffer + len, buffer+buffer_offset, length);
		buffer[newlen] = 0;
		}
	else
		strcpy(buffer + len, cstr);
    e052:	4631      	mov	r1, r6
    e054:	4418      	add	r0, r3
    e056:	f004 ff31 	bl	12ebc <strcpy>
	len = newlen;
    e05a:	60a5      	str	r5, [r4, #8]
StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(c);
	return a;
}
    e05c:	4620      	mov	r0, r4
    e05e:	b002      	add	sp, #8
    e060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    e064:	f04f 0800 	mov.w	r8, #0
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    e068:	1c99      	adds	r1, r3, #2
    e06a:	f004 fb19 	bl	126a0 <realloc>
	if (newbuffer) {
    e06e:	2800      	cmp	r0, #0
    e070:	d0f4      	beq.n	e05c <operator+(StringSumHelper const&, char)+0x4c>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    e072:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    e074:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    e078:	b913      	cbnz	r3, e080 <operator+(StringSumHelper const&, char)+0x70>
    e07a:	7003      	strb	r3, [r0, #0]
    e07c:	6820      	ldr	r0, [r4, #0]
    e07e:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
	}
	if (length == 0 || !reserve(newlen)) return *this;
	if ( self ) {
    e080:	f1b8 0f00 	cmp.w	r8, #0
    e084:	d0e5      	beq.n	e052 <operator+(StringSumHelper const&, char)+0x42>
    e086:	18c2      	adds	r2, r0, r3
    e088:	5dc3      	ldrb	r3, [r0, r7]
		memcpy(buffer + len, buffer+buffer_offset, length);
    e08a:	7013      	strb	r3, [r2, #0]
		buffer[newlen] = 0;
    e08c:	6823      	ldr	r3, [r4, #0]
    e08e:	2200      	movs	r2, #0
    e090:	555a      	strb	r2, [r3, r5]
    e092:	e7e2      	b.n	e05a <operator+(StringSumHelper const&, char)+0x4a>
{
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
		self = true;
    e094:	f04f 0801 	mov.w	r8, #1
    e098:	e7e6      	b.n	e068 <operator+(StringSumHelper const&, char)+0x58>
    e09a:	bf00      	nop

0000e09c <String::equals(String const&) const>:
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
    e09c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
    e09e:	688a      	ldr	r2, [r1, #8]
    e0a0:	6883      	ldr	r3, [r0, #8]
    e0a2:	4293      	cmp	r3, r2
    e0a4:	d001      	beq.n	e0aa <String::equals(String const&) const+0xe>
    e0a6:	2000      	movs	r0, #0
    e0a8:	bd08      	pop	{r3, pc}
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
    e0aa:	6800      	ldr	r0, [r0, #0]
    e0ac:	b138      	cbz	r0, e0be <String::equals(String const&) const+0x22>
    e0ae:	6809      	ldr	r1, [r1, #0]
    e0b0:	b151      	cbz	r1, e0c8 <String::equals(String const&) const+0x2c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
	}
	return strcmp(buffer, s.buffer);
    e0b2:	f004 fd99 	bl	12be8 <strcmp>
    e0b6:	fab0 f080 	clz	r0, r0
    e0ba:	0940      	lsrs	r0, r0, #5
    e0bc:	bd08      	pop	{r3, pc}
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    e0be:	680a      	ldr	r2, [r1, #0]
    e0c0:	b102      	cbz	r2, e0c4 <String::equals(String const&) const+0x28>
    e0c2:	b92b      	cbnz	r3, e0d0 <String::equals(String const&) const+0x34>
    e0c4:	2001      	movs	r0, #1
}

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}
    e0c6:	bd08      	pop	{r3, pc}

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d0fb      	beq.n	e0c4 <String::equals(String const&) const+0x28>
    e0cc:	7800      	ldrb	r0, [r0, #0]
    e0ce:	e7f2      	b.n	e0b6 <String::equals(String const&) const+0x1a>
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    e0d0:	7810      	ldrb	r0, [r2, #0]
    e0d2:	4240      	negs	r0, r0
    e0d4:	e7ef      	b.n	e0b6 <String::equals(String const&) const+0x1a>
    e0d6:	bf00      	nop

0000e0d8 <String::equals(char const*) const>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    e0d8:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
    e0da:	b508      	push	{r3, lr}
    e0dc:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
    e0de:	b92a      	cbnz	r2, e0ec <String::equals(char const*) const+0x14>
    e0e0:	b171      	cbz	r1, e100 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
    e0e2:	7818      	ldrb	r0, [r3, #0]
    e0e4:	fab0 f080 	clz	r0, r0
    e0e8:	0940      	lsrs	r0, r0, #5
    e0ea:	bd08      	pop	{r3, pc}
    e0ec:	b131      	cbz	r1, e0fc <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
    e0ee:	6800      	ldr	r0, [r0, #0]
    e0f0:	f004 fd7a 	bl	12be8 <strcmp>
    e0f4:	fab0 f080 	clz	r0, r0
    e0f8:	0940      	lsrs	r0, r0, #5
}
    e0fa:	bd08      	pop	{r3, pc}
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
	if (cstr == NULL) return buffer[0] == 0;
    e0fc:	6803      	ldr	r3, [r0, #0]
    e0fe:	e7f0      	b.n	e0e2 <String::equals(char const*) const+0xa>
    e100:	2001      	movs	r0, #1
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    e102:	bd08      	pop	{r3, pc}

0000e104 <String::equalsIgnoreCase(String const&) const>:
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    e104:	4288      	cmp	r0, r1
    e106:	d01b      	beq.n	e140 <String::equalsIgnoreCase(String const&) const+0x3c>
	if (len != s2.len) return 0;
    e108:	6883      	ldr	r3, [r0, #8]
    e10a:	688a      	ldr	r2, [r1, #8]
    e10c:	4293      	cmp	r3, r2
    e10e:	d001      	beq.n	e114 <String::equalsIgnoreCase(String const&) const+0x10>
    e110:	2000      	movs	r0, #0
    e112:	4770      	bx	lr
	if (len == 0) return 1;
    e114:	b1a3      	cbz	r3, e140 <String::equalsIgnoreCase(String const&) const+0x3c>
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    e116:	b570      	push	{r4, r5, r6, lr}
    e118:	6804      	ldr	r4, [r0, #0]
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
    e11a:	680d      	ldr	r5, [r1, #0]
    e11c:	3c01      	subs	r4, #1
    e11e:	e008      	b.n	e132 <String::equalsIgnoreCase(String const&) const+0x2e>
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    e120:	f006 fe60 	bl	14de4 <tolower>
    e124:	4606      	mov	r6, r0
    e126:	f815 0b01 	ldrb.w	r0, [r5], #1
    e12a:	f006 fe5b 	bl	14de4 <tolower>
    e12e:	4286      	cmp	r6, r0
    e130:	d108      	bne.n	e144 <String::equalsIgnoreCase(String const&) const+0x40>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    e132:	f814 3f01 	ldrb.w	r3, [r4, #1]!
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    e136:	4618      	mov	r0, r3
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    e138:	2b00      	cmp	r3, #0
    e13a:	d1f1      	bne.n	e120 <String::equalsIgnoreCase(String const&) const+0x1c>
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    e13c:	2001      	movs	r0, #1
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}
    e13e:	bd70      	pop	{r4, r5, r6, pc}
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
    e140:	2001      	movs	r0, #1
    e142:	4770      	bx	lr
	if (len != s2.len) return 0;
    e144:	2000      	movs	r0, #0
    e146:	bd70      	pop	{r4, r5, r6, pc}

0000e148 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    e148:	b1b2      	cbz	r2, e178 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    e14a:	b1a9      	cbz	r1, e178 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    e14c:	b538      	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    e14e:	6884      	ldr	r4, [r0, #8]
    e150:	429c      	cmp	r4, r3
    e152:	d90e      	bls.n	e172 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    e154:	1ae4      	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    e156:	3a01      	subs	r2, #1
    e158:	460d      	mov	r5, r1
    e15a:	4294      	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    e15c:	6801      	ldr	r1, [r0, #0]
    e15e:	bf28      	it	cs
    e160:	4614      	movcs	r4, r2
    e162:	4419      	add	r1, r3
    e164:	4622      	mov	r2, r4
    e166:	4628      	mov	r0, r5
    e168:	f004 ff78 	bl	1305c <strncpy>
	buf[n] = 0;
    e16c:	2300      	movs	r3, #0
    e16e:	552b      	strb	r3, [r5, r4]
    e170:	bd38      	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    e172:	2300      	movs	r3, #0
    e174:	700b      	strb	r3, [r1, #0]
		return;
    e176:	bd38      	pop	{r3, r4, r5, pc}
    e178:	4770      	bx	lr
    e17a:	bf00      	nop

0000e17c <String::indexOf(String const&) const>:
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    e17c:	6883      	ldr	r3, [r0, #8]
    e17e:	b143      	cbz	r3, e192 <String::indexOf(String const&) const+0x16>
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
    e180:	b510      	push	{r4, lr}
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    e182:	6804      	ldr	r4, [r0, #0]
    e184:	6809      	ldr	r1, [r1, #0]
    e186:	4620      	mov	r0, r4
    e188:	f005 f8f8 	bl	1337c <strstr>
	if (found == NULL) return -1;
    e18c:	b120      	cbz	r0, e198 <String::indexOf(String const&) const+0x1c>
	return found - buffer;
    e18e:	1b00      	subs	r0, r0, r4
    e190:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    e192:	f04f 30ff 	mov.w	r0, #4294967295
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}
    e196:	4770      	bx	lr

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    e198:	f04f 30ff 	mov.w	r0, #4294967295
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}
    e19c:	bd10      	pop	{r4, pc}
    e19e:	bf00      	nop

0000e1a0 <String::indexOf(String const&, unsigned int) const>:

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    e1a0:	6883      	ldr	r3, [r0, #8]
    e1a2:	4293      	cmp	r3, r2
    e1a4:	d908      	bls.n	e1b8 <String::indexOf(String const&, unsigned int) const+0x18>
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    e1a6:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    e1a8:	6804      	ldr	r4, [r0, #0]
    e1aa:	6809      	ldr	r1, [r1, #0]
    e1ac:	18a0      	adds	r0, r4, r2
    e1ae:	f005 f8e5 	bl	1337c <strstr>
	if (found == NULL) return -1;
    e1b2:	b120      	cbz	r0, e1be <String::indexOf(String const&, unsigned int) const+0x1e>
	return found - buffer;
    e1b4:	1b00      	subs	r0, r0, r4
    e1b6:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    e1b8:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
    e1bc:	4770      	bx	lr
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
    e1be:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
    e1c2:	bd10      	pop	{r4, pc}

0000e1c4 <String::substring(unsigned int) const>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    e1c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e1c8:	460f      	mov	r7, r1
	return substring(left, len);
    e1ca:	6889      	ldr	r1, [r1, #8]
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    e1cc:	4291      	cmp	r1, r2
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    e1ce:	b083      	sub	sp, #12
    e1d0:	4604      	mov	r4, r0
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
    e1d2:	d302      	bcc.n	e1da <String::substring(unsigned int) const+0x16>
    e1d4:	460b      	mov	r3, r1
    e1d6:	4611      	mov	r1, r2
    e1d8:	461a      	mov	r2, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    e1da:	2300      	movs	r3, #0
	capacity = 0;
	len = 0;
    e1dc:	60a3      	str	r3, [r4, #8]
	flags = 0;
    e1de:	7323      	strb	r3, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    e1e0:	68be      	ldr	r6, [r7, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    e1e2:	6023      	str	r3, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    e1e4:	428e      	cmp	r6, r1
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    e1e6:	6063      	str	r3, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    e1e8:	d319      	bcc.n	e21e <String::substring(unsigned int) const+0x5a>
    e1ea:	4296      	cmp	r6, r2
    e1ec:	bf28      	it	cs
    e1ee:	4616      	movcs	r6, r2
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    e1f0:	683a      	ldr	r2, [r7, #0]
    e1f2:	f812 9006 	ldrb.w	r9, [r2, r6]
	buffer[right] = '\0';	
    e1f6:	5593      	strb	r3, [r2, r6]
	out = buffer + left;  // pointer arithmetic
    e1f8:	f8d7 8000 	ldr.w	r8, [r7]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    e1fc:	eb18 0501 	adds.w	r5, r8, r1
    e200:	d011      	beq.n	e226 <String::substring(unsigned int) const+0x62>
		copy(cstr, strlen(cstr));
    e202:	4628      	mov	r0, r5
    e204:	f004 febc 	bl	12f80 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    e208:	4603      	mov	r3, r0
    e20a:	b978      	cbnz	r0, e22c <String::substring(unsigned int) const+0x68>
		if (buffer) buffer[0] = 0;
    e20c:	6822      	ldr	r2, [r4, #0]
    e20e:	2a00      	cmp	r2, #0
    e210:	d031      	beq.n	e276 <String::substring(unsigned int) const+0xb2>
    e212:	7010      	strb	r0, [r2, #0]
    e214:	683b      	ldr	r3, [r7, #0]
		len = 0;
    e216:	2200      	movs	r2, #0
    e218:	60a2      	str	r2, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    e21a:	f803 9006 	strb.w	r9, [r3, r6]
}

String String::substring( unsigned int left ) const
{
	return substring(left, len);
}
    e21e:	4620      	mov	r0, r4
    e220:	b003      	add	sp, #12
    e222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    e226:	60a5      	str	r5, [r4, #8]
    e228:	4643      	mov	r3, r8
    e22a:	e7f6      	b.n	e21a <String::substring(unsigned int) const+0x56>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    e22c:	6862      	ldr	r2, [r4, #4]
    e22e:	4290      	cmp	r0, r2
    e230:	d806      	bhi.n	e240 <String::substring(unsigned int) const+0x7c>
    e232:	6820      	ldr	r0, [r4, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    e234:	60a3      	str	r3, [r4, #8]
	strcpy(buffer, cstr);
    e236:	4629      	mov	r1, r5
    e238:	f004 fe40 	bl	12ebc <strcpy>
    e23c:	683b      	ldr	r3, [r7, #0]
    e23e:	e7ec      	b.n	e21a <String::substring(unsigned int) const+0x56>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    e240:	1c41      	adds	r1, r0, #1
    e242:	9001      	str	r0, [sp, #4]
    e244:	6820      	ldr	r0, [r4, #0]
    e246:	f004 fa2b 	bl	126a0 <realloc>
	if (newbuffer) {
    e24a:	4680      	mov	r8, r0
    e24c:	b140      	cbz	r0, e260 <String::substring(unsigned int) const+0x9c>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    e24e:	68a2      	ldr	r2, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    e250:	9b01      	ldr	r3, [sp, #4]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    e252:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    e254:	6063      	str	r3, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    e256:	2a00      	cmp	r2, #0
    e258:	d1ec      	bne.n	e234 <String::substring(unsigned int) const+0x70>
    e25a:	7002      	strb	r2, [r0, #0]
    e25c:	6820      	ldr	r0, [r4, #0]
    e25e:	e7e9      	b.n	e234 <String::substring(unsigned int) const+0x70>
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    e260:	6820      	ldr	r0, [r4, #0]
    e262:	b118      	cbz	r0, e26c <String::substring(unsigned int) const+0xa8>
			free(buffer);
    e264:	f003 fe0a 	bl	11e7c <free>
			buffer = NULL;
    e268:	f8c4 8000 	str.w	r8, [r4]
		}
		len = capacity = 0;
    e26c:	2200      	movs	r2, #0
    e26e:	683b      	ldr	r3, [r7, #0]
    e270:	6062      	str	r2, [r4, #4]
    e272:	60a2      	str	r2, [r4, #8]
    e274:	e7d1      	b.n	e21a <String::substring(unsigned int) const+0x56>
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
		if (buffer) buffer[0] = 0;
    e276:	4643      	mov	r3, r8
    e278:	e7cd      	b.n	e216 <String::substring(unsigned int) const+0x52>
    e27a:	bf00      	nop

0000e27c <String::substring(unsigned int, unsigned int) const>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    e27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (left > right) {
    e280:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    e282:	b083      	sub	sp, #12
    e284:	4604      	mov	r4, r0
    e286:	4689      	mov	r9, r1
	if (left > right) {
    e288:	d902      	bls.n	e290 <String::substring(unsigned int, unsigned int) const+0x14>
    e28a:	4611      	mov	r1, r2
    e28c:	461a      	mov	r2, r3
    e28e:	460b      	mov	r3, r1
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    e290:	2500      	movs	r5, #0
	capacity = 0;
	len = 0;
    e292:	60a5      	str	r5, [r4, #8]
	flags = 0;
    e294:	7325      	strb	r5, [r4, #12]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    e296:	f8d9 1008 	ldr.w	r1, [r9, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    e29a:	6025      	str	r5, [r4, #0]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    e29c:	428a      	cmp	r2, r1
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
	capacity = 0;
    e29e:	6065      	str	r5, [r4, #4]
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
	if (left > len) return out;
    e2a0:	d81a      	bhi.n	e2d8 <String::substring(unsigned int, unsigned int) const+0x5c>
    e2a2:	428b      	cmp	r3, r1
    e2a4:	bf28      	it	cs
    e2a6:	460b      	movcs	r3, r1
    e2a8:	461f      	mov	r7, r3
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    e2aa:	f8d9 3000 	ldr.w	r3, [r9]
    e2ae:	f813 8007 	ldrb.w	r8, [r3, r7]
	buffer[right] = '\0';	
    e2b2:	55dd      	strb	r5, [r3, r7]
	out = buffer + left;  // pointer arithmetic
    e2b4:	f8d9 6000 	ldr.w	r6, [r9]
}
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
    e2b8:	18b5      	adds	r5, r6, r2
    e2ba:	d011      	beq.n	e2e0 <String::substring(unsigned int, unsigned int) const+0x64>
		copy(cstr, strlen(cstr));
    e2bc:	4628      	mov	r0, r5
    e2be:	f004 fe5f 	bl	12f80 <strlen>
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
	if (length == 0) {
    e2c2:	4603      	mov	r3, r0
    e2c4:	b970      	cbnz	r0, e2e4 <String::substring(unsigned int, unsigned int) const+0x68>
		if (buffer) buffer[0] = 0;
    e2c6:	6822      	ldr	r2, [r4, #0]
    e2c8:	b112      	cbz	r2, e2d0 <String::substring(unsigned int, unsigned int) const+0x54>
    e2ca:	7010      	strb	r0, [r2, #0]
    e2cc:	f8d9 6000 	ldr.w	r6, [r9]
		len = 0;
    e2d0:	2300      	movs	r3, #0
    e2d2:	60a3      	str	r3, [r4, #8]
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
	buffer[right] = '\0';	
	out = buffer + left;  // pointer arithmetic
	buffer[right] = temp;  //restore character
    e2d4:	f806 8007 	strb.w	r8, [r6, r7]
	return out;
}
    e2d8:	4620      	mov	r0, r4
    e2da:	b003      	add	sp, #12
    e2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
	} else {
		len = 0;
    e2e0:	60a5      	str	r5, [r4, #8]
    e2e2:	e7f7      	b.n	e2d4 <String::substring(unsigned int, unsigned int) const+0x58>
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
    e2e4:	6862      	ldr	r2, [r4, #4]
    e2e6:	4290      	cmp	r0, r2
    e2e8:	d807      	bhi.n	e2fa <String::substring(unsigned int, unsigned int) const+0x7e>
    e2ea:	6820      	ldr	r0, [r4, #0]
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    e2ec:	60a3      	str	r3, [r4, #8]
	strcpy(buffer, cstr);
    e2ee:	4629      	mov	r1, r5
    e2f0:	f004 fde4 	bl	12ebc <strcpy>
    e2f4:	f8d9 6000 	ldr.w	r6, [r9]
    e2f8:	e7ec      	b.n	e2d4 <String::substring(unsigned int, unsigned int) const+0x58>
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    e2fa:	1c41      	adds	r1, r0, #1
    e2fc:	9001      	str	r0, [sp, #4]
    e2fe:	6820      	ldr	r0, [r4, #0]
    e300:	f004 f9ce 	bl	126a0 <realloc>
	if (newbuffer) {
    e304:	4606      	mov	r6, r0
    e306:	b140      	cbz	r0, e31a <String::substring(unsigned int, unsigned int) const+0x9e>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    e308:	68a2      	ldr	r2, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    e30a:	9b01      	ldr	r3, [sp, #4]

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
    e30c:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
    e30e:	6063      	str	r3, [r4, #4]

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    e310:	2a00      	cmp	r2, #0
    e312:	d1eb      	bne.n	e2ec <String::substring(unsigned int, unsigned int) const+0x70>
    e314:	7002      	strb	r2, [r0, #0]
    e316:	6820      	ldr	r0, [r4, #0]
    e318:	e7e8      	b.n	e2ec <String::substring(unsigned int, unsigned int) const+0x70>
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
		if (buffer) {
    e31a:	6820      	ldr	r0, [r4, #0]
    e31c:	b110      	cbz	r0, e324 <String::substring(unsigned int, unsigned int) const+0xa8>
			free(buffer);
    e31e:	f003 fdad 	bl	11e7c <free>
			buffer = NULL;
    e322:	6026      	str	r6, [r4, #0]
		}
		len = capacity = 0;
    e324:	2300      	movs	r3, #0
    e326:	f8d9 6000 	ldr.w	r6, [r9]
    e32a:	6063      	str	r3, [r4, #4]
    e32c:	60a3      	str	r3, [r4, #8]
    e32e:	e7d1      	b.n	e2d4 <String::substring(unsigned int, unsigned int) const+0x58>

0000e330 <String::remove(unsigned int)>:
	return *this;
}

String & String::remove(unsigned int index)
{
	if (index < len) {
    e330:	6883      	ldr	r3, [r0, #8]
    e332:	428b      	cmp	r3, r1
    e334:	d903      	bls.n	e33e <String::remove(unsigned int)+0xe>
		len = index;
		buffer[len] = 0;
    e336:	6803      	ldr	r3, [r0, #0]
}

String & String::remove(unsigned int index)
{
	if (index < len) {
		len = index;
    e338:	6081      	str	r1, [r0, #8]
		buffer[len] = 0;
    e33a:	2200      	movs	r2, #0
    e33c:	545a      	strb	r2, [r3, r1]
	}
	return *this;
}
    e33e:	4770      	bx	lr

0000e340 <String::toInt() const>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    e340:	6800      	ldr	r0, [r0, #0]
    e342:	b108      	cbz	r0, e348 <String::toInt() const+0x8>
    e344:	f003 bd14 	b.w	11d70 <atol>
	return 0;
}
    e348:	4770      	bx	lr
    e34a:	bf00      	nop

0000e34c <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    e34c:	4a37      	ldr	r2, [pc, #220]	; (e42c <wait_for_cal+0xe0>)
    e34e:	4938      	ldr	r1, [pc, #224]	; (e430 <wait_for_cal+0xe4>)
    e350:	6813      	ldr	r3, [r2, #0]
    e352:	061b      	lsls	r3, r3, #24
    e354:	d4fc      	bmi.n	e350 <wait_for_cal+0x4>
    e356:	680b      	ldr	r3, [r1, #0]
    e358:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    e35c:	d1f8      	bne.n	e350 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    e35e:	b672      	cpsid	i
	if (calibrating) {
    e360:	4934      	ldr	r1, [pc, #208]	; (e434 <wait_for_cal+0xe8>)
    e362:	780a      	ldrb	r2, [r1, #0]
    e364:	2a00      	cmp	r2, #0
    e366:	d05f      	beq.n	e428 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    e368:	4a33      	ldr	r2, [pc, #204]	; (e438 <wait_for_cal+0xec>)
    e36a:	4834      	ldr	r0, [pc, #208]	; (e43c <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    e36c:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    e36e:	4c34      	ldr	r4, [pc, #208]	; (e440 <wait_for_cal+0xf4>)
    e370:	6817      	ldr	r7, [r2, #0]
    e372:	6806      	ldr	r6, [r0, #0]
    e374:	6825      	ldr	r5, [r4, #0]
    e376:	68d4      	ldr	r4, [r2, #12]
    e378:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    e37a:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    e37c:	3214      	adds	r2, #20
    e37e:	6800      	ldr	r0, [r0, #0]
    e380:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    e382:	4f30      	ldr	r7, [pc, #192]	; (e444 <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    e384:	4435      	add	r5, r6
    e386:	442c      	add	r4, r5
    e388:	4420      	add	r0, r4
    e38a:	4402      	add	r2, r0
    e38c:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    e390:	4e2d      	ldr	r6, [pc, #180]	; (e448 <wait_for_cal+0xfc>)
    e392:	482e      	ldr	r0, [pc, #184]	; (e44c <wait_for_cal+0x100>)
    e394:	4d2e      	ldr	r5, [pc, #184]	; (e450 <wait_for_cal+0x104>)
    e396:	4c2f      	ldr	r4, [pc, #188]	; (e454 <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    e398:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e39c:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    e39e:	6837      	ldr	r7, [r6, #0]
    e3a0:	6806      	ldr	r6, [r0, #0]
    e3a2:	682d      	ldr	r5, [r5, #0]
    e3a4:	4a2c      	ldr	r2, [pc, #176]	; (e458 <wait_for_cal+0x10c>)
    e3a6:	6824      	ldr	r4, [r4, #0]
    e3a8:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    e3aa:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    e3ac:	6800      	ldr	r0, [r0, #0]
    e3ae:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    e3b0:	4f2a      	ldr	r7, [pc, #168]	; (e45c <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    e3b2:	4435      	add	r5, r6
    e3b4:	442c      	add	r4, r5
    e3b6:	4420      	add	r0, r4
    e3b8:	4402      	add	r2, r0
    e3ba:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    e3be:	4e28      	ldr	r6, [pc, #160]	; (e460 <wait_for_cal+0x114>)
    e3c0:	4828      	ldr	r0, [pc, #160]	; (e464 <wait_for_cal+0x118>)
    e3c2:	4d29      	ldr	r5, [pc, #164]	; (e468 <wait_for_cal+0x11c>)
    e3c4:	4c29      	ldr	r4, [pc, #164]	; (e46c <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    e3c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e3ca:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    e3cc:	6837      	ldr	r7, [r6, #0]
    e3ce:	6806      	ldr	r6, [r0, #0]
    e3d0:	682d      	ldr	r5, [r5, #0]
    e3d2:	4a27      	ldr	r2, [pc, #156]	; (e470 <wait_for_cal+0x124>)
    e3d4:	6824      	ldr	r4, [r4, #0]
    e3d6:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    e3d8:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    e3da:	6800      	ldr	r0, [r0, #0]
    e3dc:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    e3de:	4f25      	ldr	r7, [pc, #148]	; (e474 <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    e3e0:	4435      	add	r5, r6
    e3e2:	442c      	add	r4, r5
    e3e4:	4420      	add	r0, r4
    e3e6:	4402      	add	r2, r0
    e3e8:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    e3ec:	4e22      	ldr	r6, [pc, #136]	; (e478 <wait_for_cal+0x12c>)
    e3ee:	4823      	ldr	r0, [pc, #140]	; (e47c <wait_for_cal+0x130>)
    e3f0:	4d23      	ldr	r5, [pc, #140]	; (e480 <wait_for_cal+0x134>)
    e3f2:	4c24      	ldr	r4, [pc, #144]	; (e484 <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    e3f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e3f8:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    e3fa:	6837      	ldr	r7, [r6, #0]
    e3fc:	6806      	ldr	r6, [r0, #0]
    e3fe:	682d      	ldr	r5, [r5, #0]
    e400:	4a21      	ldr	r2, [pc, #132]	; (e488 <wait_for_cal+0x13c>)
    e402:	6824      	ldr	r4, [r4, #0]
    e404:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    e406:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    e408:	6800      	ldr	r0, [r0, #0]
    e40a:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    e40c:	4435      	add	r5, r6
    e40e:	442c      	add	r4, r5
    e410:	4420      	add	r0, r4
    e412:	4402      	add	r2, r0
    e414:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    e418:	481c      	ldr	r0, [pc, #112]	; (e48c <wait_for_cal+0x140>)
    e41a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    e41e:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    e420:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    e422:	b662      	cpsie	i
}
    e424:	bcf0      	pop	{r4, r5, r6, r7}
    e426:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    e428:	b662      	cpsie	i
    e42a:	4770      	bx	lr
    e42c:	4003b024 	.word	0x4003b024
    e430:	400bb024 	.word	0x400bb024
    e434:	1fff67fd 	.word	0x1fff67fd
    e438:	4003b038 	.word	0x4003b038
    e43c:	4003b03c 	.word	0x4003b03c
    e440:	4003b040 	.word	0x4003b040
    e444:	4003b02c 	.word	0x4003b02c
    e448:	4003b058 	.word	0x4003b058
    e44c:	4003b05c 	.word	0x4003b05c
    e450:	4003b060 	.word	0x4003b060
    e454:	4003b064 	.word	0x4003b064
    e458:	4003b06c 	.word	0x4003b06c
    e45c:	4003b030 	.word	0x4003b030
    e460:	400bb038 	.word	0x400bb038
    e464:	400bb03c 	.word	0x400bb03c
    e468:	400bb040 	.word	0x400bb040
    e46c:	400bb044 	.word	0x400bb044
    e470:	400bb04c 	.word	0x400bb04c
    e474:	400bb02c 	.word	0x400bb02c
    e478:	400bb058 	.word	0x400bb058
    e47c:	400bb05c 	.word	0x400bb05c
    e480:	400bb060 	.word	0x400bb060
    e484:	400bb064 	.word	0x400bb064
    e488:	400bb06c 	.word	0x400bb06c
    e48c:	400bb030 	.word	0x400bb030

0000e490 <analog_init>:
#else
#error "F_BUS must be 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    e490:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    e492:	4829      	ldr	r0, [pc, #164]	; (e538 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e494:	4a29      	ldr	r2, [pc, #164]	; (e53c <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    e496:	4b2a      	ldr	r3, [pc, #168]	; (e540 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e498:	4d2a      	ldr	r5, [pc, #168]	; (e544 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    e49a:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e49c:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    e49e:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    e4a0:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    e4a2:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e4a4:	4c28      	ldr	r4, [pc, #160]	; (e548 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    e4a6:	2b08      	cmp	r3, #8
    e4a8:	d030      	beq.n	e50c <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    e4aa:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e4ac:	4827      	ldr	r0, [pc, #156]	; (e54c <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e4ae:	4928      	ldr	r1, [pc, #160]	; (e550 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    e4b0:	d037      	beq.n	e522 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    e4b2:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    e4b4:	bf0c      	ite	eq
    e4b6:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e4b8:	225d      	movne	r2, #93	; 0x5d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e4ba:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e4bc:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e4be:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    e4c0:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    e4c2:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e4c4:	4b23      	ldr	r3, [pc, #140]	; (e554 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e4c6:	4924      	ldr	r1, [pc, #144]	; (e558 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e4c8:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e4ca:	4a24      	ldr	r2, [pc, #144]	; (e55c <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    e4cc:	b1bb      	cbz	r3, e4fe <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e4ce:	2301      	movs	r3, #1
    e4d0:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    e4d2:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    e4d4:	4b22      	ldr	r3, [pc, #136]	; (e560 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e4d6:	4923      	ldr	r1, [pc, #140]	; (e564 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    e4d8:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e4da:	4a23      	ldr	r2, [pc, #140]	; (e568 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    e4dc:	2b01      	cmp	r3, #1
    e4de:	d926      	bls.n	e52e <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    e4e0:	2b04      	cmp	r3, #4
    e4e2:	d90f      	bls.n	e504 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    e4e4:	2b08      	cmp	r3, #8
    e4e6:	d91e      	bls.n	e526 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    e4e8:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    e4ea:	bf94      	ite	ls
    e4ec:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e4ee:	2387      	movhi	r3, #135	; 0x87
    e4f0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    e4f2:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    e4f4:	4b1d      	ldr	r3, [pc, #116]	; (e56c <analog_init+0xdc>)
    e4f6:	2201      	movs	r2, #1
    e4f8:	701a      	strb	r2, [r3, #0]
}
    e4fa:	bc30      	pop	{r4, r5}
    e4fc:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e4fe:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    e500:	6013      	str	r3, [r2, #0]
    e502:	e7e7      	b.n	e4d4 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e504:	2384      	movs	r3, #132	; 0x84
    e506:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    e508:	6013      	str	r3, [r2, #0]
    e50a:	e7f3      	b.n	e4f4 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e50c:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e510:	490f      	ldr	r1, [pc, #60]	; (e550 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e512:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    e514:	2221      	movs	r2, #33	; 0x21
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e516:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e518:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e51a:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e51c:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    e51e:	600b      	str	r3, [r1, #0]
    e520:	e7d0      	b.n	e4c4 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    e522:	2239      	movs	r2, #57	; 0x39
    e524:	e7f7      	b.n	e516 <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e526:	2385      	movs	r3, #133	; 0x85
    e528:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    e52a:	6013      	str	r3, [r2, #0]
    e52c:	e7e2      	b.n	e4f4 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    e52e:	2380      	movs	r3, #128	; 0x80
    e530:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    e532:	6013      	str	r3, [r2, #0]
    e534:	e7de      	b.n	e4f4 <analog_init+0x64>
    e536:	bf00      	nop
    e538:	40074000 	.word	0x40074000
    e53c:	40074001 	.word	0x40074001
    e540:	1fff4af4 	.word	0x1fff4af4
    e544:	4003b008 	.word	0x4003b008
    e548:	4003b00c 	.word	0x4003b00c
    e54c:	400bb008 	.word	0x400bb008
    e550:	400bb00c 	.word	0x400bb00c
    e554:	1fff6800 	.word	0x1fff6800
    e558:	4003b020 	.word	0x4003b020
    e55c:	400bb020 	.word	0x400bb020
    e560:	1fff4af5 	.word	0x1fff4af5
    e564:	4003b024 	.word	0x4003b024
    e568:	400bb024 	.word	0x400bb024
    e56c:	1fff67fd 	.word	0x1fff67fd

0000e570 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    e570:	2847      	cmp	r0, #71	; 0x47
    e572:	d82f      	bhi.n	e5d4 <analogRead+0x64>
	channel = pin2sc1a[pin];
    e574:	4b33      	ldr	r3, [pc, #204]	; (e644 <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    e576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    e57a:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    e57c:	2eff      	cmp	r6, #255	; 0xff
    e57e:	d02b      	beq.n	e5d8 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    e580:	4b31      	ldr	r3, [pc, #196]	; (e648 <analogRead+0xd8>)
    e582:	781b      	ldrb	r3, [r3, #0]
    e584:	2b00      	cmp	r3, #0
    e586:	d12a      	bne.n	e5de <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    e588:	0632      	lsls	r2, r6, #24
    e58a:	d42c      	bmi.n	e5e6 <analogRead+0x76>
#endif

	__disable_irq();
    e58c:	b672      	cpsid	i
    e58e:	4d2f      	ldr	r5, [pc, #188]	; (e64c <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    e590:	4c2f      	ldr	r4, [pc, #188]	; (e650 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    e592:	462f      	mov	r7, r5
    e594:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    e596:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    e598:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    e59a:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    e59c:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    e59e:	6823      	ldr	r3, [r4, #0]
    e5a0:	061b      	lsls	r3, r3, #24
    e5a2:	d40c      	bmi.n	e5be <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    e5a4:	783b      	ldrb	r3, [r7, #0]
    e5a6:	b91b      	cbnz	r3, e5b0 <analogRead+0x40>
    e5a8:	e7f4      	b.n	e594 <analogRead+0x24>
    e5aa:	782b      	ldrb	r3, [r5, #0]
    e5ac:	2b00      	cmp	r3, #0
    e5ae:	d0f1      	beq.n	e594 <analogRead+0x24>
		__enable_irq();
    e5b0:	b662      	cpsie	i
		yield();
    e5b2:	f002 fabd 	bl	10b30 <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    e5b6:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    e5b8:	6823      	ldr	r3, [r4, #0]
    e5ba:	0618      	lsls	r0, r3, #24
    e5bc:	d5f5      	bpl.n	e5aa <analogRead+0x3a>
			result = ADC0_RA;
    e5be:	4b25      	ldr	r3, [pc, #148]	; (e654 <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    e5c0:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    e5c2:	2200      	movs	r2, #0
    e5c4:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    e5c6:	b662      	cpsie	i
			result >>= analog_right_shift;
    e5c8:	4a23      	ldr	r2, [pc, #140]	; (e658 <analogRead+0xe8>)
    e5ca:	7810      	ldrb	r0, [r2, #0]
    e5cc:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    e5d4:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    e5d6:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    e5d8:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    e5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    e5de:	f7ff feb5 	bl	e34c <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    e5e2:	0632      	lsls	r2, r6, #24
    e5e4:	d5d2      	bpl.n	e58c <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    e5e6:	b672      	cpsid	i
    e5e8:	4d1c      	ldr	r5, [pc, #112]	; (e65c <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    e5ea:	f8df 807c 	ldr.w	r8, [pc, #124]	; e668 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    e5ee:	4c1c      	ldr	r4, [pc, #112]	; (e660 <analogRead+0xf0>)
    e5f0:	f006 0740 	and.w	r7, r6, #64	; 0x40
    e5f4:	b2ff      	uxtb	r7, r7
    e5f6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    e5fa:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    e5fe:	b1df      	cbz	r7, e638 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    e600:	f023 0310 	bic.w	r3, r3, #16
    e604:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    e608:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    e60a:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    e60c:	4a13      	ldr	r2, [pc, #76]	; (e65c <analogRead+0xec>)
    e60e:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    e610:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    e612:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    e614:	6823      	ldr	r3, [r4, #0]
    e616:	0619      	lsls	r1, r3, #24
    e618:	d40c      	bmi.n	e634 <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    e61a:	7813      	ldrb	r3, [r2, #0]
    e61c:	b91b      	cbnz	r3, e626 <analogRead+0xb6>
    e61e:	e7ec      	b.n	e5fa <analogRead+0x8a>
    e620:	782b      	ldrb	r3, [r5, #0]
    e622:	2b00      	cmp	r3, #0
    e624:	d0e9      	beq.n	e5fa <analogRead+0x8a>
		__enable_irq();
    e626:	b662      	cpsie	i
		yield();
    e628:	f002 fa82 	bl	10b30 <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    e62c:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    e62e:	6823      	ldr	r3, [r4, #0]
    e630:	061b      	lsls	r3, r3, #24
    e632:	d5f5      	bpl.n	e620 <analogRead+0xb0>
			result = ADC1_RA;
    e634:	4b0b      	ldr	r3, [pc, #44]	; (e664 <analogRead+0xf4>)
    e636:	e7c3      	b.n	e5c0 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    e638:	f043 0310 	orr.w	r3, r3, #16
    e63c:	f8c8 3000 	str.w	r3, [r8]
    e640:	e7e2      	b.n	e608 <analogRead+0x98>
    e642:	bf00      	nop
    e644:	0001773c 	.word	0x0001773c
    e648:	1fff67fd 	.word	0x1fff67fd
    e64c:	1fff67ff 	.word	0x1fff67ff
    e650:	4003b000 	.word	0x4003b000
    e654:	4003b010 	.word	0x4003b010
    e658:	1fff67fc 	.word	0x1fff67fc
    e65c:	1fff67fe 	.word	0x1fff67fe
    e660:	400bb000 	.word	0x400bb000
    e664:	400bb010 	.word	0x400bb010
    e668:	400bb00c 	.word	0x400bb00c

0000e66c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    e66c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    e66e:	f7f2 fa1b 	bl	aa8 <setup>
	while (1) {
		loop();
    e672:	f7f2 fab9 	bl	be8 <loop>
		yield();
    e676:	f002 fa5b 	bl	10b30 <yield>
    e67a:	e7fa      	b.n	e672 <main+0x6>

0000e67c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    e67c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    e67e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    e682:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    e686:	d16d      	bne.n	e764 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e688:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    e68a:	d341      	bcc.n	e710 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e68c:	f851 3b04 	ldr.w	r3, [r1], #4
    e690:	f840 3b04 	str.w	r3, [r0], #4
    e694:	f851 3b04 	ldr.w	r3, [r1], #4
    e698:	f840 3b04 	str.w	r3, [r0], #4
    e69c:	f851 3b04 	ldr.w	r3, [r1], #4
    e6a0:	f840 3b04 	str.w	r3, [r0], #4
    e6a4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6a8:	f840 3b04 	str.w	r3, [r0], #4
    e6ac:	f851 3b04 	ldr.w	r3, [r1], #4
    e6b0:	f840 3b04 	str.w	r3, [r0], #4
    e6b4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6b8:	f840 3b04 	str.w	r3, [r0], #4
    e6bc:	f851 3b04 	ldr.w	r3, [r1], #4
    e6c0:	f840 3b04 	str.w	r3, [r0], #4
    e6c4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6c8:	f840 3b04 	str.w	r3, [r0], #4
    e6cc:	f851 3b04 	ldr.w	r3, [r1], #4
    e6d0:	f840 3b04 	str.w	r3, [r0], #4
    e6d4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6d8:	f840 3b04 	str.w	r3, [r0], #4
    e6dc:	f851 3b04 	ldr.w	r3, [r1], #4
    e6e0:	f840 3b04 	str.w	r3, [r0], #4
    e6e4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6e8:	f840 3b04 	str.w	r3, [r0], #4
    e6ec:	f851 3b04 	ldr.w	r3, [r1], #4
    e6f0:	f840 3b04 	str.w	r3, [r0], #4
    e6f4:	f851 3b04 	ldr.w	r3, [r1], #4
    e6f8:	f840 3b04 	str.w	r3, [r0], #4
    e6fc:	f851 3b04 	ldr.w	r3, [r1], #4
    e700:	f840 3b04 	str.w	r3, [r0], #4
    e704:	f851 3b04 	ldr.w	r3, [r1], #4
    e708:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    e70c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    e70e:	d2bd      	bcs.n	e68c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    e710:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    e712:	d311      	bcc.n	e738 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    e714:	f851 3b04 	ldr.w	r3, [r1], #4
    e718:	f840 3b04 	str.w	r3, [r0], #4
    e71c:	f851 3b04 	ldr.w	r3, [r1], #4
    e720:	f840 3b04 	str.w	r3, [r0], #4
    e724:	f851 3b04 	ldr.w	r3, [r1], #4
    e728:	f840 3b04 	str.w	r3, [r0], #4
    e72c:	f851 3b04 	ldr.w	r3, [r1], #4
    e730:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    e734:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    e736:	d2ed      	bcs.n	e714 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    e738:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    e73a:	d305      	bcc.n	e748 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    e73c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    e740:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    e744:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    e746:	d2f9      	bcs.n	e73c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    e748:	3204      	adds	r2, #4
	beq	.Ldone
    e74a:	d008      	beq.n	e75e <memcpy+0xe2>

	lsls	r2, r2, #31
    e74c:	07d2      	lsls	r2, r2, #31
	itt ne
    e74e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e750:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e754:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    e758:	d301      	bcc.n	e75e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    e75a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    e75c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e75e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e760:	4770      	bx	lr
    e762:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    e764:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    e766:	d313      	bcc.n	e790 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    e768:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    e76a:	d08d      	beq.n	e688 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    e76c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    e770:	d08a      	beq.n	e688 <memcpy+0xc>

	rsb	r3, #4
    e772:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    e776:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    e778:	07db      	lsls	r3, r3, #31
	itt ne
    e77a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    e77c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    e780:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    e784:	d380      	bcc.n	e688 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    e786:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    e78a:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    e78e:	e77b      	b.n	e688 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    e790:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    e792:	d3d9      	bcc.n	e748 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    e794:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    e796:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    e79a:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    e79e:	d2f9      	bcs.n	e794 <memcpy+0x118>

	ldrb	r3, [r1]
    e7a0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    e7a2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    e7a4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    e7a6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    e7a8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    e7aa:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    e7ac:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    e7ae:	4770      	bx	lr

0000e7b0 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    e7b0:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e7b2:	4c10      	ldr	r4, [pc, #64]	; (e7f4 <fault_isr+0x44>)
    e7b4:	e008      	b.n	e7c8 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e7b6:	6823      	ldr	r3, [r4, #0]
    e7b8:	0559      	lsls	r1, r3, #21
    e7ba:	d40d      	bmi.n	e7d8 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e7bc:	6823      	ldr	r3, [r4, #0]
    e7be:	051a      	lsls	r2, r3, #20
    e7c0:	d40f      	bmi.n	e7e2 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    e7c2:	6823      	ldr	r3, [r4, #0]
    e7c4:	04db      	lsls	r3, r3, #19
    e7c6:	d411      	bmi.n	e7ec <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    e7c8:	6823      	ldr	r3, [r4, #0]
    e7ca:	0358      	lsls	r0, r3, #13
    e7cc:	d5f3      	bpl.n	e7b6 <fault_isr+0x6>
    e7ce:	f001 f9bd 	bl	fb4c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    e7d2:	6823      	ldr	r3, [r4, #0]
    e7d4:	0559      	lsls	r1, r3, #21
    e7d6:	d5f1      	bpl.n	e7bc <fault_isr+0xc>
    e7d8:	f000 fcf8 	bl	f1cc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    e7dc:	6823      	ldr	r3, [r4, #0]
    e7de:	051a      	lsls	r2, r3, #20
    e7e0:	d5ef      	bpl.n	e7c2 <fault_isr+0x12>
    e7e2:	f002 fa21 	bl	10c28 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    e7e6:	6823      	ldr	r3, [r4, #0]
    e7e8:	04db      	lsls	r3, r3, #19
    e7ea:	d5ed      	bpl.n	e7c8 <fault_isr+0x18>
    e7ec:	f002 fab2 	bl	10d54 <uart2_status_isr>
    e7f0:	e7ea      	b.n	e7c8 <fault_isr+0x18>
    e7f2:	bf00      	nop
    e7f4:	40048034 	.word	0x40048034

0000e7f8 <unused_isr>:
	}
}

void unused_isr(void)
{
    e7f8:	b508      	push	{r3, lr}
	fault_isr();
    e7fa:	f7ff ffd9 	bl	e7b0 <fault_isr>
    e7fe:	bf00      	nop

0000e800 <startup_late_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    e800:	4770      	bx	lr
    e802:	bf00      	nop

0000e804 <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    e804:	4909      	ldr	r1, [pc, #36]	; (e82c <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    e806:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    e808:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    e80a:	b130      	cbz	r0, e81a <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    e80c:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    e80e:	4418      	add	r0, r3
    e810:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    e814:	4290      	cmp	r0, r2
    e816:	d202      	bcs.n	e81e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    e818:	6008      	str	r0, [r1, #0]
	}
	return prev;
    e81a:	4618      	mov	r0, r3
}
    e81c:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    e81e:	f003 fac3 	bl	11da8 <__errno>
    e822:	230c      	movs	r3, #12
    e824:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    e826:	f04f 30ff 	mov.w	r0, #4294967295
    e82a:	bd08      	pop	{r3, pc}
    e82c:	1fff4af8 	.word	0x1fff4af8

0000e830 <__cxa_pure_virtual>:
	while (1);
}

__attribute__((weak)) 
void __cxa_pure_virtual()
{
    e830:	e7fe      	b.n	e830 <__cxa_pure_virtual>
    e832:	bf00      	nop

0000e834 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    e834:	f3ef 8013 	mrs	r0, FAULTMASK
	if (faultmask) return -1;
    e838:	b970      	cbnz	r0, e858 <nvic_execution_priority+0x24>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    e83a:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    e83e:	b96b      	cbnz	r3, e85c <nvic_execution_priority+0x28>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    e840:	f3ef 8205 	mrs	r2, IPSR
	if (ipsr) {
    e844:	b95a      	cbnz	r2, e85e <nvic_execution_priority+0x2a>

#pragma GCC diagnostic pop

int nvic_execution_priority(void)
{
	uint32_t priority=256;
    e846:	f44f 7080 	mov.w	r0, #256	; 0x100
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    e84a:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    e84e:	b12b      	cbz	r3, e85c <nvic_execution_priority+0x28>
    e850:	4298      	cmp	r0, r3
    e852:	bf28      	it	cs
    e854:	4618      	movcs	r0, r3
	return priority;
    e856:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    e858:	f04f 30ff 	mov.w	r0, #4294967295
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
    e85c:	4770      	bx	lr
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    e85e:	2a0f      	cmp	r2, #15
    e860:	d801      	bhi.n	e866 <nvic_execution_priority+0x32>
    e862:	4618      	mov	r0, r3
    e864:	e7f1      	b.n	e84a <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    e866:	4b01      	ldr	r3, [pc, #4]	; (e86c <nvic_execution_priority+0x38>)
    e868:	5cd0      	ldrb	r0, [r2, r3]
    e86a:	e7ee      	b.n	e84a <nvic_execution_priority+0x16>
    e86c:	e000e3f0 	.word	0xe000e3f0

0000e870 <kinetis_hsrun_disable>:


#if defined(HAS_KINETIS_HSRUN) && F_CPU > 120000000
int kinetis_hsrun_disable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_HSRUN) {
    e870:	4a08      	ldr	r2, [pc, #32]	; (e894 <kinetis_hsrun_disable+0x24>)
    e872:	7813      	ldrb	r3, [r2, #0]
    e874:	2b80      	cmp	r3, #128	; 0x80
    e876:	d001      	beq.n	e87c <kinetis_hsrun_disable+0xc>
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
		return 1;
	}
	return 0;
    e878:	2000      	movs	r0, #0
}
    e87a:	4770      	bx	lr
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    e87c:	4906      	ldr	r1, [pc, #24]	; (e898 <kinetis_hsrun_disable+0x28>)
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    e87e:	4b07      	ldr	r3, [pc, #28]	; (e89c <kinetis_hsrun_disable+0x2c>)
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 7); // ok
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(2, 2, 2, 8); // ok
    e880:	4807      	ldr	r0, [pc, #28]	; (e8a0 <kinetis_hsrun_disable+0x30>)
    e882:	6008      	str	r0, [r1, #0]
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(1, 1, 1, 5); // ok
		#else
			return 0;
		#endif
		// Then turn off HSRUN mode
		SMC_PMCTRL = SMC_PMCTRL_RUNM(0);
    e884:	2100      	movs	r1, #0
    e886:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT == SMC_PMSTAT_HSRUN) ; // wait
    e888:	7813      	ldrb	r3, [r2, #0]
    e88a:	2b80      	cmp	r3, #128	; 0x80
    e88c:	d0fc      	beq.n	e888 <kinetis_hsrun_disable+0x18>
		return 1;
    e88e:	2001      	movs	r0, #1
    e890:	4770      	bx	lr
    e892:	bf00      	nop
    e894:	4007e003 	.word	0x4007e003
    e898:	40048044 	.word	0x40048044
    e89c:	4007e001 	.word	0x4007e001
    e8a0:	22280000 	.word	0x22280000

0000e8a4 <kinetis_hsrun_enable>:
	return 0;
}

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
    e8a4:	4a09      	ldr	r2, [pc, #36]	; (e8cc <kinetis_hsrun_enable+0x28>)
    e8a6:	7813      	ldrb	r3, [r2, #0]
    e8a8:	2b01      	cmp	r3, #1
    e8aa:	d001      	beq.n	e8b0 <kinetis_hsrun_enable+0xc>
		#else
			return 0;
		#endif
		return 1;
	}
	return 0;
    e8ac:	2000      	movs	r0, #0
}
    e8ae:	4770      	bx	lr

int kinetis_hsrun_enable(void)
{
	if (SMC_PMSTAT == SMC_PMSTAT_RUN) {
		// Turn HSRUN mode on
		SMC_PMCTRL = SMC_PMCTRL_RUNM(3);
    e8b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    e8b4:	f503 23fc 	add.w	r3, r3, #516096	; 0x7e000
    e8b8:	2160      	movs	r1, #96	; 0x60
    e8ba:	7019      	strb	r1, [r3, #0]
		while (SMC_PMSTAT != SMC_PMSTAT_HSRUN) {;} // wait
    e8bc:	7813      	ldrb	r3, [r2, #0]
    e8be:	2b80      	cmp	r3, #128	; 0x80
    e8c0:	d1fc      	bne.n	e8bc <kinetis_hsrun_enable+0x18>
		#elif F_CPU == 192000000 && F_BUS == 64000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
		#elif F_CPU == 192000000 && F_BUS == 96000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 6);
		#elif F_CPU == 180000000 && F_BUS == 60000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 2, 0, 6);
    e8c2:	4b03      	ldr	r3, [pc, #12]	; (e8d0 <kinetis_hsrun_enable+0x2c>)
    e8c4:	4a03      	ldr	r2, [pc, #12]	; (e8d4 <kinetis_hsrun_enable+0x30>)
    e8c6:	601a      	str	r2, [r3, #0]
		#elif F_CPU == 144000000 && F_BUS == 72000000
			SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIVS(0, 1, 0, 4);
		#else
			return 0;
		#endif
		return 1;
    e8c8:	2001      	movs	r0, #1
    e8ca:	4770      	bx	lr
    e8cc:	4007e003 	.word	0x4007e003
    e8d0:	40048044 	.word	0x40048044
    e8d4:	02060000 	.word	0x02060000

0000e8d8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    e8d8:	b4f0      	push	{r4, r5, r6, r7}
    e8da:	1e4d      	subs	r5, r1, #1
    e8dc:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    e8de:	2400      	movs	r4, #0
    e8e0:	e000      	b.n	e8e4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    e8e2:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    e8e4:	fbb0 f3f2 	udiv	r3, r0, r2
    e8e8:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    e8ec:	2809      	cmp	r0, #9
    e8ee:	f100 0730 	add.w	r7, r0, #48	; 0x30
    e8f2:	bf8a      	itet	hi
    e8f4:	3037      	addhi	r0, #55	; 0x37
    e8f6:	b2f8      	uxtbls	r0, r7
    e8f8:	b2c0      	uxtbhi	r0, r0
    e8fa:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    e8fe:	4618      	mov	r0, r3
    e900:	2b00      	cmp	r3, #0
    e902:	d1ee      	bne.n	e8e2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    e904:	190a      	adds	r2, r1, r4
    e906:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    e908:	b14c      	cbz	r4, e91e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    e90a:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    e90c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    e910:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e912:	3301      	adds	r3, #1
    e914:	1ae0      	subs	r0, r4, r3
    e916:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    e918:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    e91c:	dbf5      	blt.n	e90a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    e91e:	4608      	mov	r0, r1
    e920:	bcf0      	pop	{r4, r5, r6, r7}
    e922:	4770      	bx	lr

0000e924 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e928:	ed2d 8b02 	vpush	{d8}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    e92c:	eeb4 0a40 	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e930:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
	if (isnanf(val)) {
    e934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    e938:	b087      	sub	sp, #28
    e93a:	eeb0 8a40 	vmov.f32	s16, s0
    e93e:	4606      	mov	r6, r0
    e940:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    e942:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	if (isnanf(val)) {
    e946:	f180 8130 	bvs.w	ebaa <dtostrf+0x286>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    e94a:	eddf 7ac0 	vldr	s15, [pc, #768]	; ec4c <dtostrf+0x328>
    e94e:	eeb0 7ac0 	vabs.f32	s14, s0
    e952:	eeb4 7a67 	vcmp.f32	s14, s15
    e956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e95a:	dd3c      	ble.n	e9d6 <dtostrf+0xb2>
		int ndigs = (val<0) ? 4 : 3;
    e95c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e964:	bf4c      	ite	mi
    e966:	2504      	movmi	r5, #4
    e968:	2503      	movpl	r5, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e96a:	429d      	cmp	r5, r3
    e96c:	db1d      	blt.n	e9aa <dtostrf+0x86>
		if (width<0) {
    e96e:	2800      	cmp	r0, #0
    e970:	db26      	blt.n	e9c0 <dtostrf+0x9c>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e972:	2500      	movs	r5, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e974:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e97c:	d427      	bmi.n	e9ce <dtostrf+0xaa>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    e97e:	2149      	movs	r1, #73	; 0x49
    e980:	224e      	movs	r2, #78	; 0x4e
    e982:	2346      	movs	r3, #70	; 0x46
    e984:	7021      	strb	r1, [r4, #0]
    e986:	7062      	strb	r2, [r4, #1]
    e988:	70a3      	strb	r3, [r4, #2]
    e98a:	3403      	adds	r4, #3
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    e98c:	b12d      	cbz	r5, e99a <dtostrf+0x76>
    e98e:	4620      	mov	r0, r4
    e990:	462a      	mov	r2, r5
    e992:	2120      	movs	r1, #32
    e994:	f003 fe32 	bl	125fc <memset>
    e998:	442c      	add	r4, r5
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    e99a:	2300      	movs	r3, #0
		return buf;
    e99c:	4620      	mov	r0, r4
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    e99e:	7023      	strb	r3, [r4, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    e9a0:	b007      	add	sp, #28
    e9a2:	ecbd 8b02 	vpop	{d8}
    e9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    e9aa:	2800      	cmp	r0, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    e9ac:	eba3 0505 	sub.w	r5, r3, r5
		if (width<0) {
    e9b0:	dae0      	bge.n	e974 <dtostrf+0x50>
			while (awidth) {
    e9b2:	b12d      	cbz	r5, e9c0 <dtostrf+0x9c>
    e9b4:	4620      	mov	r0, r4
    e9b6:	462a      	mov	r2, r5
    e9b8:	2120      	movs	r1, #32
    e9ba:	f003 fe1f 	bl	125fc <memset>
    e9be:	442c      	add	r4, r5
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    e9c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    e9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e9c8:	f140 811b 	bpl.w	ec02 <dtostrf+0x2de>
    e9cc:	2500      	movs	r5, #0
    e9ce:	232d      	movs	r3, #45	; 0x2d
    e9d0:	7023      	strb	r3, [r4, #0]
    e9d2:	3401      	adds	r4, #1
    e9d4:	e7d3      	b.n	e97e <dtostrf+0x5a>
    e9d6:	4689      	mov	r9, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    e9d8:	aa04      	add	r2, sp, #16
    e9da:	a903      	add	r1, sp, #12
    e9dc:	4648      	mov	r0, r9
    e9de:	f003 f9d1 	bl	11d84 <fcvtf>
    e9e2:	464d      	mov	r5, r9
    e9e4:	4680      	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    e9e6:	f8dd a00c 	ldr.w	sl, [sp, #12]
    e9ea:	f1b9 0f00 	cmp.w	r9, #0
    e9ee:	d060      	beq.n	eab2 <dtostrf+0x18e>
    e9f0:	f1ca 0300 	rsb	r3, sl, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    e9f4:	454b      	cmp	r3, r9
    e9f6:	f300 809c 	bgt.w	eb32 <dtostrf+0x20e>
    e9fa:	4640      	mov	r0, r8
    e9fc:	f004 fac0 	bl	12f80 <strlen>
    ea00:	4607      	mov	r7, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    ea02:	4557      	cmp	r7, sl
    ea04:	bfc8      	it	gt
    ea06:	3701      	addgt	r7, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    ea08:	f1ba 0f00 	cmp.w	sl, #0
    ea0c:	f040 80a0 	bne.w	eb50 <dtostrf+0x22c>
    ea10:	3701      	adds	r7, #1
			if (newDecimalPoint - decpt == precision + 1) decpt++;
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    ea12:	f8dd b010 	ldr.w	fp, [sp, #16]
    ea16:	f1bb 0f00 	cmp.w	fp, #0
    ea1a:	d05a      	beq.n	ead2 <dtostrf+0x1ae>
    ea1c:	3701      	adds	r7, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    ea1e:	1bf3      	subs	r3, r6, r7
	if (pad > 0) {
    ea20:	2b00      	cmp	r3, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    ea22:	eb04 0507 	add.w	r5, r4, r7
	pad = width - reqd;
	if (pad > 0) {
    ea26:	dc5a      	bgt.n	eade <dtostrf+0x1ba>
    ea28:	4623      	mov	r3, r4
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    ea2a:	222d      	movs	r2, #45	; 0x2d
    ea2c:	701a      	strb	r2, [r3, #0]
    ea2e:	3301      	adds	r3, #1
	if (decpt == 0 && precision > 0) {
    ea30:	f1ba 0f00 	cmp.w	sl, #0
    ea34:	d166      	bne.n	eb04 <dtostrf+0x1e0>
    ea36:	f1b9 0f00 	cmp.w	r9, #0
    ea3a:	d006      	beq.n	ea4a <dtostrf+0x126>
		*p++ = '0';
    ea3c:	461a      	mov	r2, r3
    ea3e:	2130      	movs	r1, #48	; 0x30
    ea40:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
    ea44:	212e      	movs	r1, #46	; 0x2e
    ea46:	7059      	strb	r1, [r3, #1]
    ea48:	4613      	mov	r3, r2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    ea4a:	42ab      	cmp	r3, r5
    ea4c:	d225      	bcs.n	ea9a <dtostrf+0x176>
		*p++ = *s++;
    ea4e:	1c59      	adds	r1, r3, #1
    ea50:	f898 2000 	ldrb.w	r2, [r8]
    ea54:	701a      	strb	r2, [r3, #0]
		if (p == e) break;
    ea56:	42a9      	cmp	r1, r5
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    ea58:	f108 0001 	add.w	r0, r8, #1
		if (p == e) break;
    ea5c:	d01e      	beq.n	ea9c <dtostrf+0x178>
    ea5e:	9a03      	ldr	r2, [sp, #12]
		if (--decpt == 0) *p++ = '.';
    ea60:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
    ea64:	3a01      	subs	r2, #1
    ea66:	e00e      	b.n	ea86 <dtostrf+0x162>
    ea68:	f883 c001 	strb.w	ip, [r3, #1]
    ea6c:	3302      	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    ea6e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    ea70:	f103 0101 	add.w	r1, r3, #1
    ea74:	f102 32ff 	add.w	r2, r2, #4294967295
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    ea78:	d20f      	bcs.n	ea9a <dtostrf+0x176>
		*p++ = *s++;
    ea7a:	f810 eb01 	ldrb.w	lr, [r0], #1
    ea7e:	f883 e000 	strb.w	lr, [r3]
		if (p == e) break;
    ea82:	42a9      	cmp	r1, r5
    ea84:	d00a      	beq.n	ea9c <dtostrf+0x178>
		if (--decpt == 0) *p++ = '.';
    ea86:	9203      	str	r2, [sp, #12]
    ea88:	2a00      	cmp	r2, #0
    ea8a:	d0ed      	beq.n	ea68 <dtostrf+0x144>
    ea8c:	460b      	mov	r3, r1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    ea8e:	42ab      	cmp	r3, r5
		*p++ = *s++;
    ea90:	f103 0101 	add.w	r1, r3, #1
    ea94:	f102 32ff 	add.w	r2, r2, #4294967295
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    ea98:	d3ef      	bcc.n	ea7a <dtostrf+0x156>
    ea9a:	461d      	mov	r5, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    ea9c:	2e00      	cmp	r6, #0
    ea9e:	f2c0 809f 	blt.w	ebe0 <dtostrf+0x2bc>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    eaa2:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    eaa4:	4620      	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    eaa6:	702b      	strb	r3, [r5, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    eaa8:	b007      	add	sp, #28
    eaaa:	ecbd 8b02 	vpop	{d8}
    eaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    eab2:	f1ba 0f00 	cmp.w	sl, #0
    eab6:	d19b      	bne.n	e9f0 <dtostrf+0xcc>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    eab8:	7800      	ldrb	r0, [r0, #0]
    eaba:	4965      	ldr	r1, [pc, #404]	; (ec50 <dtostrf+0x32c>)
    eabc:	4a65      	ldr	r2, [pc, #404]	; (ec54 <dtostrf+0x330>)
		decpt++;
    eabe:	2301      	movs	r3, #1
    eac0:	9303      	str	r3, [sp, #12]
    eac2:	469a      	mov	sl, r3
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    eac4:	2834      	cmp	r0, #52	; 0x34
    eac6:	bf8c      	ite	hi
    eac8:	4688      	movhi	r8, r1
    eaca:	4690      	movls	r8, r2
		decpt++;
    eacc:	f04f 33ff 	mov.w	r3, #4294967295
    ead0:	e790      	b.n	e9f4 <dtostrf+0xd0>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    ead2:	1bf3      	subs	r3, r6, r7
	if (pad > 0) {
    ead4:	2b00      	cmp	r3, #0

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    ead6:	eb04 0507 	add.w	r5, r4, r7
	pad = width - reqd;
	if (pad > 0) {
    eada:	f340 80b5 	ble.w	ec48 <dtostrf+0x324>
		e += pad;
    eade:	441d      	add	r5, r3
		while (pad-- > 0) *p++ = ' ';
    eae0:	3b01      	subs	r3, #1
    eae2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    eae6:	3301      	adds	r3, #1
    eae8:	461a      	mov	r2, r3
    eaea:	2120      	movs	r1, #32
    eaec:	4620      	mov	r0, r4
    eaee:	9301      	str	r3, [sp, #4]
    eaf0:	f003 fd84 	bl	125fc <memset>
    eaf4:	9b01      	ldr	r3, [sp, #4]
    eaf6:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
    eaf8:	f1bb 0f00 	cmp.w	fp, #0
    eafc:	d195      	bne.n	ea2a <dtostrf+0x106>
	if (decpt == 0 && precision > 0) {
    eafe:	f1ba 0f00 	cmp.w	sl, #0
    eb02:	d098      	beq.n	ea36 <dtostrf+0x112>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    eb04:	daa1      	bge.n	ea4a <dtostrf+0x126>
    eb06:	f1b9 0f00 	cmp.w	r9, #0
    eb0a:	d09e      	beq.n	ea4a <dtostrf+0x126>
		*p++ = '0';
    eb0c:	4699      	mov	r9, r3
    eb0e:	2130      	movs	r1, #48	; 0x30
    eb10:	f809 1b02 	strb.w	r1, [r9], #2
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    eb14:	f1ca 0a00 	rsb	sl, sl, #0
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
    eb18:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
    eb1c:	4652      	mov	r2, sl
    eb1e:	f883 e001 	strb.w	lr, [r3, #1]
    eb22:	4648      	mov	r0, r9
    eb24:	f003 fd6a 	bl	125fc <memset>
    eb28:	2200      	movs	r2, #0
    eb2a:	eb09 030a 	add.w	r3, r9, sl
    eb2e:	9203      	str	r2, [sp, #12]
    eb30:	e78b      	b.n	ea4a <dtostrf+0x126>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    eb32:	f1c9 0a00 	rsb	sl, r9, #0
    eb36:	2701      	movs	r7, #1
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    eb38:	4557      	cmp	r7, sl
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    eb3a:	4638      	mov	r0, r7
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    eb3c:	bfc8      	it	gt
    eb3e:	3701      	addgt	r7, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    eb40:	f1ba 0f00 	cmp.w	sl, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    eb44:	f8df 810c 	ldr.w	r8, [pc, #268]	; ec54 <dtostrf+0x330>
		decpt = -precision;
    eb48:	f8cd a00c 	str.w	sl, [sp, #12]

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    eb4c:	f43f af60 	beq.w	ea10 <dtostrf+0xec>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    eb50:	f6bf af5f 	bge.w	ea12 <dtostrf+0xee>
    eb54:	f1b9 0f00 	cmp.w	r9, #0
    eb58:	f43f af5b 	beq.w	ea12 <dtostrf+0xee>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    eb5c:	eb0a 0309 	add.w	r3, sl, r9
    eb60:	4298      	cmp	r0, r3
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    eb62:	f109 0702 	add.w	r7, r9, #2

		if (strlen(s) > precision + decpt) {
    eb66:	f67f af54 	bls.w	ea12 <dtostrf+0xee>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    eb6a:	f1b9 0f00 	cmp.w	r9, #0
    eb6e:	dd05      	ble.n	eb7c <dtostrf+0x258>
				val *= 10.0;
    eb70:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    eb74:	3d01      	subs	r5, #1
				val *= 10.0;
    eb76:	ee28 8a27 	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    eb7a:	d1fb      	bne.n	eb74 <dtostrf+0x250>
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    eb7c:	aa04      	add	r2, sp, #16
    eb7e:	4628      	mov	r0, r5
    eb80:	eeb0 0a48 	vmov.f32	s0, s16
    eb84:	a905      	add	r1, sp, #20
    eb86:	f003 f8fd 	bl	11d84 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    eb8a:	f8dd a00c 	ldr.w	sl, [sp, #12]
    eb8e:	9a05      	ldr	r2, [sp, #20]
    eb90:	f109 0301 	add.w	r3, r9, #1
    eb94:	ebca 0202 	rsb	r2, sl, r2
    eb98:	429a      	cmp	r2, r3
    eb9a:	bf08      	it	eq
    eb9c:	f10a 0a01 	addeq.w	sl, sl, #1
				val *= 10.0;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    eba0:	4680      	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    eba2:	bf08      	it	eq
    eba4:	f8cd a00c 	streq.w	sl, [sp, #12]
    eba8:	e733      	b.n	ea12 <dtostrf+0xee>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    ebaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    ebae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ebb2:	bf4c      	ite	mi
    ebb4:	2504      	movmi	r5, #4
    ebb6:	2503      	movpl	r5, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ebb8:	429d      	cmp	r5, r3
    ebba:	da2a      	bge.n	ec12 <dtostrf+0x2ee>
		if (width<0) {
    ebbc:	2800      	cmp	r0, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ebbe:	eba3 0505 	sub.w	r5, r3, r5
		if (width<0) {
    ebc2:	db2f      	blt.n	ec24 <dtostrf+0x300>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ebc4:	ee18 3a10 	vmov	r3, s16
    ebc8:	2b00      	cmp	r3, #0
    ebca:	db27      	blt.n	ec1c <dtostrf+0x2f8>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ebcc:	234e      	movs	r3, #78	; 0x4e
    ebce:	2241      	movs	r2, #65	; 0x41
    ebd0:	7023      	strb	r3, [r4, #0]
    ebd2:	70a3      	strb	r3, [r4, #2]
    ebd4:	7062      	strb	r2, [r4, #1]
    ebd6:	3403      	adds	r4, #3
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    ebd8:	2d00      	cmp	r5, #0
    ebda:	f47f aed8 	bne.w	e98e <dtostrf+0x6a>
    ebde:	e6dc      	b.n	e99a <dtostrf+0x76>
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    ebe0:	443e      	add	r6, r7
		while (pad-- > 0) *p++ = ' ';
    ebe2:	4273      	negs	r3, r6
    ebe4:	2b00      	cmp	r3, #0
    ebe6:	ea6f 0606 	mvn.w	r6, r6
    ebea:	f77f af5a 	ble.w	eaa2 <dtostrf+0x17e>
    ebee:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    ebf2:	3601      	adds	r6, #1
    ebf4:	4628      	mov	r0, r5
    ebf6:	4632      	mov	r2, r6
    ebf8:	2120      	movs	r1, #32
    ebfa:	f003 fcff 	bl	125fc <memset>
    ebfe:	4435      	add	r5, r6
    ec00:	e74f      	b.n	eaa2 <dtostrf+0x17e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    ec02:	2149      	movs	r1, #73	; 0x49
    ec04:	224e      	movs	r2, #78	; 0x4e
    ec06:	2346      	movs	r3, #70	; 0x46
    ec08:	7021      	strb	r1, [r4, #0]
    ec0a:	7062      	strb	r2, [r4, #1]
    ec0c:	70a3      	strb	r3, [r4, #2]
    ec0e:	3403      	adds	r4, #3
    ec10:	e6c3      	b.n	e99a <dtostrf+0x76>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    ec12:	2800      	cmp	r0, #0
    ec14:	db0d      	blt.n	ec32 <dtostrf+0x30e>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ec16:	2500      	movs	r5, #0
    ec18:	e7d4      	b.n	ebc4 <dtostrf+0x2a0>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ec1a:	2500      	movs	r5, #0
    ec1c:	232d      	movs	r3, #45	; 0x2d
    ec1e:	7023      	strb	r3, [r4, #0]
    ec20:	3401      	adds	r4, #1
    ec22:	e7d3      	b.n	ebcc <dtostrf+0x2a8>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    ec24:	b12d      	cbz	r5, ec32 <dtostrf+0x30e>
    ec26:	4620      	mov	r0, r4
    ec28:	462a      	mov	r2, r5
    ec2a:	2120      	movs	r1, #32
    ec2c:	f003 fce6 	bl	125fc <memset>
    ec30:	442c      	add	r4, r5
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ec32:	ee18 3a10 	vmov	r3, s16
    ec36:	2b00      	cmp	r3, #0
    ec38:	dbef      	blt.n	ec1a <dtostrf+0x2f6>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    ec3a:	234e      	movs	r3, #78	; 0x4e
    ec3c:	2241      	movs	r2, #65	; 0x41
    ec3e:	7023      	strb	r3, [r4, #0]
    ec40:	70a3      	strb	r3, [r4, #2]
    ec42:	7062      	strb	r2, [r4, #1]
    ec44:	3403      	adds	r4, #3
    ec46:	e6a8      	b.n	e99a <dtostrf+0x76>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    ec48:	4623      	mov	r3, r4
    ec4a:	e6f1      	b.n	ea30 <dtostrf+0x10c>
    ec4c:	7f7fffff 	.word	0x7f7fffff
    ec50:	00017788 	.word	0x00017788
    ec54:	00017784 	.word	0x00017784

0000ec58 <attachInterruptVector>:
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    ec58:	3010      	adds	r0, #16
    ec5a:	4b02      	ldr	r3, [pc, #8]	; (ec64 <attachInterruptVector+0xc>)
    ec5c:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    ec60:	4770      	bx	lr
    ec62:	bf00      	nop
    ec64:	1fff4400 	.word	0x1fff4400

0000ec68 <rtc_get>:

#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)

unsigned long rtc_get(void)
{
	return RTC_TSR;
    ec68:	4b01      	ldr	r3, [pc, #4]	; (ec70 <rtc_get+0x8>)
    ec6a:	6818      	ldr	r0, [r3, #0]
}
    ec6c:	4770      	bx	lr
    ec6e:	bf00      	nop
    ec70:	4003d000 	.word	0x4003d000

0000ec74 <rtc_set>:

void rtc_set(unsigned long t)
{
    ec74:	b430      	push	{r4, r5}
	RTC_SR = 0;
    ec76:	4b05      	ldr	r3, [pc, #20]	; (ec8c <rtc_set+0x18>)
	RTC_TPR = 0;
    ec78:	4d05      	ldr	r5, [pc, #20]	; (ec90 <rtc_set+0x1c>)
	RTC_TSR = t;
    ec7a:	4c06      	ldr	r4, [pc, #24]	; (ec94 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    ec7c:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    ec7e:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    ec80:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    ec82:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    ec84:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    ec86:	6019      	str	r1, [r3, #0]
}
    ec88:	bc30      	pop	{r4, r5}
    ec8a:	4770      	bx	lr
    ec8c:	4003d014 	.word	0x4003d014
    ec90:	4003d004 	.word	0x4003d004
    ec94:	4003d000 	.word	0x4003d000

0000ec98 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    ec98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    ec9c:	4b8f      	ldr	r3, [pc, #572]	; (eedc <_init_Teensyduino_internal_+0x244>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    ec9e:	4890      	ldr	r0, [pc, #576]	; (eee0 <_init_Teensyduino_internal_+0x248>)
	FTM0_MOD = DEFAULT_FTM_MOD;
    eca0:	f8df c270 	ldr.w	ip, [pc, #624]	; ef14 <_init_Teensyduino_internal_+0x27c>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    eca4:	4c8f      	ldr	r4, [pc, #572]	; (eee4 <_init_Teensyduino_internal_+0x24c>)
	FTM0_C2SC = 0x28;
    eca6:	4990      	ldr	r1, [pc, #576]	; (eee8 <_init_Teensyduino_internal_+0x250>)
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    eca8:	f8df e26c 	ldr.w	lr, [pc, #620]	; ef18 <_init_Teensyduino_internal_+0x280>
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    ecac:	4e8f      	ldr	r6, [pc, #572]	; (eeec <_init_Teensyduino_internal_+0x254>)
	FTM0_C4SC = 0x28;
    ecae:	4d90      	ldr	r5, [pc, #576]	; (eef0 <_init_Teensyduino_internal_+0x258>)
	FTM0_C5SC = 0x28;
    ecb0:	4f90      	ldr	r7, [pc, #576]	; (eef4 <_init_Teensyduino_internal_+0x25c>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    ecb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    ecb6:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    ecb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ecbc:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    ecbe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    ecc2:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    ecc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ecc8:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    ecca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    ecce:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    ecd0:	2200      	movs	r2, #0
    ecd2:	6002      	str	r2, [r0, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    ecd4:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    ecd6:	f64e 70ff 	movw	r0, #61439	; 0xefff
    ecda:	f8cc 0000 	str.w	r0, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    ecde:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    ece2:	6023      	str	r3, [r4, #0]
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    ece4:	f50e 2e01 	add.w	lr, lr, #528384	; 0x81000
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    ece8:	600b      	str	r3, [r1, #0]
	FTM0_C3SC = 0x28;
    ecea:	6033      	str	r3, [r6, #0]
	FTM0_C4SC = 0x28;
    ecec:	602b      	str	r3, [r5, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    ecee:	f506 2600 	add.w	r6, r6, #524288	; 0x80000
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    ecf2:	603b      	str	r3, [r7, #0]
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
    ecf4:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    ecf8:	62a3      	str	r3, [r4, #40]	; 0x28
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    ecfa:	f507 2700 	add.w	r7, r7, #524288	; 0x80000
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
    ecfe:	628b      	str	r3, [r1, #40]	; 0x28
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    ed00:	f504 2401 	add.w	r4, r4, #528384	; 0x81000
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
    ed04:	f501 2101 	add.w	r1, r1, #528384	; 0x81000
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    ed08:	f606 76e8 	addw	r6, r6, #4072	; 0xfe8
	FTM3_C1SC = 0x28;
    ed0c:	f605 75e8 	addw	r5, r5, #4072	; 0xfe8
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
    ed10:	f507 677f 	add.w	r7, r7, #4080	; 0xff0
	FTM3_C4SC = 0x28;
    ed14:	3110      	adds	r1, #16
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
    ed16:	f10e 0e10 	add.w	lr, lr, #16
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
    ed1a:	3420      	adds	r4, #32
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
	FTM0_C7SC = 0x28;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_C0SC = 0x28;
    ed1c:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    ed1e:	602b      	str	r3, [r5, #0]
	FTM3_C2SC = 0x28;
    ed20:	f8ce 3000 	str.w	r3, [lr]
	FTM3_C3SC = 0x28;
    ed24:	603b      	str	r3, [r7, #0]
	FTM3_C4SC = 0x28;
    ed26:	600b      	str	r3, [r1, #0]
	FTM3_C5SC = 0x28;
    ed28:	6023      	str	r3, [r4, #0]
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ed2a:	4c73      	ldr	r4, [pc, #460]	; (eef8 <_init_Teensyduino_internal_+0x260>)
	FTM3_C1SC = 0x28;
	FTM3_C2SC = 0x28;
	FTM3_C3SC = 0x28;
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
    ed2c:	61bb      	str	r3, [r7, #24]
	FTM3_C7SC = 0x28;
    ed2e:	618b      	str	r3, [r1, #24]
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ed30:	2109      	movs	r1, #9
    ed32:	6021      	str	r1, [r4, #0]
	FTM1_CNT = 0;
    ed34:	f5a7 2700 	sub.w	r7, r7, #524288	; 0x80000
	FTM1_MOD = DEFAULT_FTM_MOD;
    ed38:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    ed3c:	3f20      	subs	r7, #32
	FTM1_MOD = DEFAULT_FTM_MOD;
    ed3e:	3408      	adds	r4, #8
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
    ed40:	603a      	str	r2, [r7, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    ed42:	6020      	str	r0, [r4, #0]
	FTM1_C0SC = 0x28;
    ed44:	60bb      	str	r3, [r7, #8]
	FTM1_C1SC = 0x28;
    ed46:	60e3      	str	r3, [r4, #12]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ed48:	f847 1c04 	str.w	r1, [r7, #-4]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    ed4c:	f504 24fd 	add.w	r4, r4, #518144	; 0x7e800
	FTM2_MOD = DEFAULT_FTM_MOD;
    ed50:	f507 27fe 	add.w	r7, r7, #520192	; 0x7f000
    ed54:	3704      	adds	r7, #4
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    ed56:	f204 74fc 	addw	r4, r4, #2044	; 0x7fc
    ed5a:	6022      	str	r2, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    ed5c:	6038      	str	r0, [r7, #0]
	FTM2_C0SC = 0x28;
    ed5e:	60a3      	str	r3, [r4, #8]
	FTM2_C1SC = 0x28;
    ed60:	60fb      	str	r3, [r7, #12]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ed62:	f844 1c04 	str.w	r1, [r4, #-4]
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    ed66:	3408      	adds	r4, #8
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
    ed68:	f604 74fc 	addw	r4, r4, #4092	; 0xffc
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
    ed6c:	f8c7 2ffc 	str.w	r2, [r7, #4092]	; 0xffc
	FTM3_MOD = DEFAULT_FTM_MOD;
    ed70:	6020      	str	r0, [r4, #0]
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    ed72:	f5a4 24e1 	sub.w	r4, r4, #460800	; 0x70800
    ed76:	f2a4 74dc 	subw	r4, r4, #2012	; 0x7dc
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM3_CNT = 0;
	FTM3_MOD = DEFAULT_FTM_MOD;
	FTM3_C0SC = 0x28;
    ed7a:	6033      	str	r3, [r6, #0]
	FTM3_C1SC = 0x28;
    ed7c:	602b      	str	r3, [r5, #0]
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    ed7e:	f8c7 1ff8 	str.w	r1, [r7, #4088]	; 0xff8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    ed82:	6821      	ldr	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    ed84:	485d      	ldr	r0, [pc, #372]	; (eefc <_init_Teensyduino_internal_+0x264>)
	FTM3_C0SC = 0x28;
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
    ed86:	f441 7100 	orr.w	r1, r1, #512	; 0x200
    ed8a:	6021      	str	r1, [r4, #0]
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    ed8c:	6801      	ldr	r1, [r0, #0]
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    ed8e:	4c5c      	ldr	r4, [pc, #368]	; (ef00 <_init_Teensyduino_internal_+0x268>)
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
    ed90:	f50e 4e7f 	add.w	lr, lr, #65280	; 0xff00
    ed94:	f10e 0ee8 	add.w	lr, lr, #232	; 0xe8
	TPM1_MOD = 32767;
    ed98:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	TPM1_C0SC = 0x28;
    ed9c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
	TPM1_C1SC = 0x28;
    eda0:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
	FTM3_C1SC = 0x28;
	FTM3_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
    eda4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
    eda8:	6001      	str	r1, [r0, #0]
	TPM1_CNT = 0;
    edaa:	f8ce 2000 	str.w	r2, [lr]
	TPM1_MOD = 32767;
    edae:	f647 71ff 	movw	r1, #32767	; 0x7fff
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    edb2:	2208      	movs	r2, #8
#endif
#if defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_TPM1;
	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(2);
	TPM1_CNT = 0;
	TPM1_MOD = 32767;
    edb4:	6039      	str	r1, [r7, #0]
	TPM1_C0SC = 0x28;
    edb6:	6033      	str	r3, [r6, #0]
	TPM1_C1SC = 0x28;
    edb8:	602b      	str	r3, [r5, #0]
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
    edba:	6022      	str	r2, [r4, #0]
#endif
	analog_init();
    edbc:	f7ff fb68 	bl	e490 <analog_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    edc0:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    edc2:	4c50      	ldr	r4, [pc, #320]	; (ef04 <_init_Teensyduino_internal_+0x26c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    edc4:	4b50      	ldr	r3, [pc, #320]	; (ef08 <_init_Teensyduino_internal_+0x270>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    edc6:	4a51      	ldr	r2, [pc, #324]	; (ef0c <_init_Teensyduino_internal_+0x274>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    edc8:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    edca:	6825      	ldr	r5, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    edcc:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    edce:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    edd0:	0151      	lsls	r1, r2, #5
    edd2:	d502      	bpl.n	edda <_init_Teensyduino_internal_+0x142>
    edd4:	2b32      	cmp	r3, #50	; 0x32
    edd6:	bf88      	it	hi
    edd8:	3501      	addhi	r5, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    edda:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    edde:	f203 331f 	addw	r3, r3, #799	; 0x31f
    ede2:	4f4b      	ldr	r7, [pc, #300]	; (ef10 <_init_Teensyduino_internal_+0x278>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ede4:	f8df 9120 	ldr.w	r9, [pc, #288]	; ef08 <_init_Teensyduino_internal_+0x270>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ede8:	f8df 8120 	ldr.w	r8, [pc, #288]	; ef0c <_init_Teensyduino_internal_+0x274>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    edec:	089b      	lsrs	r3, r3, #2
    edee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    edf2:	fba7 1303 	umull	r1, r3, r7, r3
    edf6:	fb02 f505 	mul.w	r5, r2, r5
    edfa:	eb05 0593 	add.w	r5, r5, r3, lsr #2
    edfe:	2619      	movs	r6, #25

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ee00:	b672      	cpsid	i
	current = SYST_CVR;
    ee02:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    ee06:	6822      	ldr	r2, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee08:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    ee0c:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    ee0e:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    ee12:	f203 331f 	addw	r3, r3, #799	; 0x31f
    ee16:	089b      	lsrs	r3, r3, #2
    ee18:	fba7 0303 	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee1c:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    ee20:	ebc5 0393 	rsb	r3, r5, r3, lsr #2
    ee24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee28:	d002      	beq.n	ee30 <_init_Teensyduino_internal_+0x198>
    ee2a:	2932      	cmp	r1, #50	; 0x32
    ee2c:	bf88      	it	hi
    ee2e:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    ee30:	fb00 3302 	mla	r3, r0, r2, r3
    ee34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    ee38:	d304      	bcc.n	ee44 <_init_Teensyduino_internal_+0x1ac>
				ms--;
				if (ms == 0) return;
    ee3a:	3e01      	subs	r6, #1
    ee3c:	d005      	beq.n	ee4a <_init_Teensyduino_internal_+0x1b2>
				start += 1000;
    ee3e:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    ee42:	e7dd      	b.n	ee00 <_init_Teensyduino_internal_+0x168>
			}
			yield();
    ee44:	f001 fe74 	bl	10b30 <yield>
    ee48:	e7da      	b.n	ee00 <_init_Teensyduino_internal_+0x168>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
    ee4a:	f001 fbd9 	bl	10600 <usb_init>

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ee4e:	b672      	cpsid	i
	current = SYST_CVR;
    ee50:	4b2d      	ldr	r3, [pc, #180]	; (ef08 <_init_Teensyduino_internal_+0x270>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee52:	4a2e      	ldr	r2, [pc, #184]	; (ef0c <_init_Teensyduino_internal_+0x274>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ee54:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    ee56:	6825      	ldr	r5, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee58:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    ee5a:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ee5c:	0152      	lsls	r2, r2, #5
    ee5e:	d502      	bpl.n	ee66 <_init_Teensyduino_internal_+0x1ce>
    ee60:	2b32      	cmp	r3, #50	; 0x32
    ee62:	bf88      	it	hi
    ee64:	3501      	addhi	r5, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ee66:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    ee6a:	f203 331f 	addw	r3, r3, #799	; 0x31f
    ee6e:	4f28      	ldr	r7, [pc, #160]	; (ef10 <_init_Teensyduino_internal_+0x278>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    ee70:	f8df 9094 	ldr.w	r9, [pc, #148]	; ef08 <_init_Teensyduino_internal_+0x270>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee74:	f8df 8094 	ldr.w	r8, [pc, #148]	; ef0c <_init_Teensyduino_internal_+0x274>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    ee78:	089b      	lsrs	r3, r3, #2
    ee7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ee7e:	fba7 1303 	umull	r1, r3, r7, r3
    ee82:	fb02 f505 	mul.w	r5, r2, r5
    ee86:	eb05 0593 	add.w	r5, r5, r3, lsr #2
    ee8a:	f240 1613 	movw	r6, #275	; 0x113

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    ee8e:	b672      	cpsid	i
	current = SYST_CVR;
    ee90:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    ee94:	6822      	ldr	r2, [r4, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    ee96:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    ee9a:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    ee9c:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    eea0:	f203 331f 	addw	r3, r3, #799	; 0x31f
    eea4:	089b      	lsrs	r3, r3, #2
    eea6:	fba7 0303 	umull	r0, r3, r7, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    eeaa:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    eeae:	ebc5 0393 	rsb	r3, r5, r3, lsr #2
    eeb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    eeb6:	d002      	beq.n	eebe <_init_Teensyduino_internal_+0x226>
    eeb8:	2932      	cmp	r1, #50	; 0x32
    eeba:	bf88      	it	hi
    eebc:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    eebe:	fb00 3302 	mla	r3, r0, r2, r3
    eec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    eec6:	d304      	bcc.n	eed2 <_init_Teensyduino_internal_+0x23a>
				ms--;
				if (ms == 0) return;
    eec8:	3e01      	subs	r6, #1
    eeca:	d005      	beq.n	eed8 <_init_Teensyduino_internal_+0x240>
				start += 1000;
    eecc:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    eed0:	e7dd      	b.n	ee8e <_init_Teensyduino_internal_+0x1f6>
			}
			yield();
    eed2:	f001 fe2d 	bl	10b30 <yield>
    eed6:	e7da      	b.n	ee8e <_init_Teensyduino_internal_+0x1f6>
    eed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eedc:	e000e104 	.word	0xe000e104
    eee0:	40038004 	.word	0x40038004
    eee4:	40038014 	.word	0x40038014
    eee8:	4003801c 	.word	0x4003801c
    eeec:	40038024 	.word	0x40038024
    eef0:	4003802c 	.word	0x4003802c
    eef4:	40038034 	.word	0x40038034
    eef8:	40038000 	.word	0x40038000
    eefc:	40048004 	.word	0x40048004
    ef00:	400c9000 	.word	0x400c9000
    ef04:	1fff6804 	.word	0x1fff6804
    ef08:	e000e018 	.word	0xe000e018
    ef0c:	e000ed04 	.word	0xe000ed04
    ef10:	16c16c17 	.word	0x16c16c17
    ef14:	40038008 	.word	0x40038008
    ef18:	4003800c 	.word	0x4003800c

0000ef1c <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    ef1c:	283f      	cmp	r0, #63	; 0x3f
    ef1e:	d80c      	bhi.n	ef3a <digitalWrite+0x1e>


// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
    ef20:	b410      	push	{r4}
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    ef22:	4b0f      	ldr	r3, [pc, #60]	; (ef60 <digitalWrite+0x44>)
    ef24:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    ef28:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    ef2c:	b134      	cbz	r4, ef3c <digitalWrite+0x20>
		if (val) {
			*portSetRegister(pin) = 1;
    ef2e:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    ef30:	b179      	cbz	r1, ef52 <digitalWrite+0x36>
			*portSetRegister(pin) = 1;
    ef32:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    ef36:	f85d 4b04 	ldr.w	r4, [sp], #4
    ef3a:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    ef3c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ef40:	6843      	ldr	r3, [r0, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ef42:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    ef44:	b941      	cbnz	r1, ef58 <digitalWrite+0x3c>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    ef46:	f022 0202 	bic.w	r2, r2, #2
    ef4a:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    ef4c:	f85d 4b04 	ldr.w	r4, [sp], #4
    ef50:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    ef52:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    ef56:	e7f9      	b.n	ef4c <digitalWrite+0x30>
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    ef58:	f042 0203 	orr.w	r2, r2, #3
    ef5c:	601a      	str	r2, [r3, #0]
    ef5e:	e7f5      	b.n	ef4c <digitalWrite+0x30>
    ef60:	0001778c 	.word	0x0001778c

0000ef64 <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    ef64:	283f      	cmp	r0, #63	; 0x3f
    ef66:	d806      	bhi.n	ef76 <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    ef68:	4b04      	ldr	r3, [pc, #16]	; (ef7c <digitalRead+0x18>)
    ef6a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    ef6e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    ef72:	b2c0      	uxtb	r0, r0
    ef74:	4770      	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    ef76:	2000      	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    ef78:	4770      	bx	lr
    ef7a:	bf00      	nop
    ef7c:	0001778c 	.word	0x0001778c

0000ef80 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    ef80:	283f      	cmp	r0, #63	; 0x3f
    ef82:	d820      	bhi.n	efc6 <pinMode+0x46>
	config = portConfigRegister(pin);
    ef84:	4a1b      	ldr	r2, [pc, #108]	; (eff4 <pinMode+0x74>)
    ef86:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ef8a:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    ef8c:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ef8e:	d00f      	beq.n	efb0 <pinMode+0x30>
    ef90:	2904      	cmp	r1, #4
    ef92:	d01d      	beq.n	efd0 <pinMode+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    ef94:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    ef98:	2200      	movs	r2, #0
    ef9a:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    ef9e:	b199      	cbz	r1, efc8 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    efa0:	2902      	cmp	r1, #2
    efa2:	d022      	beq.n	efea <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    efa4:	2903      	cmp	r1, #3
    efa6:	d10d      	bne.n	efc4 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    efa8:	f44f 7281 	mov.w	r2, #258	; 0x102
    efac:	601a      	str	r2, [r3, #0]
    efae:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    efb0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    efb4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    efb8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    efbc:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    efbe:	681a      	ldr	r2, [r3, #0]
    efc0:	f022 0220 	bic.w	r2, r2, #32
    efc4:	601a      	str	r2, [r3, #0]
    efc6:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    efc8:	f44f 7280 	mov.w	r2, #256	; 0x100
    efcc:	601a      	str	r2, [r3, #0]
    efce:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    efd0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    efd4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    efd8:	2001      	movs	r0, #1
    efda:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    efde:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    efe0:	681a      	ldr	r2, [r3, #0]
    efe2:	f042 0220 	orr.w	r2, r2, #32
    efe6:	601a      	str	r2, [r3, #0]
    efe8:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    efea:	f240 1203 	movw	r2, #259	; 0x103
    efee:	601a      	str	r2, [r3, #0]
    eff0:	4770      	bx	lr
    eff2:	bf00      	nop
    eff4:	0001778c 	.word	0x0001778c

0000eff8 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    eff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    effc:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    effe:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    f000:	4f22      	ldr	r7, [pc, #136]	; (f08c <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    f002:	4b23      	ldr	r3, [pc, #140]	; (f090 <delay+0x98>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    f004:	4a23      	ldr	r2, [pc, #140]	; (f094 <delay+0x9c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    f006:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    f008:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    f00a:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    f00c:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    f00e:	0152      	lsls	r2, r2, #5
    f010:	d502      	bpl.n	f018 <delay+0x20>
    f012:	2b32      	cmp	r3, #50	; 0x32
    f014:	bf88      	it	hi
    f016:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    f018:	b3b5      	cbz	r5, f088 <delay+0x90>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    f01a:	f5c3 332f 	rsb	r3, r3, #179200	; 0x2bc00
    f01e:	f203 331f 	addw	r3, r3, #799	; 0x31f
    f022:	4e1d      	ldr	r6, [pc, #116]	; (f098 <delay+0xa0>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    f024:	f8df 9068 	ldr.w	r9, [pc, #104]	; f090 <delay+0x98>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    f028:	f8df 8068 	ldr.w	r8, [pc, #104]	; f094 <delay+0x9c>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    f02c:	089b      	lsrs	r3, r3, #2
    f02e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f032:	fba6 1303 	umull	r1, r3, r6, r3
    f036:	fb02 f404 	mul.w	r4, r2, r4
    f03a:	eb04 0493 	add.w	r4, r4, r3, lsr #2

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    f03e:	b672      	cpsid	i
	current = SYST_CVR;
    f040:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    f044:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    f046:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    f04a:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    f04c:	f5c1 332f 	rsb	r3, r1, #179200	; 0x2bc00
    f050:	f203 331f 	addw	r3, r3, #799	; 0x31f
    f054:	089b      	lsrs	r3, r3, #2
    f056:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    f05a:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    f05e:	ebc4 0393 	rsb	r3, r4, r3, lsr #2
    f062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    f066:	d002      	beq.n	f06e <delay+0x76>
    f068:	2932      	cmp	r1, #50	; 0x32
    f06a:	bf88      	it	hi
    f06c:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    f06e:	fb00 3302 	mla	r3, r0, r2, r3
    f072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    f076:	d304      	bcc.n	f082 <delay+0x8a>
				ms--;
				if (ms == 0) return;
    f078:	3d01      	subs	r5, #1
    f07a:	d005      	beq.n	f088 <delay+0x90>
				start += 1000;
    f07c:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    f080:	e7dd      	b.n	f03e <delay+0x46>
			}
			yield();
    f082:	f001 fd55 	bl	10b30 <yield>
		}
    f086:	e7da      	b.n	f03e <delay+0x46>
    f088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f08c:	1fff6804 	.word	0x1fff6804
    f090:	e000e018 	.word	0xe000e018
    f094:	e000ed04 	.word	0xe000ed04
    f098:	16c16c17 	.word	0x16c16c17

0000f09c <serial_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    f09c:	4a32      	ldr	r2, [pc, #200]	; (f168 <serial_begin+0xcc>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    f09e:	4933      	ldr	r1, [pc, #204]	; (f16c <serial_begin+0xd0>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    f0a0:	6813      	ldr	r3, [r2, #0]
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
    f0a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
    f0a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    f0a8:	6013      	str	r3, [r2, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    f0aa:	780a      	ldrb	r2, [r1, #0]
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    f0ac:	4f30      	ldr	r7, [pc, #192]	; (f170 <serial_begin+0xd4>)
	rx_buffer_tail = 0;
    f0ae:	4e31      	ldr	r6, [pc, #196]	; (f174 <serial_begin+0xd8>)
	tx_buffer_head = 0;
    f0b0:	4d31      	ldr	r5, [pc, #196]	; (f178 <serial_begin+0xdc>)
	tx_buffer_tail = 0;
    f0b2:	4c32      	ldr	r4, [pc, #200]	; (f17c <serial_begin+0xe0>)
	transmitting = 0;
    f0b4:	4932      	ldr	r1, [pc, #200]	; (f180 <serial_begin+0xe4>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    f0b6:	2300      	movs	r3, #0
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    f0b8:	2a15      	cmp	r2, #21
#define C2_TX_INACTIVE		C2_ENABLE

void serial_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART0;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    f0ba:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    f0bc:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    f0be:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    f0c0:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    f0c2:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    f0c4:	d045      	beq.n	f152 <serial_begin+0xb6>
    f0c6:	2a1b      	cmp	r2, #27
    f0c8:	d03e      	beq.n	f148 <serial_begin+0xac>
    f0ca:	b382      	cbz	r2, f12e <serial_begin+0x92>
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    f0cc:	4b2d      	ldr	r3, [pc, #180]	; (f184 <serial_begin+0xe8>)
    f0ce:	781b      	ldrb	r3, [r3, #0]
    f0d0:	2b05      	cmp	r3, #5
    f0d2:	d034      	beq.n	f13e <serial_begin+0xa2>
    f0d4:	2b1a      	cmp	r3, #26
    f0d6:	d041      	beq.n	f15c <serial_begin+0xc0>
    f0d8:	2b01      	cmp	r3, #1
    f0da:	d01b      	beq.n	f114 <serial_begin+0x78>
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    f0dc:	281f      	cmp	r0, #31
    f0de:	d81f      	bhi.n	f120 <serial_begin+0x84>
    f0e0:	2000      	movs	r0, #0
    f0e2:	4602      	mov	r2, r0
    f0e4:	2501      	movs	r5, #1
	UART0_BDH = (divisor >> 13) & 0x1F;
    f0e6:	4b28      	ldr	r3, [pc, #160]	; (f188 <serial_begin+0xec>)
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    f0e8:	4c28      	ldr	r4, [pc, #160]	; (f18c <serial_begin+0xf0>)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
    f0ea:	701a      	strb	r2, [r3, #0]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    f0ec:	4928      	ldr	r1, [pc, #160]	; (f190 <serial_begin+0xf4>)
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
    f0ee:	705d      	strb	r5, [r3, #1]
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    f0f0:	2204      	movs	r2, #4
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    f0f2:	f04f 0e02 	mov.w	lr, #2
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    f0f6:	2788      	movs	r7, #136	; 0x88
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    f0f8:	263c      	movs	r6, #60	; 0x3c
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    f0fa:	2540      	movs	r5, #64	; 0x40
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
    f0fc:	7298      	strb	r0, [r3, #10]
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
    f0fe:	709a      	strb	r2, [r3, #2]
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    f100:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
	UART0_BDH = (divisor >> 13) & 0x1F;
	UART0_BDL = (divisor >> 5) & 0xFF;
	UART0_C4 = divisor & 0x1F;
#ifdef HAS_KINETISK_UART0_FIFO
	UART0_C1 = UART_C1_ILT;
	UART0_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    f104:	f883 e013 	strb.w	lr, [r3, #19]
	UART0_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    f108:	755a      	strb	r2, [r3, #21]
	UART0_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    f10a:	741f      	strb	r7, [r3, #16]
	if (divisor < 1) divisor = 1;
	UART0_BDH = (divisor >> 8) & 0x1F;
	UART0_BDL = divisor & 0xFF;
	UART0_C1 = 0;
#endif
	UART0_C2 = C2_TX_INACTIVE;
    f10c:	70de      	strb	r6, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART0_STATUS, IRQ_PRIORITY);
    f10e:	7025      	strb	r5, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_UART0_STATUS);
    f110:	6008      	str	r0, [r1, #0]
    f112:	bdf0      	pop	{r4, r5, r6, r7, pc}
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    f114:	4b1f      	ldr	r3, [pc, #124]	; (f194 <serial_begin+0xf8>)
    f116:	f44f 7251 	mov.w	r2, #836	; 0x344
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    f11a:	281f      	cmp	r0, #31
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    f11c:	601a      	str	r2, [r3, #0]
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#endif
	}
#if defined(HAS_KINETISK_UART0)
	if (divisor < 32) divisor = 32;
    f11e:	d9df      	bls.n	f0e0 <serial_begin+0x44>
    f120:	f3c0 3244 	ubfx	r2, r0, #13, #5
    f124:	f3c0 1547 	ubfx	r5, r0, #5, #8
    f128:	f000 001f 	and.w	r0, r0, #31
    f12c:	e7db      	b.n	f0e6 <serial_begin+0x4a>
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f12e:	4b1a      	ldr	r3, [pc, #104]	; (f198 <serial_begin+0xfc>)
    f130:	f240 3213 	movw	r2, #787	; 0x313
    f134:	601a      	str	r2, [r3, #0]
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    f136:	4b13      	ldr	r3, [pc, #76]	; (f184 <serial_begin+0xe8>)
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	2b05      	cmp	r3, #5
    f13c:	d1ca      	bne.n	f0d4 <serial_begin+0x38>
		case 1:  CORE_PIN1_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 5:  CORE_PIN5_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    f13e:	4b17      	ldr	r3, [pc, #92]	; (f19c <serial_begin+0x100>)
    f140:	f44f 7251 	mov.w	r2, #836	; 0x344
    f144:	601a      	str	r2, [r3, #0]
    f146:	e7c9      	b.n	f0dc <serial_begin+0x40>
		#if defined(KINETISL)
		case 3:  CORE_PIN3_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(2); break;
		case 25: CORE_PIN25_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(4); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 27: CORE_PIN27_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f148:	4b15      	ldr	r3, [pc, #84]	; (f1a0 <serial_begin+0x104>)
    f14a:	f240 3213 	movw	r2, #787	; 0x313
    f14e:	601a      	str	r2, [r3, #0]
    f150:	e7bc      	b.n	f0cc <serial_begin+0x30>
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 0:  CORE_PIN0_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 21: CORE_PIN21_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f152:	4b14      	ldr	r3, [pc, #80]	; (f1a4 <serial_begin+0x108>)
    f154:	f240 3213 	movw	r2, #787	; 0x313
    f158:	601a      	str	r2, [r3, #0]
    f15a:	e7b7      	b.n	f0cc <serial_begin+0x30>
		#if defined(KINETISL)
		case 4:  CORE_PIN4_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(2); break;
		case 24: CORE_PIN24_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(4); break;
		#endif
		#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		case 26: CORE_PIN26_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    f15c:	4b12      	ldr	r3, [pc, #72]	; (f1a8 <serial_begin+0x10c>)
    f15e:	f44f 7251 	mov.w	r2, #836	; 0x344
    f162:	601a      	str	r2, [r3, #0]
    f164:	e7ba      	b.n	f0dc <serial_begin+0x40>
    f166:	bf00      	nop
    f168:	40048034 	.word	0x40048034
    f16c:	1fff6850 	.word	0x1fff6850
    f170:	1fff6894 	.word	0x1fff6894
    f174:	1fff680d 	.word	0x1fff680d
    f178:	1fff689c 	.word	0x1fff689c
    f17c:	1fff6895 	.word	0x1fff6895
    f180:	1fff680c 	.word	0x1fff680c
    f184:	1fff4afc 	.word	0x1fff4afc
    f188:	4006a000 	.word	0x4006a000
    f18c:	e000e41f 	.word	0xe000e41f
    f190:	e000e100 	.word	0xe000e100
    f194:	4004a044 	.word	0x4004a044
    f198:	4004a040 	.word	0x4004a040
    f19c:	4004c01c 	.word	0x4004c01c
    f1a0:	4004903c 	.word	0x4004903c
    f1a4:	4004c018 	.word	0x4004c018
    f1a8:	40049038 	.word	0x40049038

0000f1ac <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f1ac:	4a05      	ldr	r2, [pc, #20]	; (f1c4 <serial_available+0x18>)
	tail = rx_buffer_tail;
    f1ae:	4b06      	ldr	r3, [pc, #24]	; (f1c8 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f1b0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    f1b2:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f1b4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    f1b6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    f1b8:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    f1ba:	bf38      	it	cc
    f1bc:	3040      	addcc	r0, #64	; 0x40
    f1be:	1ac0      	subs	r0, r0, r3
}
    f1c0:	4770      	bx	lr
    f1c2:	bf00      	nop
    f1c4:	1fff6894 	.word	0x1fff6894
    f1c8:	1fff680d 	.word	0x1fff680d

0000f1cc <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    f1cc:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    f1ce:	4b38      	ldr	r3, [pc, #224]	; (f2b0 <uart0_status_isr+0xe4>)
    f1d0:	791a      	ldrb	r2, [r3, #4]
    f1d2:	f012 0f30 	tst.w	r2, #48	; 0x30
    f1d6:	d02c      	beq.n	f232 <uart0_status_isr+0x66>
		__disable_irq();
    f1d8:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    f1da:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    f1dc:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f1e0:	2900      	cmp	r1, #0
    f1e2:	d03d      	beq.n	f260 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    f1e4:	b662      	cpsie	i
			head = rx_buffer_head;
    f1e6:	4f33      	ldr	r7, [pc, #204]	; (f2b4 <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    f1e8:	4933      	ldr	r1, [pc, #204]	; (f2b8 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    f1ea:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    f1ec:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    f1ee:	4e33      	ldr	r6, [pc, #204]	; (f2bc <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    f1f0:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    f1f2:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    f1f4:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    f1f6:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    f1f8:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    f1fa:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    f1fc:	bf28      	it	cs
    f1fe:	2300      	movcs	r3, #0
				if (newhead != tail) {
    f200:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    f202:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    f206:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    f208:	bf1c      	itt	ne
    f20a:	54f1      	strbne	r1, [r6, r3]
    f20c:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    f20e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    f212:	d1f0      	bne.n	f1f6 <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    f214:	4b2a      	ldr	r3, [pc, #168]	; (f2c0 <uart0_status_isr+0xf4>)
    f216:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    f218:	b2c2      	uxtb	r2, r0
    f21a:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    f21c:	b14b      	cbz	r3, f232 <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    f21e:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    f220:	bf36      	itet	cc
    f222:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    f226:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    f228:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    f22a:	2827      	cmp	r0, #39	; 0x27
    f22c:	bfc4      	itt	gt
    f22e:	2201      	movgt	r2, #1
    f230:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    f232:	491f      	ldr	r1, [pc, #124]	; (f2b0 <uart0_status_isr+0xe4>)
    f234:	78ca      	ldrb	r2, [r1, #3]
    f236:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    f238:	0615      	lsls	r5, r2, #24
    f23a:	d416      	bmi.n	f26a <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    f23c:	0652      	lsls	r2, r2, #25
    f23e:	d50d      	bpl.n	f25c <uart0_status_isr+0x90>
    f240:	4b1b      	ldr	r3, [pc, #108]	; (f2b0 <uart0_status_isr+0xe4>)
    f242:	791b      	ldrb	r3, [r3, #4]
    f244:	065b      	lsls	r3, r3, #25
    f246:	d509      	bpl.n	f25c <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    f248:	4b1e      	ldr	r3, [pc, #120]	; (f2c4 <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    f24a:	491f      	ldr	r1, [pc, #124]	; (f2c8 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    f24c:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    f24e:	2200      	movs	r2, #0
    f250:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    f252:	b103      	cbz	r3, f256 <uart0_status_isr+0x8a>
    f254:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    f256:	4b16      	ldr	r3, [pc, #88]	; (f2b0 <uart0_status_isr+0xe4>)
    f258:	223c      	movs	r2, #60	; 0x3c
    f25a:	70da      	strb	r2, [r3, #3]
	}
}
    f25c:	bcf0      	pop	{r4, r5, r6, r7}
    f25e:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    f260:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    f262:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    f264:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    f266:	b662      	cpsie	i
    f268:	e7e3      	b.n	f232 <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    f26a:	790b      	ldrb	r3, [r1, #4]
    f26c:	061c      	lsls	r4, r3, #24
    f26e:	d5e5      	bpl.n	f23c <uart0_status_isr+0x70>
		head = tx_buffer_head;
    f270:	4b16      	ldr	r3, [pc, #88]	; (f2cc <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    f272:	4e17      	ldr	r6, [pc, #92]	; (f2d0 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    f274:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    f276:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    f278:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    f27a:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    f27c:	429c      	cmp	r4, r3
    f27e:	d00e      	beq.n	f29e <uart0_status_isr+0xd2>
    f280:	4d14      	ldr	r5, [pc, #80]	; (f2d4 <uart0_status_isr+0x108>)
    f282:	e001      	b.n	f288 <uart0_status_isr+0xbc>
    f284:	42a3      	cmp	r3, r4
    f286:	d00a      	beq.n	f29e <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    f288:	3301      	adds	r3, #1
    f28a:	2b40      	cmp	r3, #64	; 0x40
    f28c:	bf28      	it	cs
    f28e:	2300      	movcs	r3, #0
			avail = UART0_S1;
    f290:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    f292:	5ce8      	ldrb	r0, [r5, r3]
    f294:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    f296:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    f298:	7d08      	ldrb	r0, [r1, #20]
    f29a:	2807      	cmp	r0, #7
    f29c:	d9f2      	bls.n	f284 <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    f29e:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    f2a0:	4903      	ldr	r1, [pc, #12]	; (f2b0 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    f2a2:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    f2a4:	790b      	ldrb	r3, [r1, #4]
    f2a6:	0618      	lsls	r0, r3, #24
    f2a8:	bf44      	itt	mi
    f2aa:	237c      	movmi	r3, #124	; 0x7c
    f2ac:	70cb      	strbmi	r3, [r1, #3]
    f2ae:	e7c5      	b.n	f23c <uart0_status_isr+0x70>
    f2b0:	4006a000 	.word	0x4006a000
    f2b4:	1fff6894 	.word	0x1fff6894
    f2b8:	1fff680d 	.word	0x1fff680d
    f2bc:	1fff6854 	.word	0x1fff6854
    f2c0:	1fff6808 	.word	0x1fff6808
    f2c4:	1fff6898 	.word	0x1fff6898
    f2c8:	1fff680c 	.word	0x1fff680c
    f2cc:	1fff689c 	.word	0x1fff689c
    f2d0:	1fff6895 	.word	0x1fff6895
    f2d4:	1fff6810 	.word	0x1fff6810

0000f2d8 <serial4_begin>:
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial4_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART3;	// turn on clock, TODO: use bitband
    f2d8:	4a28      	ldr	r2, [pc, #160]	; (f37c <serial4_begin+0xa4>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    f2da:	4929      	ldr	r1, [pc, #164]	; (f380 <serial4_begin+0xa8>)
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial4_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART3;	// turn on clock, TODO: use bitband
    f2dc:	6813      	ldr	r3, [r2, #0]
#define C2_TX_ACTIVE		C2_ENABLE | UART_C2_TIE
#define C2_TX_COMPLETING	C2_ENABLE | UART_C2_TCIE
#define C2_TX_INACTIVE		C2_ENABLE

void serial4_begin(uint32_t divisor)
{
    f2de:	b4f0      	push	{r4, r5, r6, r7}
	SIM_SCGC4 |= SIM_SCGC4_UART3;	// turn on clock, TODO: use bitband
    f2e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    f2e4:	6013      	str	r3, [r2, #0]
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    f2e6:	780a      	ldrb	r2, [r1, #0]
#define C2_TX_INACTIVE		C2_ENABLE

void serial4_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART3;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    f2e8:	4f26      	ldr	r7, [pc, #152]	; (f384 <serial4_begin+0xac>)
	rx_buffer_tail = 0;
    f2ea:	4e27      	ldr	r6, [pc, #156]	; (f388 <serial4_begin+0xb0>)
	tx_buffer_head = 0;
    f2ec:	4d27      	ldr	r5, [pc, #156]	; (f38c <serial4_begin+0xb4>)
	tx_buffer_tail = 0;
    f2ee:	4c28      	ldr	r4, [pc, #160]	; (f390 <serial4_begin+0xb8>)
	transmitting = 0;
    f2f0:	4928      	ldr	r1, [pc, #160]	; (f394 <serial4_begin+0xbc>)
#define C2_TX_INACTIVE		C2_ENABLE

void serial4_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART3;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    f2f2:	2300      	movs	r3, #0
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
    f2f4:	2a1f      	cmp	r2, #31
#define C2_TX_INACTIVE		C2_ENABLE

void serial4_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART3;	// turn on clock, TODO: use bitband
	rx_buffer_head = 0;
    f2f6:	703b      	strb	r3, [r7, #0]
	rx_buffer_tail = 0;
    f2f8:	7033      	strb	r3, [r6, #0]
	tx_buffer_head = 0;
    f2fa:	702b      	strb	r3, [r5, #0]
	tx_buffer_tail = 0;
    f2fc:	7023      	strb	r3, [r4, #0]
	transmitting = 0;
    f2fe:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    f300:	d037      	beq.n	f372 <serial4_begin+0x9a>
    f302:	2a3f      	cmp	r2, #63	; 0x3f
    f304:	d01b      	beq.n	f33e <serial4_begin+0x66>
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
	}
	switch (tx_pin_num) {
    f306:	4b24      	ldr	r3, [pc, #144]	; (f398 <serial4_begin+0xc0>)
    f308:	781b      	ldrb	r3, [r3, #0]
    f30a:	2b20      	cmp	r3, #32
    f30c:	d01f      	beq.n	f34e <serial4_begin+0x76>
    f30e:	2b3e      	cmp	r3, #62	; 0x3e
    f310:	d02a      	beq.n	f368 <serial4_begin+0x90>
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
	if (divisor < 32) divisor = 32;
    f312:	281f      	cmp	r0, #31
    f314:	d821      	bhi.n	f35a <serial4_begin+0x82>
    f316:	2000      	movs	r0, #0
    f318:	4602      	mov	r2, r0
    f31a:	2401      	movs	r4, #1
	UART3_BDH = (divisor >> 13) & 0x1F;
    f31c:	4b1f      	ldr	r3, [pc, #124]	; (f39c <serial4_begin+0xc4>)
	UART3_BDL = (divisor >> 5) & 0xFF;
	UART3_C4 = divisor & 0x1F;
	UART3_C1 = 0;
	UART3_PFIFO = 0;
	UART3_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART3_STATUS, IRQ_PRIORITY);
    f31e:	4d20      	ldr	r5, [pc, #128]	; (f3a0 <serial4_begin+0xc8>)
	switch (tx_pin_num) {
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
	if (divisor < 32) divisor = 32;
	UART3_BDH = (divisor >> 13) & 0x1F;
    f320:	701a      	strb	r2, [r3, #0]
	UART3_BDL = (divisor >> 5) & 0xFF;
	UART3_C4 = divisor & 0x1F;
	UART3_C1 = 0;
	UART3_PFIFO = 0;
	UART3_C2 = C2_TX_INACTIVE;
    f322:	272c      	movs	r7, #44	; 0x2c
	}
	if (divisor < 32) divisor = 32;
	UART3_BDH = (divisor >> 13) & 0x1F;
	UART3_BDL = (divisor >> 5) & 0xFF;
	UART3_C4 = divisor & 0x1F;
	UART3_C1 = 0;
    f324:	2200      	movs	r2, #0
	UART3_PFIFO = 0;
	UART3_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART3_STATUS, IRQ_PRIORITY);
    f326:	2640      	movs	r6, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART3_STATUS);
    f328:	491e      	ldr	r1, [pc, #120]	; (f3a4 <serial4_begin+0xcc>)
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
	if (divisor < 32) divisor = 32;
	UART3_BDH = (divisor >> 13) & 0x1F;
	UART3_BDL = (divisor >> 5) & 0xFF;
    f32a:	705c      	strb	r4, [r3, #1]
	UART3_C4 = divisor & 0x1F;
    f32c:	7298      	strb	r0, [r3, #10]
	UART3_C1 = 0;
	UART3_PFIFO = 0;
	UART3_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART3_STATUS, IRQ_PRIORITY);
	NVIC_ENABLE_IRQ(IRQ_UART3_STATUS);
    f32e:	2420      	movs	r4, #32
	}
	if (divisor < 32) divisor = 32;
	UART3_BDH = (divisor >> 13) & 0x1F;
	UART3_BDL = (divisor >> 5) & 0xFF;
	UART3_C4 = divisor & 0x1F;
	UART3_C1 = 0;
    f330:	709a      	strb	r2, [r3, #2]
	UART3_PFIFO = 0;
    f332:	741a      	strb	r2, [r3, #16]
	UART3_C2 = C2_TX_INACTIVE;
    f334:	70df      	strb	r7, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART3_STATUS, IRQ_PRIORITY);
    f336:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_UART3_STATUS);
    f338:	600c      	str	r4, [r1, #0]
}
    f33a:	bcf0      	pop	{r4, r5, r6, r7}
    f33c:	4770      	bx	lr
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f33e:	4b1a      	ldr	r3, [pc, #104]	; (f3a8 <serial4_begin+0xd0>)
    f340:	f240 3213 	movw	r2, #787	; 0x313
    f344:	601a      	str	r2, [r3, #0]
	}
	switch (tx_pin_num) {
    f346:	4b14      	ldr	r3, [pc, #80]	; (f398 <serial4_begin+0xc0>)
    f348:	781b      	ldrb	r3, [r3, #0]
    f34a:	2b20      	cmp	r3, #32
    f34c:	d1df      	bne.n	f30e <serial4_begin+0x36>
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    f34e:	4b17      	ldr	r3, [pc, #92]	; (f3ac <serial4_begin+0xd4>)
    f350:	f44f 7251 	mov.w	r2, #836	; 0x344
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
	if (divisor < 32) divisor = 32;
    f354:	281f      	cmp	r0, #31
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
	}
	switch (tx_pin_num) {
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    f356:	601a      	str	r2, [r3, #0]
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
	}
	if (divisor < 32) divisor = 32;
    f358:	d9dd      	bls.n	f316 <serial4_begin+0x3e>
    f35a:	f3c0 3244 	ubfx	r2, r0, #13, #5
    f35e:	f3c0 1447 	ubfx	r4, r0, #5, #8
    f362:	f000 001f 	and.w	r0, r0, #31
    f366:	e7d9      	b.n	f31c <serial4_begin+0x44>
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
	}
	switch (tx_pin_num) {
		case 32: CORE_PIN32_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		case 62: CORE_PIN62_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    f368:	4b11      	ldr	r3, [pc, #68]	; (f3b0 <serial4_begin+0xd8>)
    f36a:	f44f 7251 	mov.w	r2, #836	; 0x344
    f36e:	601a      	str	r2, [r3, #0]
    f370:	e7cf      	b.n	f312 <serial4_begin+0x3a>
	rx_buffer_tail = 0;
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f372:	4b10      	ldr	r3, [pc, #64]	; (f3b4 <serial4_begin+0xdc>)
    f374:	f240 3213 	movw	r2, #787	; 0x313
    f378:	601a      	str	r2, [r3, #0]
    f37a:	e7c4      	b.n	f306 <serial4_begin+0x2e>
    f37c:	40048034 	.word	0x40048034
    f380:	1fff4afd 	.word	0x1fff4afd
    f384:	1fff6910 	.word	0x1fff6910
    f388:	1fff68a5 	.word	0x1fff68a5
    f38c:	1fff6918 	.word	0x1fff6918
    f390:	1fff6911 	.word	0x1fff6911
    f394:	1fff68a4 	.word	0x1fff68a4
    f398:	1fff4afe 	.word	0x1fff4afe
    f39c:	4006d000 	.word	0x4006d000
    f3a0:	e000e425 	.word	0xe000e425
    f3a4:	e000e104 	.word	0xe000e104
    f3a8:	4004d014 	.word	0x4004d014
    f3ac:	4004a02c 	.word	0x4004a02c
    f3b0:	4004d010 	.word	0x4004d010
    f3b4:	4004a028 	.word	0x4004a028

0000f3b8 <serial4_format>:

void serial4_format(uint32_t format)
{
	uint8_t c;

	c = UART3_C1;
    f3b8:	4b19      	ldr	r3, [pc, #100]	; (f420 <serial4_format+0x68>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART3_C1 = c;
    f3ba:	4919      	ldr	r1, [pc, #100]	; (f420 <serial4_format+0x68>)

void serial4_format(uint32_t format)
{
	uint8_t c;

	c = UART3_C1;
    f3bc:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    f3be:	f003 02ec 	and.w	r2, r3, #236	; 0xec
    f3c2:	f000 0303 	and.w	r3, r0, #3
    f3c6:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    f3c8:	0742      	lsls	r2, r0, #29
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    f3ca:	f000 020f 	and.w	r2, r0, #15
{
	uint8_t c;

	c = UART3_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    f3ce:	bf48      	it	mi
    f3d0:	f043 0310 	orrmi.w	r3, r3, #16
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    f3d4:	2a04      	cmp	r2, #4
	uint8_t c;

	c = UART3_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART3_C1 = c;
    f3d6:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    f3d8:	d01c      	beq.n	f414 <serial4_format+0x5c>
	c = UART3_S2 & ~0x10;
    f3da:	4b11      	ldr	r3, [pc, #68]	; (f420 <serial4_format+0x68>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART3_S2 = c;
    f3dc:	4a10      	ldr	r2, [pc, #64]	; (f420 <serial4_format+0x68>)
	c = UART3_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART3_S2 & ~0x10;
    f3de:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    f3e0:	06c1      	lsls	r1, r0, #27
	c = UART3_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART3_S2 & ~0x10;
    f3e2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    f3e6:	bf48      	it	mi
    f3e8:	f043 0310 	orrmi.w	r3, r3, #16
	UART3_S2 = c;
    f3ec:	7153      	strb	r3, [r2, #5]
	c = UART3_C3 & ~0x10;
    f3ee:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    f3f0:	0682      	lsls	r2, r0, #26
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART3_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART3_S2 = c;
	c = UART3_C3 & ~0x10;
    f3f2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x20) c |= 0x10;		// tx invert
	UART3_C3 = c;
    f3f6:	4a0a      	ldr	r2, [pc, #40]	; (f420 <serial4_format+0x68>)
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
	c = UART3_S2 & ~0x10;
	if (format & 0x10) c |= 0x10;		// rx invert
	UART3_S2 = c;
	c = UART3_C3 & ~0x10;
	if (format & 0x20) c |= 0x10;		// tx invert
    f3f8:	bf48      	it	mi
    f3fa:	f043 0310 	orrmi.w	r3, r3, #16
	UART3_C3 = c;
    f3fe:	7193      	strb	r3, [r2, #6]
	UART3_C4 = c;
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
    f400:	05c3      	lsls	r3, r0, #23
    f402:	d506      	bpl.n	f412 <serial4_format+0x5a>
		uint8_t bdl = UART3_BDL;
    f404:	7853      	ldrb	r3, [r2, #1]
		UART3_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    f406:	7811      	ldrb	r1, [r2, #0]
	use9Bits = format & 0x80;
#endif
#if defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(KINETISL)
	// For T3.5/T3.6/TLC See about turning on 2 stop bit mode
	if ( format & 0x100) {
		uint8_t bdl = UART3_BDL;
    f408:	b2db      	uxtb	r3, r3
		UART3_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
    f40a:	f041 0120 	orr.w	r1, r1, #32
    f40e:	7011      	strb	r1, [r2, #0]
		UART3_BDL = bdl;		// Says BDH not acted on until BDL is written
    f410:	7053      	strb	r3, [r2, #1]
    f412:	4770      	bx	lr

	c = UART3_C1;
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART3_C1 = c;
	if ((format & 0x0F) == 0x04) UART3_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    f414:	798b      	ldrb	r3, [r1, #6]
    f416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f41a:	718b      	strb	r3, [r1, #6]
    f41c:	e7dd      	b.n	f3da <serial4_format+0x22>
    f41e:	bf00      	nop
    f420:	4006d000 	.word	0x4006d000

0000f424 <serial4_end>:
#endif
}

void serial4_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    f424:	4b20      	ldr	r3, [pc, #128]	; (f4a8 <serial4_end+0x84>)
    f426:	681b      	ldr	r3, [r3, #0]
    f428:	049b      	lsls	r3, r3, #18
    f42a:	d53b      	bpl.n	f4a4 <serial4_end+0x80>
	}
#endif
}

void serial4_end(void)
{
    f42c:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	while (transmitting) yield();  // wait for buffered data to send
    f42e:	4c1f      	ldr	r4, [pc, #124]	; (f4ac <serial4_end+0x88>)
    f430:	7823      	ldrb	r3, [r4, #0]
    f432:	b123      	cbz	r3, f43e <serial4_end+0x1a>
    f434:	f001 fb7c 	bl	10b30 <yield>
    f438:	7823      	ldrb	r3, [r4, #0]
    f43a:	2b00      	cmp	r3, #0
    f43c:	d1fa      	bne.n	f434 <serial4_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
    f43e:	481c      	ldr	r0, [pc, #112]	; (f4b0 <serial4_end+0x8c>)
	UART3_C2 = 0;
    f440:	491c      	ldr	r1, [pc, #112]	; (f4b4 <serial4_end+0x90>)
	switch (rx_pin_num) {
    f442:	4b1d      	ldr	r3, [pc, #116]	; (f4b8 <serial4_end+0x94>)

void serial4_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
    f444:	2420      	movs	r4, #32
	UART3_C2 = 0;
    f446:	2200      	movs	r2, #0

void serial4_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
    f448:	6004      	str	r4, [r0, #0]
	UART3_C2 = 0;
    f44a:	70ca      	strb	r2, [r1, #3]
	switch (rx_pin_num) {
    f44c:	781b      	ldrb	r3, [r3, #0]
    f44e:	2b1f      	cmp	r3, #31
    f450:	d019      	beq.n	f486 <serial4_end+0x62>
    f452:	2b3f      	cmp	r3, #63	; 0x3f
    f454:	d101      	bne.n	f45a <serial4_end+0x36>
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
		case 63: CORE_PIN63_CONFIG = 0; break;
    f456:	4b19      	ldr	r3, [pc, #100]	; (f4bc <serial4_end+0x98>)
    f458:	601a      	str	r2, [r3, #0]
	}
	switch (tx_pin_num & 127) {
    f45a:	4b19      	ldr	r3, [pc, #100]	; (f4c0 <serial4_end+0x9c>)
    f45c:	781b      	ldrb	r3, [r3, #0]
    f45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f462:	2b20      	cmp	r3, #32
    f464:	d019      	beq.n	f49a <serial4_end+0x76>
    f466:	2b3e      	cmp	r3, #62	; 0x3e
    f468:	d102      	bne.n	f470 <serial4_end+0x4c>
		case 32: CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
		case 62: CORE_PIN62_CONFIG = 0; break;
    f46a:	4b16      	ldr	r3, [pc, #88]	; (f4c4 <serial4_end+0xa0>)
    f46c:	2200      	movs	r2, #0
    f46e:	601a      	str	r2, [r3, #0]
	}
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    f470:	4b15      	ldr	r3, [pc, #84]	; (f4c8 <serial4_end+0xa4>)
	}
	switch (tx_pin_num & 127) {
		case 32: CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
		case 62: CORE_PIN62_CONFIG = 0; break;
	}
	rx_buffer_head = 0;
    f472:	4816      	ldr	r0, [pc, #88]	; (f4cc <serial4_end+0xa8>)
	rx_buffer_tail = 0;
    f474:	4916      	ldr	r1, [pc, #88]	; (f4d0 <serial4_end+0xac>)
	if (rts_pin) rts_deassert();
    f476:	681a      	ldr	r2, [r3, #0]
	}
	switch (tx_pin_num & 127) {
		case 32: CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
		case 62: CORE_PIN62_CONFIG = 0; break;
	}
	rx_buffer_head = 0;
    f478:	2300      	movs	r3, #0
    f47a:	7003      	strb	r3, [r0, #0]
	rx_buffer_tail = 0;
    f47c:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_deassert();
    f47e:	b10a      	cbz	r2, f484 <serial4_end+0x60>
    f480:	2301      	movs	r3, #1
    f482:	7013      	strb	r3, [r2, #0]
    f484:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	while (transmitting) yield();  // wait for buffered data to send
	NVIC_DISABLE_IRQ(IRQ_UART3_STATUS);
	UART3_C2 = 0;
	switch (rx_pin_num) {
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    f486:	4b13      	ldr	r3, [pc, #76]	; (f4d4 <serial4_end+0xb0>)
    f488:	f240 1203 	movw	r2, #259	; 0x103
    f48c:	601a      	str	r2, [r3, #0]
		case 63: CORE_PIN63_CONFIG = 0; break;
	}
	switch (tx_pin_num & 127) {
    f48e:	4b0c      	ldr	r3, [pc, #48]	; (f4c0 <serial4_end+0x9c>)
    f490:	781b      	ldrb	r3, [r3, #0]
    f492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f496:	2b20      	cmp	r3, #32
    f498:	d1e5      	bne.n	f466 <serial4_end+0x42>
		case 32: CORE_PIN32_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    f49a:	4b0f      	ldr	r3, [pc, #60]	; (f4d8 <serial4_end+0xb4>)
    f49c:	f240 1203 	movw	r2, #259	; 0x103
    f4a0:	601a      	str	r2, [r3, #0]
    f4a2:	e7e5      	b.n	f470 <serial4_end+0x4c>
    f4a4:	4770      	bx	lr
    f4a6:	bf00      	nop
    f4a8:	40048034 	.word	0x40048034
    f4ac:	1fff68a4 	.word	0x1fff68a4
    f4b0:	e000e184 	.word	0xe000e184
    f4b4:	4006d000 	.word	0x4006d000
    f4b8:	1fff4afd 	.word	0x1fff4afd
    f4bc:	4004d014 	.word	0x4004d014
    f4c0:	1fff4afe 	.word	0x1fff4afe
    f4c4:	4004d010 	.word	0x4004d010
    f4c8:	1fff68a0 	.word	0x1fff68a0
    f4cc:	1fff6910 	.word	0x1fff6910
    f4d0:	1fff68a5 	.word	0x1fff68a5
    f4d4:	4004a028 	.word	0x4004a028
    f4d8:	4004a02c 	.word	0x4004a02c

0000f4dc <serial4_set_transmit_pin>:
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
}

void serial4_set_transmit_pin(uint8_t pin)
{
    f4dc:	4a0a      	ldr	r2, [pc, #40]	; (f508 <serial4_set_transmit_pin+0x2c>)
    f4de:	b538      	push	{r3, r4, r5, lr}
    f4e0:	4605      	mov	r5, r0
	while (transmitting) ;
    f4e2:	7813      	ldrb	r3, [r2, #0]
    f4e4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d1fa      	bne.n	f4e2 <serial4_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    f4ec:	2101      	movs	r1, #1
    f4ee:	4628      	mov	r0, r5
    f4f0:	f7ff fd46 	bl	ef80 <pinMode>
	digitalWrite(pin, LOW);
    f4f4:	4621      	mov	r1, r4
    f4f6:	4628      	mov	r0, r5
    f4f8:	f7ff fd10 	bl	ef1c <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    f4fc:	4a03      	ldr	r2, [pc, #12]	; (f50c <serial4_set_transmit_pin+0x30>)
    f4fe:	4b04      	ldr	r3, [pc, #16]	; (f510 <serial4_set_transmit_pin+0x34>)
    f500:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    f504:	601a      	str	r2, [r3, #0]
    f506:	bd38      	pop	{r3, r4, r5, pc}
    f508:	1fff68a4 	.word	0x1fff68a4
    f50c:	0001778c 	.word	0x0001778c
    f510:	1fff6914 	.word	0x1fff6914

0000f514 <serial4_set_tx>:

void serial4_set_tx(uint8_t pin, uint8_t opendrain)
{
	uint32_t cfg;

	if (opendrain) pin |= 128;
    f514:	b109      	cbz	r1, f51a <serial4_set_tx+0x6>
    f516:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    f51a:	4a16      	ldr	r2, [pc, #88]	; (f574 <serial4_set_tx+0x60>)
    f51c:	7813      	ldrb	r3, [r2, #0]
    f51e:	4298      	cmp	r0, r3
    f520:	d019      	beq.n	f556 <serial4_set_tx+0x42>
	digitalWrite(pin, LOW);
	transmit_pin = portOutputRegister(pin);
}

void serial4_set_tx(uint8_t pin, uint8_t opendrain)
{
    f522:	b410      	push	{r4}
	uint32_t cfg;

	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
    f524:	4c14      	ldr	r4, [pc, #80]	; (f578 <serial4_set_tx+0x64>)
    f526:	6824      	ldr	r4, [r4, #0]
    f528:	04a4      	lsls	r4, r4, #18
    f52a:	d511      	bpl.n	f550 <serial4_set_tx+0x3c>
		switch (tx_pin_num & 127) {
    f52c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f530:	2b20      	cmp	r3, #32
    f532:	d01b      	beq.n	f56c <serial4_set_tx+0x58>
    f534:	2b3e      	cmp	r3, #62	; 0x3e
    f536:	d012      	beq.n	f55e <serial4_set_tx+0x4a>
			case 32:  CORE_PIN32_CONFIG = 0; break; // PTB11
			case 62: CORE_PIN62_CONFIG = 0; break;
		}
		if (opendrain) {
    f538:	2900      	cmp	r1, #0
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    f53a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (tx_pin_num & 127) {
			case 32:  CORE_PIN32_CONFIG = 0; break; // PTB11
			case 62: CORE_PIN62_CONFIG = 0; break;
		}
		if (opendrain) {
    f53e:	bf0c      	ite	eq
    f540:	f44f 7151 	moveq.w	r1, #836	; 0x344
    f544:	f44f 7158 	movne.w	r1, #864	; 0x360
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
    f548:	2b20      	cmp	r3, #32
    f54a:	d00c      	beq.n	f566 <serial4_set_tx+0x52>
    f54c:	2b3e      	cmp	r3, #62	; 0x3e
    f54e:	d003      	beq.n	f558 <serial4_set_tx+0x44>
			case 32: CORE_PIN32_CONFIG = cfg | PORT_PCR_MUX(3); break;
			case 62: CORE_PIN62_CONFIG = cfg | PORT_PCR_MUX(3); break;
		}
	}
	tx_pin_num = pin;
    f550:	7010      	strb	r0, [r2, #0]

}
    f552:	f85d 4b04 	ldr.w	r4, [sp], #4
    f556:	4770      	bx	lr
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
			case 32: CORE_PIN32_CONFIG = cfg | PORT_PCR_MUX(3); break;
			case 62: CORE_PIN62_CONFIG = cfg | PORT_PCR_MUX(3); break;
    f558:	4b08      	ldr	r3, [pc, #32]	; (f57c <serial4_set_tx+0x68>)
    f55a:	6019      	str	r1, [r3, #0]
    f55c:	e7f8      	b.n	f550 <serial4_set_tx+0x3c>
	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (tx_pin_num & 127) {
			case 32:  CORE_PIN32_CONFIG = 0; break; // PTB11
			case 62: CORE_PIN62_CONFIG = 0; break;
    f55e:	4b07      	ldr	r3, [pc, #28]	; (f57c <serial4_set_tx+0x68>)
    f560:	2400      	movs	r4, #0
    f562:	601c      	str	r4, [r3, #0]
    f564:	e7e8      	b.n	f538 <serial4_set_tx+0x24>
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
		}
		switch (pin & 127) {
			case 32: CORE_PIN32_CONFIG = cfg | PORT_PCR_MUX(3); break;
    f566:	4b06      	ldr	r3, [pc, #24]	; (f580 <serial4_set_tx+0x6c>)
    f568:	6019      	str	r1, [r3, #0]
    f56a:	e7f1      	b.n	f550 <serial4_set_tx+0x3c>

	if (opendrain) pin |= 128;
	if (pin == tx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (tx_pin_num & 127) {
			case 32:  CORE_PIN32_CONFIG = 0; break; // PTB11
    f56c:	4b04      	ldr	r3, [pc, #16]	; (f580 <serial4_set_tx+0x6c>)
    f56e:	2400      	movs	r4, #0
    f570:	601c      	str	r4, [r3, #0]
    f572:	e7e1      	b.n	f538 <serial4_set_tx+0x24>
    f574:	1fff4afe 	.word	0x1fff4afe
    f578:	40048034 	.word	0x40048034
    f57c:	4004d010 	.word	0x4004d010
    f580:	4004a02c 	.word	0x4004a02c

0000f584 <serial4_set_rx>:

}

void serial4_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
    f584:	4b12      	ldr	r3, [pc, #72]	; (f5d0 <serial4_set_rx+0x4c>)
    f586:	781a      	ldrb	r2, [r3, #0]
    f588:	4282      	cmp	r2, r0
    f58a:	d00c      	beq.n	f5a6 <serial4_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
    f58c:	4911      	ldr	r1, [pc, #68]	; (f5d4 <serial4_set_rx+0x50>)
    f58e:	6809      	ldr	r1, [r1, #0]
    f590:	0489      	lsls	r1, r1, #18
    f592:	d507      	bpl.n	f5a4 <serial4_set_rx+0x20>
		switch (rx_pin_num) {
    f594:	2a1f      	cmp	r2, #31
    f596:	d016      	beq.n	f5c6 <serial4_set_rx+0x42>
    f598:	2a3f      	cmp	r2, #63	; 0x3f
    f59a:	d00a      	beq.n	f5b2 <serial4_set_rx+0x2e>
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
			case 63: CORE_PIN63_CONFIG = 0; break;
		}
		switch (pin) {
    f59c:	281f      	cmp	r0, #31
    f59e:	d00d      	beq.n	f5bc <serial4_set_rx+0x38>
    f5a0:	283f      	cmp	r0, #63	; 0x3f
    f5a2:	d001      	beq.n	f5a8 <serial4_set_rx+0x24>
			case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		}
	}
	rx_pin_num = pin;
    f5a4:	7018      	strb	r0, [r3, #0]
    f5a6:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
			case 63: CORE_PIN63_CONFIG = 0; break;
		}
		switch (pin) {
			case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			case 63: CORE_PIN63_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f5a8:	4a0b      	ldr	r2, [pc, #44]	; (f5d8 <serial4_set_rx+0x54>)
    f5aa:	f240 3113 	movw	r1, #787	; 0x313
    f5ae:	6011      	str	r1, [r2, #0]
    f5b0:	e7f8      	b.n	f5a4 <serial4_set_rx+0x20>
{
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (rx_pin_num) {
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
			case 63: CORE_PIN63_CONFIG = 0; break;
    f5b2:	4a09      	ldr	r2, [pc, #36]	; (f5d8 <serial4_set_rx+0x54>)
    f5b4:	2100      	movs	r1, #0
		}
		switch (pin) {
    f5b6:	281f      	cmp	r0, #31
{
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (rx_pin_num) {
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
			case 63: CORE_PIN63_CONFIG = 0; break;
    f5b8:	6011      	str	r1, [r2, #0]
		}
		switch (pin) {
    f5ba:	d1f1      	bne.n	f5a0 <serial4_set_rx+0x1c>
			case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    f5bc:	4a07      	ldr	r2, [pc, #28]	; (f5dc <serial4_set_rx+0x58>)
    f5be:	f240 3113 	movw	r1, #787	; 0x313
    f5c2:	6011      	str	r1, [r2, #0]
    f5c4:	e7ee      	b.n	f5a4 <serial4_set_rx+0x20>
void serial4_set_rx(uint8_t pin)
{
	if (pin == rx_pin_num) return;
	if ((SIM_SCGC4 & SIM_SCGC4_UART3)) {
		switch (rx_pin_num) {
			case 31: CORE_PIN31_CONFIG = 0; break; // PTC3
    f5c6:	4a05      	ldr	r2, [pc, #20]	; (f5dc <serial4_set_rx+0x58>)
    f5c8:	2100      	movs	r1, #0
    f5ca:	6011      	str	r1, [r2, #0]
    f5cc:	e7e6      	b.n	f59c <serial4_set_rx+0x18>
    f5ce:	bf00      	nop
    f5d0:	1fff4afd 	.word	0x1fff4afd
    f5d4:	40048034 	.word	0x40048034
    f5d8:	4004d014 	.word	0x4004d014
    f5dc:	4004a028 	.word	0x4004a028

0000f5e0 <serial4_set_rts>:
	rx_pin_num = pin;
}

int serial4_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return 0;
    f5e0:	4b0d      	ldr	r3, [pc, #52]	; (f618 <serial4_set_rts+0x38>)
    f5e2:	681b      	ldr	r3, [r3, #0]
    f5e4:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    f5e8:	d005      	beq.n	f5f6 <serial4_set_rts+0x16>
	if (pin < CORE_NUM_DIGITAL) {
    f5ea:	283f      	cmp	r0, #63	; 0x3f
    f5ec:	d905      	bls.n	f5fa <serial4_set_rts+0x1a>
		rts_pin = portOutputRegister(pin);
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    f5ee:	4b0b      	ldr	r3, [pc, #44]	; (f61c <serial4_set_rts+0x3c>)
    f5f0:	2000      	movs	r0, #0
    f5f2:	6018      	str	r0, [r3, #0]
		return 0;
    f5f4:	4770      	bx	lr
	rx_pin_num = pin;
}

int serial4_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return 0;
    f5f6:	4618      	mov	r0, r3
    f5f8:	4770      	bx	lr
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    f5fa:	4b09      	ldr	r3, [pc, #36]	; (f620 <serial4_set_rts+0x40>)
	}
	rx_pin_num = pin;
}

int serial4_set_rts(uint8_t pin)
{
    f5fc:	b510      	push	{r4, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return 0;
	if (pin < CORE_NUM_DIGITAL) {
		rts_pin = portOutputRegister(pin);
    f5fe:	4c07      	ldr	r4, [pc, #28]	; (f61c <serial4_set_rts+0x3c>)
    f600:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    f604:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    f606:	2101      	movs	r1, #1
    f608:	f7ff fcba 	bl	ef80 <pinMode>
		rts_assert();
    f60c:	6823      	ldr	r3, [r4, #0]
    f60e:	2200      	movs	r2, #0
    f610:	701a      	strb	r2, [r3, #0]
	} else {
		rts_pin = NULL;
		return 0;
	}
	return 1;
    f612:	2001      	movs	r0, #1
    f614:	bd10      	pop	{r4, pc}
    f616:	bf00      	nop
    f618:	40048034 	.word	0x40048034
    f61c:	1fff68a0 	.word	0x1fff68a0
    f620:	0001778c 	.word	0x0001778c

0000f624 <serial4_set_cts>:
}

int serial4_set_cts(uint8_t pin)
{
	return 0;
}
    f624:	2000      	movs	r0, #0
    f626:	4770      	bx	lr

0000f628 <serial4_putchar>:

void serial4_putchar(uint32_t c)
{
    f628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    f62c:	4b23      	ldr	r3, [pc, #140]	; (f6bc <serial4_putchar+0x94>)
    f62e:	681b      	ldr	r3, [r3, #0]
    f630:	049a      	lsls	r2, r3, #18
    f632:	d53b      	bpl.n	f6ac <serial4_putchar+0x84>
	if (transmit_pin) transmit_assert();
    f634:	4b22      	ldr	r3, [pc, #136]	; (f6c0 <serial4_putchar+0x98>)
    f636:	681b      	ldr	r3, [r3, #0]
    f638:	b10b      	cbz	r3, f63e <serial4_putchar+0x16>
    f63a:	2201      	movs	r2, #1
    f63c:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    f63e:	f8df 9090 	ldr.w	r9, [pc, #144]	; f6d0 <serial4_putchar+0xa8>
    f642:	4d20      	ldr	r5, [pc, #128]	; (f6c4 <serial4_putchar+0x9c>)
    f644:	f899 4000 	ldrb.w	r4, [r9]
    f648:	f8df 8088 	ldr.w	r8, [pc, #136]	; f6d4 <serial4_putchar+0xac>
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART3_S1 & UART_S1_TDRE)) {
    f64c:	4e1e      	ldr	r6, [pc, #120]	; (f6c8 <serial4_putchar+0xa0>)
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
    f64e:	3401      	adds	r4, #1
    f650:	2c27      	cmp	r4, #39	; 0x27
    f652:	bf8a      	itet	hi
    f654:	f04f 0a00 	movhi.w	sl, #0
    f658:	fa5f fa84 	uxtbls.w	sl, r4
    f65c:	4654      	movhi	r4, sl
    f65e:	4607      	mov	r7, r0
	while (tx_buffer_tail == head) {
    f660:	46ab      	mov	fp, r5
    f662:	782b      	ldrb	r3, [r5, #0]
    f664:	42a3      	cmp	r3, r4
    f666:	d116      	bne.n	f696 <serial4_putchar+0x6e>
		int priority = nvic_execution_priority();
    f668:	f7ff f8e4 	bl	e834 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    f66c:	2840      	cmp	r0, #64	; 0x40
    f66e:	dc1f      	bgt.n	f6b0 <serial4_putchar+0x88>
			if ((UART3_S1 & UART_S1_TDRE)) {
    f670:	7933      	ldrb	r3, [r6, #4]
    f672:	061b      	lsls	r3, r3, #24
    f674:	d5f5      	bpl.n	f662 <serial4_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    f676:	f89b 3000 	ldrb.w	r3, [fp]
				if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    f67a:	3301      	adds	r3, #1
    f67c:	2b27      	cmp	r3, #39	; 0x27
    f67e:	bf86      	itte	hi
    f680:	2200      	movhi	r2, #0
    f682:	4613      	movhi	r3, r2
    f684:	b2da      	uxtbls	r2, r3
				n = tx_buffer[tail];
    f686:	f818 3003 	ldrb.w	r3, [r8, r3]
    f68a:	b2db      	uxtb	r3, r3
				if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART3_D = n;
    f68c:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    f68e:	702a      	strb	r2, [r5, #0]

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
    f690:	782b      	ldrb	r3, [r5, #0]
    f692:	42a3      	cmp	r3, r4
    f694:	d0e8      	beq.n	f668 <serial4_putchar+0x40>
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    f696:	490d      	ldr	r1, [pc, #52]	; (f6cc <serial4_putchar+0xa4>)
	tx_buffer_head = head;
	UART3_C2 = C2_TX_ACTIVE;
    f698:	4b0b      	ldr	r3, [pc, #44]	; (f6c8 <serial4_putchar+0xa0>)
			}
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
    f69a:	b2ff      	uxtb	r7, r7
	transmitting = 1;
    f69c:	2001      	movs	r0, #1
	tx_buffer_head = head;
	UART3_C2 = C2_TX_ACTIVE;
    f69e:	22ac      	movs	r2, #172	; 0xac
			}
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
    f6a0:	f808 7004 	strb.w	r7, [r8, r4]
	transmitting = 1;
    f6a4:	7008      	strb	r0, [r1, #0]
	tx_buffer_head = head;
    f6a6:	f889 a000 	strb.w	sl, [r9]
	UART3_C2 = C2_TX_ACTIVE;
    f6aa:	70da      	strb	r2, [r3, #3]
    f6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				n = tx_buffer[tail];
				if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART3_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    f6b0:	28ff      	cmp	r0, #255	; 0xff
    f6b2:	ddd6      	ble.n	f662 <serial4_putchar+0x3a>
			yield(); // wait
    f6b4:	f001 fa3c 	bl	10b30 <yield>
    f6b8:	e7d3      	b.n	f662 <serial4_putchar+0x3a>
    f6ba:	bf00      	nop
    f6bc:	40048034 	.word	0x40048034
    f6c0:	1fff6914 	.word	0x1fff6914
    f6c4:	1fff6911 	.word	0x1fff6911
    f6c8:	4006d000 	.word	0x4006d000
    f6cc:	1fff68a4 	.word	0x1fff68a4
    f6d0:	1fff6918 	.word	0x1fff6918
    f6d4:	1fff68a8 	.word	0x1fff68a8

0000f6d8 <serial4_write>:
	tx_buffer_head = head;
	UART3_C2 = C2_TX_ACTIVE;
}

void serial4_write(const void *buf, unsigned int count)
{
    f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

void serial4_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    f6dc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; f79c <serial4_write+0xc4>
    f6e0:	4d2a      	ldr	r5, [pc, #168]	; (f78c <serial4_write+0xb4>)
	head = tx_buffer_head;
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART3_S1 & UART_S1_TDRE)) {
    f6e2:	4f2b      	ldr	r7, [pc, #172]	; (f790 <serial4_write+0xb8>)
	tx_buffer_head = head;
	UART3_C2 = C2_TX_ACTIVE;
}

void serial4_write(const void *buf, unsigned int count)
{
    f6e4:	b083      	sub	sp, #12
    f6e6:	4606      	mov	r6, r0
    f6e8:	eb00 0801 	add.w	r8, r0, r1
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
    f6ec:	4546      	cmp	r6, r8
    f6ee:	d040      	beq.n	f772 <serial4_write+0x9a>

void serial4_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    f6f0:	f8d9 3000 	ldr.w	r3, [r9]
    f6f4:	049a      	lsls	r2, r3, #18
}

void serial4_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
    f6f6:	f106 0601 	add.w	r6, r6, #1

void serial4_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
    f6fa:	d5f7      	bpl.n	f6ec <serial4_write+0x14>
	if (transmit_pin) transmit_assert();
    f6fc:	4b25      	ldr	r3, [pc, #148]	; (f794 <serial4_write+0xbc>)
}

void serial4_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
    f6fe:	f816 2c01 	ldrb.w	r2, [r6, #-1]
void serial4_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	if (transmit_pin) transmit_assert();
    f702:	681b      	ldr	r3, [r3, #0]
}

void serial4_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
    f704:	9201      	str	r2, [sp, #4]
void serial4_putchar(uint32_t c)
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	if (transmit_pin) transmit_assert();
    f706:	b10b      	cbz	r3, f70c <serial4_write+0x34>
    f708:	2201      	movs	r2, #1
    f70a:	701a      	strb	r2, [r3, #0]
	head = tx_buffer_head;
    f70c:	f8df b090 	ldr.w	fp, [pc, #144]	; f7a0 <serial4_write+0xc8>
    f710:	f89b 4000 	ldrb.w	r4, [fp]
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
    f714:	3401      	adds	r4, #1
    f716:	2c27      	cmp	r4, #39	; 0x27
    f718:	d833      	bhi.n	f782 <serial4_write+0xaa>
    f71a:	b2e3      	uxtb	r3, r4
    f71c:	9300      	str	r3, [sp, #0]
    f71e:	f8df a084 	ldr.w	sl, [pc, #132]	; f7a4 <serial4_write+0xcc>
	while (tx_buffer_tail == head) {
    f722:	782b      	ldrb	r3, [r5, #0]
    f724:	42a3      	cmp	r3, r4
    f726:	d115      	bne.n	f754 <serial4_write+0x7c>
		int priority = nvic_execution_priority();
    f728:	f7ff f884 	bl	e834 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    f72c:	2840      	cmp	r0, #64	; 0x40
    f72e:	dc23      	bgt.n	f778 <serial4_write+0xa0>
			if ((UART3_S1 & UART_S1_TDRE)) {
    f730:	793b      	ldrb	r3, [r7, #4]
    f732:	061b      	lsls	r3, r3, #24
    f734:	d5f5      	bpl.n	f722 <serial4_write+0x4a>
				uint32_t tail = tx_buffer_tail;
    f736:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    f738:	3301      	adds	r3, #1
    f73a:	2b27      	cmp	r3, #39	; 0x27
    f73c:	bf86      	itte	hi
    f73e:	2200      	movhi	r2, #0
    f740:	4613      	movhi	r3, r2
    f742:	b2da      	uxtbls	r2, r3
				n = tx_buffer[tail];
    f744:	f81a 3003 	ldrb.w	r3, [sl, r3]
    f748:	b2db      	uxtb	r3, r3
				if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART3_D = n;
    f74a:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    f74c:	702a      	strb	r2, [r5, #0]

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
	while (tx_buffer_tail == head) {
    f74e:	782b      	ldrb	r3, [r5, #0]
    f750:	42a3      	cmp	r3, r4
    f752:	d0e9      	beq.n	f728 <serial4_write+0x50>
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
    f754:	4a10      	ldr	r2, [pc, #64]	; (f798 <serial4_write+0xc0>)
			}
		} else if (priority >= 256) {
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
    f756:	f89d 3004 	ldrb.w	r3, [sp, #4]
    f75a:	f80a 3004 	strb.w	r3, [sl, r4]
	transmitting = 1;
    f75e:	2101      	movs	r1, #1
    f760:	7011      	strb	r1, [r2, #0]
	tx_buffer_head = head;
	UART3_C2 = C2_TX_ACTIVE;
    f762:	23ac      	movs	r3, #172	; 0xac
			yield(); // wait
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
    f764:	f89d 2000 	ldrb.w	r2, [sp]
    f768:	f88b 2000 	strb.w	r2, [fp]
}

void serial4_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
    f76c:	4546      	cmp	r6, r8
		}
	}
	tx_buffer[head] = c;
	transmitting = 1;
	tx_buffer_head = head;
	UART3_C2 = C2_TX_ACTIVE;
    f76e:	70fb      	strb	r3, [r7, #3]
}

void serial4_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
    f770:	d1be      	bne.n	f6f0 <serial4_write+0x18>
}
    f772:	b003      	add	sp, #12
    f774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				n = tx_buffer[tail];
				if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART3_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    f778:	28ff      	cmp	r0, #255	; 0xff
    f77a:	ddd2      	ble.n	f722 <serial4_write+0x4a>
			yield(); // wait
    f77c:	f001 f9d8 	bl	10b30 <yield>
    f780:	e7cf      	b.n	f722 <serial4_write+0x4a>
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART3)) return;
	if (transmit_pin) transmit_assert();
	head = tx_buffer_head;
	if (++head >= SERIAL4_TX_BUFFER_SIZE) head = 0;
    f782:	2300      	movs	r3, #0
    f784:	9300      	str	r3, [sp, #0]
    f786:	461c      	mov	r4, r3
    f788:	e7c9      	b.n	f71e <serial4_write+0x46>
    f78a:	bf00      	nop
    f78c:	1fff6911 	.word	0x1fff6911
    f790:	4006d000 	.word	0x4006d000
    f794:	1fff6914 	.word	0x1fff6914
    f798:	1fff68a4 	.word	0x1fff68a4
    f79c:	40048034 	.word	0x40048034
    f7a0:	1fff6918 	.word	0x1fff6918
    f7a4:	1fff68a8 	.word	0x1fff68a8

0000f7a8 <serial4_flush>:
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial4_putchar(*p++);
}

void serial4_flush(void)
{
    f7a8:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    f7aa:	4c04      	ldr	r4, [pc, #16]	; (f7bc <serial4_flush+0x14>)
    f7ac:	7823      	ldrb	r3, [r4, #0]
    f7ae:	b123      	cbz	r3, f7ba <serial4_flush+0x12>
    f7b0:	f001 f9be 	bl	10b30 <yield>
    f7b4:	7823      	ldrb	r3, [r4, #0]
    f7b6:	2b00      	cmp	r3, #0
    f7b8:	d1fa      	bne.n	f7b0 <serial4_flush+0x8>
    f7ba:	bd10      	pop	{r4, pc}
    f7bc:	1fff68a4 	.word	0x1fff68a4

0000f7c0 <serial4_write_buffer_free>:
int serial4_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
	tail = tx_buffer_tail;
    f7c0:	4a06      	ldr	r2, [pc, #24]	; (f7dc <serial4_write_buffer_free+0x1c>)

int serial4_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    f7c2:	4b07      	ldr	r3, [pc, #28]	; (f7e0 <serial4_write_buffer_free+0x20>)
    f7c4:	781b      	ldrb	r3, [r3, #0]
	tail = tx_buffer_tail;
    f7c6:	7810      	ldrb	r0, [r2, #0]

int serial4_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    f7c8:	b2db      	uxtb	r3, r3
	tail = tx_buffer_tail;
    f7ca:	b2c0      	uxtb	r0, r0
	if (head >= tail) return SERIAL4_TX_BUFFER_SIZE - 1 - head + tail;
    f7cc:	4283      	cmp	r3, r0
    f7ce:	bf2c      	ite	cs
    f7d0:	3027      	addcs	r0, #39	; 0x27
	return tail - head - 1;
    f7d2:	f100 30ff 	addcc.w	r0, r0, #4294967295
    f7d6:	1ac0      	subs	r0, r0, r3
}
    f7d8:	4770      	bx	lr
    f7da:	bf00      	nop
    f7dc:	1fff6911 	.word	0x1fff6911
    f7e0:	1fff6918 	.word	0x1fff6918

0000f7e4 <serial4_available>:

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f7e4:	4a05      	ldr	r2, [pc, #20]	; (f7fc <serial4_available+0x18>)
	tail = rx_buffer_tail;
    f7e6:	4b06      	ldr	r3, [pc, #24]	; (f800 <serial4_available+0x1c>)

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f7e8:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    f7ea:	781b      	ldrb	r3, [r3, #0]

int serial4_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f7ec:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    f7ee:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    f7f0:	4298      	cmp	r0, r3
	return SERIAL4_RX_BUFFER_SIZE + head - tail;
    f7f2:	bf38      	it	cc
    f7f4:	3040      	addcc	r0, #64	; 0x40
    f7f6:	1ac0      	subs	r0, r0, r3
}
    f7f8:	4770      	bx	lr
    f7fa:	bf00      	nop
    f7fc:	1fff6910 	.word	0x1fff6910
    f800:	1fff68a5 	.word	0x1fff68a5

0000f804 <serial4_getchar>:

int serial4_getchar(void)
{
    f804:	b430      	push	{r4, r5}
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    f806:	4b15      	ldr	r3, [pc, #84]	; (f85c <serial4_getchar+0x58>)
	tail = rx_buffer_tail;
    f808:	4c15      	ldr	r4, [pc, #84]	; (f860 <serial4_getchar+0x5c>)
int serial4_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    f80a:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    f80c:	7823      	ldrb	r3, [r4, #0]
int serial4_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    f80e:	b2d2      	uxtb	r2, r2
	tail = rx_buffer_tail;
    f810:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    f812:	429a      	cmp	r2, r3
    f814:	d01e      	beq.n	f854 <serial4_getchar+0x50>
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
    f816:	3301      	adds	r3, #1
    f818:	2b3f      	cmp	r3, #63	; 0x3f
    f81a:	d90e      	bls.n	f83a <serial4_getchar+0x36>
	c = rx_buffer[tail];
    f81c:	4911      	ldr	r1, [pc, #68]	; (f864 <serial4_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    f81e:	4b12      	ldr	r3, [pc, #72]	; (f868 <serial4_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    f820:	7808      	ldrb	r0, [r1, #0]
	rx_buffer_tail = tail;
	if (rts_pin) {
    f822:	6819      	ldr	r1, [r3, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    f824:	2300      	movs	r3, #0

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    f826:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    f828:	7023      	strb	r3, [r4, #0]
	if (rts_pin) {
    f82a:	b121      	cbz	r1, f836 <serial4_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
		else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    f82c:	1ad3      	subs	r3, r2, r3
		if (avail <= RTS_LOW_WATERMARK) rts_assert();
    f82e:	2b1a      	cmp	r3, #26
    f830:	dc01      	bgt.n	f836 <serial4_getchar+0x32>
    f832:	2300      	movs	r3, #0
    f834:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    f836:	bc30      	pop	{r4, r5}
    f838:	4770      	bx	lr

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    f83a:	480a      	ldr	r0, [pc, #40]	; (f864 <serial4_getchar+0x60>)
	rx_buffer_tail = tail;
	if (rts_pin) {
    f83c:	490a      	ldr	r1, [pc, #40]	; (f868 <serial4_getchar+0x64>)

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    f83e:	5cc0      	ldrb	r0, [r0, r3]
	rx_buffer_tail = tail;
	if (rts_pin) {
    f840:	6809      	ldr	r1, [r1, #0]
	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
	rx_buffer_tail = tail;
    f842:	b2dd      	uxtb	r5, r3

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	c = rx_buffer[tail];
    f844:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    f846:	7025      	strb	r5, [r4, #0]
	if (rts_pin) {
    f848:	2900      	cmp	r1, #0
    f84a:	d0f4      	beq.n	f836 <serial4_getchar+0x32>
		int avail;
		if (head >= tail) avail = head - tail;
    f84c:	429a      	cmp	r2, r3
		else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    f84e:	bf38      	it	cc
    f850:	3240      	addcc	r2, #64	; 0x40
    f852:	e7eb      	b.n	f82c <serial4_getchar+0x28>
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    f854:	f04f 30ff 	mov.w	r0, #4294967295
    f858:	e7ed      	b.n	f836 <serial4_getchar+0x32>
    f85a:	bf00      	nop
    f85c:	1fff6910 	.word	0x1fff6910
    f860:	1fff68a5 	.word	0x1fff68a5
    f864:	1fff68d0 	.word	0x1fff68d0
    f868:	1fff68a0 	.word	0x1fff68a0

0000f86c <serial4_peek>:

int serial4_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f86c:	4a08      	ldr	r2, [pc, #32]	; (f890 <serial4_peek+0x24>)
	tail = rx_buffer_tail;
    f86e:	4b09      	ldr	r3, [pc, #36]	; (f894 <serial4_peek+0x28>)

int serial4_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    f870:	7812      	ldrb	r2, [r2, #0]
	tail = rx_buffer_tail;
    f872:	781b      	ldrb	r3, [r3, #0]
    f874:	b2db      	uxtb	r3, r3
	if (head == tail) return -1;
    f876:	429a      	cmp	r2, r3
    f878:	d007      	beq.n	f88a <serial4_peek+0x1e>
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
    f87a:	3301      	adds	r3, #1
    f87c:	2b40      	cmp	r3, #64	; 0x40
    f87e:	bf28      	it	cs
    f880:	2300      	movcs	r3, #0
	return rx_buffer[tail];
    f882:	4a05      	ldr	r2, [pc, #20]	; (f898 <serial4_peek+0x2c>)
    f884:	5cd0      	ldrb	r0, [r2, r3]
    f886:	b2c0      	uxtb	r0, r0
    f888:	4770      	bx	lr
{
	uint32_t head, tail;

	head = rx_buffer_head;
	tail = rx_buffer_tail;
	if (head == tail) return -1;
    f88a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail >= SERIAL4_RX_BUFFER_SIZE) tail = 0;
	return rx_buffer[tail];
}
    f88e:	4770      	bx	lr
    f890:	1fff6910 	.word	0x1fff6910
    f894:	1fff68a5 	.word	0x1fff68a5
    f898:	1fff68d0 	.word	0x1fff68d0

0000f89c <serial4_clear>:

void serial4_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    f89c:	4b05      	ldr	r3, [pc, #20]	; (f8b4 <serial4_clear+0x18>)
	if (rts_pin) rts_assert();
    f89e:	4a06      	ldr	r2, [pc, #24]	; (f8b8 <serial4_clear+0x1c>)
	return rx_buffer[tail];
}

void serial4_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    f8a0:	781b      	ldrb	r3, [r3, #0]
    f8a2:	4906      	ldr	r1, [pc, #24]	; (f8bc <serial4_clear+0x20>)
	if (rts_pin) rts_assert();
    f8a4:	6812      	ldr	r2, [r2, #0]
	return rx_buffer[tail];
}

void serial4_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    f8a6:	b2db      	uxtb	r3, r3
    f8a8:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    f8aa:	b10a      	cbz	r2, f8b0 <serial4_clear+0x14>
    f8ac:	2300      	movs	r3, #0
    f8ae:	7013      	strb	r3, [r2, #0]
    f8b0:	4770      	bx	lr
    f8b2:	bf00      	nop
    f8b4:	1fff68a5 	.word	0x1fff68a5
    f8b8:	1fff68a0 	.word	0x1fff68a0
    f8bc:	1fff6910 	.word	0x1fff6910

0000f8c0 <uart3_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart3_status_isr(void)
{
    f8c0:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART3_S1 & UART_S1_RDRF) {
    f8c2:	4b2b      	ldr	r3, [pc, #172]	; (f970 <uart3_status_isr+0xb0>)
    f8c4:	791a      	ldrb	r2, [r3, #4]
    f8c6:	0694      	lsls	r4, r2, #26
    f8c8:	d51f      	bpl.n	f90a <uart3_status_isr+0x4a>
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    f8ca:	482a      	ldr	r0, [pc, #168]	; (f974 <uart3_status_isr+0xb4>)

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    f8cc:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    f8ce:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    f8d0:	4929      	ldr	r1, [pc, #164]	; (f978 <uart3_status_isr+0xb8>)
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    f8d2:	3301      	adds	r3, #1
    f8d4:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    f8d6:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
    f8d8:	bfc8      	it	gt
    f8da:	2300      	movgt	r3, #0
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    f8dc:	428b      	cmp	r3, r1

	if (UART3_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART3_C3 & 0x80)) {
			n = UART3_D | 0x100;
		} else {
			n = UART3_D;
    f8de:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    f8e0:	d003      	beq.n	f8ea <uart3_status_isr+0x2a>
			rx_buffer[head] = n;
    f8e2:	4c26      	ldr	r4, [pc, #152]	; (f97c <uart3_status_isr+0xbc>)
			rx_buffer_head = head;
    f8e4:	b2d9      	uxtb	r1, r3
			n = UART3_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL4_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    f8e6:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    f8e8:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    f8ea:	4a25      	ldr	r2, [pc, #148]	; (f980 <uart3_status_isr+0xc0>)
    f8ec:	6811      	ldr	r1, [r2, #0]
    f8ee:	b161      	cbz	r1, f90a <uart3_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    f8f0:	4a24      	ldr	r2, [pc, #144]	; (f984 <uart3_status_isr+0xc4>)
    f8f2:	7812      	ldrb	r2, [r2, #0]
    f8f4:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    f8f6:	4293      	cmp	r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    f8f8:	bf36      	itet	cc
    f8fa:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    f8fe:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
    f900:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    f902:	2b27      	cmp	r3, #39	; 0x27
    f904:	bfc4      	itt	gt
    f906:	2301      	movgt	r3, #1
    f908:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART3_C2;
    f90a:	4a19      	ldr	r2, [pc, #100]	; (f970 <uart3_status_isr+0xb0>)
    f90c:	78d3      	ldrb	r3, [r2, #3]
    f90e:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    f910:	0618      	lsls	r0, r3, #24
    f912:	d411      	bmi.n	f938 <uart3_status_isr+0x78>
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
    f914:	065a      	lsls	r2, r3, #25
    f916:	d50d      	bpl.n	f934 <uart3_status_isr+0x74>
    f918:	4b15      	ldr	r3, [pc, #84]	; (f970 <uart3_status_isr+0xb0>)
    f91a:	791b      	ldrb	r3, [r3, #4]
    f91c:	065b      	lsls	r3, r3, #25
    f91e:	d509      	bpl.n	f934 <uart3_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    f920:	4b19      	ldr	r3, [pc, #100]	; (f988 <uart3_status_isr+0xc8>)
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    f922:	491a      	ldr	r1, [pc, #104]	; (f98c <uart3_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    f924:	681b      	ldr	r3, [r3, #0]
			UART3_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART3_S1 & UART_S1_TC)) {
		transmitting = 0;
    f926:	2200      	movs	r2, #0
    f928:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    f92a:	b103      	cbz	r3, f92e <uart3_status_isr+0x6e>
    f92c:	701a      	strb	r2, [r3, #0]
		UART3_C2 = C2_TX_INACTIVE;
    f92e:	4b10      	ldr	r3, [pc, #64]	; (f970 <uart3_status_isr+0xb0>)
    f930:	222c      	movs	r2, #44	; 0x2c
    f932:	70da      	strb	r2, [r3, #3]
	}
}
    f934:	bc30      	pop	{r4, r5}
    f936:	4770      	bx	lr
			else avail = SERIAL4_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
    f938:	7911      	ldrb	r1, [r2, #4]
    f93a:	0609      	lsls	r1, r1, #24
    f93c:	d5ea      	bpl.n	f914 <uart3_status_isr+0x54>
		head = tx_buffer_head;
    f93e:	4914      	ldr	r1, [pc, #80]	; (f990 <uart3_status_isr+0xd0>)
		tail = tx_buffer_tail;
    f940:	4810      	ldr	r0, [pc, #64]	; (f984 <uart3_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    f942:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    f944:	7801      	ldrb	r1, [r0, #0]
    f946:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    f948:	428c      	cmp	r4, r1
    f94a:	d00d      	beq.n	f968 <uart3_status_isr+0xa8>
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
    f94c:	1c4a      	adds	r2, r1, #1
    f94e:	2a27      	cmp	r2, #39	; 0x27
    f950:	bf84      	itt	hi
    f952:	2100      	movhi	r1, #0
    f954:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    f956:	4d0f      	ldr	r5, [pc, #60]	; (f994 <uart3_status_isr+0xd4>)
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    f958:	4c05      	ldr	r4, [pc, #20]	; (f970 <uart3_status_isr+0xb0>)
    f95a:	bf98      	it	ls
    f95c:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL4_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    f95e:	5caa      	ldrb	r2, [r5, r2]
    f960:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART3_C3 = (UART3_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART3_D = n;
    f962:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    f964:	7001      	strb	r1, [r0, #0]
    f966:	e7d5      	b.n	f914 <uart3_status_isr+0x54>
	c = UART3_C2;
	if ((c & UART_C2_TIE) && (UART3_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART3_C2 = C2_TX_COMPLETING;
    f968:	216c      	movs	r1, #108	; 0x6c
    f96a:	70d1      	strb	r1, [r2, #3]
    f96c:	e7d2      	b.n	f914 <uart3_status_isr+0x54>
    f96e:	bf00      	nop
    f970:	4006d000 	.word	0x4006d000
    f974:	1fff6910 	.word	0x1fff6910
    f978:	1fff68a5 	.word	0x1fff68a5
    f97c:	1fff68d0 	.word	0x1fff68d0
    f980:	1fff68a0 	.word	0x1fff68a0
    f984:	1fff6911 	.word	0x1fff6911
    f988:	1fff6914 	.word	0x1fff6914
    f98c:	1fff68a4 	.word	0x1fff68a4
    f990:	1fff6918 	.word	0x1fff6918
    f994:	1fff68a8 	.word	0x1fff68a8

0000f998 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    f998:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    f99a:	2b03      	cmp	r3, #3
    f99c:	d814      	bhi.n	f9c8 <usb_rx+0x30>
	__disable_irq();
    f99e:	b672      	cpsid	i
	ret = rx_first[endpoint];
    f9a0:	490a      	ldr	r1, [pc, #40]	; (f9cc <usb_rx+0x34>)
    f9a2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    f9a6:	b168      	cbz	r0, f9c4 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    f9a8:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    f9aa:	4c09      	ldr	r4, [pc, #36]	; (f9d0 <usb_rx+0x38>)
    f9ac:	8805      	ldrh	r5, [r0, #0]
    f9ae:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    f9b2:	6846      	ldr	r6, [r0, #4]
    f9b4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    f9b8:	1b52      	subs	r2, r2, r5
    f9ba:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    f9be:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    f9c0:	bc70      	pop	{r4, r5, r6}
    f9c2:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    f9c4:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    f9c6:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    f9c8:	2000      	movs	r0, #0
    f9ca:	4770      	bx	lr
    f9cc:	1fff6974 	.word	0x1fff6974
    f9d0:	1fff6c50 	.word	0x1fff6c50

0000f9d4 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    f9d4:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    f9d6:	2803      	cmp	r0, #3
    f9d8:	d80b      	bhi.n	f9f2 <usb_tx_packet_count+0x1e>
	__disable_irq();
    f9da:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    f9dc:	4b07      	ldr	r3, [pc, #28]	; (f9fc <usb_tx_packet_count+0x28>)
    f9de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    f9e2:	b143      	cbz	r3, f9f6 <usb_tx_packet_count+0x22>
    f9e4:	2000      	movs	r0, #0
    f9e6:	685b      	ldr	r3, [r3, #4]
    f9e8:	3001      	adds	r0, #1
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	d1fb      	bne.n	f9e6 <usb_tx_packet_count+0x12>
	__enable_irq();
    f9ee:	b662      	cpsie	i
	return count;
    f9f0:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    f9f2:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    f9f4:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    f9f6:	4618      	mov	r0, r3
    f9f8:	e7f9      	b.n	f9ee <usb_tx_packet_count+0x1a>
    f9fa:	bf00      	nop
    f9fc:	1fff69c8 	.word	0x1fff69c8

0000fa00 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    fa00:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    fa02:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    fa04:	4a2b      	ldr	r2, [pc, #172]	; (fab4 <usb_rx_memory+0xb4>)
    fa06:	7813      	ldrb	r3, [r2, #0]
    fa08:	071d      	lsls	r5, r3, #28
    fa0a:	d506      	bpl.n	fa1a <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    fa0c:	4b2a      	ldr	r3, [pc, #168]	; (fab8 <usb_rx_memory+0xb8>)
    fa0e:	6a19      	ldr	r1, [r3, #32]
    fa10:	2900      	cmp	r1, #0
    fa12:	d036      	beq.n	fa82 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    fa14:	6a99      	ldr	r1, [r3, #40]	; 0x28
    fa16:	2900      	cmp	r1, #0
    fa18:	d041      	beq.n	fa9e <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    fa1a:	7853      	ldrb	r3, [r2, #1]
    fa1c:	071c      	lsls	r4, r3, #28
    fa1e:	d506      	bpl.n	fa2e <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    fa20:	4b25      	ldr	r3, [pc, #148]	; (fab8 <usb_rx_memory+0xb8>)
    fa22:	6c19      	ldr	r1, [r3, #64]	; 0x40
    fa24:	2900      	cmp	r1, #0
    fa26:	d03e      	beq.n	faa6 <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    fa28:	6c99      	ldr	r1, [r3, #72]	; 0x48
    fa2a:	2900      	cmp	r1, #0
    fa2c:	d039      	beq.n	faa2 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    fa2e:	7893      	ldrb	r3, [r2, #2]
    fa30:	0719      	lsls	r1, r3, #28
    fa32:	d505      	bpl.n	fa40 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    fa34:	4b20      	ldr	r3, [pc, #128]	; (fab8 <usb_rx_memory+0xb8>)
    fa36:	6e19      	ldr	r1, [r3, #96]	; 0x60
    fa38:	2900      	cmp	r1, #0
    fa3a:	d036      	beq.n	faaa <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    fa3c:	6e99      	ldr	r1, [r3, #104]	; 0x68
    fa3e:	b189      	cbz	r1, fa64 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    fa40:	78d3      	ldrb	r3, [r2, #3]
    fa42:	071b      	lsls	r3, r3, #28
    fa44:	d507      	bpl.n	fa56 <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    fa46:	4b1c      	ldr	r3, [pc, #112]	; (fab8 <usb_rx_memory+0xb8>)
    fa48:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    fa4c:	b37a      	cbz	r2, faae <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    fa4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    fa52:	2111      	movs	r1, #17
    fa54:	b13a      	cbz	r2, fa66 <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    fa56:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    fa58:	4b18      	ldr	r3, [pc, #96]	; (fabc <usb_rx_memory+0xbc>)
    fa5a:	2200      	movs	r2, #0
    fa5c:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    fa5e:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    fa60:	f000 be84 	b.w	1076c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    fa64:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    fa66:	4c15      	ldr	r4, [pc, #84]	; (fabc <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fa68:	4d15      	ldr	r5, [pc, #84]	; (fac0 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    fa6a:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    fa6c:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    fa70:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    fa74:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    fa76:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    fa78:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    fa7a:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    fa7c:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    fa7e:	bc30      	pop	{r4, r5}
    fa80:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    fa82:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    fa84:	4c0d      	ldr	r4, [pc, #52]	; (fabc <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fa86:	4d0f      	ldr	r5, [pc, #60]	; (fac4 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    fa88:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    fa8a:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    fa8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    fa92:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    fa94:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    fa96:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    fa98:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    fa9a:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    fa9c:	e7ef      	b.n	fa7e <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    fa9e:	2105      	movs	r1, #5
    faa0:	e7e1      	b.n	fa66 <usb_rx_memory+0x66>
    faa2:	2109      	movs	r1, #9
    faa4:	e7df      	b.n	fa66 <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    faa6:	2208      	movs	r2, #8
    faa8:	e7ec      	b.n	fa84 <usb_rx_memory+0x84>
    faaa:	220c      	movs	r2, #12
    faac:	e7ea      	b.n	fa84 <usb_rx_memory+0x84>
    faae:	2210      	movs	r2, #16
    fab0:	e7e8      	b.n	fa84 <usb_rx_memory+0x84>
    fab2:	bf00      	nop
    fab4:	000179b4 	.word	0x000179b4
    fab8:	1fff0000 	.word	0x1fff0000
    fabc:	1fff69f1 	.word	0x1fff69f1
    fac0:	004000c8 	.word	0x004000c8
    fac4:	00400088 	.word	0x00400088

0000fac8 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    fac8:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    faca:	2b03      	cmp	r3, #3
    facc:	d81d      	bhi.n	fb0a <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    face:	4a1b      	ldr	r2, [pc, #108]	; (fb3c <usb_tx+0x74>)
    fad0:	0140      	lsls	r0, r0, #5
    fad2:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    fad6:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    fad8:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    fada:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    fadc:	4c18      	ldr	r4, [pc, #96]	; (fb40 <usb_tx+0x78>)
    fade:	5ce2      	ldrb	r2, [r4, r3]
    fae0:	2a03      	cmp	r2, #3
    fae2:	d81b      	bhi.n	fb1c <usb_tx+0x54>
    fae4:	e8df f002 	tbb	[pc, r2]
    fae8:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    faec:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    faee:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    faf0:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    faf2:	f010 0f08 	tst.w	r0, #8
    faf6:	bf14      	ite	ne
    faf8:	23c8      	movne	r3, #200	; 0xc8
    fafa:	2388      	moveq	r3, #136	; 0x88
    fafc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    fb00:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    fb02:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    fb04:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    fb06:	b662      	cpsie	i
}
    fb08:	bc30      	pop	{r4, r5}
    fb0a:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    fb0c:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    fb0e:	2202      	movs	r2, #2
		break;
    fb10:	e7ed      	b.n	faee <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    fb12:	2205      	movs	r2, #5
    fb14:	e7eb      	b.n	faee <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    fb16:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    fb18:	2204      	movs	r2, #4
		break;
    fb1a:	e7e8      	b.n	faee <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    fb1c:	4a09      	ldr	r2, [pc, #36]	; (fb44 <usb_tx+0x7c>)
    fb1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    fb22:	b138      	cbz	r0, fb34 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    fb24:	4a08      	ldr	r2, [pc, #32]	; (fb48 <usb_tx+0x80>)
    fb26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    fb2a:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    fb2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    fb30:	b662      	cpsie	i
		return;
    fb32:	e7e9      	b.n	fb08 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    fb34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    fb38:	4a03      	ldr	r2, [pc, #12]	; (fb48 <usb_tx+0x80>)
    fb3a:	e7f7      	b.n	fb2c <usb_tx+0x64>
    fb3c:	1fff0000 	.word	0x1fff0000
    fb40:	1fff6a00 	.word	0x1fff6a00
    fb44:	1fff69c8 	.word	0x1fff69c8
    fb48:	1fff69d8 	.word	0x1fff69d8

0000fb4c <usb_isr>:
}



void usb_isr(void)
{
    fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    fb50:	f8df b30c 	ldr.w	fp, [pc, #780]	; fe60 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    fb54:	f8df a30c 	ldr.w	sl, [pc, #780]	; fe64 <usb_isr+0x318>
}



void usb_isr(void)
{
    fb58:	b087      	sub	sp, #28
    fb5a:	e044      	b.n	fbe6 <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    fb5c:	4fab      	ldr	r7, [pc, #684]	; (fe0c <usb_isr+0x2c0>)
    fb5e:	ea4f 0893 	mov.w	r8, r3, lsr #2
    fb62:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    fb66:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    fb68:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    fb6c:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    fb70:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    fb72:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    fb76:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    fb7a:	2b00      	cmp	r3, #0
    fb7c:	f040 8102 	bne.w	fd84 <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    fb80:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    fb84:	0c1b      	lsrs	r3, r3, #16
    fb86:	b299      	uxth	r1, r3
    fb88:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    fb8c:	2b00      	cmp	r3, #0
    fb8e:	f000 80f0 	beq.w	fd72 <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    fb92:	4b9f      	ldr	r3, [pc, #636]	; (fe10 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    fb94:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    fb98:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    fb9c:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    fba0:	2a00      	cmp	r2, #0
    fba2:	f000 82c5 	beq.w	10130 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    fba6:	4d9b      	ldr	r5, [pc, #620]	; (fe14 <usb_isr+0x2c8>)
    fba8:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    fbac:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    fbae:	4c9a      	ldr	r4, [pc, #616]	; (fe18 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    fbb0:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    fbb4:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    fbb8:	4419      	add	r1, r3
    fbba:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    fbbe:	f000 fdb5 	bl	1072c <usb_malloc>
					if (packet) {
    fbc2:	2800      	cmp	r0, #0
    fbc4:	f000 82ad 	beq.w	10122 <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    fbc8:	4a94      	ldr	r2, [pc, #592]	; (fe1c <usb_isr+0x2d0>)
    fbca:	4b95      	ldr	r3, [pc, #596]	; (fe20 <usb_isr+0x2d4>)
    fbcc:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    fbd0:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    fbd4:	bf18      	it	ne
    fbd6:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    fbd8:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    fbdc:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    fbe0:	2308      	movs	r3, #8
    fbe2:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    fbe6:	f89b 4000 	ldrb.w	r4, [fp]
    fbea:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    fbec:	0761      	lsls	r1, r4, #29
    fbee:	d51a      	bpl.n	fc26 <usb_isr+0xda>
		if (usb_configuration) {
    fbf0:	4b8c      	ldr	r3, [pc, #560]	; (fe24 <usb_isr+0x2d8>)
    fbf2:	781b      	ldrb	r3, [r3, #0]
    fbf4:	b1a3      	cbz	r3, fc20 <usb_isr+0xd4>
			t = usb_reboot_timer;
    fbf6:	498c      	ldr	r1, [pc, #560]	; (fe28 <usb_isr+0x2dc>)
    fbf8:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    fbfa:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    fbfe:	b122      	cbz	r2, fc0a <usb_isr+0xbe>
				usb_reboot_timer = --t;
    fc00:	3b01      	subs	r3, #1
    fc02:	b2db      	uxtb	r3, r3
    fc04:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    fc06:	b903      	cbnz	r3, fc0a <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    fc08:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    fc0a:	4988      	ldr	r1, [pc, #544]	; (fe2c <usb_isr+0x2e0>)
    fc0c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    fc0e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    fc12:	b12a      	cbz	r2, fc20 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    fc14:	3b01      	subs	r3, #1
    fc16:	b2db      	uxtb	r3, r3
    fc18:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    fc1a:	2b00      	cmp	r3, #0
    fc1c:	f000 8257 	beq.w	100ce <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    fc20:	2304      	movs	r3, #4
    fc22:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    fc26:	f004 0308 	and.w	r3, r4, #8
    fc2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    fc2e:	2b00      	cmp	r3, #0
    fc30:	f000 80cc 	beq.w	fdcc <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    fc34:	f89a 3000 	ldrb.w	r3, [sl]
    fc38:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    fc3a:	091e      	lsrs	r6, r3, #4
    fc3c:	d18e      	bne.n	fb5c <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    fc3e:	089c      	lsrs	r4, r3, #2
    fc40:	f8df 91c8 	ldr.w	r9, [pc, #456]	; fe0c <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    fc44:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    fc48:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    fc4c:	f3c2 0283 	ubfx	r2, r2, #2, #4
    fc50:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    fc52:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    fc54:	2a0c      	cmp	r2, #12
    fc56:	f200 8088 	bhi.w	fd6a <usb_isr+0x21e>
    fc5a:	e8df f002 	tbb	[pc, r2]
    fc5e:	7c7c      	.short	0x7c7c
    fc60:	86868686 	.word	0x86868686
    fc64:	86478686 	.word	0x86478686
    fc68:	8686      	.short	0x8686
    fc6a:	07          	.byte	0x07
    fc6b:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    fc6c:	6808      	ldr	r0, [r1, #0]
    fc6e:	4d70      	ldr	r5, [pc, #448]	; (fe30 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    fc70:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    fc72:	4f70      	ldr	r7, [pc, #448]	; (fe34 <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    fc74:	4e70      	ldr	r6, [pc, #448]	; (fe38 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    fc76:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    fc78:	b281      	uxth	r1, r0
    fc7a:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    fc7e:	4b67      	ldr	r3, [pc, #412]	; (fe1c <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    fc80:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    fc82:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    fc86:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    fc88:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    fc8a:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    fc8e:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    fc90:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    fc94:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    fc98:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    fc9c:	4c5b      	ldr	r4, [pc, #364]	; (fe0c <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    fc9e:	f200 80e3 	bhi.w	fe68 <usb_isr+0x31c>
    fca2:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    fca6:	f080 8346 	bcs.w	10336 <usb_isr+0x7ea>
    fcaa:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    fcae:	f000 82fc 	beq.w	102aa <usb_isr+0x75e>
    fcb2:	f200 828d 	bhi.w	101d0 <usb_isr+0x684>
    fcb6:	2980      	cmp	r1, #128	; 0x80
    fcb8:	f000 8377 	beq.w	103aa <usb_isr+0x85e>
    fcbc:	2982      	cmp	r1, #130	; 0x82
    fcbe:	f040 82fa 	bne.w	102b6 <usb_isr+0x76a>
    fcc2:	88a9      	ldrh	r1, [r5, #4]
    fcc4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    fcc8:	2904      	cmp	r1, #4
    fcca:	f200 82f4 	bhi.w	102b6 <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    fcce:	485b      	ldr	r0, [pc, #364]	; (fe3c <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    fcd0:	4c5b      	ldr	r4, [pc, #364]	; (fe40 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    fcd2:	0089      	lsls	r1, r1, #2
    fcd4:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    fcd6:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    fcd8:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    fcda:	7802      	ldrb	r2, [r0, #0]
    fcdc:	0793      	lsls	r3, r2, #30
    fcde:	f140 8455 	bpl.w	1058c <usb_isr+0xa40>
    fce2:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    fce6:	f04f 0e02 	mov.w	lr, #2
    fcea:	e342      	b.n	10372 <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    fcec:	4f51      	ldr	r7, [pc, #324]	; (fe34 <usb_isr+0x2e8>)
    fcee:	683a      	ldr	r2, [r7, #0]
		if (data) {
    fcf0:	b332      	cbz	r2, fd40 <usb_isr+0x1f4>
			size = ep0_tx_len;
    fcf2:	4b54      	ldr	r3, [pc, #336]	; (fe44 <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fcf4:	4e50      	ldr	r6, [pc, #320]	; (fe38 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    fcf6:	4954      	ldr	r1, [pc, #336]	; (fe48 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    fcf8:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fcfa:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    fcfc:	780d      	ldrb	r5, [r1, #0]
    fcfe:	2840      	cmp	r0, #64	; 0x40
    fd00:	4686      	mov	lr, r0
    fd02:	f045 0802 	orr.w	r8, r5, #2
    fd06:	bf28      	it	cs
    fd08:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fd0c:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    fd0e:	f084 0401 	eor.w	r4, r4, #1
    fd12:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    fd14:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fd18:	bf0c      	ite	eq
    fd1a:	2488      	moveq	r4, #136	; 0x88
    fd1c:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    fd1e:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    fd22:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    fd24:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fd28:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    fd2c:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    fd2e:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fd30:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    fd34:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    fd36:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    fd38:	2800      	cmp	r0, #0
    fd3a:	f000 8145 	beq.w	ffc8 <usb_isr+0x47c>
    fd3e:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    fd40:	4b3b      	ldr	r3, [pc, #236]	; (fe30 <usb_isr+0x2e4>)
    fd42:	881a      	ldrh	r2, [r3, #0]
    fd44:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    fd48:	d10f      	bne.n	fd6a <usb_isr+0x21e>
			setup.bRequest = 0;
    fd4a:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    fd4c:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    fd4e:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    fd50:	4b3e      	ldr	r3, [pc, #248]	; (fe4c <usb_isr+0x300>)
    fd52:	701a      	strb	r2, [r3, #0]
    fd54:	e009      	b.n	fd6a <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    fd56:	4a36      	ldr	r2, [pc, #216]	; (fe30 <usb_isr+0x2e4>)
    fd58:	8810      	ldrh	r0, [r2, #0]
    fd5a:	f242 0221 	movw	r2, #8225	; 0x2021
    fd5e:	4290      	cmp	r0, r2
    fd60:	f000 8137 	beq.w	ffd2 <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    fd64:	4a2d      	ldr	r2, [pc, #180]	; (fe1c <usb_isr+0x2d0>)
    fd66:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    fd6a:	4a39      	ldr	r2, [pc, #228]	; (fe50 <usb_isr+0x304>)
    fd6c:	2301      	movs	r3, #1
    fd6e:	7013      	strb	r3, [r2, #0]
    fd70:	e736      	b.n	fbe0 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    fd72:	4a2a      	ldr	r2, [pc, #168]	; (fe1c <usb_isr+0x2d0>)
    fd74:	4b2a      	ldr	r3, [pc, #168]	; (fe20 <usb_isr+0x2d4>)
    fd76:	f019 0f08 	tst.w	r9, #8
    fd7a:	bf18      	it	ne
    fd7c:	4613      	movne	r3, r2
    fd7e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    fd82:	e72d      	b.n	fbe0 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    fd84:	f000 fcf2 	bl	1076c <usb_free>
				packet = tx_first[endpoint];
    fd88:	4a32      	ldr	r2, [pc, #200]	; (fe54 <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    fd8a:	4933      	ldr	r1, [pc, #204]	; (fe58 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    fd8c:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    fd90:	2b00      	cmp	r3, #0
    fd92:	f000 81d1 	beq.w	10138 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    fd96:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    fd98:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    fd9a:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    fd9e:	f103 0208 	add.w	r2, r3, #8
    fda2:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    fda6:	2c03      	cmp	r4, #3
    fda8:	d805      	bhi.n	fdb6 <usb_isr+0x26a>
    fdaa:	e8df f004 	tbb	[pc, r4]
    fdae:	022c      	.short	0x022c
    fdb0:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    fdb2:	2202      	movs	r2, #2
    fdb4:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    fdb6:	881a      	ldrh	r2, [r3, #0]
    fdb8:	f019 0f08 	tst.w	r9, #8
    fdbc:	bf0c      	ite	eq
    fdbe:	2388      	moveq	r3, #136	; 0x88
    fdc0:	23c8      	movne	r3, #200	; 0xc8
    fdc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    fdc6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    fdca:	e709      	b.n	fbe0 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    fdcc:	07e0      	lsls	r0, r4, #31
    fdce:	f100 8181 	bmi.w	100d4 <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    fdd2:	0621      	lsls	r1, r4, #24
    fdd4:	f100 81f2 	bmi.w	101bc <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    fdd8:	07a2      	lsls	r2, r4, #30
    fdda:	d506      	bpl.n	fdea <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    fddc:	4a1f      	ldr	r2, [pc, #124]	; (fe5c <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    fdde:	4920      	ldr	r1, [pc, #128]	; (fe60 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    fde0:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    fde2:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    fde4:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    fde6:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    fde8:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    fdea:	06e3      	lsls	r3, r4, #27
    fdec:	d502      	bpl.n	fdf4 <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    fdee:	4b1c      	ldr	r3, [pc, #112]	; (fe60 <usb_isr+0x314>)
    fdf0:	2210      	movs	r2, #16
    fdf2:	701a      	strb	r2, [r3, #0]
	}

}
    fdf4:	b007      	add	sp, #28
    fdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    fdfa:	2204      	movs	r2, #4
    fdfc:	558a      	strb	r2, [r1, r6]
						break;
    fdfe:	e7da      	b.n	fdb6 <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    fe00:	2205      	movs	r2, #5
    fe02:	558a      	strb	r2, [r1, r6]
						break;
    fe04:	e7d7      	b.n	fdb6 <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    fe06:	2203      	movs	r2, #3
    fe08:	558a      	strb	r2, [r1, r6]
						break;
    fe0a:	e7d4      	b.n	fdb6 <usb_isr+0x26a>
    fe0c:	1fff0000 	.word	0x1fff0000
    fe10:	1fff6974 	.word	0x1fff6974
    fe14:	1fff6920 	.word	0x1fff6920
    fe18:	1fff6c50 	.word	0x1fff6c50
    fe1c:	004000c8 	.word	0x004000c8
    fe20:	00400088 	.word	0x00400088
    fe24:	1fff69fc 	.word	0x1fff69fc
    fe28:	1fff6985 	.word	0x1fff6985
    fe2c:	1fff6a04 	.word	0x1fff6a04
    fe30:	1fff69e8 	.word	0x1fff69e8
    fe34:	1fff691c 	.word	0x1fff691c
    fe38:	1fff6984 	.word	0x1fff6984
    fe3c:	400720c0 	.word	0x400720c0
    fe40:	1fff69f4 	.word	0x1fff69f4
    fe44:	1fff6930 	.word	0x1fff6930
    fe48:	1fff69f0 	.word	0x1fff69f0
    fe4c:	40072098 	.word	0x40072098
    fe50:	40072094 	.word	0x40072094
    fe54:	1fff69c8 	.word	0x1fff69c8
    fe58:	1fff6a00 	.word	0x1fff6a00
    fe5c:	40072088 	.word	0x40072088
    fe60:	40072080 	.word	0x40072080
    fe64:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    fe68:	f242 0021 	movw	r0, #8225	; 0x2021
    fe6c:	4281      	cmp	r1, r0
    fe6e:	f000 812a 	beq.w	100c6 <usb_isr+0x57a>
    fe72:	f200 80d8 	bhi.w	10026 <usb_isr+0x4da>
    fe76:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    fe7a:	f000 8276 	beq.w	1036a <usb_isr+0x81e>
    fe7e:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    fe82:	f040 8218 	bne.w	102b6 <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    fe86:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    fe88:	49b3      	ldr	r1, [pc, #716]	; (10158 <usb_isr+0x60c>)
    fe8a:	78a8      	ldrb	r0, [r5, #2]
    fe8c:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    fe8e:	0612      	lsls	r2, r2, #24
    fe90:	f100 8337 	bmi.w	10502 <usb_isr+0x9b6>
    fe94:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    fe98:	49b0      	ldr	r1, [pc, #704]	; (1015c <usb_isr+0x610>)
    fe9a:	0613      	lsls	r3, r2, #24
    fe9c:	f100 832c 	bmi.w	104f8 <usb_isr+0x9ac>
    fea0:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    fea4:	49ad      	ldr	r1, [pc, #692]	; (1015c <usb_isr+0x610>)
    fea6:	0615      	lsls	r5, r2, #24
    fea8:	f100 82ff 	bmi.w	104aa <usb_isr+0x95e>
    feac:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    feb0:	49aa      	ldr	r1, [pc, #680]	; (1015c <usb_isr+0x610>)
    feb2:	0614      	lsls	r4, r2, #24
    feb4:	f100 82f4 	bmi.w	104a0 <usb_isr+0x954>
    feb8:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    febc:	49a7      	ldr	r1, [pc, #668]	; (1015c <usb_isr+0x610>)
    febe:	0610      	lsls	r0, r2, #24
    fec0:	f100 8347 	bmi.w	10552 <usb_isr+0xa06>
    fec4:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    fec8:	49a4      	ldr	r1, [pc, #656]	; (1015c <usb_isr+0x610>)
    feca:	0612      	lsls	r2, r2, #24
    fecc:	f100 833c 	bmi.w	10548 <usb_isr+0x9fc>
    fed0:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    fed4:	49a1      	ldr	r1, [pc, #644]	; (1015c <usb_isr+0x610>)
    fed6:	0613      	lsls	r3, r2, #24
    fed8:	f100 8331 	bmi.w	1053e <usb_isr+0x9f2>
    fedc:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    fee0:	499e      	ldr	r1, [pc, #632]	; (1015c <usb_isr+0x610>)
    fee2:	0615      	lsls	r5, r2, #24
    fee4:	f100 8326 	bmi.w	10534 <usb_isr+0x9e8>
    fee8:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    feec:	499b      	ldr	r1, [pc, #620]	; (1015c <usb_isr+0x610>)
    feee:	0614      	lsls	r4, r2, #24
    fef0:	f100 831b 	bmi.w	1052a <usb_isr+0x9de>
    fef4:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    fef8:	4998      	ldr	r1, [pc, #608]	; (1015c <usb_isr+0x610>)
    fefa:	0610      	lsls	r0, r2, #24
    fefc:	f100 8310 	bmi.w	10520 <usb_isr+0x9d4>
    ff00:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    ff04:	4995      	ldr	r1, [pc, #596]	; (1015c <usb_isr+0x610>)
    ff06:	0612      	lsls	r2, r2, #24
    ff08:	f100 8305 	bmi.w	10516 <usb_isr+0x9ca>
    ff0c:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    ff10:	4992      	ldr	r1, [pc, #584]	; (1015c <usb_isr+0x610>)
    ff12:	0613      	lsls	r3, r2, #24
    ff14:	f100 82fa 	bmi.w	1050c <usb_isr+0x9c0>
    ff18:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    ff1c:	498f      	ldr	r1, [pc, #572]	; (1015c <usb_isr+0x610>)
    ff1e:	0615      	lsls	r5, r2, #24
    ff20:	f100 832e 	bmi.w	10580 <usb_isr+0xa34>
    ff24:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    ff28:	498c      	ldr	r1, [pc, #560]	; (1015c <usb_isr+0x610>)
    ff2a:	0614      	lsls	r4, r2, #24
    ff2c:	f100 8322 	bmi.w	10574 <usb_isr+0xa28>
    ff30:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    ff34:	4989      	ldr	r1, [pc, #548]	; (1015c <usb_isr+0x610>)
    ff36:	0610      	lsls	r0, r2, #24
    ff38:	f100 8316 	bmi.w	10568 <usb_isr+0xa1c>
    ff3c:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    ff40:	4986      	ldr	r1, [pc, #536]	; (1015c <usb_isr+0x610>)
    ff42:	0612      	lsls	r2, r2, #24
    ff44:	f100 830a 	bmi.w	1055c <usb_isr+0xa10>
    ff48:	4885      	ldr	r0, [pc, #532]	; (10160 <usb_isr+0x614>)
    ff4a:	4a86      	ldr	r2, [pc, #536]	; (10164 <usb_isr+0x618>)
    ff4c:	4986      	ldr	r1, [pc, #536]	; (10168 <usb_isr+0x61c>)
    ff4e:	9001      	str	r0, [sp, #4]
    ff50:	4886      	ldr	r0, [pc, #536]	; (1016c <usb_isr+0x620>)
    ff52:	4c87      	ldr	r4, [pc, #540]	; (10170 <usb_isr+0x624>)
    ff54:	4d87      	ldr	r5, [pc, #540]	; (10174 <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ff56:	9402      	str	r4, [sp, #8]
}



void usb_isr(void)
{
    ff58:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ff5a:	9704      	str	r7, [sp, #16]
    ff5c:	9605      	str	r6, [sp, #20]
    ff5e:	4680      	mov	r8, r0
    ff60:	461c      	mov	r4, r3
    ff62:	460f      	mov	r7, r1
    ff64:	4616      	mov	r6, r2
    ff66:	9503      	str	r5, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    ff68:	6830      	ldr	r0, [r6, #0]
			while (p) {
    ff6a:	b128      	cbz	r0, ff78 <usb_isr+0x42c>
				n = p->next;
    ff6c:	6845      	ldr	r5, [r0, #4]
				usb_free(p);
    ff6e:	f000 fbfd 	bl	1076c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    ff72:	4628      	mov	r0, r5
    ff74:	2d00      	cmp	r5, #0
    ff76:	d1f9      	bne.n	ff6c <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    ff78:	2300      	movs	r3, #0
    ff7a:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    ff7c:	9b03      	ldr	r3, [sp, #12]
			p = tx_first[i];
    ff7e:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    ff80:	461a      	mov	r2, r3
    ff82:	2300      	movs	r3, #0
    ff84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			p = tx_first[i];
			while (p) {
    ff88:	b128      	cbz	r0, ff96 <usb_isr+0x44a>
				n = p->next;
    ff8a:	6845      	ldr	r5, [r0, #4]
				usb_free(p);
    ff8c:	f000 fbee 	bl	1076c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    ff90:	4628      	mov	r0, r5
    ff92:	2d00      	cmp	r5, #0
    ff94:	d1f9      	bne.n	ff8a <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    ff96:	2200      	movs	r2, #0
    ff98:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    ff9a:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    ff9c:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    ffa0:	4611      	mov	r1, r2
    ffa2:	2200      	movs	r2, #0
    ffa4:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    ffa8:	9a02      	ldr	r2, [sp, #8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    ffaa:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    ffac:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    ffae:	f04f 0100 	mov.w	r1, #0
    ffb2:	f822 1014 	strh.w	r1, [r2, r4, lsl #1]
			switch (tx_state[i]) {
    ffb6:	2b03      	cmp	r3, #3
    ffb8:	f200 812b 	bhi.w	10212 <usb_isr+0x6c6>
    ffbc:	e8df f013 	tbh	[pc, r3, lsl #1]
    ffc0:	01250170 	.word	0x01250170
    ffc4:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    ffc8:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    ffcc:	bf18      	it	ne
    ffce:	2200      	movne	r2, #0
    ffd0:	e6b5      	b.n	fd3e <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    ffd2:	4a69      	ldr	r2, [pc, #420]	; (10178 <usb_isr+0x62c>)
    ffd4:	780d      	ldrb	r5, [r1, #0]
    ffd6:	7848      	ldrb	r0, [r1, #1]
    ffd8:	7015      	strb	r5, [r2, #0]
    ffda:	7050      	strb	r0, [r2, #1]
    ffdc:	788d      	ldrb	r5, [r1, #2]
    ffde:	78c8      	ldrb	r0, [r1, #3]
    ffe0:	7095      	strb	r5, [r2, #2]
    ffe2:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    ffe4:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    ffe6:	790d      	ldrb	r5, [r1, #4]
    ffe8:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    ffea:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    ffec:	794d      	ldrb	r5, [r1, #5]
    ffee:	7989      	ldrb	r1, [r1, #6]
    fff0:	7155      	strb	r5, [r2, #5]
    fff2:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    fff4:	f000 819b 	beq.w	1032e <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    fff8:	4960      	ldr	r1, [pc, #384]	; (1017c <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fffa:	4e61      	ldr	r6, [pc, #388]	; (10180 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    fffc:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    fffe:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   10000:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10004:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10006:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   1000a:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1000c:	bf0c      	ite	eq
   1000e:	2188      	moveq	r1, #136	; 0x88
   10010:	21c8      	movne	r1, #200	; 0xc8
   10012:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10016:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   1001a:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1001e:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   10020:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   10022:	6051      	str	r1, [r2, #4]
   10024:	e69e      	b.n	fd64 <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   10026:	f242 2021 	movw	r0, #8737	; 0x2221
   1002a:	4281      	cmp	r1, r0
   1002c:	f040 81cb 	bne.w	103c6 <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
   10030:	4b54      	ldr	r3, [pc, #336]	; (10184 <usb_isr+0x638>)
   10032:	4c55      	ldr	r4, [pc, #340]	; (10188 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
   10034:	4955      	ldr	r1, [pc, #340]	; (1018c <usb_isr+0x640>)
   10036:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
   10038:	681d      	ldr	r5, [r3, #0]
   1003a:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
   1003c:	f8cd e004 	str.w	lr, [sp, #4]
   10040:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   10042:	2000      	movs	r0, #0
   10044:	9002      	str	r0, [sp, #8]
   10046:	4680      	mov	r8, r0
   10048:	4684      	mov	ip, r0
   1004a:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1004c:	494b      	ldr	r1, [pc, #300]	; (1017c <usb_isr+0x630>)
   1004e:	780d      	ldrb	r5, [r1, #0]
   10050:	f045 0e02 	orr.w	lr, r5, #2
   10054:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
   10058:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1005a:	9b01      	ldr	r3, [sp, #4]
   1005c:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1005e:	9b03      	ldr	r3, [sp, #12]
   10060:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10062:	bf0c      	ite	eq
   10064:	2488      	moveq	r4, #136	; 0x88
   10066:	24c8      	movne	r4, #200	; 0xc8
   10068:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   1006c:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10070:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
   10074:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
   10076:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10078:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 1015c <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
   1007c:	4b40      	ldr	r3, [pc, #256]	; (10180 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
   1007e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1017c <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
   10082:	2800      	cmp	r0, #0
   10084:	f040 811e 	bne.w	102c4 <usb_isr+0x778>
   10088:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
   1008c:	d11b      	bne.n	100c6 <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1008e:	f044 0c02 	orr.w	ip, r4, #2
   10092:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
   10096:	9c02      	ldr	r4, [sp, #8]
   10098:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 1015c <usb_isr+0x610>
   1009c:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1009e:	2a00      	cmp	r2, #0
   100a0:	f040 8126 	bne.w	102f0 <usb_isr+0x7a4>
   100a4:	0402      	lsls	r2, r0, #16
   100a6:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
   100aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   100ae:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   100b2:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
   100b4:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
   100b6:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   100b8:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
   100ba:	2840      	cmp	r0, #64	; 0x40
   100bc:	d103      	bne.n	100c6 <usb_isr+0x57a>
   100be:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
   100c0:	4a33      	ldr	r2, [pc, #204]	; (10190 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
   100c2:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
   100c4:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   100c6:	4a33      	ldr	r2, [pc, #204]	; (10194 <usb_isr+0x648>)
   100c8:	2301      	movs	r3, #1
   100ca:	7013      	strb	r3, [r2, #0]
   100cc:	e64d      	b.n	fd6a <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
   100ce:	f000 fd0b 	bl	10ae8 <usb_serial_flush_callback>
   100d2:	e5a5      	b.n	fc20 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   100d4:	4b21      	ldr	r3, [pc, #132]	; (1015c <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
   100d6:	482f      	ldr	r0, [pc, #188]	; (10194 <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
   100d8:	4928      	ldr	r1, [pc, #160]	; (1017c <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
   100da:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
   100dc:	f04f 0e02 	mov.w	lr, #2
   100e0:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   100e4:	4f2c      	ldr	r7, [pc, #176]	; (10198 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
   100e6:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
   100e8:	492c      	ldr	r1, [pc, #176]	; (1019c <usb_isr+0x650>)
   100ea:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
   100ec:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
   100ee:	4e2c      	ldr	r6, [pc, #176]	; (101a0 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
   100f0:	4d2c      	ldr	r5, [pc, #176]	; (101a4 <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
   100f2:	4c2d      	ldr	r4, [pc, #180]	; (101a8 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
   100f4:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   100f6:	210d      	movs	r1, #13
   100f8:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
   100fa:	21ff      	movs	r1, #255	; 0xff
   100fc:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
   100fe:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 101b8 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
   10102:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
   10104:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   10106:	4d29      	ldr	r5, [pc, #164]	; (101ac <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   10108:	4a29      	ldr	r2, [pc, #164]	; (101b0 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
   1010a:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   1010e:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
   10110:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
   10112:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
   10116:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
   10118:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
   1011a:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
   1011c:	b007      	add	sp, #28
   1011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
   10122:	4a24      	ldr	r2, [pc, #144]	; (101b4 <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
   10124:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
   10128:	7813      	ldrb	r3, [r2, #0]
   1012a:	3301      	adds	r3, #1
   1012c:	7013      	strb	r3, [r2, #0]
   1012e:	e557      	b.n	fbe0 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
   10130:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
   10134:	4d0f      	ldr	r5, [pc, #60]	; (10174 <usb_isr+0x628>)
   10136:	e53a      	b.n	fbae <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
   10138:	5d8b      	ldrb	r3, [r1, r6]
   1013a:	2b03      	cmp	r3, #3
   1013c:	f200 80f0 	bhi.w	10320 <usb_isr+0x7d4>
   10140:	a201      	add	r2, pc, #4	; (adr r2, 10148 <usb_isr+0x5fc>)
   10142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10146:	bf00      	nop
   10148:	0000fbe1 	.word	0x0000fbe1
   1014c:	0000fbe1 	.word	0x0000fbe1
   10150:	00010205 	.word	0x00010205
   10154:	000101ff 	.word	0x000101ff
   10158:	1fff69fc 	.word	0x1fff69fc
   1015c:	1fff0000 	.word	0x1fff0000
   10160:	1fff69d8 	.word	0x1fff69d8
   10164:	1fff6974 	.word	0x1fff6974
   10168:	1fff69c8 	.word	0x1fff69c8
   1016c:	1fff6a00 	.word	0x1fff6a00
   10170:	1fff6c50 	.word	0x1fff6c50
   10174:	1fff6920 	.word	0x1fff6920
   10178:	1fff6c58 	.word	0x1fff6c58
   1017c:	1fff69f0 	.word	0x1fff69f0
   10180:	1fff6984 	.word	0x1fff6984
   10184:	1fff6804 	.word	0x1fff6804
   10188:	1fff6c60 	.word	0x1fff6c60
   1018c:	1fff6a14 	.word	0x1fff6a14
   10190:	1fff6930 	.word	0x1fff6930
   10194:	40072094 	.word	0x40072094
   10198:	400720c0 	.word	0x400720c0
   1019c:	00400088 	.word	0x00400088
   101a0:	40072088 	.word	0x40072088
   101a4:	40072080 	.word	0x40072080
   101a8:	40072098 	.word	0x40072098
   101ac:	1fff6934 	.word	0x1fff6934
   101b0:	1fff6988 	.word	0x1fff6988
   101b4:	1fff69f1 	.word	0x1fff69f1
   101b8:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   101bc:	49bd      	ldr	r1, [pc, #756]	; (104b4 <usb_isr+0x968>)
		USB0_ISTAT = USB_ISTAT_STALL;
   101be:	4bbe      	ldr	r3, [pc, #760]	; (104b8 <usb_isr+0x96c>)
   101c0:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   101c2:	200d      	movs	r0, #13
   101c4:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
   101c6:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
   101c8:	07a2      	lsls	r2, r4, #30
   101ca:	f57f ae0e 	bpl.w	fdea <usb_isr+0x29e>
   101ce:	e605      	b.n	fddc <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   101d0:	f240 3202 	movw	r2, #770	; 0x302
   101d4:	4291      	cmp	r1, r2
   101d6:	f040 80ee 	bne.w	103b6 <usb_isr+0x86a>
   101da:	88a9      	ldrh	r1, [r5, #4]
   101dc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   101e0:	2904      	cmp	r1, #4
   101e2:	d868      	bhi.n	102b6 <usb_isr+0x76a>
   101e4:	886a      	ldrh	r2, [r5, #2]
   101e6:	2a00      	cmp	r2, #0
   101e8:	d165      	bne.n	102b6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
   101ea:	48b2      	ldr	r0, [pc, #712]	; (104b4 <usb_isr+0x968>)
   101ec:	f8cd e004 	str.w	lr, [sp, #4]
   101f0:	0089      	lsls	r1, r1, #2
   101f2:	4408      	add	r0, r1
   101f4:	7801      	ldrb	r1, [r0, #0]
   101f6:	f041 0102 	orr.w	r1, r1, #2
   101fa:	7001      	strb	r1, [r0, #0]
   101fc:	e721      	b.n	10042 <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
   101fe:	2301      	movs	r3, #1
   10200:	558b      	strb	r3, [r1, r6]
						break;
   10202:	e4ed      	b.n	fbe0 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
   10204:	2300      	movs	r3, #0
   10206:	558b      	strb	r3, [r1, r6]
						break;
   10208:	e4ea      	b.n	fbe0 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
   1020a:	f04f 0301 	mov.w	r3, #1
   1020e:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
   10212:	3401      	adds	r4, #1
   10214:	2c04      	cmp	r4, #4
   10216:	f106 0604 	add.w	r6, r6, #4
   1021a:	f107 0704 	add.w	r7, r7, #4
   1021e:	f108 0801 	add.w	r8, r8, #1
   10222:	f47f aea1 	bne.w	ff68 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   10226:	4ca5      	ldr	r4, [pc, #660]	; (104bc <usb_isr+0x970>)
			*reg = epconf;
   10228:	4ba5      	ldr	r3, [pc, #660]	; (104c0 <usb_isr+0x974>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1022a:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
   1022c:	4da5      	ldr	r5, [pc, #660]	; (104c4 <usb_isr+0x978>)
   1022e:	9f04      	ldr	r7, [sp, #16]
   10230:	9e05      	ldr	r6, [sp, #20]
   10232:	2100      	movs	r1, #0
   10234:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   10236:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   10238:	0713      	lsls	r3, r2, #28
   1023a:	f100 8105 	bmi.w	10448 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1023e:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
   10240:	49a1      	ldr	r1, [pc, #644]	; (104c8 <usb_isr+0x97c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   10242:	f8df 8290 	ldr.w	r8, [pc, #656]	; 104d4 <usb_isr+0x988>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   10246:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   10248:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1024a:	f04f 0100 	mov.w	r1, #0
   1024e:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
   10252:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   10256:	f100 80e1 	bmi.w	1041c <usb_isr+0x8d0>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   1025a:	499c      	ldr	r1, [pc, #624]	; (104cc <usb_isr+0x980>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   1025c:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
   1025e:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   10260:	2100      	movs	r1, #0
   10262:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
   10266:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   1026a:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1026c:	f8df 8264 	ldr.w	r8, [pc, #612]	; 104d4 <usb_isr+0x988>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   10270:	f100 8100 	bmi.w	10474 <usb_isr+0x928>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
   10274:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
   10276:	4996      	ldr	r1, [pc, #600]	; (104d0 <usb_isr+0x984>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   10278:	4c96      	ldr	r4, [pc, #600]	; (104d4 <usb_isr+0x988>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
   1027a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   1027c:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   1027e:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   10280:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
   10284:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
   10288:	f100 80b0 	bmi.w	103ec <usb_isr+0x8a0>
   1028c:	7833      	ldrb	r3, [r6, #0]
   1028e:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
   10290:	2100      	movs	r1, #0
   10292:	f083 0201 	eor.w	r2, r3, #1
   10296:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
   1029a:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
   1029e:	e6d0      	b.n	10042 <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
   102a0:	f04f 0300 	mov.w	r3, #0
   102a4:	f888 3000 	strb.w	r3, [r8]
   102a8:	e7b3      	b.n	10212 <usb_isr+0x6c6>
   102aa:	88a9      	ldrh	r1, [r5, #4]
   102ac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   102b0:	2904      	cmp	r1, #4
   102b2:	f240 808d 	bls.w	103d0 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
   102b6:	4a7f      	ldr	r2, [pc, #508]	; (104b4 <usb_isr+0x968>)
   102b8:	230f      	movs	r3, #15
   102ba:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
   102bc:	4a86      	ldr	r2, [pc, #536]	; (104d8 <usb_isr+0x98c>)
   102be:	2301      	movs	r3, #1
   102c0:	7013      	strb	r3, [r2, #0]
   102c2:	e552      	b.n	fd6a <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
   102c4:	2840      	cmp	r0, #64	; 0x40
   102c6:	f67f aee2 	bls.w	1008e <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   102ca:	f044 0402 	orr.w	r4, r4, #2
   102ce:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
   102d2:	9e02      	ldr	r6, [sp, #8]
   102d4:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   102d6:	b1ba      	cbz	r2, 10308 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
   102d8:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   102dc:	4a7f      	ldr	r2, [pc, #508]	; (104dc <usb_isr+0x990>)
	ep0_tx_data_toggle ^= 1;
   102de:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   102e0:	4633      	mov	r3, r6
   102e2:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   102e4:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   102e8:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   102ea:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
   102ee:	e6e7      	b.n	100c0 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
   102f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   102f4:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   102f6:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   102f8:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   102fa:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   102fc:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   10300:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10302:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
   10306:	e6d8      	b.n	100ba <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
   10308:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1030c:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   1030e:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   10310:	4a73      	ldr	r2, [pc, #460]	; (104e0 <usb_isr+0x994>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
   10312:	f888 5000 	strb.w	r5, [r8]
   10316:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
   10318:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   1031a:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
   1031e:	e6cf      	b.n	100c0 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
   10320:	f019 0f08 	tst.w	r9, #8
   10324:	bf0c      	ite	eq
   10326:	2302      	moveq	r3, #2
   10328:	2303      	movne	r3, #3
   1032a:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
   1032c:	e458      	b.n	fbe0 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
   1032e:	4a6d      	ldr	r2, [pc, #436]	; (104e4 <usb_isr+0x998>)
   10330:	210f      	movs	r1, #15
   10332:	7011      	strb	r1, [r2, #0]
   10334:	e660      	b.n	fff8 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
   10336:	4a6c      	ldr	r2, [pc, #432]	; (104e8 <usb_isr+0x99c>)
   10338:	6854      	ldr	r4, [r2, #4]
   1033a:	2c00      	cmp	r4, #0
   1033c:	d0bb      	beq.n	102b6 <usb_isr+0x76a>
   1033e:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   10340:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   10344:	e003      	b.n	1034e <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
   10346:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
   10348:	6854      	ldr	r4, [r2, #4]
   1034a:	2c00      	cmp	r4, #0
   1034c:	d0b3      	beq.n	102b6 <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   1034e:	8813      	ldrh	r3, [r2, #0]
   10350:	4283      	cmp	r3, r0
   10352:	d1f8      	bne.n	10346 <usb_isr+0x7fa>
   10354:	8853      	ldrh	r3, [r2, #2]
   10356:	4573      	cmp	r3, lr
   10358:	d1f5      	bne.n	10346 <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
   1035a:	0a00      	lsrs	r0, r0, #8
   1035c:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
   1035e:	bf0c      	ite	eq
   10360:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
   10364:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
   10368:	e003      	b.n	10372 <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
   1036a:	4a60      	ldr	r2, [pc, #384]	; (104ec <usb_isr+0x9a0>)
   1036c:	4c60      	ldr	r4, [pc, #384]	; (104f0 <usb_isr+0x9a4>)
   1036e:	7812      	ldrb	r2, [r2, #0]
   10370:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   10372:	88e8      	ldrh	r0, [r5, #6]
   10374:	4570      	cmp	r0, lr
   10376:	f080 8131 	bcs.w	105dc <usb_isr+0xa90>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
   1037a:	495e      	ldr	r1, [pc, #376]	; (104f4 <usb_isr+0x9a8>)
   1037c:	780d      	ldrb	r5, [r1, #0]
   1037e:	2840      	cmp	r0, #64	; 0x40
   10380:	4684      	mov	ip, r0
   10382:	f045 0e02 	orr.w	lr, r5, #2
   10386:	bf28      	it	cs
   10388:	f04f 0c40 	movcs.w	ip, #64	; 0x40
   1038c:	eb04 030c 	add.w	r3, r4, ip
   10390:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
   10394:	9302      	str	r3, [sp, #8]
   10396:	2301      	movs	r3, #1
   10398:	6054      	str	r4, [r2, #4]
   1039a:	ebcc 0000 	rsb	r0, ip, r0
   1039e:	ea4f 480c 	mov.w	r8, ip, lsl #16
   103a2:	2200      	movs	r2, #0
   103a4:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
   103a6:	24c8      	movs	r4, #200	; 0xc8
   103a8:	e65e      	b.n	10068 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   103aa:	4c51      	ldr	r4, [pc, #324]	; (104f0 <usb_isr+0x9a4>)
		reply_buffer[1] = 0;
		datalen = 2;
   103ac:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
   103b0:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
   103b2:	7062      	strb	r2, [r4, #1]
   103b4:	e7dd      	b.n	10372 <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
   103b6:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
   103ba:	f47f af7c 	bne.w	102b6 <usb_isr+0x76a>
   103be:	2301      	movs	r3, #1
   103c0:	2200      	movs	r2, #0
   103c2:	9301      	str	r3, [sp, #4]
   103c4:	e63d      	b.n	10042 <usb_isr+0x4f6>
   103c6:	f242 3221 	movw	r2, #8993	; 0x2321
   103ca:	4291      	cmp	r1, r2
   103cc:	d0f7      	beq.n	103be <usb_isr+0x872>
   103ce:	e772      	b.n	102b6 <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
   103d0:	886a      	ldrh	r2, [r5, #2]
   103d2:	2a00      	cmp	r2, #0
   103d4:	f47f af6f 	bne.w	102b6 <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
   103d8:	4836      	ldr	r0, [pc, #216]	; (104b4 <usb_isr+0x968>)
   103da:	f8cd e004 	str.w	lr, [sp, #4]
   103de:	0089      	lsls	r1, r1, #2
   103e0:	4408      	add	r0, r1
   103e2:	7801      	ldrb	r1, [r0, #0]
   103e4:	f021 0102 	bic.w	r1, r1, #2
   103e8:	7001      	strb	r1, [r0, #0]
   103ea:	e62a      	b.n	10042 <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   103ec:	f000 f99e 	bl	1072c <usb_malloc>
				if (p) {
   103f0:	2800      	cmp	r0, #0
   103f2:	f000 80e6 	beq.w	105c2 <usb_isr+0xa76>
					table[index(i, RX, EVEN)].addr = p->buf;
   103f6:	3008      	adds	r0, #8
   103f8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   103fc:	4838      	ldr	r0, [pc, #224]	; (104e0 <usb_isr+0x994>)
   103fe:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   10402:	f000 f993 	bl	1072c <usb_malloc>
   10406:	4a33      	ldr	r2, [pc, #204]	; (104d4 <usb_isr+0x988>)
				if (p) {
   10408:	2800      	cmp	r0, #0
   1040a:	f000 80d4 	beq.w	105b6 <usb_isr+0xa6a>
					table[index(i, RX, ODD)].addr = p->buf;
   1040e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10410:	4932      	ldr	r1, [pc, #200]	; (104dc <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   10412:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10416:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
   1041a:	e737      	b.n	1028c <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   1041c:	f000 f986 	bl	1072c <usb_malloc>
				if (p) {
   10420:	2800      	cmp	r0, #0
   10422:	f000 80bb 	beq.w	1059c <usb_isr+0xa50>
					table[index(i, RX, EVEN)].addr = p->buf;
   10426:	3008      	adds	r0, #8
   10428:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   1042c:	482c      	ldr	r0, [pc, #176]	; (104e0 <usb_isr+0x994>)
   1042e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   10432:	f000 f97b 	bl	1072c <usb_malloc>
   10436:	4a27      	ldr	r2, [pc, #156]	; (104d4 <usb_isr+0x988>)
				if (p) {
   10438:	2800      	cmp	r0, #0
   1043a:	f000 80aa 	beq.w	10592 <usb_isr+0xa46>
					table[index(i, RX, ODD)].addr = p->buf;
   1043e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10440:	4926      	ldr	r1, [pc, #152]	; (104dc <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   10442:	64d0      	str	r0, [r2, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10444:	6491      	str	r1, [r2, #72]	; 0x48
   10446:	e708      	b.n	1025a <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   10448:	f000 f970 	bl	1072c <usb_malloc>
				if (p) {
   1044c:	2800      	cmp	r0, #0
   1044e:	f000 80c1 	beq.w	105d4 <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
   10452:	3008      	adds	r0, #8
   10454:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   10458:	4821      	ldr	r0, [pc, #132]	; (104e0 <usb_isr+0x994>)
   1045a:	f8c9 0020 	str.w	r0, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   1045e:	f000 f965 	bl	1072c <usb_malloc>
   10462:	4a1c      	ldr	r2, [pc, #112]	; (104d4 <usb_isr+0x988>)
				if (p) {
   10464:	2800      	cmp	r0, #0
   10466:	f000 80b0 	beq.w	105ca <usb_isr+0xa7e>
					table[index(i, RX, ODD)].addr = p->buf;
   1046a:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1046c:	491b      	ldr	r1, [pc, #108]	; (104dc <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   1046e:	62d0      	str	r0, [r2, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10470:	6291      	str	r1, [r2, #40]	; 0x28
   10472:	e6e4      	b.n	1023e <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
   10474:	f000 f95a 	bl	1072c <usb_malloc>
				if (p) {
   10478:	2800      	cmp	r0, #0
   1047a:	f000 8098 	beq.w	105ae <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
   1047e:	3008      	adds	r0, #8
   10480:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
   10484:	4816      	ldr	r0, [pc, #88]	; (104e0 <usb_isr+0x994>)
   10486:	f8c9 0060 	str.w	r0, [r9, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
   1048a:	f000 f94f 	bl	1072c <usb_malloc>
   1048e:	4a11      	ldr	r2, [pc, #68]	; (104d4 <usb_isr+0x988>)
				if (p) {
   10490:	2800      	cmp	r0, #0
   10492:	f000 8087 	beq.w	105a4 <usb_isr+0xa58>
					table[index(i, RX, ODD)].addr = p->buf;
   10496:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   10498:	4910      	ldr	r1, [pc, #64]	; (104dc <usb_isr+0x990>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
   1049a:	66d0      	str	r0, [r2, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
   1049c:	6691      	str	r1, [r2, #104]	; 0x68
   1049e:	e6e9      	b.n	10274 <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
   104a0:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   104a2:	3808      	subs	r0, #8
   104a4:	f000 f962 	bl	1076c <usb_free>
   104a8:	e506      	b.n	feb8 <usb_isr+0x36c>
   104aa:	6b48      	ldr	r0, [r1, #52]	; 0x34
   104ac:	3808      	subs	r0, #8
   104ae:	f000 f95d 	bl	1076c <usb_free>
   104b2:	e4fb      	b.n	feac <usb_isr+0x360>
   104b4:	400720c0 	.word	0x400720c0
   104b8:	40072080 	.word	0x40072080
   104bc:	000179b4 	.word	0x000179b4
   104c0:	400720c4 	.word	0x400720c4
   104c4:	1fff69f1 	.word	0x1fff69f1
   104c8:	400720c8 	.word	0x400720c8
   104cc:	400720cc 	.word	0x400720cc
   104d0:	400720d0 	.word	0x400720d0
   104d4:	1fff0000 	.word	0x1fff0000
   104d8:	40072094 	.word	0x40072094
   104dc:	004000c8 	.word	0x004000c8
   104e0:	00400088 	.word	0x00400088
   104e4:	1fff6985 	.word	0x1fff6985
   104e8:	000179b8 	.word	0x000179b8
   104ec:	1fff69fc 	.word	0x1fff69fc
   104f0:	1fff69f4 	.word	0x1fff69f4
   104f4:	1fff69f0 	.word	0x1fff69f0
   104f8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
   104fa:	3808      	subs	r0, #8
   104fc:	f000 f936 	bl	1076c <usb_free>
   10500:	e4ce      	b.n	fea0 <usb_isr+0x354>
   10502:	6a60      	ldr	r0, [r4, #36]	; 0x24
   10504:	3808      	subs	r0, #8
   10506:	f000 f931 	bl	1076c <usb_free>
   1050a:	e4c3      	b.n	fe94 <usb_isr+0x348>
   1050c:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
   1050e:	3808      	subs	r0, #8
   10510:	f000 f92c 	bl	1076c <usb_free>
   10514:	e500      	b.n	ff18 <usb_isr+0x3cc>
   10516:	6f48      	ldr	r0, [r1, #116]	; 0x74
   10518:	3808      	subs	r0, #8
   1051a:	f000 f927 	bl	1076c <usb_free>
   1051e:	e4f5      	b.n	ff0c <usb_isr+0x3c0>
   10520:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
   10522:	3808      	subs	r0, #8
   10524:	f000 f922 	bl	1076c <usb_free>
   10528:	e4ea      	b.n	ff00 <usb_isr+0x3b4>
   1052a:	6e48      	ldr	r0, [r1, #100]	; 0x64
   1052c:	3808      	subs	r0, #8
   1052e:	f000 f91d 	bl	1076c <usb_free>
   10532:	e4df      	b.n	fef4 <usb_isr+0x3a8>
   10534:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
   10536:	3808      	subs	r0, #8
   10538:	f000 f918 	bl	1076c <usb_free>
   1053c:	e4d4      	b.n	fee8 <usb_isr+0x39c>
   1053e:	6d48      	ldr	r0, [r1, #84]	; 0x54
   10540:	3808      	subs	r0, #8
   10542:	f000 f913 	bl	1076c <usb_free>
   10546:	e4c9      	b.n	fedc <usb_isr+0x390>
   10548:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
   1054a:	3808      	subs	r0, #8
   1054c:	f000 f90e 	bl	1076c <usb_free>
   10550:	e4be      	b.n	fed0 <usb_isr+0x384>
   10552:	6c48      	ldr	r0, [r1, #68]	; 0x44
   10554:	3808      	subs	r0, #8
   10556:	f000 f909 	bl	1076c <usb_free>
   1055a:	e4b3      	b.n	fec4 <usb_isr+0x378>
   1055c:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
   10560:	3808      	subs	r0, #8
   10562:	f000 f903 	bl	1076c <usb_free>
   10566:	e4ef      	b.n	ff48 <usb_isr+0x3fc>
   10568:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
   1056c:	3808      	subs	r0, #8
   1056e:	f000 f8fd 	bl	1076c <usb_free>
   10572:	e4e3      	b.n	ff3c <usb_isr+0x3f0>
   10574:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
   10578:	3808      	subs	r0, #8
   1057a:	f000 f8f7 	bl	1076c <usb_free>
   1057e:	e4d7      	b.n	ff30 <usb_isr+0x3e4>
   10580:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
   10584:	3808      	subs	r0, #8
   10586:	f000 f8f1 	bl	1076c <usb_free>
   1058a:	e4cb      	b.n	ff24 <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
   1058c:	f04f 0e02 	mov.w	lr, #2
   10590:	e6ef      	b.n	10372 <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   10592:	7829      	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   10594:	6490      	str	r0, [r2, #72]	; 0x48
					usb_rx_memory_needed++;
   10596:	1c4a      	adds	r2, r1, #1
   10598:	702a      	strb	r2, [r5, #0]
   1059a:	e65e      	b.n	1025a <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   1059c:	782a      	ldrb	r2, [r5, #0]
   1059e:	3201      	adds	r2, #1
   105a0:	702a      	strb	r2, [r5, #0]
   105a2:	e744      	b.n	1042e <usb_isr+0x8e2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   105a4:	7829      	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   105a6:	6690      	str	r0, [r2, #104]	; 0x68
					usb_rx_memory_needed++;
   105a8:	1c4a      	adds	r2, r1, #1
   105aa:	702a      	strb	r2, [r5, #0]
   105ac:	e662      	b.n	10274 <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   105ae:	782a      	ldrb	r2, [r5, #0]
   105b0:	3201      	adds	r2, #1
   105b2:	702a      	strb	r2, [r5, #0]
   105b4:	e767      	b.n	10486 <usb_isr+0x93a>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   105b6:	7829      	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   105b8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
					usb_rx_memory_needed++;
   105bc:	1c4a      	adds	r2, r1, #1
   105be:	702a      	strb	r2, [r5, #0]
   105c0:	e664      	b.n	1028c <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   105c2:	782a      	ldrb	r2, [r5, #0]
   105c4:	3201      	adds	r2, #1
   105c6:	702a      	strb	r2, [r5, #0]
   105c8:	e719      	b.n	103fe <usb_isr+0x8b2>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
   105ca:	7829      	ldrb	r1, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
   105cc:	6290      	str	r0, [r2, #40]	; 0x28
					usb_rx_memory_needed++;
   105ce:	1c4a      	adds	r2, r1, #1
   105d0:	702a      	strb	r2, [r5, #0]
   105d2:	e634      	b.n	1023e <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
   105d4:	782a      	ldrb	r2, [r5, #0]
   105d6:	3201      	adds	r2, #1
   105d8:	702a      	strb	r2, [r5, #0]
   105da:	e73e      	b.n	1045a <usb_isr+0x90e>
   105dc:	f1be 0f40 	cmp.w	lr, #64	; 0x40
   105e0:	46f4      	mov	ip, lr
   105e2:	bf28      	it	cs
   105e4:	f04f 0c40 	movcs.w	ip, #64	; 0x40
   105e8:	eb04 030c 	add.w	r3, r4, ip
   105ec:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
   105ee:	2301      	movs	r3, #1
   105f0:	ebcc 000e 	rsb	r0, ip, lr
   105f4:	ea4f 480c 	mov.w	r8, ip, lsl #16
   105f8:	2200      	movs	r2, #0
   105fa:	9301      	str	r3, [sp, #4]
   105fc:	e526      	b.n	1004c <usb_isr+0x500>
   105fe:	bf00      	nop

00010600 <usb_init>:
}



void usb_init(void)
{
   10600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
   10604:	f000 fd10 	bl	11028 <usb_init_serialnumber>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   10608:	4c31      	ldr	r4, [pc, #196]	; (106d0 <usb_init+0xd0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1060a:	4b32      	ldr	r3, [pc, #200]	; (106d4 <usb_init+0xd4>)

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   1060c:	4832      	ldr	r0, [pc, #200]	; (106d8 <usb_init+0xd8>)
#endif
#if F_CPU == 180000000 || F_CPU == 216000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
   1060e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 106f4 <usb_init+0xf4>
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   10612:	4e32      	ldr	r6, [pc, #200]	; (106dc <usb_init+0xdc>)
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
   10614:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 106f8 <usb_init+0xf8>
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   10618:	4f31      	ldr	r7, [pc, #196]	; (106e0 <usb_init+0xe0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   1061a:	4d32      	ldr	r5, [pc, #200]	; (106e4 <usb_init+0xe4>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   1061c:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 106fc <usb_init+0xfc>
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10620:	2200      	movs	r2, #0
   10622:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
   10624:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10626:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
   10628:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1062a:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
   1062c:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1062e:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
   10630:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10632:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
   10634:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10636:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
   10638:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1063a:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
   1063c:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1063e:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
   10640:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10642:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
   10644:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10646:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
   10648:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1064a:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
   1064c:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1064e:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
   10650:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10652:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
   10654:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10656:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
   10658:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1065a:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
   1065c:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   1065e:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
   10660:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
   10662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   10666:	6821      	ldr	r1, [r4, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
   10668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
   1066c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
   10670:	6021      	str	r1, [r4, #0]
#ifdef HAS_KINETIS_MPU
	MPU_RGDAAC0 |= 0x03000000;
   10672:	6801      	ldr	r1, [r0, #0]
   10674:	f041 7140 	orr.w	r1, r1, #50331648	; 0x3000000
   10678:	6001      	str	r1, [r0, #0]
#endif
#if F_CPU == 180000000 || F_CPU == 216000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
   1067a:	2103      	movs	r1, #3
   1067c:	f888 1000 	strb.w	r1, [r8]
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
   10680:	20a0      	movs	r0, #160	; 0xa0
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   10682:	f3c3 2107 	ubfx	r1, r3, #8, #8
	MPU_RGDAAC0 |= 0x03000000;
#endif
#if F_CPU == 180000000 || F_CPU == 216000000
	// if using IRC48M, turn on the USB clock recovery hardware
	USB0_CLK_RECOVER_IRC_EN = USB_CLK_RECOVER_IRC_EN_IRC_EN | USB_CLK_RECOVER_IRC_EN_REG_EN;
	USB0_CLK_RECOVER_CTRL = USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN |
   10686:	f88c 0000 	strb.w	r0, [ip]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
   1068a:	f504 3428 	add.w	r4, r4, #172032	; 0x2a000
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
   1068e:	7031      	strb	r1, [r6, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   10690:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
   10694:	4914      	ldr	r1, [pc, #80]	; (106e8 <usb_init+0xe8>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
   10696:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
   10698:	0e1b      	lsrs	r3, r3, #24
   1069a:	702b      	strb	r3, [r5, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
   1069c:	34cc      	adds	r4, #204	; 0xcc
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
   1069e:	23ff      	movs	r3, #255	; 0xff
   106a0:	f88e 3000 	strb.w	r3, [lr]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   106a4:	4d11      	ldr	r5, [pc, #68]	; (106ec <usb_init+0xec>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
   106a6:	f80c 3cb8 	strb.w	r3, [ip, #-184]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   106aa:	4811      	ldr	r0, [pc, #68]	; (106f0 <usb_init+0xf0>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
   106ac:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
   106ae:	2301      	movs	r3, #1
   106b0:	f806 3c08 	strb.w	r3, [r6, #-8]
	USB0_USBCTRL = 0;
   106b4:	7022      	strb	r2, [r4, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   106b6:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   106b8:	f44f 1400 	mov.w	r4, #2097152	; 0x200000

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   106bc:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
   106be:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
   106c2:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
   106c4:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
   106c6:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
   106ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106ce:	bf00      	nop
   106d0:	40048034 	.word	0x40048034
   106d4:	1fff0000 	.word	0x1fff0000
   106d8:	4000d800 	.word	0x4000d800
   106dc:	4007209c 	.word	0x4007209c
   106e0:	400720b0 	.word	0x400720b0
   106e4:	400720b4 	.word	0x400720b4
   106e8:	40072010 	.word	0x40072010
   106ec:	e000e435 	.word	0xe000e435
   106f0:	e000e104 	.word	0xe000e104
   106f4:	40072144 	.word	0x40072144
   106f8:	40072140 	.word	0x40072140
   106fc:	40072080 	.word	0x40072080

00010700 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
   10700:	f000 b8a4 	b.w	1084c <usb_serial_flush_input>

00010704 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
   10704:	f000 b87c 	b.w	10800 <usb_serial_peekchar>

00010708 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
   10708:	f000 b856 	b.w	107b8 <usb_serial_getchar>

0001070c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   1070c:	f000 b890 	b.w	10830 <usb_serial_available>

00010710 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   10710:	f000 b9be 	b.w	10a90 <usb_serial_flush_output>

00010714 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   10714:	f000 b998 	b.w	10a48 <usb_serial_write_buffer_free>

00010718 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   10718:	4608      	mov	r0, r1
   1071a:	4611      	mov	r1, r2
   1071c:	f000 b8b2 	b.w	10884 <usb_serial_write>

00010720 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   10720:	4608      	mov	r0, r1
   10722:	f000 b985 	b.w	10a30 <usb_serial_putchar>
   10726:	bf00      	nop

00010728 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
   10728:	4770      	bx	lr
   1072a:	bf00      	nop

0001072c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
   1072c:	b672      	cpsid	i
	avail = usb_buffer_available;
   1072e:	480d      	ldr	r0, [pc, #52]	; (10764 <usb_malloc+0x38>)
   10730:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
   10732:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
   10736:	2b0b      	cmp	r3, #11
   10738:	dc10      	bgt.n	1075c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
   1073a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1073e:	40d9      	lsrs	r1, r3
   10740:	ea22 0201 	bic.w	r2, r2, r1
   10744:	6002      	str	r2, [r0, #0]
	__enable_irq();
   10746:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
   10748:	4807      	ldr	r0, [pc, #28]	; (10768 <usb_malloc+0x3c>)
   1074a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1074e:	00db      	lsls	r3, r3, #3
   10750:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
   10752:	2100      	movs	r1, #0
   10754:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
   10756:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
   10758:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
   1075a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
   1075c:	b662      	cpsie	i
		return NULL;
   1075e:	2000      	movs	r0, #0
   10760:	4770      	bx	lr
   10762:	bf00      	nop
   10764:	1fff4b10 	.word	0x1fff4b10
   10768:	1fff45d0 	.word	0x1fff45d0

0001076c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
   1076c:	4b0d      	ldr	r3, [pc, #52]	; (107a4 <usb_free+0x38>)
   1076e:	4a0e      	ldr	r2, [pc, #56]	; (107a8 <usb_free+0x3c>)
   10770:	1ac3      	subs	r3, r0, r3
   10772:	fba2 2303 	umull	r2, r3, r2, r3
   10776:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
   10778:	2b0b      	cmp	r3, #11
   1077a:	d80c      	bhi.n	10796 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
   1077c:	4a0b      	ldr	r2, [pc, #44]	; (107ac <usb_free+0x40>)
   1077e:	7812      	ldrb	r2, [r2, #0]
   10780:	b952      	cbnz	r2, 10798 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
   10782:	b672      	cpsid	i
	usb_buffer_available |= mask;
   10784:	480a      	ldr	r0, [pc, #40]	; (107b0 <usb_free+0x44>)
   10786:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1078a:	6802      	ldr	r2, [r0, #0]
   1078c:	fa21 f303 	lsr.w	r3, r1, r3
   10790:	431a      	orrs	r2, r3
   10792:	6002      	str	r2, [r0, #0]
	__enable_irq();
   10794:	b662      	cpsie	i
   10796:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
   10798:	4a06      	ldr	r2, [pc, #24]	; (107b4 <usb_free+0x48>)
   1079a:	7812      	ldrb	r2, [r2, #0]
   1079c:	2a00      	cmp	r2, #0
   1079e:	d0f0      	beq.n	10782 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
   107a0:	f7ff b92e 	b.w	fa00 <usb_rx_memory>
   107a4:	1fff45d0 	.word	0x1fff45d0
   107a8:	38e38e39 	.word	0x38e38e39
   107ac:	1fff69f1 	.word	0x1fff69f1
   107b0:	1fff4b10 	.word	0x1fff4b10
   107b4:	1fff69fc 	.word	0x1fff69fc

000107b8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
   107b8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
   107ba:	4d0f      	ldr	r5, [pc, #60]	; (107f8 <usb_serial_getchar+0x40>)
   107bc:	6828      	ldr	r0, [r5, #0]
   107be:	b178      	cbz	r0, 107e0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
   107c0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
   107c2:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
   107c4:	18c1      	adds	r1, r0, r3
   107c6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
   107c8:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
   107ca:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
   107cc:	d202      	bcs.n	107d4 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
   107ce:	8043      	strh	r3, [r0, #2]
	}
	return c;
   107d0:	4620      	mov	r0, r4
}
   107d2:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
   107d4:	f7ff ffca 	bl	1076c <usb_free>
		rx_packet = NULL;
   107d8:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
   107da:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
   107dc:	602b      	str	r3, [r5, #0]
   107de:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
   107e0:	4b06      	ldr	r3, [pc, #24]	; (107fc <usb_serial_getchar+0x44>)
   107e2:	781b      	ldrb	r3, [r3, #0]
   107e4:	b12b      	cbz	r3, 107f2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
   107e6:	2003      	movs	r0, #3
   107e8:	f7ff f8d6 	bl	f998 <usb_rx>
   107ec:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
   107ee:	2800      	cmp	r0, #0
   107f0:	d1e6      	bne.n	107c0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
   107f2:	f04f 30ff 	mov.w	r0, #4294967295
   107f6:	bd38      	pop	{r3, r4, r5, pc}
   107f8:	1fff6a10 	.word	0x1fff6a10
   107fc:	1fff69fc 	.word	0x1fff69fc

00010800 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
   10800:	b510      	push	{r4, lr}
	if (!rx_packet) {
   10802:	4c09      	ldr	r4, [pc, #36]	; (10828 <usb_serial_peekchar+0x28>)
   10804:	6820      	ldr	r0, [r4, #0]
   10806:	b118      	cbz	r0, 10810 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
   10808:	8843      	ldrh	r3, [r0, #2]
   1080a:	4418      	add	r0, r3
   1080c:	7a00      	ldrb	r0, [r0, #8]
}
   1080e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
   10810:	4b06      	ldr	r3, [pc, #24]	; (1082c <usb_serial_peekchar+0x2c>)
   10812:	781b      	ldrb	r3, [r3, #0]
   10814:	b12b      	cbz	r3, 10822 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
   10816:	2003      	movs	r0, #3
   10818:	f7ff f8be 	bl	f998 <usb_rx>
   1081c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
   1081e:	2800      	cmp	r0, #0
   10820:	d1f2      	bne.n	10808 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
   10822:	f04f 30ff 	mov.w	r0, #4294967295
   10826:	bd10      	pop	{r4, pc}
   10828:	1fff6a10 	.word	0x1fff6a10
   1082c:	1fff69fc 	.word	0x1fff69fc

00010830 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
   10830:	4b04      	ldr	r3, [pc, #16]	; (10844 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
   10832:	4a05      	ldr	r2, [pc, #20]	; (10848 <usb_serial_available+0x18>)
   10834:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
   10836:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
   10838:	b11b      	cbz	r3, 10842 <usb_serial_available+0x12>
   1083a:	881a      	ldrh	r2, [r3, #0]
   1083c:	885b      	ldrh	r3, [r3, #2]
   1083e:	1ad3      	subs	r3, r2, r3
   10840:	4418      	add	r0, r3
	return count;
}
   10842:	4770      	bx	lr
   10844:	1fff6a10 	.word	0x1fff6a10
   10848:	1fff6c50 	.word	0x1fff6c50

0001084c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
   1084c:	4b0b      	ldr	r3, [pc, #44]	; (1087c <usb_serial_flush_input+0x30>)
   1084e:	781b      	ldrb	r3, [r3, #0]
   10850:	b19b      	cbz	r3, 1087a <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
   10852:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
   10854:	4c0a      	ldr	r4, [pc, #40]	; (10880 <usb_serial_flush_input+0x34>)
   10856:	6820      	ldr	r0, [r4, #0]
   10858:	b148      	cbz	r0, 1086e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
   1085a:	f7ff ff87 	bl	1076c <usb_free>
		rx_packet = NULL;
   1085e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
   10860:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
   10862:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
   10864:	f7ff f898 	bl	f998 <usb_rx>
		if (!rx) break;
   10868:	b130      	cbz	r0, 10878 <usb_serial_flush_input+0x2c>
		usb_free(rx);
   1086a:	f7ff ff7f 	bl	1076c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
   1086e:	2003      	movs	r0, #3
   10870:	f7ff f892 	bl	f998 <usb_rx>
		if (!rx) break;
   10874:	2800      	cmp	r0, #0
   10876:	d1f8      	bne.n	1086a <usb_serial_flush_input+0x1e>
   10878:	bd10      	pop	{r4, pc}
   1087a:	4770      	bx	lr
   1087c:	1fff69fc 	.word	0x1fff69fc
   10880:	1fff6a10 	.word	0x1fff6a10

00010884 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
   10884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
   10888:	4a63      	ldr	r2, [pc, #396]	; (10a18 <usb_serial_write+0x194>)
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
   1088a:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
   1088c:	2301      	movs	r3, #1
   1088e:	7013      	strb	r3, [r2, #0]
	while (size > 0) {
   10890:	9101      	str	r1, [sp, #4]
   10892:	2900      	cmp	r1, #0
   10894:	d06c      	beq.n	10970 <usb_serial_write+0xec>
   10896:	f8df 8190 	ldr.w	r8, [pc, #400]	; 10a28 <usb_serial_write+0x1a4>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
   1089a:	4f60      	ldr	r7, [pc, #384]	; (10a1c <usb_serial_write+0x198>)
   1089c:	4604      	mov	r4, r0
   1089e:	f8d8 0000 	ldr.w	r0, [r8]
   108a2:	460e      	mov	r6, r1
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
   108a4:	2800      	cmp	r0, #0
   108a6:	f000 8081 	beq.w	109ac <usb_serial_write+0x128>
   108aa:	4d5d      	ldr	r5, [pc, #372]	; (10a20 <usb_serial_write+0x19c>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
   108ac:	8843      	ldrh	r3, [r0, #2]
   108ae:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
   108b2:	42b1      	cmp	r1, r6
   108b4:	bf28      	it	cs
   108b6:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
   108b8:	eb03 0901 	add.w	r9, r3, r1
   108bc:	fa1f f989 	uxth.w	r9, r9
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
   108c0:	f100 0208 	add.w	r2, r0, #8
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
   108c4:	f04f 0e00 	mov.w	lr, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
   108c8:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
   108ca:	f8a0 9002 	strh.w	r9, [r0, #2]
		size -= len;
		while (len-- > 0) *dest++ = *src++;
   108ce:	f101 3cff 	add.w	ip, r1, #4294967295
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
   108d2:	441a      	add	r2, r3
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
   108d4:	f885 e000 	strb.w	lr, [r5]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
   108d8:	2900      	cmp	r1, #0
   108da:	d041      	beq.n	10960 <usb_serial_write+0xdc>
   108dc:	f103 0508 	add.w	r5, r3, #8
   108e0:	330c      	adds	r3, #12
   108e2:	4403      	add	r3, r0
   108e4:	4405      	add	r5, r0
   108e6:	f104 0904 	add.w	r9, r4, #4
   108ea:	454d      	cmp	r5, r9
   108ec:	bf38      	it	cc
   108ee:	429c      	cmpcc	r4, r3
   108f0:	bf2c      	ite	cs
   108f2:	2301      	movcs	r3, #1
   108f4:	2300      	movcc	r3, #0
   108f6:	2909      	cmp	r1, #9
   108f8:	bf94      	ite	ls
   108fa:	2300      	movls	r3, #0
   108fc:	f003 0301 	andhi.w	r3, r3, #1
   10900:	2b00      	cmp	r3, #0
   10902:	d04a      	beq.n	1099a <usb_serial_write+0x116>
   10904:	ea44 0305 	orr.w	r3, r4, r5
   10908:	079b      	lsls	r3, r3, #30
   1090a:	d146      	bne.n	1099a <usb_serial_write+0x116>
   1090c:	1f0b      	subs	r3, r1, #4
   1090e:	089b      	lsrs	r3, r3, #2
   10910:	3301      	adds	r3, #1
   10912:	f1bc 0f02 	cmp.w	ip, #2
   10916:	ea4f 0983 	mov.w	r9, r3, lsl #2
   1091a:	d93c      	bls.n	10996 <usb_serial_write+0x112>
   1091c:	f1a4 0a04 	sub.w	sl, r4, #4
   10920:	469b      	mov	fp, r3
   10922:	f10e 0e01 	add.w	lr, lr, #1
   10926:	f85a 3f04 	ldr.w	r3, [sl, #4]!
   1092a:	f845 3b04 	str.w	r3, [r5], #4
   1092e:	45f3      	cmp	fp, lr
   10930:	d8f7      	bhi.n	10922 <usb_serial_write+0x9e>
   10932:	4549      	cmp	r1, r9
   10934:	444a      	add	r2, r9
   10936:	ebc9 0c0c 	rsb	ip, r9, ip
   1093a:	eb04 0309 	add.w	r3, r4, r9
   1093e:	d061      	beq.n	10a04 <usb_serial_write+0x180>
   10940:	781d      	ldrb	r5, [r3, #0]
   10942:	7015      	strb	r5, [r2, #0]
   10944:	f1bc 0f00 	cmp.w	ip, #0
   10948:	d023      	beq.n	10992 <usb_serial_write+0x10e>
   1094a:	785d      	ldrb	r5, [r3, #1]
   1094c:	7055      	strb	r5, [r2, #1]
   1094e:	f1bc 0f01 	cmp.w	ip, #1
   10952:	d01e      	beq.n	10992 <usb_serial_write+0x10e>
   10954:	789b      	ldrb	r3, [r3, #2]
   10956:	7093      	strb	r3, [r2, #2]
   10958:	4421      	add	r1, r4
   1095a:	f8b0 9002 	ldrh.w	r9, [r0, #2]
   1095e:	460c      	mov	r4, r1
		if (tx_packet->index >= CDC_TX_SIZE) {
   10960:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
   10964:	d80b      	bhi.n	1097e <usb_serial_write+0xfa>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
   10966:	4b2f      	ldr	r3, [pc, #188]	; (10a24 <usb_serial_write+0x1a0>)
   10968:	2205      	movs	r2, #5
   1096a:	701a      	strb	r2, [r3, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
   1096c:	2e00      	cmp	r6, #0
   1096e:	d199      	bne.n	108a4 <usb_serial_write+0x20>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
   10970:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
   10972:	4a29      	ldr	r2, [pc, #164]	; (10a18 <usb_serial_write+0x194>)
   10974:	2300      	movs	r3, #0
   10976:	7013      	strb	r3, [r2, #0]
	return ret;
}
   10978:	b003      	add	sp, #12
   1097a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
   1097e:	2340      	movs	r3, #64	; 0x40
   10980:	8003      	strh	r3, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
   10982:	4601      	mov	r1, r0
   10984:	2004      	movs	r0, #4
   10986:	f7ff f89f 	bl	fac8 <usb_tx>
			tx_packet = NULL;
   1098a:	2000      	movs	r0, #0
   1098c:	f8c8 0000 	str.w	r0, [r8]
   10990:	e7e9      	b.n	10966 <usb_serial_write+0xe2>
   10992:	4421      	add	r1, r4
   10994:	e7e1      	b.n	1095a <usb_serial_write+0xd6>
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
   10996:	4623      	mov	r3, r4
   10998:	e7d2      	b.n	10940 <usb_serial_write+0xbc>
   1099a:	3a01      	subs	r2, #1
   1099c:	4421      	add	r1, r4
   1099e:	f814 3b01 	ldrb.w	r3, [r4], #1
   109a2:	f802 3f01 	strb.w	r3, [r2, #1]!
   109a6:	428c      	cmp	r4, r1
   109a8:	d1f9      	bne.n	1099e <usb_serial_write+0x11a>
   109aa:	e7d6      	b.n	1095a <usb_serial_write+0xd6>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
   109ac:	783b      	ldrb	r3, [r7, #0]
   109ae:	b35b      	cbz	r3, 10a08 <usb_serial_write+0x184>
   109b0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 10a2c <usb_serial_write+0x1a8>
   109b4:	4d1a      	ldr	r5, [pc, #104]	; (10a20 <usb_serial_write+0x19c>)
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
   109b6:	f04f 0a01 	mov.w	sl, #1
   109ba:	e008      	b.n	109ce <usb_serial_write+0x14a>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
   109bc:	f1b9 0901 	subs.w	r9, r9, #1
   109c0:	d019      	beq.n	109f6 <usb_serial_write+0x172>
   109c2:	782b      	ldrb	r3, [r5, #0]
   109c4:	b9bb      	cbnz	r3, 109f6 <usb_serial_write+0x172>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
   109c6:	f000 f8b3 	bl	10b30 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
   109ca:	783b      	ldrb	r3, [r7, #0]
   109cc:	b1e3      	cbz	r3, 10a08 <usb_serial_write+0x184>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
   109ce:	2004      	movs	r0, #4
   109d0:	f7ff f800 	bl	f9d4 <usb_tx_packet_count>
   109d4:	2807      	cmp	r0, #7
   109d6:	d8f1      	bhi.n	109bc <usb_serial_write+0x138>
					tx_noautoflush = 1;
   109d8:	4b0f      	ldr	r3, [pc, #60]	; (10a18 <usb_serial_write+0x194>)
   109da:	f883 a000 	strb.w	sl, [r3]
					tx_packet = usb_malloc();
   109de:	f7ff fea5 	bl	1072c <usb_malloc>
   109e2:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
   109e6:	2800      	cmp	r0, #0
   109e8:	f47f af60 	bne.w	108ac <usb_serial_write+0x28>
					tx_noautoflush = 0;
   109ec:	4b0a      	ldr	r3, [pc, #40]	; (10a18 <usb_serial_write+0x194>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
   109ee:	f1b9 0901 	subs.w	r9, r9, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
   109f2:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
   109f4:	d1e5      	bne.n	109c2 <usb_serial_write+0x13e>
					transmit_previous_timeout = 1;
   109f6:	2301      	movs	r3, #1
					return -1;
   109f8:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
   109fc:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
   109fe:	b003      	add	sp, #12
   10a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a04:	4619      	mov	r1, r3
   10a06:	e7a8      	b.n	1095a <usb_serial_write+0xd6>
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
   10a08:	4a03      	ldr	r2, [pc, #12]	; (10a18 <usb_serial_write+0x194>)
   10a0a:	2300      	movs	r3, #0
					return -1;
   10a0c:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
   10a10:	7013      	strb	r3, [r2, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
   10a12:	b003      	add	sp, #12
   10a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a18:	1fff6a05 	.word	0x1fff6a05
   10a1c:	1fff69fc 	.word	0x1fff69fc
   10a20:	1fff6a0c 	.word	0x1fff6a0c
   10a24:	1fff6a04 	.word	0x1fff6a04
   10a28:	1fff6a08 	.word	0x1fff6a08
   10a2c:	00014821 	.word	0x00014821

00010a30 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
   10a30:	b500      	push	{lr}
   10a32:	b083      	sub	sp, #12
   10a34:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
   10a36:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
   10a38:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
   10a3c:	4618      	mov	r0, r3
   10a3e:	f7ff ff21 	bl	10884 <usb_serial_write>
}
   10a42:	b003      	add	sp, #12
   10a44:	f85d fb04 	ldr.w	pc, [sp], #4

00010a48 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
   10a48:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
   10a4a:	4d0e      	ldr	r5, [pc, #56]	; (10a84 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
   10a4c:	4c0e      	ldr	r4, [pc, #56]	; (10a88 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
   10a4e:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
   10a50:	2301      	movs	r3, #1
   10a52:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
   10a54:	b128      	cbz	r0, 10a62 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
   10a56:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
   10a58:	2300      	movs	r3, #0
   10a5a:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
   10a5c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
   10a60:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
   10a62:	4b0a      	ldr	r3, [pc, #40]	; (10a8c <usb_serial_write_buffer_free+0x44>)
   10a64:	781b      	ldrb	r3, [r3, #0]
   10a66:	b913      	cbnz	r3, 10a6e <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
   10a68:	2000      	movs	r0, #0
   10a6a:	7020      	strb	r0, [r4, #0]
			return 0;
   10a6c:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
   10a6e:	2004      	movs	r0, #4
   10a70:	f7fe ffb0 	bl	f9d4 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
   10a74:	2807      	cmp	r0, #7
   10a76:	d8f7      	bhi.n	10a68 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
   10a78:	f7ff fe58 	bl	1072c <usb_malloc>
   10a7c:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
   10a7e:	2800      	cmp	r0, #0
   10a80:	d1e9      	bne.n	10a56 <usb_serial_write_buffer_free+0xe>
   10a82:	e7f1      	b.n	10a68 <usb_serial_write_buffer_free+0x20>
   10a84:	1fff6a08 	.word	0x1fff6a08
   10a88:	1fff6a05 	.word	0x1fff6a05
   10a8c:	1fff69fc 	.word	0x1fff69fc

00010a90 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
   10a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
   10a92:	4b11      	ldr	r3, [pc, #68]	; (10ad8 <usb_serial_flush_output+0x48>)
   10a94:	781b      	ldrb	r3, [r3, #0]
   10a96:	b18b      	cbz	r3, 10abc <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
   10a98:	4e10      	ldr	r6, [pc, #64]	; (10adc <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
   10a9a:	4d11      	ldr	r5, [pc, #68]	; (10ae0 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
   10a9c:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
   10a9e:	2701      	movs	r7, #1
   10aa0:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
   10aa2:	b164      	cbz	r4, 10abe <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
   10aa4:	4a0f      	ldr	r2, [pc, #60]	; (10ae4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
   10aa6:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
   10aa8:	2700      	movs	r7, #0
   10aaa:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   10aac:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
   10aae:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   10ab0:	2004      	movs	r0, #4
   10ab2:	f7ff f809 	bl	fac8 <usb_tx>
		tx_packet = NULL;
   10ab6:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
   10ab8:	2300      	movs	r3, #0
   10aba:	702b      	strb	r3, [r5, #0]
   10abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
   10abe:	f7ff fe35 	bl	1072c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
   10ac2:	4b08      	ldr	r3, [pc, #32]	; (10ae4 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
   10ac4:	b128      	cbz	r0, 10ad2 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
   10ac6:	4601      	mov	r1, r0
   10ac8:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
   10aca:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
   10acc:	f7fe fffc 	bl	fac8 <usb_tx>
   10ad0:	e7f2      	b.n	10ab8 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
   10ad2:	701f      	strb	r7, [r3, #0]
   10ad4:	e7f0      	b.n	10ab8 <usb_serial_flush_output+0x28>
   10ad6:	bf00      	nop
   10ad8:	1fff69fc 	.word	0x1fff69fc
   10adc:	1fff6a08 	.word	0x1fff6a08
   10ae0:	1fff6a05 	.word	0x1fff6a05
   10ae4:	1fff6a04 	.word	0x1fff6a04

00010ae8 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
   10ae8:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
   10aea:	4b0e      	ldr	r3, [pc, #56]	; (10b24 <usb_serial_flush_callback+0x3c>)
   10aec:	781b      	ldrb	r3, [r3, #0]
   10aee:	b973      	cbnz	r3, 10b0e <usb_serial_flush_callback+0x26>
	if (tx_packet) {
   10af0:	4c0d      	ldr	r4, [pc, #52]	; (10b28 <usb_serial_flush_callback+0x40>)
   10af2:	6821      	ldr	r1, [r4, #0]
   10af4:	b161      	cbz	r1, 10b10 <usb_serial_flush_callback+0x28>
   10af6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
   10afa:	884b      	ldrh	r3, [r1, #2]
   10afc:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
   10afe:	2004      	movs	r0, #4
   10b00:	f7fe ffe2 	bl	fac8 <usb_tx>
		tx_packet = NULL;
   10b04:	6025      	str	r5, [r4, #0]
   10b06:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
   10b08:	4b08      	ldr	r3, [pc, #32]	; (10b2c <usb_serial_flush_callback+0x44>)
   10b0a:	2201      	movs	r2, #1
   10b0c:	701a      	strb	r2, [r3, #0]
   10b0e:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
   10b10:	f7ff fe0c 	bl	1072c <usb_malloc>
		if (tx) {
   10b14:	2800      	cmp	r0, #0
   10b16:	d0f7      	beq.n	10b08 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
   10b18:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
   10b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
   10b1e:	2004      	movs	r0, #4
   10b20:	f7fe bfd2 	b.w	fac8 <usb_tx>
   10b24:	1fff6a05 	.word	0x1fff6a05
   10b28:	1fff6a08 	.word	0x1fff6a08
   10b2c:	1fff6a04 	.word	0x1fff6a04

00010b30 <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
   10b30:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
   10b32:	4c2c      	ldr	r4, [pc, #176]	; (10be4 <yield+0xb4>)
   10b34:	7823      	ldrb	r3, [r4, #0]
   10b36:	b103      	cbz	r3, 10b3a <yield+0xa>
   10b38:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
   10b3a:	2301      	movs	r3, #1
   10b3c:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
   10b3e:	f7ff fe77 	bl	10830 <usb_serial_available>
	if (Serial.available()) serialEvent();
   10b42:	2800      	cmp	r0, #0
   10b44:	d142      	bne.n	10bcc <yield+0x9c>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
   10b46:	f7fe fb31 	bl	f1ac <serial_available>
	if (Serial1.available()) serialEvent1();
   10b4a:	2800      	cmp	r0, #0
   10b4c:	d13b      	bne.n	10bc6 <yield+0x96>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
   10b4e:	f000 f85b 	bl	10c08 <serial2_available>
	if (Serial2.available()) serialEvent2();
   10b52:	2800      	cmp	r0, #0
   10b54:	d134      	bne.n	10bc0 <yield+0x90>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
   10b56:	f000 f8ed 	bl	10d34 <serial3_available>
	if (Serial3.available()) serialEvent3();
   10b5a:	bb70      	cbnz	r0, 10bba <yield+0x8a>
	virtual void transmitterEnable(uint8_t pin) { serial4_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial4_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial4_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial4_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial4_set_cts(pin); }
	virtual int available(void)     { return serial4_available(); }
   10b5c:	f7fe fe42 	bl	f7e4 <serial4_available>
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
   10b60:	bb40      	cbnz	r0, 10bb4 <yield+0x84>
	virtual void transmitterEnable(uint8_t pin) { serial5_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial5_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial5_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial5_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial5_set_cts(pin); }
	virtual int available(void)     { return serial5_available(); }
   10b62:	f000 f963 	bl	10e2c <serial5_available>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
   10b66:	bb10      	cbnz	r0, 10bae <yield+0x7e>
	virtual void transmitterEnable(uint8_t pin) { serial6_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial6_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial6_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial6_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial6_set_cts(pin); }
	virtual int available(void)     { return serial6_available(); }
   10b68:	f000 f9dc 	bl	10f24 <serial6_available>
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
   10b6c:	b9e0      	cbnz	r0, 10ba8 <yield+0x78>
#endif
	running = 0;
   10b6e:	2300      	movs	r3, #0
   10b70:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   10b72:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
   10b76:	2b00      	cmp	r3, #0
   10b78:	d1de      	bne.n	10b38 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   10b7a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
   10b7e:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
   10b80:	4b19      	ldr	r3, [pc, #100]	; (10be8 <yield+0xb8>)
   10b82:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   10b84:	b328      	cbz	r0, 10bd2 <yield+0xa2>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
   10b86:	4c19      	ldr	r4, [pc, #100]	; (10bec <yield+0xbc>)
   10b88:	7822      	ldrb	r2, [r4, #0]
   10b8a:	bb12      	cbnz	r2, 10bd2 <yield+0xa2>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
   10b8c:	6945      	ldr	r5, [r0, #20]
   10b8e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
   10b90:	2301      	movs	r3, #1
   10b92:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
   10b94:	b30d      	cbz	r5, 10bda <yield+0xaa>
			firstYield->_prev = nullptr;
   10b96:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   10b98:	b901      	cbnz	r1, 10b9c <yield+0x6c>
   10b9a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
   10b9c:	2500      	movs	r5, #0
   10b9e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   10ba0:	6883      	ldr	r3, [r0, #8]
   10ba2:	4798      	blx	r3
		runningFromYield = false;
   10ba4:	7025      	strb	r5, [r4, #0]
   10ba6:	e7c7      	b.n	10b38 <yield+0x8>
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
   10ba8:	f000 f82c 	bl	10c04 <serialEvent6()>
   10bac:	e7df      	b.n	10b6e <yield+0x3e>
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
#endif
#ifdef HAS_KINETISK_UART4
	if (Serial5.available()) serialEvent5();
   10bae:	f000 f827 	bl	10c00 <serialEvent5()>
   10bb2:	e7d9      	b.n	10b68 <yield+0x38>
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
#ifdef HAS_KINETISK_UART3
	if (Serial4.available()) serialEvent4();
   10bb4:	f7fc fd66 	bl	d684 <serialEvent4()>
   10bb8:	e7d3      	b.n	10b62 <yield+0x32>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
   10bba:	f000 f81f 	bl	10bfc <serialEvent3()>
   10bbe:	e7cd      	b.n	10b5c <yield+0x2c>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
   10bc0:	f000 f81a 	bl	10bf8 <serialEvent2()>
   10bc4:	e7c7      	b.n	10b56 <yield+0x26>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
   10bc6:	f000 f815 	bl	10bf4 <serialEvent1()>
   10bca:	e7c0      	b.n	10b4e <yield+0x1e>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
   10bcc:	f7ff fdac 	bl	10728 <serialEvent()>
   10bd0:	e7b9      	b.n	10b46 <yield+0x16>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   10bd2:	2900      	cmp	r1, #0
   10bd4:	d1b0      	bne.n	10b38 <yield+0x8>
   10bd6:	b662      	cpsie	i
   10bd8:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
   10bda:	4b05      	ldr	r3, [pc, #20]	; (10bf0 <yield+0xc0>)
   10bdc:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   10bde:	2900      	cmp	r1, #0
   10be0:	d1dc      	bne.n	10b9c <yield+0x6c>
   10be2:	e7da      	b.n	10b9a <yield+0x6a>
   10be4:	1fff6a15 	.word	0x1fff6a15
   10be8:	1fff67f0 	.word	0x1fff67f0
   10bec:	1fff67f4 	.word	0x1fff67f4
   10bf0:	1fff67ec 	.word	0x1fff67ec

00010bf4 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
   10bf4:	4770      	bx	lr
   10bf6:	bf00      	nop

00010bf8 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
   10bf8:	4770      	bx	lr
   10bfa:	bf00      	nop

00010bfc <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
   10bfc:	4770      	bx	lr
   10bfe:	bf00      	nop

00010c00 <serialEvent5()>:
#ifdef HAS_KINETISK_UART4

HardwareSerial5 Serial5;

void serialEvent5() __attribute__((weak));
void serialEvent5() {}
   10c00:	4770      	bx	lr
   10c02:	bf00      	nop

00010c04 <serialEvent6()>:
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)

HardwareSerial6 Serial6;

void serialEvent6() __attribute__((weak));
void serialEvent6() {}
   10c04:	4770      	bx	lr
   10c06:	bf00      	nop

00010c08 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10c08:	4a05      	ldr	r2, [pc, #20]	; (10c20 <serial2_available+0x18>)
	tail = rx_buffer_tail;
   10c0a:	4b06      	ldr	r3, [pc, #24]	; (10c24 <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10c0c:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
   10c0e:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10c10:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
   10c12:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
   10c14:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
   10c16:	bf38      	it	cc
   10c18:	3040      	addcc	r0, #64	; 0x40
   10c1a:	1ac0      	subs	r0, r0, r3
}
   10c1c:	4770      	bx	lr
   10c1e:	bf00      	nop
   10c20:	1fff6a88 	.word	0x1fff6a88
   10c24:	1fff6a1d 	.word	0x1fff6a1d

00010c28 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
   10c28:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
   10c2a:	4b38      	ldr	r3, [pc, #224]	; (10d0c <uart1_status_isr+0xe4>)
   10c2c:	791a      	ldrb	r2, [r3, #4]
   10c2e:	f012 0f30 	tst.w	r2, #48	; 0x30
   10c32:	d02c      	beq.n	10c8e <uart1_status_isr+0x66>
		__disable_irq();
   10c34:	b672      	cpsid	i
		avail = UART1_RCFIFO;
   10c36:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
   10c38:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   10c3c:	2900      	cmp	r1, #0
   10c3e:	d03d      	beq.n	10cbc <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
   10c40:	b662      	cpsie	i
			head = rx_buffer_head;
   10c42:	4f33      	ldr	r7, [pc, #204]	; (10d10 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
   10c44:	4933      	ldr	r1, [pc, #204]	; (10d14 <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
   10c46:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
   10c48:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
   10c4a:	4e33      	ldr	r6, [pc, #204]	; (10d18 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
   10c4c:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
   10c4e:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
   10c50:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
   10c52:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
   10c54:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
   10c56:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
   10c58:	bf28      	it	cs
   10c5a:	2300      	movcs	r3, #0
				if (newhead != tail) {
   10c5c:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
   10c5e:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
   10c62:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
   10c64:	bf1c      	itt	ne
   10c66:	54f1      	strbne	r1, [r6, r3]
   10c68:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
   10c6a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10c6e:	d1f0      	bne.n	10c52 <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
   10c70:	4b2a      	ldr	r3, [pc, #168]	; (10d1c <uart1_status_isr+0xf4>)
   10c72:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
   10c74:	b2c2      	uxtb	r2, r0
   10c76:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
   10c78:	b14b      	cbz	r3, 10c8e <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
   10c7a:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
   10c7c:	bf36      	itet	cc
   10c7e:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
   10c82:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
   10c84:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
   10c86:	2827      	cmp	r0, #39	; 0x27
   10c88:	bfc4      	itt	gt
   10c8a:	2201      	movgt	r2, #1
   10c8c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
   10c8e:	491f      	ldr	r1, [pc, #124]	; (10d0c <uart1_status_isr+0xe4>)
   10c90:	78ca      	ldrb	r2, [r1, #3]
   10c92:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
   10c94:	0615      	lsls	r5, r2, #24
   10c96:	d416      	bmi.n	10cc6 <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
   10c98:	0652      	lsls	r2, r2, #25
   10c9a:	d50d      	bpl.n	10cb8 <uart1_status_isr+0x90>
   10c9c:	4b1b      	ldr	r3, [pc, #108]	; (10d0c <uart1_status_isr+0xe4>)
   10c9e:	791b      	ldrb	r3, [r3, #4]
   10ca0:	065b      	lsls	r3, r3, #25
   10ca2:	d509      	bpl.n	10cb8 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
   10ca4:	4b1e      	ldr	r3, [pc, #120]	; (10d20 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
   10ca6:	491f      	ldr	r1, [pc, #124]	; (10d24 <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
   10ca8:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
   10caa:	2200      	movs	r2, #0
   10cac:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
   10cae:	b103      	cbz	r3, 10cb2 <uart1_status_isr+0x8a>
   10cb0:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
   10cb2:	4b16      	ldr	r3, [pc, #88]	; (10d0c <uart1_status_isr+0xe4>)
   10cb4:	223c      	movs	r2, #60	; 0x3c
   10cb6:	70da      	strb	r2, [r3, #3]
	}
}
   10cb8:	bcf0      	pop	{r4, r5, r6, r7}
   10cba:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
   10cbc:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
   10cbe:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
   10cc0:	745a      	strb	r2, [r3, #17]
			__enable_irq();
   10cc2:	b662      	cpsie	i
   10cc4:	e7e3      	b.n	10c8e <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
   10cc6:	790b      	ldrb	r3, [r1, #4]
   10cc8:	061c      	lsls	r4, r3, #24
   10cca:	d5e5      	bpl.n	10c98 <uart1_status_isr+0x70>
		head = tx_buffer_head;
   10ccc:	4b16      	ldr	r3, [pc, #88]	; (10d28 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
   10cce:	4e17      	ldr	r6, [pc, #92]	; (10d2c <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
   10cd0:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
   10cd2:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
   10cd4:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
   10cd6:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
   10cd8:	429c      	cmp	r4, r3
   10cda:	d00e      	beq.n	10cfa <uart1_status_isr+0xd2>
   10cdc:	4d14      	ldr	r5, [pc, #80]	; (10d30 <uart1_status_isr+0x108>)
   10cde:	e001      	b.n	10ce4 <uart1_status_isr+0xbc>
   10ce0:	42a3      	cmp	r3, r4
   10ce2:	d00a      	beq.n	10cfa <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
   10ce4:	3301      	adds	r3, #1
   10ce6:	2b28      	cmp	r3, #40	; 0x28
   10ce8:	bf28      	it	cs
   10cea:	2300      	movcs	r3, #0
			avail = UART1_S1;
   10cec:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
   10cee:	5ce8      	ldrb	r0, [r5, r3]
   10cf0:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
   10cf2:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
   10cf4:	7d08      	ldrb	r0, [r1, #20]
   10cf6:	2807      	cmp	r0, #7
   10cf8:	d9f2      	bls.n	10ce0 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
   10cfa:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
   10cfc:	4903      	ldr	r1, [pc, #12]	; (10d0c <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
   10cfe:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
   10d00:	790b      	ldrb	r3, [r1, #4]
   10d02:	0618      	lsls	r0, r3, #24
   10d04:	bf44      	itt	mi
   10d06:	237c      	movmi	r3, #124	; 0x7c
   10d08:	70cb      	strbmi	r3, [r1, #3]
   10d0a:	e7c5      	b.n	10c98 <uart1_status_isr+0x70>
   10d0c:	4006b000 	.word	0x4006b000
   10d10:	1fff6a88 	.word	0x1fff6a88
   10d14:	1fff6a1d 	.word	0x1fff6a1d
   10d18:	1fff6a48 	.word	0x1fff6a48
   10d1c:	1fff6a18 	.word	0x1fff6a18
   10d20:	1fff6a8c 	.word	0x1fff6a8c
   10d24:	1fff6a1c 	.word	0x1fff6a1c
   10d28:	1fff6a90 	.word	0x1fff6a90
   10d2c:	1fff6a89 	.word	0x1fff6a89
   10d30:	1fff6a20 	.word	0x1fff6a20

00010d34 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10d34:	4a05      	ldr	r2, [pc, #20]	; (10d4c <serial3_available+0x18>)
	tail = rx_buffer_tail;
   10d36:	4b06      	ldr	r3, [pc, #24]	; (10d50 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10d38:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
   10d3a:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10d3c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
   10d3e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
   10d40:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
   10d42:	bf38      	it	cc
   10d44:	3040      	addcc	r0, #64	; 0x40
   10d46:	1ac0      	subs	r0, r0, r3
}
   10d48:	4770      	bx	lr
   10d4a:	bf00      	nop
   10d4c:	1fff6b04 	.word	0x1fff6b04
   10d50:	1fff6a99 	.word	0x1fff6a99

00010d54 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
   10d54:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
   10d56:	4b2b      	ldr	r3, [pc, #172]	; (10e04 <uart2_status_isr+0xb0>)
   10d58:	791a      	ldrb	r2, [r3, #4]
   10d5a:	0694      	lsls	r4, r2, #26
   10d5c:	d51f      	bpl.n	10d9e <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
   10d5e:	482a      	ldr	r0, [pc, #168]	; (10e08 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
   10d60:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
   10d62:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10d64:	4929      	ldr	r1, [pc, #164]	; (10e0c <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
   10d66:	3301      	adds	r3, #1
   10d68:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10d6a:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
   10d6c:	bfc8      	it	gt
   10d6e:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10d70:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
   10d72:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10d74:	d003      	beq.n	10d7e <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
   10d76:	4c26      	ldr	r4, [pc, #152]	; (10e10 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
   10d78:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
   10d7a:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
   10d7c:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
   10d7e:	4a25      	ldr	r2, [pc, #148]	; (10e14 <uart2_status_isr+0xc0>)
   10d80:	6811      	ldr	r1, [r2, #0]
   10d82:	b161      	cbz	r1, 10d9e <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
   10d84:	4a24      	ldr	r2, [pc, #144]	; (10e18 <uart2_status_isr+0xc4>)
   10d86:	7812      	ldrb	r2, [r2, #0]
   10d88:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
   10d8a:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
   10d8c:	bf36      	itet	cc
   10d8e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
   10d92:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
   10d94:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
   10d96:	2b27      	cmp	r3, #39	; 0x27
   10d98:	bfc4      	itt	gt
   10d9a:	2301      	movgt	r3, #1
   10d9c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
   10d9e:	4a19      	ldr	r2, [pc, #100]	; (10e04 <uart2_status_isr+0xb0>)
   10da0:	78d3      	ldrb	r3, [r2, #3]
   10da2:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
   10da4:	0618      	lsls	r0, r3, #24
   10da6:	d411      	bmi.n	10dcc <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
   10da8:	065a      	lsls	r2, r3, #25
   10daa:	d50d      	bpl.n	10dc8 <uart2_status_isr+0x74>
   10dac:	4b15      	ldr	r3, [pc, #84]	; (10e04 <uart2_status_isr+0xb0>)
   10dae:	791b      	ldrb	r3, [r3, #4]
   10db0:	065b      	lsls	r3, r3, #25
   10db2:	d509      	bpl.n	10dc8 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
   10db4:	4b19      	ldr	r3, [pc, #100]	; (10e1c <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
   10db6:	491a      	ldr	r1, [pc, #104]	; (10e20 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
   10db8:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
   10dba:	2200      	movs	r2, #0
   10dbc:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
   10dbe:	b103      	cbz	r3, 10dc2 <uart2_status_isr+0x6e>
   10dc0:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
   10dc2:	4b10      	ldr	r3, [pc, #64]	; (10e04 <uart2_status_isr+0xb0>)
   10dc4:	222c      	movs	r2, #44	; 0x2c
   10dc6:	70da      	strb	r2, [r3, #3]
	}
}
   10dc8:	bc30      	pop	{r4, r5}
   10dca:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
   10dcc:	7911      	ldrb	r1, [r2, #4]
   10dce:	0609      	lsls	r1, r1, #24
   10dd0:	d5ea      	bpl.n	10da8 <uart2_status_isr+0x54>
		head = tx_buffer_head;
   10dd2:	4914      	ldr	r1, [pc, #80]	; (10e24 <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
   10dd4:	4810      	ldr	r0, [pc, #64]	; (10e18 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
   10dd6:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
   10dd8:	7801      	ldrb	r1, [r0, #0]
   10dda:	b2c9      	uxtb	r1, r1
		if (head == tail) {
   10ddc:	428c      	cmp	r4, r1
   10dde:	d00d      	beq.n	10dfc <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
   10de0:	1c4a      	adds	r2, r1, #1
   10de2:	2a27      	cmp	r2, #39	; 0x27
   10de4:	bf84      	itt	hi
   10de6:	2100      	movhi	r1, #0
   10de8:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
   10dea:	4d0f      	ldr	r5, [pc, #60]	; (10e28 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
   10dec:	4c05      	ldr	r4, [pc, #20]	; (10e04 <uart2_status_isr+0xb0>)
   10dee:	bf98      	it	ls
   10df0:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
   10df2:	5caa      	ldrb	r2, [r5, r2]
   10df4:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
   10df6:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
   10df8:	7001      	strb	r1, [r0, #0]
   10dfa:	e7d5      	b.n	10da8 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
   10dfc:	216c      	movs	r1, #108	; 0x6c
   10dfe:	70d1      	strb	r1, [r2, #3]
   10e00:	e7d2      	b.n	10da8 <uart2_status_isr+0x54>
   10e02:	bf00      	nop
   10e04:	4006c000 	.word	0x4006c000
   10e08:	1fff6b04 	.word	0x1fff6b04
   10e0c:	1fff6a99 	.word	0x1fff6a99
   10e10:	1fff6ac4 	.word	0x1fff6ac4
   10e14:	1fff6a94 	.word	0x1fff6a94
   10e18:	1fff6b05 	.word	0x1fff6b05
   10e1c:	1fff6b08 	.word	0x1fff6b08
   10e20:	1fff6a98 	.word	0x1fff6a98
   10e24:	1fff6b0c 	.word	0x1fff6b0c
   10e28:	1fff6a9c 	.word	0x1fff6a9c

00010e2c <serial5_available>:

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10e2c:	4a05      	ldr	r2, [pc, #20]	; (10e44 <serial5_available+0x18>)
	tail = rx_buffer_tail;
   10e2e:	4b06      	ldr	r3, [pc, #24]	; (10e48 <serial5_available+0x1c>)

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10e30:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
   10e32:	781b      	ldrb	r3, [r3, #0]

int serial5_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10e34:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
   10e36:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
   10e38:	4298      	cmp	r0, r3
	return SERIAL5_RX_BUFFER_SIZE + head - tail;
   10e3a:	bf38      	it	cc
   10e3c:	3040      	addcc	r0, #64	; 0x40
   10e3e:	1ac0      	subs	r0, r0, r3
}
   10e40:	4770      	bx	lr
   10e42:	bf00      	nop
   10e44:	1fff6b80 	.word	0x1fff6b80
   10e48:	1fff6b15 	.word	0x1fff6b15

00010e4c <uart4_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart4_status_isr(void)
{
   10e4c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART4_S1 & UART_S1_RDRF) {
   10e4e:	4b2b      	ldr	r3, [pc, #172]	; (10efc <uart4_status_isr+0xb0>)
   10e50:	791a      	ldrb	r2, [r3, #4]
   10e52:	0694      	lsls	r4, r2, #26
   10e54:	d51f      	bpl.n	10e96 <uart4_status_isr+0x4a>
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
   10e56:	482a      	ldr	r0, [pc, #168]	; (10f00 <uart4_status_isr+0xb4>)

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
   10e58:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
   10e5a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10e5c:	4929      	ldr	r1, [pc, #164]	; (10f04 <uart4_status_isr+0xb8>)
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
   10e5e:	3301      	adds	r3, #1
   10e60:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10e62:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
   10e64:	bfc8      	it	gt
   10e66:	2300      	movgt	r3, #0
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10e68:	428b      	cmp	r3, r1

	if (UART4_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART4_C3 & 0x80)) {
			n = UART4_D | 0x100;
		} else {
			n = UART4_D;
   10e6a:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10e6c:	d003      	beq.n	10e76 <uart4_status_isr+0x2a>
			rx_buffer[head] = n;
   10e6e:	4c26      	ldr	r4, [pc, #152]	; (10f08 <uart4_status_isr+0xbc>)
			rx_buffer_head = head;
   10e70:	b2d9      	uxtb	r1, r3
			n = UART4_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL5_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
   10e72:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
   10e74:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
   10e76:	4a25      	ldr	r2, [pc, #148]	; (10f0c <uart4_status_isr+0xc0>)
   10e78:	6811      	ldr	r1, [r2, #0]
   10e7a:	b161      	cbz	r1, 10e96 <uart4_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
   10e7c:	4a24      	ldr	r2, [pc, #144]	; (10f10 <uart4_status_isr+0xc4>)
   10e7e:	7812      	ldrb	r2, [r2, #0]
   10e80:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
   10e82:	4293      	cmp	r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
   10e84:	bf36      	itet	cc
   10e86:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
   10e8a:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
   10e8c:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
   10e8e:	2b27      	cmp	r3, #39	; 0x27
   10e90:	bfc4      	itt	gt
   10e92:	2301      	movgt	r3, #1
   10e94:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART4_C2;
   10e96:	4a19      	ldr	r2, [pc, #100]	; (10efc <uart4_status_isr+0xb0>)
   10e98:	78d3      	ldrb	r3, [r2, #3]
   10e9a:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
   10e9c:	0618      	lsls	r0, r3, #24
   10e9e:	d411      	bmi.n	10ec4 <uart4_status_isr+0x78>
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
   10ea0:	065a      	lsls	r2, r3, #25
   10ea2:	d50d      	bpl.n	10ec0 <uart4_status_isr+0x74>
   10ea4:	4b15      	ldr	r3, [pc, #84]	; (10efc <uart4_status_isr+0xb0>)
   10ea6:	791b      	ldrb	r3, [r3, #4]
   10ea8:	065b      	lsls	r3, r3, #25
   10eaa:	d509      	bpl.n	10ec0 <uart4_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
   10eac:	4b19      	ldr	r3, [pc, #100]	; (10f14 <uart4_status_isr+0xc8>)
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
   10eae:	491a      	ldr	r1, [pc, #104]	; (10f18 <uart4_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
   10eb0:	681b      	ldr	r3, [r3, #0]
			UART4_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART4_S1 & UART_S1_TC)) {
		transmitting = 0;
   10eb2:	2200      	movs	r2, #0
   10eb4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
   10eb6:	b103      	cbz	r3, 10eba <uart4_status_isr+0x6e>
   10eb8:	701a      	strb	r2, [r3, #0]
		UART4_C2 = C2_TX_INACTIVE;
   10eba:	4b10      	ldr	r3, [pc, #64]	; (10efc <uart4_status_isr+0xb0>)
   10ebc:	222c      	movs	r2, #44	; 0x2c
   10ebe:	70da      	strb	r2, [r3, #3]
	}
}
   10ec0:	bc30      	pop	{r4, r5}
   10ec2:	4770      	bx	lr
			else avail = SERIAL5_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
   10ec4:	7911      	ldrb	r1, [r2, #4]
   10ec6:	0609      	lsls	r1, r1, #24
   10ec8:	d5ea      	bpl.n	10ea0 <uart4_status_isr+0x54>
		head = tx_buffer_head;
   10eca:	4914      	ldr	r1, [pc, #80]	; (10f1c <uart4_status_isr+0xd0>)
		tail = tx_buffer_tail;
   10ecc:	4810      	ldr	r0, [pc, #64]	; (10f10 <uart4_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
   10ece:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
   10ed0:	7801      	ldrb	r1, [r0, #0]
   10ed2:	b2c9      	uxtb	r1, r1
		if (head == tail) {
   10ed4:	428c      	cmp	r4, r1
   10ed6:	d00d      	beq.n	10ef4 <uart4_status_isr+0xa8>
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
   10ed8:	1c4a      	adds	r2, r1, #1
   10eda:	2a27      	cmp	r2, #39	; 0x27
   10edc:	bf84      	itt	hi
   10ede:	2100      	movhi	r1, #0
   10ee0:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
   10ee2:	4d0f      	ldr	r5, [pc, #60]	; (10f20 <uart4_status_isr+0xd4>)
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
   10ee4:	4c05      	ldr	r4, [pc, #20]	; (10efc <uart4_status_isr+0xb0>)
   10ee6:	bf98      	it	ls
   10ee8:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL5_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
   10eea:	5caa      	ldrb	r2, [r5, r2]
   10eec:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART4_C3 = (UART4_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART4_D = n;
   10eee:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
   10ef0:	7001      	strb	r1, [r0, #0]
   10ef2:	e7d5      	b.n	10ea0 <uart4_status_isr+0x54>
	c = UART4_C2;
	if ((c & UART_C2_TIE) && (UART4_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART4_C2 = C2_TX_COMPLETING;
   10ef4:	216c      	movs	r1, #108	; 0x6c
   10ef6:	70d1      	strb	r1, [r2, #3]
   10ef8:	e7d2      	b.n	10ea0 <uart4_status_isr+0x54>
   10efa:	bf00      	nop
   10efc:	400ea000 	.word	0x400ea000
   10f00:	1fff6b80 	.word	0x1fff6b80
   10f04:	1fff6b15 	.word	0x1fff6b15
   10f08:	1fff6b40 	.word	0x1fff6b40
   10f0c:	1fff6b10 	.word	0x1fff6b10
   10f10:	1fff6b81 	.word	0x1fff6b81
   10f14:	1fff6b84 	.word	0x1fff6b84
   10f18:	1fff6b14 	.word	0x1fff6b14
   10f1c:	1fff6b88 	.word	0x1fff6b88
   10f20:	1fff6b18 	.word	0x1fff6b18

00010f24 <serial6_available>:

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10f24:	4a05      	ldr	r2, [pc, #20]	; (10f3c <serial6_available+0x18>)
	tail = rx_buffer_tail;
   10f26:	4b06      	ldr	r3, [pc, #24]	; (10f40 <serial6_available+0x1c>)

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10f28:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
   10f2a:	781b      	ldrb	r3, [r3, #0]

int serial6_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
   10f2c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
   10f2e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
   10f30:	4298      	cmp	r0, r3
	return SERIAL6_RX_BUFFER_SIZE + head - tail;
   10f32:	bf38      	it	cc
   10f34:	3040      	addcc	r0, #64	; 0x40
   10f36:	1ac0      	subs	r0, r0, r3
}
   10f38:	4770      	bx	lr
   10f3a:	bf00      	nop
   10f3c:	1fff6bfc 	.word	0x1fff6bfc
   10f40:	1fff6b91 	.word	0x1fff6b91

00010f44 <lpuart0_status_isr>:
//   Receive data above watermark   LPUART_STAT_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void lpuart0_status_isr(void)
{
   10f44:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint32_t c;

	if (LPUART0_STAT & LPUART_STAT_RDRF) {
   10f46:	4b2c      	ldr	r3, [pc, #176]	; (10ff8 <lpuart0_status_isr+0xb4>)
   10f48:	685a      	ldr	r2, [r3, #4]
   10f4a:	0294      	lsls	r4, r2, #10
   10f4c:	d51f      	bpl.n	10f8e <lpuart0_status_isr+0x4a>
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
   10f4e:	482b      	ldr	r0, [pc, #172]	; (10ffc <lpuart0_status_isr+0xb8>)
//		if (use9Bits && (UART5_C3 & 0x80)) {
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
   10f50:	68da      	ldr	r2, [r3, #12]
		head = rx_buffer_head + 1;
   10f52:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10f54:	492a      	ldr	r1, [pc, #168]	; (11000 <lpuart0_status_isr+0xbc>)
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
   10f56:	3301      	adds	r3, #1
   10f58:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10f5a:	7809      	ldrb	r1, [r1, #0]
//			n = UART5_D | 0x100;
//		} else {
//			n = UART5_D;
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
   10f5c:	bfc8      	it	gt
   10f5e:	2300      	movgt	r3, #0
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
   10f60:	428b      	cmp	r3, r1
   10f62:	d004      	beq.n	10f6e <lpuart0_status_isr+0x2a>
			rx_buffer[head] = n;
   10f64:	4c27      	ldr	r4, [pc, #156]	; (11004 <lpuart0_status_isr+0xc0>)
   10f66:	b2d2      	uxtb	r2, r2
			rx_buffer_head = head;
   10f68:	b2d9      	uxtb	r1, r3
//		}
		n = LPUART0_DATA & 0x3ff;	// use only the 10 data bits
		head = rx_buffer_head + 1;
		if (head >= SERIAL6_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
   10f6a:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
   10f6c:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
   10f6e:	4a26      	ldr	r2, [pc, #152]	; (11008 <lpuart0_status_isr+0xc4>)
   10f70:	6811      	ldr	r1, [r2, #0]
   10f72:	b161      	cbz	r1, 10f8e <lpuart0_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
   10f74:	4a25      	ldr	r2, [pc, #148]	; (1100c <lpuart0_status_isr+0xc8>)
   10f76:	7812      	ldrb	r2, [r2, #0]
   10f78:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
   10f7a:	4293      	cmp	r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
   10f7c:	bf36      	itet	cc
   10f7e:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
   10f82:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL6_RX_BUFFER_SIZE + head - tail;
   10f84:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
   10f86:	2b27      	cmp	r3, #39	; 0x27
   10f88:	bfc4      	itt	gt
   10f8a:	2301      	movgt	r3, #1
   10f8c:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = LPUART0_CTRL;
   10f8e:	4a1a      	ldr	r2, [pc, #104]	; (10ff8 <lpuart0_status_isr+0xb4>)
   10f90:	6893      	ldr	r3, [r2, #8]
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
   10f92:	0218      	lsls	r0, r3, #8
   10f94:	d502      	bpl.n	10f9c <lpuart0_status_isr+0x58>
   10f96:	6852      	ldr	r2, [r2, #4]
   10f98:	0211      	lsls	r1, r2, #8
   10f9a:	d411      	bmi.n	10fc0 <lpuart0_status_isr+0x7c>
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
   10f9c:	025a      	lsls	r2, r3, #9
   10f9e:	d50d      	bpl.n	10fbc <lpuart0_status_isr+0x78>
   10fa0:	4b15      	ldr	r3, [pc, #84]	; (10ff8 <lpuart0_status_isr+0xb4>)
   10fa2:	685b      	ldr	r3, [r3, #4]
   10fa4:	025b      	lsls	r3, r3, #9
   10fa6:	d509      	bpl.n	10fbc <lpuart0_status_isr+0x78>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
   10fa8:	4b19      	ldr	r3, [pc, #100]	; (11010 <lpuart0_status_isr+0xcc>)
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
   10faa:	491a      	ldr	r1, [pc, #104]	; (11014 <lpuart0_status_isr+0xd0>)
		if (transmit_pin) transmit_deassert();
   10fac:	681b      	ldr	r3, [r3, #0]
			LPUART0_DATA = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & LPUART_CTRL_TCIE) && (LPUART0_STAT & LPUART_STAT_TC)) {
		transmitting = 0;
   10fae:	2200      	movs	r2, #0
   10fb0:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
   10fb2:	b103      	cbz	r3, 10fb6 <lpuart0_status_isr+0x72>
   10fb4:	701a      	strb	r2, [r3, #0]
		BITBAND_CLR_BIT(LPUART0_CTRL, TCIE_BIT);
   10fb6:	4b18      	ldr	r3, [pc, #96]	; (11018 <lpuart0_status_isr+0xd4>)
   10fb8:	2200      	movs	r2, #0
   10fba:	601a      	str	r2, [r3, #0]
		// LPUART0_CTRL &= ~LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
	}
}
   10fbc:	bc30      	pop	{r4, r5}
   10fbe:	4770      	bx	lr
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
   10fc0:	4a16      	ldr	r2, [pc, #88]	; (1101c <lpuart0_status_isr+0xd8>)
		tail = tx_buffer_tail;
   10fc2:	4912      	ldr	r1, [pc, #72]	; (1100c <lpuart0_status_isr+0xc8>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
   10fc4:	7810      	ldrb	r0, [r2, #0]
		tail = tx_buffer_tail;
   10fc6:	780a      	ldrb	r2, [r1, #0]
   10fc8:	b2d2      	uxtb	r2, r2
		if (head == tail) {
   10fca:	4290      	cmp	r0, r2
   10fcc:	d00d      	beq.n	10fea <lpuart0_status_isr+0xa6>
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
   10fce:	3201      	adds	r2, #1
   10fd0:	2a27      	cmp	r2, #39	; 0x27
   10fd2:	bf84      	itt	hi
   10fd4:	2000      	movhi	r0, #0
   10fd6:	4602      	movhi	r2, r0
			n = tx_buffer[tail];
   10fd8:	4d11      	ldr	r5, [pc, #68]	; (11020 <lpuart0_status_isr+0xdc>)
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
   10fda:	4c07      	ldr	r4, [pc, #28]	; (10ff8 <lpuart0_status_isr+0xb4>)
   10fdc:	bf98      	it	ls
   10fde:	b2d0      	uxtbls	r0, r2
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
			//LPUART0_CTRL &= ~LPUART_CTRL_TIE; 
  			//LPUART0_CTRL |= LPUART_CTRL_TCIE; // Actually wondering if we can just leave this one on...
		} else {
			if (++tail >= SERIAL6_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
   10fe0:	5caa      	ldrb	r2, [r5, r2]
   10fe2:	b2d2      	uxtb	r2, r2
			//if (use9Bits) UART5_C3 = (UART5_C3 & ~0x40) | ((n & 0x100) >> 2);
			LPUART0_DATA = n;
   10fe4:	60e2      	str	r2, [r4, #12]
			tx_buffer_tail = tail;
   10fe6:	7008      	strb	r0, [r1, #0]
   10fe8:	e7d8      	b.n	10f9c <lpuart0_status_isr+0x58>
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
   10fea:	480e      	ldr	r0, [pc, #56]	; (11024 <lpuart0_status_isr+0xe0>)
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
   10fec:	4a0a      	ldr	r2, [pc, #40]	; (11018 <lpuart0_status_isr+0xd4>)
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
   10fee:	2400      	movs	r4, #0
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
   10ff0:	2101      	movs	r1, #1
	c = LPUART0_CTRL;
	if ((c & LPUART_CTRL_TIE) && (LPUART0_STAT & LPUART_STAT_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			BITBAND_CLR_BIT(LPUART0_CTRL, TIE_BIT);
   10ff2:	6004      	str	r4, [r0, #0]
			BITBAND_SET_BIT(LPUART0_CTRL, TCIE_BIT);
   10ff4:	6011      	str	r1, [r2, #0]
   10ff6:	e7d1      	b.n	10f9c <lpuart0_status_isr+0x58>
   10ff8:	400c4000 	.word	0x400c4000
   10ffc:	1fff6bfc 	.word	0x1fff6bfc
   11000:	1fff6b91 	.word	0x1fff6b91
   11004:	1fff6bbc 	.word	0x1fff6bbc
   11008:	1fff6b8c 	.word	0x1fff6b8c
   1100c:	1fff6bfd 	.word	0x1fff6bfd
   11010:	1fff6c00 	.word	0x1fff6c00
   11014:	1fff6b90 	.word	0x1fff6b90
   11018:	43880158 	.word	0x43880158
   1101c:	1fff6c04 	.word	0x1fff6c04
   11020:	1fff6b94 	.word	0x1fff6b94
   11024:	4388015c 	.word	0x4388015c

00011028 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   11028:	b510      	push	{r4, lr}
   1102a:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
   1102c:	b672      	cpsid	i
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
   1102e:	f7fd fc1f 	bl	e870 <kinetis_hsrun_disable>
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   11032:	4a2f      	ldr	r2, [pc, #188]	; (110f0 <usb_init_serialnumber+0xc8>)
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   11034:	4b2f      	ldr	r3, [pc, #188]	; (110f4 <usb_init_serialnumber+0xcc>)
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
   11036:	4930      	ldr	r1, [pc, #192]	; (110f8 <usb_init_serialnumber+0xd0>)
   11038:	6011      	str	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   1103a:	2270      	movs	r2, #112	; 0x70
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   1103c:	2180      	movs	r1, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
   1103e:	701a      	strb	r2, [r3, #0]
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   11040:	461a      	mov	r2, r3
	num = *(uint32_t *)&FTFL_FCCOB7;
#elif defined(HAS_KINETIS_FLASH_FTFE)
	kinetis_hsrun_disable();
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	*(uint32_t *)&FTFL_FCCOB3 = 0x41070000;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
   11042:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
   11044:	7813      	ldrb	r3, [r2, #0]
   11046:	061b      	lsls	r3, r3, #24
   11048:	d5fc      	bpl.n	11044 <usb_init_serialnumber+0x1c>
	num = *(uint32_t *)&FTFL_FCCOBB;
   1104a:	4b2c      	ldr	r3, [pc, #176]	; (110fc <usb_init_serialnumber+0xd4>)
   1104c:	681c      	ldr	r4, [r3, #0]
	kinetis_hsrun_enable();
   1104e:	f7fd fc29 	bl	e8a4 <kinetis_hsrun_enable>
#endif
	__enable_irq();
   11052:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   11054:	4b2a      	ldr	r3, [pc, #168]	; (11100 <usb_init_serialnumber+0xd8>)
   11056:	429c      	cmp	r4, r3
   11058:	bf9c      	itt	ls
   1105a:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
   1105e:	0064      	lslls	r4, r4, #1
	ultoa(num, buf, 10);
   11060:	220a      	movs	r2, #10
   11062:	4620      	mov	r0, r4
   11064:	a901      	add	r1, sp, #4
   11066:	f7fd fc37 	bl	e8d8 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
   1106a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1106e:	4b25      	ldr	r3, [pc, #148]	; (11104 <usb_init_serialnumber+0xdc>)
		if (!c) break;
   11070:	b352      	cbz	r2, 110c8 <usb_init_serialnumber+0xa0>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   11072:	f89d 1005 	ldrb.w	r1, [sp, #5]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   11076:	805a      	strh	r2, [r3, #2]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   11078:	b361      	cbz	r1, 110d4 <usb_init_serialnumber+0xac>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   1107a:	f89d 2006 	ldrb.w	r2, [sp, #6]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   1107e:	8099      	strh	r1, [r3, #4]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   11080:	b352      	cbz	r2, 110d8 <usb_init_serialnumber+0xb0>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   11082:	f89d 1007 	ldrb.w	r1, [sp, #7]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   11086:	80da      	strh	r2, [r3, #6]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   11088:	b341      	cbz	r1, 110dc <usb_init_serialnumber+0xb4>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   1108a:	f89d 2008 	ldrb.w	r2, [sp, #8]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   1108e:	8119      	strh	r1, [r3, #8]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   11090:	b332      	cbz	r2, 110e0 <usb_init_serialnumber+0xb8>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   11092:	f89d 1009 	ldrb.w	r1, [sp, #9]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   11096:	815a      	strh	r2, [r3, #10]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   11098:	b321      	cbz	r1, 110e4 <usb_init_serialnumber+0xbc>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   1109a:	f89d 200a 	ldrb.w	r2, [sp, #10]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   1109e:	8199      	strh	r1, [r3, #12]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   110a0:	b312      	cbz	r2, 110e8 <usb_init_serialnumber+0xc0>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   110a2:	f89d 100b 	ldrb.w	r1, [sp, #11]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   110a6:	81da      	strh	r2, [r3, #14]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   110a8:	b301      	cbz	r1, 110ec <usb_init_serialnumber+0xc4>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   110aa:	f89d 200c 	ldrb.w	r2, [sp, #12]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   110ae:	8219      	strh	r1, [r3, #16]
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
   110b0:	b14a      	cbz	r2, 110c6 <usb_init_serialnumber+0x9e>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
   110b2:	f89d 100d 	ldrb.w	r1, [sp, #13]
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
   110b6:	825a      	strh	r2, [r3, #18]
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   110b8:	2209      	movs	r2, #9
		char c = buf[i];
		if (!c) break;
   110ba:	b129      	cbz	r1, 110c8 <usb_init_serialnumber+0xa0>
   110bc:	2216      	movs	r2, #22
		usb_string_serial_number_default.wString[i] = c;
   110be:	8299      	strh	r1, [r3, #20]
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   110c0:	701a      	strb	r2, [r3, #0]
}
   110c2:	b004      	add	sp, #16
   110c4:	bd10      	pop	{r4, pc}
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   110c6:	2208      	movs	r2, #8
   110c8:	3201      	adds	r2, #1
   110ca:	0052      	lsls	r2, r2, #1
   110cc:	b2d2      	uxtb	r2, r2
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   110ce:	701a      	strb	r2, [r3, #0]
}
   110d0:	b004      	add	sp, #16
   110d2:	bd10      	pop	{r4, pc}
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
   110d4:	2201      	movs	r2, #1
   110d6:	e7f7      	b.n	110c8 <usb_init_serialnumber+0xa0>
   110d8:	2202      	movs	r2, #2
   110da:	e7f5      	b.n	110c8 <usb_init_serialnumber+0xa0>
   110dc:	2203      	movs	r2, #3
   110de:	e7f3      	b.n	110c8 <usb_init_serialnumber+0xa0>
   110e0:	2204      	movs	r2, #4
   110e2:	e7f1      	b.n	110c8 <usb_init_serialnumber+0xa0>
   110e4:	2205      	movs	r2, #5
   110e6:	e7ef      	b.n	110c8 <usb_init_serialnumber+0xa0>
   110e8:	2206      	movs	r2, #6
   110ea:	e7ed      	b.n	110c8 <usb_init_serialnumber+0xa0>
   110ec:	2207      	movs	r2, #7
   110ee:	e7eb      	b.n	110c8 <usb_init_serialnumber+0xa0>
   110f0:	40020004 	.word	0x40020004
   110f4:	40020000 	.word	0x40020000
   110f8:	41070000 	.word	0x41070000
   110fc:	4002000c 	.word	0x4002000c
   11100:	0098967f 	.word	0x0098967f
   11104:	1fff4ba0 	.word	0x1fff4ba0

00011108 <__aeabi_drsub>:
   11108:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1110c:	e002      	b.n	11114 <__adddf3>
   1110e:	bf00      	nop

00011110 <__aeabi_dsub>:
   11110:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00011114 <__adddf3>:
   11114:	b530      	push	{r4, r5, lr}
   11116:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1111a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1111e:	ea94 0f05 	teq	r4, r5
   11122:	bf08      	it	eq
   11124:	ea90 0f02 	teqeq	r0, r2
   11128:	bf1f      	itttt	ne
   1112a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1112e:	ea55 0c02 	orrsne.w	ip, r5, r2
   11132:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   11136:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1113a:	f000 80e2 	beq.w	11302 <__adddf3+0x1ee>
   1113e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   11142:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   11146:	bfb8      	it	lt
   11148:	426d      	neglt	r5, r5
   1114a:	dd0c      	ble.n	11166 <__adddf3+0x52>
   1114c:	442c      	add	r4, r5
   1114e:	ea80 0202 	eor.w	r2, r0, r2
   11152:	ea81 0303 	eor.w	r3, r1, r3
   11156:	ea82 0000 	eor.w	r0, r2, r0
   1115a:	ea83 0101 	eor.w	r1, r3, r1
   1115e:	ea80 0202 	eor.w	r2, r0, r2
   11162:	ea81 0303 	eor.w	r3, r1, r3
   11166:	2d36      	cmp	r5, #54	; 0x36
   11168:	bf88      	it	hi
   1116a:	bd30      	pophi	{r4, r5, pc}
   1116c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   11170:	ea4f 3101 	mov.w	r1, r1, lsl #12
   11174:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   11178:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1117c:	d002      	beq.n	11184 <__adddf3+0x70>
   1117e:	4240      	negs	r0, r0
   11180:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11184:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   11188:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1118c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   11190:	d002      	beq.n	11198 <__adddf3+0x84>
   11192:	4252      	negs	r2, r2
   11194:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11198:	ea94 0f05 	teq	r4, r5
   1119c:	f000 80a7 	beq.w	112ee <__adddf3+0x1da>
   111a0:	f1a4 0401 	sub.w	r4, r4, #1
   111a4:	f1d5 0e20 	rsbs	lr, r5, #32
   111a8:	db0d      	blt.n	111c6 <__adddf3+0xb2>
   111aa:	fa02 fc0e 	lsl.w	ip, r2, lr
   111ae:	fa22 f205 	lsr.w	r2, r2, r5
   111b2:	1880      	adds	r0, r0, r2
   111b4:	f141 0100 	adc.w	r1, r1, #0
   111b8:	fa03 f20e 	lsl.w	r2, r3, lr
   111bc:	1880      	adds	r0, r0, r2
   111be:	fa43 f305 	asr.w	r3, r3, r5
   111c2:	4159      	adcs	r1, r3
   111c4:	e00e      	b.n	111e4 <__adddf3+0xd0>
   111c6:	f1a5 0520 	sub.w	r5, r5, #32
   111ca:	f10e 0e20 	add.w	lr, lr, #32
   111ce:	2a01      	cmp	r2, #1
   111d0:	fa03 fc0e 	lsl.w	ip, r3, lr
   111d4:	bf28      	it	cs
   111d6:	f04c 0c02 	orrcs.w	ip, ip, #2
   111da:	fa43 f305 	asr.w	r3, r3, r5
   111de:	18c0      	adds	r0, r0, r3
   111e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   111e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   111e8:	d507      	bpl.n	111fa <__adddf3+0xe6>
   111ea:	f04f 0e00 	mov.w	lr, #0
   111ee:	f1dc 0c00 	rsbs	ip, ip, #0
   111f2:	eb7e 0000 	sbcs.w	r0, lr, r0
   111f6:	eb6e 0101 	sbc.w	r1, lr, r1
   111fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   111fe:	d31b      	bcc.n	11238 <__adddf3+0x124>
   11200:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   11204:	d30c      	bcc.n	11220 <__adddf3+0x10c>
   11206:	0849      	lsrs	r1, r1, #1
   11208:	ea5f 0030 	movs.w	r0, r0, rrx
   1120c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   11210:	f104 0401 	add.w	r4, r4, #1
   11214:	ea4f 5244 	mov.w	r2, r4, lsl #21
   11218:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1121c:	f080 809a 	bcs.w	11354 <__adddf3+0x240>
   11220:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   11224:	bf08      	it	eq
   11226:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1122a:	f150 0000 	adcs.w	r0, r0, #0
   1122e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   11232:	ea41 0105 	orr.w	r1, r1, r5
   11236:	bd30      	pop	{r4, r5, pc}
   11238:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1123c:	4140      	adcs	r0, r0
   1123e:	eb41 0101 	adc.w	r1, r1, r1
   11242:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11246:	f1a4 0401 	sub.w	r4, r4, #1
   1124a:	d1e9      	bne.n	11220 <__adddf3+0x10c>
   1124c:	f091 0f00 	teq	r1, #0
   11250:	bf04      	itt	eq
   11252:	4601      	moveq	r1, r0
   11254:	2000      	moveq	r0, #0
   11256:	fab1 f381 	clz	r3, r1
   1125a:	bf08      	it	eq
   1125c:	3320      	addeq	r3, #32
   1125e:	f1a3 030b 	sub.w	r3, r3, #11
   11262:	f1b3 0220 	subs.w	r2, r3, #32
   11266:	da0c      	bge.n	11282 <__adddf3+0x16e>
   11268:	320c      	adds	r2, #12
   1126a:	dd08      	ble.n	1127e <__adddf3+0x16a>
   1126c:	f102 0c14 	add.w	ip, r2, #20
   11270:	f1c2 020c 	rsb	r2, r2, #12
   11274:	fa01 f00c 	lsl.w	r0, r1, ip
   11278:	fa21 f102 	lsr.w	r1, r1, r2
   1127c:	e00c      	b.n	11298 <__adddf3+0x184>
   1127e:	f102 0214 	add.w	r2, r2, #20
   11282:	bfd8      	it	le
   11284:	f1c2 0c20 	rsble	ip, r2, #32
   11288:	fa01 f102 	lsl.w	r1, r1, r2
   1128c:	fa20 fc0c 	lsr.w	ip, r0, ip
   11290:	bfdc      	itt	le
   11292:	ea41 010c 	orrle.w	r1, r1, ip
   11296:	4090      	lslle	r0, r2
   11298:	1ae4      	subs	r4, r4, r3
   1129a:	bfa2      	ittt	ge
   1129c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   112a0:	4329      	orrge	r1, r5
   112a2:	bd30      	popge	{r4, r5, pc}
   112a4:	ea6f 0404 	mvn.w	r4, r4
   112a8:	3c1f      	subs	r4, #31
   112aa:	da1c      	bge.n	112e6 <__adddf3+0x1d2>
   112ac:	340c      	adds	r4, #12
   112ae:	dc0e      	bgt.n	112ce <__adddf3+0x1ba>
   112b0:	f104 0414 	add.w	r4, r4, #20
   112b4:	f1c4 0220 	rsb	r2, r4, #32
   112b8:	fa20 f004 	lsr.w	r0, r0, r4
   112bc:	fa01 f302 	lsl.w	r3, r1, r2
   112c0:	ea40 0003 	orr.w	r0, r0, r3
   112c4:	fa21 f304 	lsr.w	r3, r1, r4
   112c8:	ea45 0103 	orr.w	r1, r5, r3
   112cc:	bd30      	pop	{r4, r5, pc}
   112ce:	f1c4 040c 	rsb	r4, r4, #12
   112d2:	f1c4 0220 	rsb	r2, r4, #32
   112d6:	fa20 f002 	lsr.w	r0, r0, r2
   112da:	fa01 f304 	lsl.w	r3, r1, r4
   112de:	ea40 0003 	orr.w	r0, r0, r3
   112e2:	4629      	mov	r1, r5
   112e4:	bd30      	pop	{r4, r5, pc}
   112e6:	fa21 f004 	lsr.w	r0, r1, r4
   112ea:	4629      	mov	r1, r5
   112ec:	bd30      	pop	{r4, r5, pc}
   112ee:	f094 0f00 	teq	r4, #0
   112f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   112f6:	bf06      	itte	eq
   112f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   112fc:	3401      	addeq	r4, #1
   112fe:	3d01      	subne	r5, #1
   11300:	e74e      	b.n	111a0 <__adddf3+0x8c>
   11302:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   11306:	bf18      	it	ne
   11308:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1130c:	d029      	beq.n	11362 <__adddf3+0x24e>
   1130e:	ea94 0f05 	teq	r4, r5
   11312:	bf08      	it	eq
   11314:	ea90 0f02 	teqeq	r0, r2
   11318:	d005      	beq.n	11326 <__adddf3+0x212>
   1131a:	ea54 0c00 	orrs.w	ip, r4, r0
   1131e:	bf04      	itt	eq
   11320:	4619      	moveq	r1, r3
   11322:	4610      	moveq	r0, r2
   11324:	bd30      	pop	{r4, r5, pc}
   11326:	ea91 0f03 	teq	r1, r3
   1132a:	bf1e      	ittt	ne
   1132c:	2100      	movne	r1, #0
   1132e:	2000      	movne	r0, #0
   11330:	bd30      	popne	{r4, r5, pc}
   11332:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   11336:	d105      	bne.n	11344 <__adddf3+0x230>
   11338:	0040      	lsls	r0, r0, #1
   1133a:	4149      	adcs	r1, r1
   1133c:	bf28      	it	cs
   1133e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11342:	bd30      	pop	{r4, r5, pc}
   11344:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   11348:	bf3c      	itt	cc
   1134a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1134e:	bd30      	popcc	{r4, r5, pc}
   11350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11354:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   11358:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1135c:	f04f 0000 	mov.w	r0, #0
   11360:	bd30      	pop	{r4, r5, pc}
   11362:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   11366:	bf1a      	itte	ne
   11368:	4619      	movne	r1, r3
   1136a:	4610      	movne	r0, r2
   1136c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   11370:	bf1c      	itt	ne
   11372:	460b      	movne	r3, r1
   11374:	4602      	movne	r2, r0
   11376:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1137a:	bf06      	itte	eq
   1137c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   11380:	ea91 0f03 	teqeq	r1, r3
   11384:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   11388:	bd30      	pop	{r4, r5, pc}
   1138a:	bf00      	nop

0001138c <__aeabi_ui2d>:
   1138c:	f090 0f00 	teq	r0, #0
   11390:	bf04      	itt	eq
   11392:	2100      	moveq	r1, #0
   11394:	4770      	bxeq	lr
   11396:	b530      	push	{r4, r5, lr}
   11398:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1139c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   113a0:	f04f 0500 	mov.w	r5, #0
   113a4:	f04f 0100 	mov.w	r1, #0
   113a8:	e750      	b.n	1124c <__adddf3+0x138>
   113aa:	bf00      	nop

000113ac <__aeabi_i2d>:
   113ac:	f090 0f00 	teq	r0, #0
   113b0:	bf04      	itt	eq
   113b2:	2100      	moveq	r1, #0
   113b4:	4770      	bxeq	lr
   113b6:	b530      	push	{r4, r5, lr}
   113b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   113bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   113c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   113c4:	bf48      	it	mi
   113c6:	4240      	negmi	r0, r0
   113c8:	f04f 0100 	mov.w	r1, #0
   113cc:	e73e      	b.n	1124c <__adddf3+0x138>
   113ce:	bf00      	nop

000113d0 <__aeabi_f2d>:
   113d0:	0042      	lsls	r2, r0, #1
   113d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   113d6:	ea4f 0131 	mov.w	r1, r1, rrx
   113da:	ea4f 7002 	mov.w	r0, r2, lsl #28
   113de:	bf1f      	itttt	ne
   113e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   113e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   113e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   113ec:	4770      	bxne	lr
   113ee:	f092 0f00 	teq	r2, #0
   113f2:	bf14      	ite	ne
   113f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   113f8:	4770      	bxeq	lr
   113fa:	b530      	push	{r4, r5, lr}
   113fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   11400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   11404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11408:	e720      	b.n	1124c <__adddf3+0x138>
   1140a:	bf00      	nop

0001140c <__aeabi_ul2d>:
   1140c:	ea50 0201 	orrs.w	r2, r0, r1
   11410:	bf08      	it	eq
   11412:	4770      	bxeq	lr
   11414:	b530      	push	{r4, r5, lr}
   11416:	f04f 0500 	mov.w	r5, #0
   1141a:	e00a      	b.n	11432 <__aeabi_l2d+0x16>

0001141c <__aeabi_l2d>:
   1141c:	ea50 0201 	orrs.w	r2, r0, r1
   11420:	bf08      	it	eq
   11422:	4770      	bxeq	lr
   11424:	b530      	push	{r4, r5, lr}
   11426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1142a:	d502      	bpl.n	11432 <__aeabi_l2d+0x16>
   1142c:	4240      	negs	r0, r0
   1142e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   11432:	f44f 6480 	mov.w	r4, #1024	; 0x400
   11436:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1143a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1143e:	f43f aedc 	beq.w	111fa <__adddf3+0xe6>
   11442:	f04f 0203 	mov.w	r2, #3
   11446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1144a:	bf18      	it	ne
   1144c:	3203      	addne	r2, #3
   1144e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   11452:	bf18      	it	ne
   11454:	3203      	addne	r2, #3
   11456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1145a:	f1c2 0320 	rsb	r3, r2, #32
   1145e:	fa00 fc03 	lsl.w	ip, r0, r3
   11462:	fa20 f002 	lsr.w	r0, r0, r2
   11466:	fa01 fe03 	lsl.w	lr, r1, r3
   1146a:	ea40 000e 	orr.w	r0, r0, lr
   1146e:	fa21 f102 	lsr.w	r1, r1, r2
   11472:	4414      	add	r4, r2
   11474:	e6c1      	b.n	111fa <__adddf3+0xe6>
   11476:	bf00      	nop

00011478 <__aeabi_dmul>:
   11478:	b570      	push	{r4, r5, r6, lr}
   1147a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1147e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   11482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   11486:	bf1d      	ittte	ne
   11488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1148c:	ea94 0f0c 	teqne	r4, ip
   11490:	ea95 0f0c 	teqne	r5, ip
   11494:	f000 f8de 	bleq	11654 <__aeabi_dmul+0x1dc>
   11498:	442c      	add	r4, r5
   1149a:	ea81 0603 	eor.w	r6, r1, r3
   1149e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   114a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   114a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   114aa:	bf18      	it	ne
   114ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   114b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   114b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   114b8:	d038      	beq.n	1152c <__aeabi_dmul+0xb4>
   114ba:	fba0 ce02 	umull	ip, lr, r0, r2
   114be:	f04f 0500 	mov.w	r5, #0
   114c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   114c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   114ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   114ce:	f04f 0600 	mov.w	r6, #0
   114d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   114d6:	f09c 0f00 	teq	ip, #0
   114da:	bf18      	it	ne
   114dc:	f04e 0e01 	orrne.w	lr, lr, #1
   114e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   114e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   114e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   114ec:	d204      	bcs.n	114f8 <__aeabi_dmul+0x80>
   114ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   114f2:	416d      	adcs	r5, r5
   114f4:	eb46 0606 	adc.w	r6, r6, r6
   114f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   114fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   11500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   11504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   11508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1150c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   11510:	bf88      	it	hi
   11512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   11516:	d81e      	bhi.n	11556 <__aeabi_dmul+0xde>
   11518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1151c:	bf08      	it	eq
   1151e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   11522:	f150 0000 	adcs.w	r0, r0, #0
   11526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1152a:	bd70      	pop	{r4, r5, r6, pc}
   1152c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   11530:	ea46 0101 	orr.w	r1, r6, r1
   11534:	ea40 0002 	orr.w	r0, r0, r2
   11538:	ea81 0103 	eor.w	r1, r1, r3
   1153c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   11540:	bfc2      	ittt	gt
   11542:	ebd4 050c 	rsbsgt	r5, r4, ip
   11546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1154a:	bd70      	popgt	{r4, r5, r6, pc}
   1154c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   11550:	f04f 0e00 	mov.w	lr, #0
   11554:	3c01      	subs	r4, #1
   11556:	f300 80ab 	bgt.w	116b0 <__aeabi_dmul+0x238>
   1155a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1155e:	bfde      	ittt	le
   11560:	2000      	movle	r0, #0
   11562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   11566:	bd70      	pople	{r4, r5, r6, pc}
   11568:	f1c4 0400 	rsb	r4, r4, #0
   1156c:	3c20      	subs	r4, #32
   1156e:	da35      	bge.n	115dc <__aeabi_dmul+0x164>
   11570:	340c      	adds	r4, #12
   11572:	dc1b      	bgt.n	115ac <__aeabi_dmul+0x134>
   11574:	f104 0414 	add.w	r4, r4, #20
   11578:	f1c4 0520 	rsb	r5, r4, #32
   1157c:	fa00 f305 	lsl.w	r3, r0, r5
   11580:	fa20 f004 	lsr.w	r0, r0, r4
   11584:	fa01 f205 	lsl.w	r2, r1, r5
   11588:	ea40 0002 	orr.w	r0, r0, r2
   1158c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   11590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   11594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   11598:	fa21 f604 	lsr.w	r6, r1, r4
   1159c:	eb42 0106 	adc.w	r1, r2, r6
   115a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   115a4:	bf08      	it	eq
   115a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   115aa:	bd70      	pop	{r4, r5, r6, pc}
   115ac:	f1c4 040c 	rsb	r4, r4, #12
   115b0:	f1c4 0520 	rsb	r5, r4, #32
   115b4:	fa00 f304 	lsl.w	r3, r0, r4
   115b8:	fa20 f005 	lsr.w	r0, r0, r5
   115bc:	fa01 f204 	lsl.w	r2, r1, r4
   115c0:	ea40 0002 	orr.w	r0, r0, r2
   115c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   115c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   115cc:	f141 0100 	adc.w	r1, r1, #0
   115d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   115d4:	bf08      	it	eq
   115d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   115da:	bd70      	pop	{r4, r5, r6, pc}
   115dc:	f1c4 0520 	rsb	r5, r4, #32
   115e0:	fa00 f205 	lsl.w	r2, r0, r5
   115e4:	ea4e 0e02 	orr.w	lr, lr, r2
   115e8:	fa20 f304 	lsr.w	r3, r0, r4
   115ec:	fa01 f205 	lsl.w	r2, r1, r5
   115f0:	ea43 0302 	orr.w	r3, r3, r2
   115f4:	fa21 f004 	lsr.w	r0, r1, r4
   115f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   115fc:	fa21 f204 	lsr.w	r2, r1, r4
   11600:	ea20 0002 	bic.w	r0, r0, r2
   11604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   11608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1160c:	bf08      	it	eq
   1160e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   11612:	bd70      	pop	{r4, r5, r6, pc}
   11614:	f094 0f00 	teq	r4, #0
   11618:	d10f      	bne.n	1163a <__aeabi_dmul+0x1c2>
   1161a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1161e:	0040      	lsls	r0, r0, #1
   11620:	eb41 0101 	adc.w	r1, r1, r1
   11624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   11628:	bf08      	it	eq
   1162a:	3c01      	subeq	r4, #1
   1162c:	d0f7      	beq.n	1161e <__aeabi_dmul+0x1a6>
   1162e:	ea41 0106 	orr.w	r1, r1, r6
   11632:	f095 0f00 	teq	r5, #0
   11636:	bf18      	it	ne
   11638:	4770      	bxne	lr
   1163a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1163e:	0052      	lsls	r2, r2, #1
   11640:	eb43 0303 	adc.w	r3, r3, r3
   11644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   11648:	bf08      	it	eq
   1164a:	3d01      	subeq	r5, #1
   1164c:	d0f7      	beq.n	1163e <__aeabi_dmul+0x1c6>
   1164e:	ea43 0306 	orr.w	r3, r3, r6
   11652:	4770      	bx	lr
   11654:	ea94 0f0c 	teq	r4, ip
   11658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1165c:	bf18      	it	ne
   1165e:	ea95 0f0c 	teqne	r5, ip
   11662:	d00c      	beq.n	1167e <__aeabi_dmul+0x206>
   11664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11668:	bf18      	it	ne
   1166a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1166e:	d1d1      	bne.n	11614 <__aeabi_dmul+0x19c>
   11670:	ea81 0103 	eor.w	r1, r1, r3
   11674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   11678:	f04f 0000 	mov.w	r0, #0
   1167c:	bd70      	pop	{r4, r5, r6, pc}
   1167e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11682:	bf06      	itte	eq
   11684:	4610      	moveq	r0, r2
   11686:	4619      	moveq	r1, r3
   11688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1168c:	d019      	beq.n	116c2 <__aeabi_dmul+0x24a>
   1168e:	ea94 0f0c 	teq	r4, ip
   11692:	d102      	bne.n	1169a <__aeabi_dmul+0x222>
   11694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   11698:	d113      	bne.n	116c2 <__aeabi_dmul+0x24a>
   1169a:	ea95 0f0c 	teq	r5, ip
   1169e:	d105      	bne.n	116ac <__aeabi_dmul+0x234>
   116a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   116a4:	bf1c      	itt	ne
   116a6:	4610      	movne	r0, r2
   116a8:	4619      	movne	r1, r3
   116aa:	d10a      	bne.n	116c2 <__aeabi_dmul+0x24a>
   116ac:	ea81 0103 	eor.w	r1, r1, r3
   116b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   116b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   116b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   116bc:	f04f 0000 	mov.w	r0, #0
   116c0:	bd70      	pop	{r4, r5, r6, pc}
   116c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   116c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   116ca:	bd70      	pop	{r4, r5, r6, pc}

000116cc <__aeabi_ddiv>:
   116cc:	b570      	push	{r4, r5, r6, lr}
   116ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   116d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   116d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   116da:	bf1d      	ittte	ne
   116dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   116e0:	ea94 0f0c 	teqne	r4, ip
   116e4:	ea95 0f0c 	teqne	r5, ip
   116e8:	f000 f8a7 	bleq	1183a <__aeabi_ddiv+0x16e>
   116ec:	eba4 0405 	sub.w	r4, r4, r5
   116f0:	ea81 0e03 	eor.w	lr, r1, r3
   116f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   116f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   116fc:	f000 8088 	beq.w	11810 <__aeabi_ddiv+0x144>
   11700:	ea4f 3303 	mov.w	r3, r3, lsl #12
   11704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   11708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1170c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   11710:	ea4f 2202 	mov.w	r2, r2, lsl #8
   11714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   11718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1171c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   11720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   11724:	429d      	cmp	r5, r3
   11726:	bf08      	it	eq
   11728:	4296      	cmpeq	r6, r2
   1172a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1172e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   11732:	d202      	bcs.n	1173a <__aeabi_ddiv+0x6e>
   11734:	085b      	lsrs	r3, r3, #1
   11736:	ea4f 0232 	mov.w	r2, r2, rrx
   1173a:	1ab6      	subs	r6, r6, r2
   1173c:	eb65 0503 	sbc.w	r5, r5, r3
   11740:	085b      	lsrs	r3, r3, #1
   11742:	ea4f 0232 	mov.w	r2, r2, rrx
   11746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1174a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1174e:	ebb6 0e02 	subs.w	lr, r6, r2
   11752:	eb75 0e03 	sbcs.w	lr, r5, r3
   11756:	bf22      	ittt	cs
   11758:	1ab6      	subcs	r6, r6, r2
   1175a:	4675      	movcs	r5, lr
   1175c:	ea40 000c 	orrcs.w	r0, r0, ip
   11760:	085b      	lsrs	r3, r3, #1
   11762:	ea4f 0232 	mov.w	r2, r2, rrx
   11766:	ebb6 0e02 	subs.w	lr, r6, r2
   1176a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1176e:	bf22      	ittt	cs
   11770:	1ab6      	subcs	r6, r6, r2
   11772:	4675      	movcs	r5, lr
   11774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   11778:	085b      	lsrs	r3, r3, #1
   1177a:	ea4f 0232 	mov.w	r2, r2, rrx
   1177e:	ebb6 0e02 	subs.w	lr, r6, r2
   11782:	eb75 0e03 	sbcs.w	lr, r5, r3
   11786:	bf22      	ittt	cs
   11788:	1ab6      	subcs	r6, r6, r2
   1178a:	4675      	movcs	r5, lr
   1178c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   11790:	085b      	lsrs	r3, r3, #1
   11792:	ea4f 0232 	mov.w	r2, r2, rrx
   11796:	ebb6 0e02 	subs.w	lr, r6, r2
   1179a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1179e:	bf22      	ittt	cs
   117a0:	1ab6      	subcs	r6, r6, r2
   117a2:	4675      	movcs	r5, lr
   117a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   117a8:	ea55 0e06 	orrs.w	lr, r5, r6
   117ac:	d018      	beq.n	117e0 <__aeabi_ddiv+0x114>
   117ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   117b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   117b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   117ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   117be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   117c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   117c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   117ca:	d1c0      	bne.n	1174e <__aeabi_ddiv+0x82>
   117cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   117d0:	d10b      	bne.n	117ea <__aeabi_ddiv+0x11e>
   117d2:	ea41 0100 	orr.w	r1, r1, r0
   117d6:	f04f 0000 	mov.w	r0, #0
   117da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   117de:	e7b6      	b.n	1174e <__aeabi_ddiv+0x82>
   117e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   117e4:	bf04      	itt	eq
   117e6:	4301      	orreq	r1, r0
   117e8:	2000      	moveq	r0, #0
   117ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   117ee:	bf88      	it	hi
   117f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   117f4:	f63f aeaf 	bhi.w	11556 <__aeabi_dmul+0xde>
   117f8:	ebb5 0c03 	subs.w	ip, r5, r3
   117fc:	bf04      	itt	eq
   117fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   11802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   11806:	f150 0000 	adcs.w	r0, r0, #0
   1180a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1180e:	bd70      	pop	{r4, r5, r6, pc}
   11810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   11814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   11818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1181c:	bfc2      	ittt	gt
   1181e:	ebd4 050c 	rsbsgt	r5, r4, ip
   11822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   11826:	bd70      	popgt	{r4, r5, r6, pc}
   11828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1182c:	f04f 0e00 	mov.w	lr, #0
   11830:	3c01      	subs	r4, #1
   11832:	e690      	b.n	11556 <__aeabi_dmul+0xde>
   11834:	ea45 0e06 	orr.w	lr, r5, r6
   11838:	e68d      	b.n	11556 <__aeabi_dmul+0xde>
   1183a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1183e:	ea94 0f0c 	teq	r4, ip
   11842:	bf08      	it	eq
   11844:	ea95 0f0c 	teqeq	r5, ip
   11848:	f43f af3b 	beq.w	116c2 <__aeabi_dmul+0x24a>
   1184c:	ea94 0f0c 	teq	r4, ip
   11850:	d10a      	bne.n	11868 <__aeabi_ddiv+0x19c>
   11852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   11856:	f47f af34 	bne.w	116c2 <__aeabi_dmul+0x24a>
   1185a:	ea95 0f0c 	teq	r5, ip
   1185e:	f47f af25 	bne.w	116ac <__aeabi_dmul+0x234>
   11862:	4610      	mov	r0, r2
   11864:	4619      	mov	r1, r3
   11866:	e72c      	b.n	116c2 <__aeabi_dmul+0x24a>
   11868:	ea95 0f0c 	teq	r5, ip
   1186c:	d106      	bne.n	1187c <__aeabi_ddiv+0x1b0>
   1186e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   11872:	f43f aefd 	beq.w	11670 <__aeabi_dmul+0x1f8>
   11876:	4610      	mov	r0, r2
   11878:	4619      	mov	r1, r3
   1187a:	e722      	b.n	116c2 <__aeabi_dmul+0x24a>
   1187c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   11880:	bf18      	it	ne
   11882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   11886:	f47f aec5 	bne.w	11614 <__aeabi_dmul+0x19c>
   1188a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1188e:	f47f af0d 	bne.w	116ac <__aeabi_dmul+0x234>
   11892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   11896:	f47f aeeb 	bne.w	11670 <__aeabi_dmul+0x1f8>
   1189a:	e712      	b.n	116c2 <__aeabi_dmul+0x24a>

0001189c <__gedf2>:
   1189c:	f04f 3cff 	mov.w	ip, #4294967295
   118a0:	e006      	b.n	118b0 <__cmpdf2+0x4>
   118a2:	bf00      	nop

000118a4 <__ledf2>:
   118a4:	f04f 0c01 	mov.w	ip, #1
   118a8:	e002      	b.n	118b0 <__cmpdf2+0x4>
   118aa:	bf00      	nop

000118ac <__cmpdf2>:
   118ac:	f04f 0c01 	mov.w	ip, #1
   118b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   118b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   118b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   118bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   118c0:	bf18      	it	ne
   118c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   118c6:	d01b      	beq.n	11900 <__cmpdf2+0x54>
   118c8:	b001      	add	sp, #4
   118ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   118ce:	bf0c      	ite	eq
   118d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   118d4:	ea91 0f03 	teqne	r1, r3
   118d8:	bf02      	ittt	eq
   118da:	ea90 0f02 	teqeq	r0, r2
   118de:	2000      	moveq	r0, #0
   118e0:	4770      	bxeq	lr
   118e2:	f110 0f00 	cmn.w	r0, #0
   118e6:	ea91 0f03 	teq	r1, r3
   118ea:	bf58      	it	pl
   118ec:	4299      	cmppl	r1, r3
   118ee:	bf08      	it	eq
   118f0:	4290      	cmpeq	r0, r2
   118f2:	bf2c      	ite	cs
   118f4:	17d8      	asrcs	r0, r3, #31
   118f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   118fa:	f040 0001 	orr.w	r0, r0, #1
   118fe:	4770      	bx	lr
   11900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   11904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11908:	d102      	bne.n	11910 <__cmpdf2+0x64>
   1190a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1190e:	d107      	bne.n	11920 <__cmpdf2+0x74>
   11910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   11914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   11918:	d1d6      	bne.n	118c8 <__cmpdf2+0x1c>
   1191a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1191e:	d0d3      	beq.n	118c8 <__cmpdf2+0x1c>
   11920:	f85d 0b04 	ldr.w	r0, [sp], #4
   11924:	4770      	bx	lr
   11926:	bf00      	nop

00011928 <__aeabi_cdrcmple>:
   11928:	4684      	mov	ip, r0
   1192a:	4610      	mov	r0, r2
   1192c:	4662      	mov	r2, ip
   1192e:	468c      	mov	ip, r1
   11930:	4619      	mov	r1, r3
   11932:	4663      	mov	r3, ip
   11934:	e000      	b.n	11938 <__aeabi_cdcmpeq>
   11936:	bf00      	nop

00011938 <__aeabi_cdcmpeq>:
   11938:	b501      	push	{r0, lr}
   1193a:	f7ff ffb7 	bl	118ac <__cmpdf2>
   1193e:	2800      	cmp	r0, #0
   11940:	bf48      	it	mi
   11942:	f110 0f00 	cmnmi.w	r0, #0
   11946:	bd01      	pop	{r0, pc}

00011948 <__aeabi_dcmpeq>:
   11948:	f84d ed08 	str.w	lr, [sp, #-8]!
   1194c:	f7ff fff4 	bl	11938 <__aeabi_cdcmpeq>
   11950:	bf0c      	ite	eq
   11952:	2001      	moveq	r0, #1
   11954:	2000      	movne	r0, #0
   11956:	f85d fb08 	ldr.w	pc, [sp], #8
   1195a:	bf00      	nop

0001195c <__aeabi_dcmplt>:
   1195c:	f84d ed08 	str.w	lr, [sp, #-8]!
   11960:	f7ff ffea 	bl	11938 <__aeabi_cdcmpeq>
   11964:	bf34      	ite	cc
   11966:	2001      	movcc	r0, #1
   11968:	2000      	movcs	r0, #0
   1196a:	f85d fb08 	ldr.w	pc, [sp], #8
   1196e:	bf00      	nop

00011970 <__aeabi_dcmple>:
   11970:	f84d ed08 	str.w	lr, [sp, #-8]!
   11974:	f7ff ffe0 	bl	11938 <__aeabi_cdcmpeq>
   11978:	bf94      	ite	ls
   1197a:	2001      	movls	r0, #1
   1197c:	2000      	movhi	r0, #0
   1197e:	f85d fb08 	ldr.w	pc, [sp], #8
   11982:	bf00      	nop

00011984 <__aeabi_dcmpge>:
   11984:	f84d ed08 	str.w	lr, [sp, #-8]!
   11988:	f7ff ffce 	bl	11928 <__aeabi_cdrcmple>
   1198c:	bf94      	ite	ls
   1198e:	2001      	movls	r0, #1
   11990:	2000      	movhi	r0, #0
   11992:	f85d fb08 	ldr.w	pc, [sp], #8
   11996:	bf00      	nop

00011998 <__aeabi_dcmpgt>:
   11998:	f84d ed08 	str.w	lr, [sp, #-8]!
   1199c:	f7ff ffc4 	bl	11928 <__aeabi_cdrcmple>
   119a0:	bf34      	ite	cc
   119a2:	2001      	movcc	r0, #1
   119a4:	2000      	movcs	r0, #0
   119a6:	f85d fb08 	ldr.w	pc, [sp], #8
   119aa:	bf00      	nop

000119ac <__aeabi_dcmpun>:
   119ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   119b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   119b4:	d102      	bne.n	119bc <__aeabi_dcmpun+0x10>
   119b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   119ba:	d10a      	bne.n	119d2 <__aeabi_dcmpun+0x26>
   119bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   119c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   119c4:	d102      	bne.n	119cc <__aeabi_dcmpun+0x20>
   119c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   119ca:	d102      	bne.n	119d2 <__aeabi_dcmpun+0x26>
   119cc:	f04f 0000 	mov.w	r0, #0
   119d0:	4770      	bx	lr
   119d2:	f04f 0001 	mov.w	r0, #1
   119d6:	4770      	bx	lr

000119d8 <__aeabi_d2iz>:
   119d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   119dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   119e0:	d215      	bcs.n	11a0e <__aeabi_d2iz+0x36>
   119e2:	d511      	bpl.n	11a08 <__aeabi_d2iz+0x30>
   119e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   119e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   119ec:	d912      	bls.n	11a14 <__aeabi_d2iz+0x3c>
   119ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   119f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   119f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   119fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   119fe:	fa23 f002 	lsr.w	r0, r3, r2
   11a02:	bf18      	it	ne
   11a04:	4240      	negne	r0, r0
   11a06:	4770      	bx	lr
   11a08:	f04f 0000 	mov.w	r0, #0
   11a0c:	4770      	bx	lr
   11a0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11a12:	d105      	bne.n	11a20 <__aeabi_d2iz+0x48>
   11a14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   11a18:	bf08      	it	eq
   11a1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   11a1e:	4770      	bx	lr
   11a20:	f04f 0000 	mov.w	r0, #0
   11a24:	4770      	bx	lr
   11a26:	bf00      	nop

00011a28 <__popcountdi2>:
   11a28:	0843      	lsrs	r3, r0, #1
   11a2a:	084a      	lsrs	r2, r1, #1
   11a2c:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   11a30:	f002 3255 	and.w	r2, r2, #1431655765	; 0x55555555
   11a34:	1ac0      	subs	r0, r0, r3
   11a36:	1a89      	subs	r1, r1, r2
   11a38:	b410      	push	{r4}
   11a3a:	0882      	lsrs	r2, r0, #2
   11a3c:	088c      	lsrs	r4, r1, #2
   11a3e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   11a42:	f004 3433 	and.w	r4, r4, #858993459	; 0x33333333
   11a46:	f002 3233 	and.w	r2, r2, #858993459	; 0x33333333
   11a4a:	f001 3133 	and.w	r1, r1, #858993459	; 0x33333333
   11a4e:	1883      	adds	r3, r0, r2
   11a50:	1908      	adds	r0, r1, r4
   11a52:	eb03 1313 	add.w	r3, r3, r3, lsr #4
   11a56:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   11a5a:	f003 330f 	and.w	r3, r3, #252645135	; 0xf0f0f0f
   11a5e:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   11a62:	4418      	add	r0, r3
   11a64:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   11a68:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   11a6c:	0e00      	lsrs	r0, r0, #24
   11a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11a72:	4770      	bx	lr

00011a74 <__udivmoddi4>:
   11a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11a78:	468c      	mov	ip, r1
   11a7a:	460e      	mov	r6, r1
   11a7c:	4604      	mov	r4, r0
   11a7e:	9d08      	ldr	r5, [sp, #32]
   11a80:	2b00      	cmp	r3, #0
   11a82:	d150      	bne.n	11b26 <__udivmoddi4+0xb2>
   11a84:	428a      	cmp	r2, r1
   11a86:	4617      	mov	r7, r2
   11a88:	d96c      	bls.n	11b64 <__udivmoddi4+0xf0>
   11a8a:	fab2 fe82 	clz	lr, r2
   11a8e:	f1be 0f00 	cmp.w	lr, #0
   11a92:	d00b      	beq.n	11aac <__udivmoddi4+0x38>
   11a94:	f1ce 0420 	rsb	r4, lr, #32
   11a98:	fa20 f404 	lsr.w	r4, r0, r4
   11a9c:	fa01 f60e 	lsl.w	r6, r1, lr
   11aa0:	ea44 0c06 	orr.w	ip, r4, r6
   11aa4:	fa02 f70e 	lsl.w	r7, r2, lr
   11aa8:	fa00 f40e 	lsl.w	r4, r0, lr
   11aac:	ea4f 4917 	mov.w	r9, r7, lsr #16
   11ab0:	0c22      	lsrs	r2, r4, #16
   11ab2:	fbbc f0f9 	udiv	r0, ip, r9
   11ab6:	fa1f f887 	uxth.w	r8, r7
   11aba:	fb09 c610 	mls	r6, r9, r0, ip
   11abe:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   11ac2:	fb00 f308 	mul.w	r3, r0, r8
   11ac6:	42b3      	cmp	r3, r6
   11ac8:	d909      	bls.n	11ade <__udivmoddi4+0x6a>
   11aca:	19f6      	adds	r6, r6, r7
   11acc:	f100 32ff 	add.w	r2, r0, #4294967295
   11ad0:	f080 8122 	bcs.w	11d18 <__udivmoddi4+0x2a4>
   11ad4:	42b3      	cmp	r3, r6
   11ad6:	f240 811f 	bls.w	11d18 <__udivmoddi4+0x2a4>
   11ada:	3802      	subs	r0, #2
   11adc:	443e      	add	r6, r7
   11ade:	1af6      	subs	r6, r6, r3
   11ae0:	b2a2      	uxth	r2, r4
   11ae2:	fbb6 f3f9 	udiv	r3, r6, r9
   11ae6:	fb09 6613 	mls	r6, r9, r3, r6
   11aea:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   11aee:	fb03 f808 	mul.w	r8, r3, r8
   11af2:	45a0      	cmp	r8, r4
   11af4:	d909      	bls.n	11b0a <__udivmoddi4+0x96>
   11af6:	19e4      	adds	r4, r4, r7
   11af8:	f103 32ff 	add.w	r2, r3, #4294967295
   11afc:	f080 810a 	bcs.w	11d14 <__udivmoddi4+0x2a0>
   11b00:	45a0      	cmp	r8, r4
   11b02:	f240 8107 	bls.w	11d14 <__udivmoddi4+0x2a0>
   11b06:	3b02      	subs	r3, #2
   11b08:	443c      	add	r4, r7
   11b0a:	ebc8 0404 	rsb	r4, r8, r4
   11b0e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   11b12:	2100      	movs	r1, #0
   11b14:	2d00      	cmp	r5, #0
   11b16:	d062      	beq.n	11bde <__udivmoddi4+0x16a>
   11b18:	fa24 f40e 	lsr.w	r4, r4, lr
   11b1c:	2300      	movs	r3, #0
   11b1e:	602c      	str	r4, [r5, #0]
   11b20:	606b      	str	r3, [r5, #4]
   11b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b26:	428b      	cmp	r3, r1
   11b28:	d907      	bls.n	11b3a <__udivmoddi4+0xc6>
   11b2a:	2d00      	cmp	r5, #0
   11b2c:	d055      	beq.n	11bda <__udivmoddi4+0x166>
   11b2e:	2100      	movs	r1, #0
   11b30:	e885 0041 	stmia.w	r5, {r0, r6}
   11b34:	4608      	mov	r0, r1
   11b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b3a:	fab3 f183 	clz	r1, r3
   11b3e:	2900      	cmp	r1, #0
   11b40:	f040 8090 	bne.w	11c64 <__udivmoddi4+0x1f0>
   11b44:	42b3      	cmp	r3, r6
   11b46:	d302      	bcc.n	11b4e <__udivmoddi4+0xda>
   11b48:	4282      	cmp	r2, r0
   11b4a:	f200 80f8 	bhi.w	11d3e <__udivmoddi4+0x2ca>
   11b4e:	1a84      	subs	r4, r0, r2
   11b50:	eb66 0603 	sbc.w	r6, r6, r3
   11b54:	2001      	movs	r0, #1
   11b56:	46b4      	mov	ip, r6
   11b58:	2d00      	cmp	r5, #0
   11b5a:	d040      	beq.n	11bde <__udivmoddi4+0x16a>
   11b5c:	e885 1010 	stmia.w	r5, {r4, ip}
   11b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11b64:	b912      	cbnz	r2, 11b6c <__udivmoddi4+0xf8>
   11b66:	2701      	movs	r7, #1
   11b68:	fbb7 f7f2 	udiv	r7, r7, r2
   11b6c:	fab7 fe87 	clz	lr, r7
   11b70:	f1be 0f00 	cmp.w	lr, #0
   11b74:	d135      	bne.n	11be2 <__udivmoddi4+0x16e>
   11b76:	1bf3      	subs	r3, r6, r7
   11b78:	ea4f 4817 	mov.w	r8, r7, lsr #16
   11b7c:	fa1f fc87 	uxth.w	ip, r7
   11b80:	2101      	movs	r1, #1
   11b82:	fbb3 f0f8 	udiv	r0, r3, r8
   11b86:	0c22      	lsrs	r2, r4, #16
   11b88:	fb08 3610 	mls	r6, r8, r0, r3
   11b8c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   11b90:	fb0c f300 	mul.w	r3, ip, r0
   11b94:	42b3      	cmp	r3, r6
   11b96:	d907      	bls.n	11ba8 <__udivmoddi4+0x134>
   11b98:	19f6      	adds	r6, r6, r7
   11b9a:	f100 32ff 	add.w	r2, r0, #4294967295
   11b9e:	d202      	bcs.n	11ba6 <__udivmoddi4+0x132>
   11ba0:	42b3      	cmp	r3, r6
   11ba2:	f200 80ce 	bhi.w	11d42 <__udivmoddi4+0x2ce>
   11ba6:	4610      	mov	r0, r2
   11ba8:	1af6      	subs	r6, r6, r3
   11baa:	b2a2      	uxth	r2, r4
   11bac:	fbb6 f3f8 	udiv	r3, r6, r8
   11bb0:	fb08 6613 	mls	r6, r8, r3, r6
   11bb4:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   11bb8:	fb0c fc03 	mul.w	ip, ip, r3
   11bbc:	45a4      	cmp	ip, r4
   11bbe:	d907      	bls.n	11bd0 <__udivmoddi4+0x15c>
   11bc0:	19e4      	adds	r4, r4, r7
   11bc2:	f103 32ff 	add.w	r2, r3, #4294967295
   11bc6:	d202      	bcs.n	11bce <__udivmoddi4+0x15a>
   11bc8:	45a4      	cmp	ip, r4
   11bca:	f200 80b5 	bhi.w	11d38 <__udivmoddi4+0x2c4>
   11bce:	4613      	mov	r3, r2
   11bd0:	ebcc 0404 	rsb	r4, ip, r4
   11bd4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   11bd8:	e79c      	b.n	11b14 <__udivmoddi4+0xa0>
   11bda:	4629      	mov	r1, r5
   11bdc:	4628      	mov	r0, r5
   11bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11be2:	f1ce 0120 	rsb	r1, lr, #32
   11be6:	fa06 f30e 	lsl.w	r3, r6, lr
   11bea:	fa07 f70e 	lsl.w	r7, r7, lr
   11bee:	fa20 f901 	lsr.w	r9, r0, r1
   11bf2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   11bf6:	40ce      	lsrs	r6, r1
   11bf8:	ea49 0903 	orr.w	r9, r9, r3
   11bfc:	fbb6 faf8 	udiv	sl, r6, r8
   11c00:	ea4f 4419 	mov.w	r4, r9, lsr #16
   11c04:	fb08 661a 	mls	r6, r8, sl, r6
   11c08:	fa1f fc87 	uxth.w	ip, r7
   11c0c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   11c10:	fb0a f20c 	mul.w	r2, sl, ip
   11c14:	429a      	cmp	r2, r3
   11c16:	fa00 f40e 	lsl.w	r4, r0, lr
   11c1a:	d90a      	bls.n	11c32 <__udivmoddi4+0x1be>
   11c1c:	19db      	adds	r3, r3, r7
   11c1e:	f10a 31ff 	add.w	r1, sl, #4294967295
   11c22:	f080 8087 	bcs.w	11d34 <__udivmoddi4+0x2c0>
   11c26:	429a      	cmp	r2, r3
   11c28:	f240 8084 	bls.w	11d34 <__udivmoddi4+0x2c0>
   11c2c:	f1aa 0a02 	sub.w	sl, sl, #2
   11c30:	443b      	add	r3, r7
   11c32:	1a9b      	subs	r3, r3, r2
   11c34:	fa1f f989 	uxth.w	r9, r9
   11c38:	fbb3 f1f8 	udiv	r1, r3, r8
   11c3c:	fb08 3311 	mls	r3, r8, r1, r3
   11c40:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   11c44:	fb01 f60c 	mul.w	r6, r1, ip
   11c48:	429e      	cmp	r6, r3
   11c4a:	d907      	bls.n	11c5c <__udivmoddi4+0x1e8>
   11c4c:	19db      	adds	r3, r3, r7
   11c4e:	f101 32ff 	add.w	r2, r1, #4294967295
   11c52:	d26b      	bcs.n	11d2c <__udivmoddi4+0x2b8>
   11c54:	429e      	cmp	r6, r3
   11c56:	d969      	bls.n	11d2c <__udivmoddi4+0x2b8>
   11c58:	3902      	subs	r1, #2
   11c5a:	443b      	add	r3, r7
   11c5c:	1b9b      	subs	r3, r3, r6
   11c5e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   11c62:	e78e      	b.n	11b82 <__udivmoddi4+0x10e>
   11c64:	f1c1 0e20 	rsb	lr, r1, #32
   11c68:	fa22 f40e 	lsr.w	r4, r2, lr
   11c6c:	408b      	lsls	r3, r1
   11c6e:	4323      	orrs	r3, r4
   11c70:	fa20 f70e 	lsr.w	r7, r0, lr
   11c74:	fa06 f401 	lsl.w	r4, r6, r1
   11c78:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   11c7c:	fa26 f60e 	lsr.w	r6, r6, lr
   11c80:	433c      	orrs	r4, r7
   11c82:	fbb6 f9fc 	udiv	r9, r6, ip
   11c86:	0c27      	lsrs	r7, r4, #16
   11c88:	fb0c 6619 	mls	r6, ip, r9, r6
   11c8c:	fa1f f883 	uxth.w	r8, r3
   11c90:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   11c94:	fb09 f708 	mul.w	r7, r9, r8
   11c98:	42b7      	cmp	r7, r6
   11c9a:	fa02 f201 	lsl.w	r2, r2, r1
   11c9e:	fa00 fa01 	lsl.w	sl, r0, r1
   11ca2:	d908      	bls.n	11cb6 <__udivmoddi4+0x242>
   11ca4:	18f6      	adds	r6, r6, r3
   11ca6:	f109 30ff 	add.w	r0, r9, #4294967295
   11caa:	d241      	bcs.n	11d30 <__udivmoddi4+0x2bc>
   11cac:	42b7      	cmp	r7, r6
   11cae:	d93f      	bls.n	11d30 <__udivmoddi4+0x2bc>
   11cb0:	f1a9 0902 	sub.w	r9, r9, #2
   11cb4:	441e      	add	r6, r3
   11cb6:	1bf6      	subs	r6, r6, r7
   11cb8:	b2a0      	uxth	r0, r4
   11cba:	fbb6 f4fc 	udiv	r4, r6, ip
   11cbe:	fb0c 6614 	mls	r6, ip, r4, r6
   11cc2:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   11cc6:	fb04 f808 	mul.w	r8, r4, r8
   11cca:	45b8      	cmp	r8, r7
   11ccc:	d907      	bls.n	11cde <__udivmoddi4+0x26a>
   11cce:	18ff      	adds	r7, r7, r3
   11cd0:	f104 30ff 	add.w	r0, r4, #4294967295
   11cd4:	d228      	bcs.n	11d28 <__udivmoddi4+0x2b4>
   11cd6:	45b8      	cmp	r8, r7
   11cd8:	d926      	bls.n	11d28 <__udivmoddi4+0x2b4>
   11cda:	3c02      	subs	r4, #2
   11cdc:	441f      	add	r7, r3
   11cde:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   11ce2:	ebc8 0707 	rsb	r7, r8, r7
   11ce6:	fba0 8902 	umull	r8, r9, r0, r2
   11cea:	454f      	cmp	r7, r9
   11cec:	4644      	mov	r4, r8
   11cee:	464e      	mov	r6, r9
   11cf0:	d314      	bcc.n	11d1c <__udivmoddi4+0x2a8>
   11cf2:	d029      	beq.n	11d48 <__udivmoddi4+0x2d4>
   11cf4:	b365      	cbz	r5, 11d50 <__udivmoddi4+0x2dc>
   11cf6:	ebba 0304 	subs.w	r3, sl, r4
   11cfa:	eb67 0706 	sbc.w	r7, r7, r6
   11cfe:	fa07 fe0e 	lsl.w	lr, r7, lr
   11d02:	40cb      	lsrs	r3, r1
   11d04:	40cf      	lsrs	r7, r1
   11d06:	ea4e 0303 	orr.w	r3, lr, r3
   11d0a:	e885 0088 	stmia.w	r5, {r3, r7}
   11d0e:	2100      	movs	r1, #0
   11d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11d14:	4613      	mov	r3, r2
   11d16:	e6f8      	b.n	11b0a <__udivmoddi4+0x96>
   11d18:	4610      	mov	r0, r2
   11d1a:	e6e0      	b.n	11ade <__udivmoddi4+0x6a>
   11d1c:	ebb8 0402 	subs.w	r4, r8, r2
   11d20:	eb69 0603 	sbc.w	r6, r9, r3
   11d24:	3801      	subs	r0, #1
   11d26:	e7e5      	b.n	11cf4 <__udivmoddi4+0x280>
   11d28:	4604      	mov	r4, r0
   11d2a:	e7d8      	b.n	11cde <__udivmoddi4+0x26a>
   11d2c:	4611      	mov	r1, r2
   11d2e:	e795      	b.n	11c5c <__udivmoddi4+0x1e8>
   11d30:	4681      	mov	r9, r0
   11d32:	e7c0      	b.n	11cb6 <__udivmoddi4+0x242>
   11d34:	468a      	mov	sl, r1
   11d36:	e77c      	b.n	11c32 <__udivmoddi4+0x1be>
   11d38:	3b02      	subs	r3, #2
   11d3a:	443c      	add	r4, r7
   11d3c:	e748      	b.n	11bd0 <__udivmoddi4+0x15c>
   11d3e:	4608      	mov	r0, r1
   11d40:	e70a      	b.n	11b58 <__udivmoddi4+0xe4>
   11d42:	3802      	subs	r0, #2
   11d44:	443e      	add	r6, r7
   11d46:	e72f      	b.n	11ba8 <__udivmoddi4+0x134>
   11d48:	45c2      	cmp	sl, r8
   11d4a:	d3e7      	bcc.n	11d1c <__udivmoddi4+0x2a8>
   11d4c:	463e      	mov	r6, r7
   11d4e:	e7d1      	b.n	11cf4 <__udivmoddi4+0x280>
   11d50:	4629      	mov	r1, r5
   11d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11d56:	bf00      	nop

00011d58 <__aeabi_idiv0>:
   11d58:	4770      	bx	lr
   11d5a:	bf00      	nop

00011d5c <__aeabi_atexit>:
   11d5c:	460b      	mov	r3, r1
   11d5e:	4601      	mov	r1, r0
   11d60:	4618      	mov	r0, r3
   11d62:	f000 b809 	b.w	11d78 <__cxa_atexit>
   11d66:	bf00      	nop

00011d68 <atoi>:
   11d68:	220a      	movs	r2, #10
   11d6a:	2100      	movs	r1, #0
   11d6c:	f001 bcb2 	b.w	136d4 <strtol>

00011d70 <atol>:
   11d70:	220a      	movs	r2, #10
   11d72:	2100      	movs	r1, #0
   11d74:	f001 bcae 	b.w	136d4 <strtol>

00011d78 <__cxa_atexit>:
   11d78:	4613      	mov	r3, r2
   11d7a:	460a      	mov	r2, r1
   11d7c:	4601      	mov	r1, r0
   11d7e:	2002      	movs	r0, #2
   11d80:	f003 b8d6 	b.w	14f30 <__register_exitproc>

00011d84 <fcvtf>:
   11d84:	b570      	push	{r4, r5, r6, lr}
   11d86:	4604      	mov	r4, r0
   11d88:	ee10 0a10 	vmov	r0, s0
   11d8c:	460d      	mov	r5, r1
   11d8e:	4616      	mov	r6, r2
   11d90:	f7ff fb1e 	bl	113d0 <__aeabi_f2d>
   11d94:	4632      	mov	r2, r6
   11d96:	ec41 0b10 	vmov	d0, r0, r1
   11d9a:	2300      	movs	r3, #0
   11d9c:	4629      	mov	r1, r5
   11d9e:	4620      	mov	r0, r4
   11da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11da4:	f004 b8d6 	b.w	15f54 <fcvtbuf>

00011da8 <__errno>:
   11da8:	4b01      	ldr	r3, [pc, #4]	; (11db0 <__errno+0x8>)
   11daa:	6818      	ldr	r0, [r3, #0]
   11dac:	4770      	bx	lr
   11dae:	bf00      	nop
   11db0:	1fff4fe0 	.word	0x1fff4fe0

00011db4 <__libc_init_array>:
   11db4:	b570      	push	{r4, r5, r6, lr}
   11db6:	4e0f      	ldr	r6, [pc, #60]	; (11df4 <__libc_init_array+0x40>)
   11db8:	4d0f      	ldr	r5, [pc, #60]	; (11df8 <__libc_init_array+0x44>)
   11dba:	1b76      	subs	r6, r6, r5
   11dbc:	10b6      	asrs	r6, r6, #2
   11dbe:	bf18      	it	ne
   11dc0:	2400      	movne	r4, #0
   11dc2:	d005      	beq.n	11dd0 <__libc_init_array+0x1c>
   11dc4:	3401      	adds	r4, #1
   11dc6:	f855 3b04 	ldr.w	r3, [r5], #4
   11dca:	4798      	blx	r3
   11dcc:	42a6      	cmp	r6, r4
   11dce:	d1f9      	bne.n	11dc4 <__libc_init_array+0x10>
   11dd0:	4e0a      	ldr	r6, [pc, #40]	; (11dfc <__libc_init_array+0x48>)
   11dd2:	4d0b      	ldr	r5, [pc, #44]	; (11e00 <__libc_init_array+0x4c>)
   11dd4:	1b76      	subs	r6, r6, r5
   11dd6:	f005 ff6d 	bl	17cb4 <_init>
   11dda:	10b6      	asrs	r6, r6, #2
   11ddc:	bf18      	it	ne
   11dde:	2400      	movne	r4, #0
   11de0:	d006      	beq.n	11df0 <__libc_init_array+0x3c>
   11de2:	3401      	adds	r4, #1
   11de4:	f855 3b04 	ldr.w	r3, [r5], #4
   11de8:	4798      	blx	r3
   11dea:	42a6      	cmp	r6, r4
   11dec:	d1f9      	bne.n	11de2 <__libc_init_array+0x2e>
   11dee:	bd70      	pop	{r4, r5, r6, pc}
   11df0:	bd70      	pop	{r4, r5, r6, pc}
   11df2:	bf00      	nop
   11df4:	00017cc0 	.word	0x00017cc0
   11df8:	00017cc0 	.word	0x00017cc0
   11dfc:	00017d28 	.word	0x00017d28
   11e00:	00017cc0 	.word	0x00017cc0

00011e04 <__itoa>:
   11e04:	1e93      	subs	r3, r2, #2
   11e06:	2b22      	cmp	r3, #34	; 0x22
   11e08:	d810      	bhi.n	11e2c <__itoa+0x28>
   11e0a:	2a0a      	cmp	r2, #10
   11e0c:	b510      	push	{r4, lr}
   11e0e:	d006      	beq.n	11e1e <__itoa+0x1a>
   11e10:	2300      	movs	r3, #0
   11e12:	460c      	mov	r4, r1
   11e14:	4419      	add	r1, r3
   11e16:	f002 fff3 	bl	14e00 <__utoa>
   11e1a:	4620      	mov	r0, r4
   11e1c:	bd10      	pop	{r4, pc}
   11e1e:	2800      	cmp	r0, #0
   11e20:	daf6      	bge.n	11e10 <__itoa+0xc>
   11e22:	232d      	movs	r3, #45	; 0x2d
   11e24:	700b      	strb	r3, [r1, #0]
   11e26:	4240      	negs	r0, r0
   11e28:	2301      	movs	r3, #1
   11e2a:	e7f2      	b.n	11e12 <__itoa+0xe>
   11e2c:	2000      	movs	r0, #0
   11e2e:	7008      	strb	r0, [r1, #0]
   11e30:	4770      	bx	lr
   11e32:	bf00      	nop

00011e34 <itoa>:
   11e34:	f7ff bfe6 	b.w	11e04 <__itoa>

00011e38 <__get_current_locale>:
   11e38:	4a03      	ldr	r2, [pc, #12]	; (11e48 <__get_current_locale+0x10>)
   11e3a:	4b04      	ldr	r3, [pc, #16]	; (11e4c <__get_current_locale+0x14>)
   11e3c:	6812      	ldr	r2, [r2, #0]
   11e3e:	6b50      	ldr	r0, [r2, #52]	; 0x34
   11e40:	2800      	cmp	r0, #0
   11e42:	bf08      	it	eq
   11e44:	4618      	moveq	r0, r3
   11e46:	4770      	bx	lr
   11e48:	1fff4fe0 	.word	0x1fff4fe0
   11e4c:	1fff4fe4 	.word	0x1fff4fe4

00011e50 <__locale_ctype_ptr_l>:
   11e50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   11e54:	4770      	bx	lr
   11e56:	bf00      	nop

00011e58 <__locale_ctype_ptr>:
   11e58:	b508      	push	{r3, lr}
   11e5a:	4b03      	ldr	r3, [pc, #12]	; (11e68 <__locale_ctype_ptr+0x10>)
   11e5c:	6818      	ldr	r0, [r3, #0]
   11e5e:	f7ff ffeb 	bl	11e38 <__get_current_locale>
   11e62:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   11e66:	bd08      	pop	{r3, pc}
   11e68:	1fff4fe0 	.word	0x1fff4fe0

00011e6c <malloc>:
   11e6c:	4b02      	ldr	r3, [pc, #8]	; (11e78 <malloc+0xc>)
   11e6e:	4601      	mov	r1, r0
   11e70:	6818      	ldr	r0, [r3, #0]
   11e72:	f000 b80b 	b.w	11e8c <_malloc_r>
   11e76:	bf00      	nop
   11e78:	1fff4fe0 	.word	0x1fff4fe0

00011e7c <free>:
   11e7c:	4b02      	ldr	r3, [pc, #8]	; (11e88 <free+0xc>)
   11e7e:	4601      	mov	r1, r0
   11e80:	6818      	ldr	r0, [r3, #0]
   11e82:	f004 b949 	b.w	16118 <_free_r>
   11e86:	bf00      	nop
   11e88:	1fff4fe0 	.word	0x1fff4fe0

00011e8c <_malloc_r>:
   11e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e90:	f101 050b 	add.w	r5, r1, #11
   11e94:	2d16      	cmp	r5, #22
   11e96:	b083      	sub	sp, #12
   11e98:	4606      	mov	r6, r0
   11e9a:	f240 809f 	bls.w	11fdc <_malloc_r+0x150>
   11e9e:	f035 0507 	bics.w	r5, r5, #7
   11ea2:	f100 80bf 	bmi.w	12024 <_malloc_r+0x198>
   11ea6:	42a9      	cmp	r1, r5
   11ea8:	f200 80bc 	bhi.w	12024 <_malloc_r+0x198>
   11eac:	f000 fbf4 	bl	12698 <__malloc_lock>
   11eb0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   11eb4:	f0c0 829c 	bcc.w	123f0 <_malloc_r+0x564>
   11eb8:	0a6b      	lsrs	r3, r5, #9
   11eba:	f000 80ba 	beq.w	12032 <_malloc_r+0x1a6>
   11ebe:	2b04      	cmp	r3, #4
   11ec0:	f200 8183 	bhi.w	121ca <_malloc_r+0x33e>
   11ec4:	09a8      	lsrs	r0, r5, #6
   11ec6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   11eca:	ea4f 034e 	mov.w	r3, lr, lsl #1
   11ece:	3038      	adds	r0, #56	; 0x38
   11ed0:	4fc4      	ldr	r7, [pc, #784]	; (121e4 <_malloc_r+0x358>)
   11ed2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   11ed6:	f1a3 0108 	sub.w	r1, r3, #8
   11eda:	685c      	ldr	r4, [r3, #4]
   11edc:	42a1      	cmp	r1, r4
   11ede:	d107      	bne.n	11ef0 <_malloc_r+0x64>
   11ee0:	e0ac      	b.n	1203c <_malloc_r+0x1b0>
   11ee2:	2a00      	cmp	r2, #0
   11ee4:	f280 80ac 	bge.w	12040 <_malloc_r+0x1b4>
   11ee8:	68e4      	ldr	r4, [r4, #12]
   11eea:	42a1      	cmp	r1, r4
   11eec:	f000 80a6 	beq.w	1203c <_malloc_r+0x1b0>
   11ef0:	6863      	ldr	r3, [r4, #4]
   11ef2:	f023 0303 	bic.w	r3, r3, #3
   11ef6:	1b5a      	subs	r2, r3, r5
   11ef8:	2a0f      	cmp	r2, #15
   11efa:	ddf2      	ble.n	11ee2 <_malloc_r+0x56>
   11efc:	49b9      	ldr	r1, [pc, #740]	; (121e4 <_malloc_r+0x358>)
   11efe:	693c      	ldr	r4, [r7, #16]
   11f00:	f101 0e08 	add.w	lr, r1, #8
   11f04:	4574      	cmp	r4, lr
   11f06:	f000 81b3 	beq.w	12270 <_malloc_r+0x3e4>
   11f0a:	6863      	ldr	r3, [r4, #4]
   11f0c:	f023 0303 	bic.w	r3, r3, #3
   11f10:	1b5a      	subs	r2, r3, r5
   11f12:	2a0f      	cmp	r2, #15
   11f14:	f300 8199 	bgt.w	1224a <_malloc_r+0x3be>
   11f18:	2a00      	cmp	r2, #0
   11f1a:	f8c1 e014 	str.w	lr, [r1, #20]
   11f1e:	f8c1 e010 	str.w	lr, [r1, #16]
   11f22:	f280 809e 	bge.w	12062 <_malloc_r+0x1d6>
   11f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11f2a:	f080 8167 	bcs.w	121fc <_malloc_r+0x370>
   11f2e:	08db      	lsrs	r3, r3, #3
   11f30:	f103 0c01 	add.w	ip, r3, #1
   11f34:	2201      	movs	r2, #1
   11f36:	109b      	asrs	r3, r3, #2
   11f38:	fa02 f303 	lsl.w	r3, r2, r3
   11f3c:	684a      	ldr	r2, [r1, #4]
   11f3e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
   11f42:	f8c4 8008 	str.w	r8, [r4, #8]
   11f46:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
   11f4a:	431a      	orrs	r2, r3
   11f4c:	f1a9 0308 	sub.w	r3, r9, #8
   11f50:	60e3      	str	r3, [r4, #12]
   11f52:	604a      	str	r2, [r1, #4]
   11f54:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
   11f58:	f8c8 400c 	str.w	r4, [r8, #12]
   11f5c:	1083      	asrs	r3, r0, #2
   11f5e:	2401      	movs	r4, #1
   11f60:	409c      	lsls	r4, r3
   11f62:	4294      	cmp	r4, r2
   11f64:	f200 808a 	bhi.w	1207c <_malloc_r+0x1f0>
   11f68:	4214      	tst	r4, r2
   11f6a:	d106      	bne.n	11f7a <_malloc_r+0xee>
   11f6c:	f020 0003 	bic.w	r0, r0, #3
   11f70:	0064      	lsls	r4, r4, #1
   11f72:	4214      	tst	r4, r2
   11f74:	f100 0004 	add.w	r0, r0, #4
   11f78:	d0fa      	beq.n	11f70 <_malloc_r+0xe4>
   11f7a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   11f7e:	46cc      	mov	ip, r9
   11f80:	4680      	mov	r8, r0
   11f82:	f8dc 100c 	ldr.w	r1, [ip, #12]
   11f86:	458c      	cmp	ip, r1
   11f88:	d107      	bne.n	11f9a <_malloc_r+0x10e>
   11f8a:	e173      	b.n	12274 <_malloc_r+0x3e8>
   11f8c:	2a00      	cmp	r2, #0
   11f8e:	f280 8181 	bge.w	12294 <_malloc_r+0x408>
   11f92:	68c9      	ldr	r1, [r1, #12]
   11f94:	458c      	cmp	ip, r1
   11f96:	f000 816d 	beq.w	12274 <_malloc_r+0x3e8>
   11f9a:	684b      	ldr	r3, [r1, #4]
   11f9c:	f023 0303 	bic.w	r3, r3, #3
   11fa0:	1b5a      	subs	r2, r3, r5
   11fa2:	2a0f      	cmp	r2, #15
   11fa4:	ddf2      	ble.n	11f8c <_malloc_r+0x100>
   11fa6:	460c      	mov	r4, r1
   11fa8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   11fac:	f854 8f08 	ldr.w	r8, [r4, #8]!
   11fb0:	194b      	adds	r3, r1, r5
   11fb2:	f045 0501 	orr.w	r5, r5, #1
   11fb6:	604d      	str	r5, [r1, #4]
   11fb8:	f042 0101 	orr.w	r1, r2, #1
   11fbc:	f8c8 c00c 	str.w	ip, [r8, #12]
   11fc0:	4630      	mov	r0, r6
   11fc2:	f8cc 8008 	str.w	r8, [ip, #8]
   11fc6:	617b      	str	r3, [r7, #20]
   11fc8:	613b      	str	r3, [r7, #16]
   11fca:	f8c3 e00c 	str.w	lr, [r3, #12]
   11fce:	f8c3 e008 	str.w	lr, [r3, #8]
   11fd2:	6059      	str	r1, [r3, #4]
   11fd4:	509a      	str	r2, [r3, r2]
   11fd6:	f000 fb61 	bl	1269c <__malloc_unlock>
   11fda:	e01f      	b.n	1201c <_malloc_r+0x190>
   11fdc:	2910      	cmp	r1, #16
   11fde:	d821      	bhi.n	12024 <_malloc_r+0x198>
   11fe0:	f000 fb5a 	bl	12698 <__malloc_lock>
   11fe4:	2510      	movs	r5, #16
   11fe6:	2306      	movs	r3, #6
   11fe8:	2002      	movs	r0, #2
   11fea:	4f7e      	ldr	r7, [pc, #504]	; (121e4 <_malloc_r+0x358>)
   11fec:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   11ff0:	f1a3 0208 	sub.w	r2, r3, #8
   11ff4:	685c      	ldr	r4, [r3, #4]
   11ff6:	4294      	cmp	r4, r2
   11ff8:	f000 8145 	beq.w	12286 <_malloc_r+0x3fa>
   11ffc:	6863      	ldr	r3, [r4, #4]
   11ffe:	68e1      	ldr	r1, [r4, #12]
   12000:	68a5      	ldr	r5, [r4, #8]
   12002:	f023 0303 	bic.w	r3, r3, #3
   12006:	4423      	add	r3, r4
   12008:	4630      	mov	r0, r6
   1200a:	685a      	ldr	r2, [r3, #4]
   1200c:	60e9      	str	r1, [r5, #12]
   1200e:	f042 0201 	orr.w	r2, r2, #1
   12012:	608d      	str	r5, [r1, #8]
   12014:	605a      	str	r2, [r3, #4]
   12016:	f000 fb41 	bl	1269c <__malloc_unlock>
   1201a:	3408      	adds	r4, #8
   1201c:	4620      	mov	r0, r4
   1201e:	b003      	add	sp, #12
   12020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12024:	2400      	movs	r4, #0
   12026:	230c      	movs	r3, #12
   12028:	4620      	mov	r0, r4
   1202a:	6033      	str	r3, [r6, #0]
   1202c:	b003      	add	sp, #12
   1202e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12032:	2380      	movs	r3, #128	; 0x80
   12034:	f04f 0e40 	mov.w	lr, #64	; 0x40
   12038:	203f      	movs	r0, #63	; 0x3f
   1203a:	e749      	b.n	11ed0 <_malloc_r+0x44>
   1203c:	4670      	mov	r0, lr
   1203e:	e75d      	b.n	11efc <_malloc_r+0x70>
   12040:	4423      	add	r3, r4
   12042:	68e1      	ldr	r1, [r4, #12]
   12044:	685a      	ldr	r2, [r3, #4]
   12046:	68a5      	ldr	r5, [r4, #8]
   12048:	f042 0201 	orr.w	r2, r2, #1
   1204c:	60e9      	str	r1, [r5, #12]
   1204e:	4630      	mov	r0, r6
   12050:	608d      	str	r5, [r1, #8]
   12052:	605a      	str	r2, [r3, #4]
   12054:	f000 fb22 	bl	1269c <__malloc_unlock>
   12058:	3408      	adds	r4, #8
   1205a:	4620      	mov	r0, r4
   1205c:	b003      	add	sp, #12
   1205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12062:	4423      	add	r3, r4
   12064:	4630      	mov	r0, r6
   12066:	685a      	ldr	r2, [r3, #4]
   12068:	f042 0201 	orr.w	r2, r2, #1
   1206c:	605a      	str	r2, [r3, #4]
   1206e:	f000 fb15 	bl	1269c <__malloc_unlock>
   12072:	3408      	adds	r4, #8
   12074:	4620      	mov	r0, r4
   12076:	b003      	add	sp, #12
   12078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1207c:	68bc      	ldr	r4, [r7, #8]
   1207e:	6863      	ldr	r3, [r4, #4]
   12080:	f023 0803 	bic.w	r8, r3, #3
   12084:	45a8      	cmp	r8, r5
   12086:	d304      	bcc.n	12092 <_malloc_r+0x206>
   12088:	ebc5 0308 	rsb	r3, r5, r8
   1208c:	2b0f      	cmp	r3, #15
   1208e:	f300 808c 	bgt.w	121aa <_malloc_r+0x31e>
   12092:	4b55      	ldr	r3, [pc, #340]	; (121e8 <_malloc_r+0x35c>)
   12094:	f8df 9160 	ldr.w	r9, [pc, #352]	; 121f8 <_malloc_r+0x36c>
   12098:	681a      	ldr	r2, [r3, #0]
   1209a:	f8d9 3000 	ldr.w	r3, [r9]
   1209e:	3301      	adds	r3, #1
   120a0:	442a      	add	r2, r5
   120a2:	eb04 0a08 	add.w	sl, r4, r8
   120a6:	f000 8160 	beq.w	1236a <_malloc_r+0x4de>
   120aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   120ae:	320f      	adds	r2, #15
   120b0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   120b4:	f022 020f 	bic.w	r2, r2, #15
   120b8:	4611      	mov	r1, r2
   120ba:	4630      	mov	r0, r6
   120bc:	9201      	str	r2, [sp, #4]
   120be:	f000 fce7 	bl	12a90 <_sbrk_r>
   120c2:	f1b0 3fff 	cmp.w	r0, #4294967295
   120c6:	4683      	mov	fp, r0
   120c8:	9a01      	ldr	r2, [sp, #4]
   120ca:	f000 8158 	beq.w	1237e <_malloc_r+0x4f2>
   120ce:	4582      	cmp	sl, r0
   120d0:	f200 80fc 	bhi.w	122cc <_malloc_r+0x440>
   120d4:	4b45      	ldr	r3, [pc, #276]	; (121ec <_malloc_r+0x360>)
   120d6:	6819      	ldr	r1, [r3, #0]
   120d8:	45da      	cmp	sl, fp
   120da:	4411      	add	r1, r2
   120dc:	6019      	str	r1, [r3, #0]
   120de:	f000 8153 	beq.w	12388 <_malloc_r+0x4fc>
   120e2:	f8d9 0000 	ldr.w	r0, [r9]
   120e6:	f8df e110 	ldr.w	lr, [pc, #272]	; 121f8 <_malloc_r+0x36c>
   120ea:	3001      	adds	r0, #1
   120ec:	bf1b      	ittet	ne
   120ee:	ebca 0a0b 	rsbne	sl, sl, fp
   120f2:	4451      	addne	r1, sl
   120f4:	f8ce b000 	streq.w	fp, [lr]
   120f8:	6019      	strne	r1, [r3, #0]
   120fa:	f01b 0107 	ands.w	r1, fp, #7
   120fe:	f000 8117 	beq.w	12330 <_malloc_r+0x4a4>
   12102:	f1c1 0008 	rsb	r0, r1, #8
   12106:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   1210a:	4483      	add	fp, r0
   1210c:	3108      	adds	r1, #8
   1210e:	445a      	add	r2, fp
   12110:	f3c2 020b 	ubfx	r2, r2, #0, #12
   12114:	ebc2 0901 	rsb	r9, r2, r1
   12118:	4649      	mov	r1, r9
   1211a:	4630      	mov	r0, r6
   1211c:	9301      	str	r3, [sp, #4]
   1211e:	f000 fcb7 	bl	12a90 <_sbrk_r>
   12122:	1c43      	adds	r3, r0, #1
   12124:	9b01      	ldr	r3, [sp, #4]
   12126:	f000 813f 	beq.w	123a8 <_malloc_r+0x51c>
   1212a:	ebcb 0200 	rsb	r2, fp, r0
   1212e:	444a      	add	r2, r9
   12130:	f042 0201 	orr.w	r2, r2, #1
   12134:	6819      	ldr	r1, [r3, #0]
   12136:	f8c7 b008 	str.w	fp, [r7, #8]
   1213a:	4449      	add	r1, r9
   1213c:	42bc      	cmp	r4, r7
   1213e:	f8cb 2004 	str.w	r2, [fp, #4]
   12142:	6019      	str	r1, [r3, #0]
   12144:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 121ec <_malloc_r+0x360>
   12148:	d016      	beq.n	12178 <_malloc_r+0x2ec>
   1214a:	f1b8 0f0f 	cmp.w	r8, #15
   1214e:	f240 80fd 	bls.w	1234c <_malloc_r+0x4c0>
   12152:	6862      	ldr	r2, [r4, #4]
   12154:	f1a8 030c 	sub.w	r3, r8, #12
   12158:	f023 0307 	bic.w	r3, r3, #7
   1215c:	18e0      	adds	r0, r4, r3
   1215e:	f002 0201 	and.w	r2, r2, #1
   12162:	f04f 0e05 	mov.w	lr, #5
   12166:	431a      	orrs	r2, r3
   12168:	2b0f      	cmp	r3, #15
   1216a:	6062      	str	r2, [r4, #4]
   1216c:	f8c0 e004 	str.w	lr, [r0, #4]
   12170:	f8c0 e008 	str.w	lr, [r0, #8]
   12174:	f200 811c 	bhi.w	123b0 <_malloc_r+0x524>
   12178:	4b1d      	ldr	r3, [pc, #116]	; (121f0 <_malloc_r+0x364>)
   1217a:	68bc      	ldr	r4, [r7, #8]
   1217c:	681a      	ldr	r2, [r3, #0]
   1217e:	4291      	cmp	r1, r2
   12180:	bf88      	it	hi
   12182:	6019      	strhi	r1, [r3, #0]
   12184:	4b1b      	ldr	r3, [pc, #108]	; (121f4 <_malloc_r+0x368>)
   12186:	681a      	ldr	r2, [r3, #0]
   12188:	4291      	cmp	r1, r2
   1218a:	6862      	ldr	r2, [r4, #4]
   1218c:	bf88      	it	hi
   1218e:	6019      	strhi	r1, [r3, #0]
   12190:	f022 0203 	bic.w	r2, r2, #3
   12194:	4295      	cmp	r5, r2
   12196:	eba2 0305 	sub.w	r3, r2, r5
   1219a:	d801      	bhi.n	121a0 <_malloc_r+0x314>
   1219c:	2b0f      	cmp	r3, #15
   1219e:	dc04      	bgt.n	121aa <_malloc_r+0x31e>
   121a0:	4630      	mov	r0, r6
   121a2:	f000 fa7b 	bl	1269c <__malloc_unlock>
   121a6:	2400      	movs	r4, #0
   121a8:	e738      	b.n	1201c <_malloc_r+0x190>
   121aa:	1962      	adds	r2, r4, r5
   121ac:	f043 0301 	orr.w	r3, r3, #1
   121b0:	f045 0501 	orr.w	r5, r5, #1
   121b4:	6065      	str	r5, [r4, #4]
   121b6:	4630      	mov	r0, r6
   121b8:	60ba      	str	r2, [r7, #8]
   121ba:	6053      	str	r3, [r2, #4]
   121bc:	f000 fa6e 	bl	1269c <__malloc_unlock>
   121c0:	3408      	adds	r4, #8
   121c2:	4620      	mov	r0, r4
   121c4:	b003      	add	sp, #12
   121c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121ca:	2b14      	cmp	r3, #20
   121cc:	d971      	bls.n	122b2 <_malloc_r+0x426>
   121ce:	2b54      	cmp	r3, #84	; 0x54
   121d0:	f200 80a4 	bhi.w	1231c <_malloc_r+0x490>
   121d4:	0b28      	lsrs	r0, r5, #12
   121d6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   121da:	ea4f 034e 	mov.w	r3, lr, lsl #1
   121de:	306e      	adds	r0, #110	; 0x6e
   121e0:	e676      	b.n	11ed0 <_malloc_r+0x44>
   121e2:	bf00      	nop
   121e4:	1fff5150 	.word	0x1fff5150
   121e8:	1fff6c10 	.word	0x1fff6c10
   121ec:	1fff6c14 	.word	0x1fff6c14
   121f0:	1fff6c0c 	.word	0x1fff6c0c
   121f4:	1fff6c08 	.word	0x1fff6c08
   121f8:	1fff555c 	.word	0x1fff555c
   121fc:	0a5a      	lsrs	r2, r3, #9
   121fe:	2a04      	cmp	r2, #4
   12200:	d95e      	bls.n	122c0 <_malloc_r+0x434>
   12202:	2a14      	cmp	r2, #20
   12204:	f200 80b3 	bhi.w	1236e <_malloc_r+0x4e2>
   12208:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   1220c:	0049      	lsls	r1, r1, #1
   1220e:	325b      	adds	r2, #91	; 0x5b
   12210:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   12214:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   12218:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 123f8 <_malloc_r+0x56c>
   1221c:	f1ac 0c08 	sub.w	ip, ip, #8
   12220:	458c      	cmp	ip, r1
   12222:	f000 8088 	beq.w	12336 <_malloc_r+0x4aa>
   12226:	684a      	ldr	r2, [r1, #4]
   12228:	f022 0203 	bic.w	r2, r2, #3
   1222c:	4293      	cmp	r3, r2
   1222e:	d202      	bcs.n	12236 <_malloc_r+0x3aa>
   12230:	6889      	ldr	r1, [r1, #8]
   12232:	458c      	cmp	ip, r1
   12234:	d1f7      	bne.n	12226 <_malloc_r+0x39a>
   12236:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   1223a:	687a      	ldr	r2, [r7, #4]
   1223c:	f8c4 c00c 	str.w	ip, [r4, #12]
   12240:	60a1      	str	r1, [r4, #8]
   12242:	f8cc 4008 	str.w	r4, [ip, #8]
   12246:	60cc      	str	r4, [r1, #12]
   12248:	e688      	b.n	11f5c <_malloc_r+0xd0>
   1224a:	1963      	adds	r3, r4, r5
   1224c:	f042 0701 	orr.w	r7, r2, #1
   12250:	f045 0501 	orr.w	r5, r5, #1
   12254:	6065      	str	r5, [r4, #4]
   12256:	4630      	mov	r0, r6
   12258:	614b      	str	r3, [r1, #20]
   1225a:	610b      	str	r3, [r1, #16]
   1225c:	f8c3 e00c 	str.w	lr, [r3, #12]
   12260:	f8c3 e008 	str.w	lr, [r3, #8]
   12264:	605f      	str	r7, [r3, #4]
   12266:	509a      	str	r2, [r3, r2]
   12268:	3408      	adds	r4, #8
   1226a:	f000 fa17 	bl	1269c <__malloc_unlock>
   1226e:	e6d5      	b.n	1201c <_malloc_r+0x190>
   12270:	684a      	ldr	r2, [r1, #4]
   12272:	e673      	b.n	11f5c <_malloc_r+0xd0>
   12274:	f108 0801 	add.w	r8, r8, #1
   12278:	f018 0f03 	tst.w	r8, #3
   1227c:	f10c 0c08 	add.w	ip, ip, #8
   12280:	f47f ae7f 	bne.w	11f82 <_malloc_r+0xf6>
   12284:	e030      	b.n	122e8 <_malloc_r+0x45c>
   12286:	68dc      	ldr	r4, [r3, #12]
   12288:	42a3      	cmp	r3, r4
   1228a:	bf08      	it	eq
   1228c:	3002      	addeq	r0, #2
   1228e:	f43f ae35 	beq.w	11efc <_malloc_r+0x70>
   12292:	e6b3      	b.n	11ffc <_malloc_r+0x170>
   12294:	440b      	add	r3, r1
   12296:	460c      	mov	r4, r1
   12298:	685a      	ldr	r2, [r3, #4]
   1229a:	68c9      	ldr	r1, [r1, #12]
   1229c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   122a0:	f042 0201 	orr.w	r2, r2, #1
   122a4:	605a      	str	r2, [r3, #4]
   122a6:	4630      	mov	r0, r6
   122a8:	60e9      	str	r1, [r5, #12]
   122aa:	608d      	str	r5, [r1, #8]
   122ac:	f000 f9f6 	bl	1269c <__malloc_unlock>
   122b0:	e6b4      	b.n	1201c <_malloc_r+0x190>
   122b2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   122b6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   122ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
   122be:	e607      	b.n	11ed0 <_malloc_r+0x44>
   122c0:	099a      	lsrs	r2, r3, #6
   122c2:	f102 0139 	add.w	r1, r2, #57	; 0x39
   122c6:	0049      	lsls	r1, r1, #1
   122c8:	3238      	adds	r2, #56	; 0x38
   122ca:	e7a1      	b.n	12210 <_malloc_r+0x384>
   122cc:	42bc      	cmp	r4, r7
   122ce:	4b4a      	ldr	r3, [pc, #296]	; (123f8 <_malloc_r+0x56c>)
   122d0:	f43f af00 	beq.w	120d4 <_malloc_r+0x248>
   122d4:	689c      	ldr	r4, [r3, #8]
   122d6:	6862      	ldr	r2, [r4, #4]
   122d8:	f022 0203 	bic.w	r2, r2, #3
   122dc:	e75a      	b.n	12194 <_malloc_r+0x308>
   122de:	f859 3908 	ldr.w	r3, [r9], #-8
   122e2:	4599      	cmp	r9, r3
   122e4:	f040 8082 	bne.w	123ec <_malloc_r+0x560>
   122e8:	f010 0f03 	tst.w	r0, #3
   122ec:	f100 30ff 	add.w	r0, r0, #4294967295
   122f0:	d1f5      	bne.n	122de <_malloc_r+0x452>
   122f2:	687b      	ldr	r3, [r7, #4]
   122f4:	ea23 0304 	bic.w	r3, r3, r4
   122f8:	607b      	str	r3, [r7, #4]
   122fa:	0064      	lsls	r4, r4, #1
   122fc:	429c      	cmp	r4, r3
   122fe:	f63f aebd 	bhi.w	1207c <_malloc_r+0x1f0>
   12302:	2c00      	cmp	r4, #0
   12304:	f43f aeba 	beq.w	1207c <_malloc_r+0x1f0>
   12308:	421c      	tst	r4, r3
   1230a:	4640      	mov	r0, r8
   1230c:	f47f ae35 	bne.w	11f7a <_malloc_r+0xee>
   12310:	0064      	lsls	r4, r4, #1
   12312:	421c      	tst	r4, r3
   12314:	f100 0004 	add.w	r0, r0, #4
   12318:	d0fa      	beq.n	12310 <_malloc_r+0x484>
   1231a:	e62e      	b.n	11f7a <_malloc_r+0xee>
   1231c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   12320:	d818      	bhi.n	12354 <_malloc_r+0x4c8>
   12322:	0be8      	lsrs	r0, r5, #15
   12324:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   12328:	ea4f 034e 	mov.w	r3, lr, lsl #1
   1232c:	3077      	adds	r0, #119	; 0x77
   1232e:	e5cf      	b.n	11ed0 <_malloc_r+0x44>
   12330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   12334:	e6eb      	b.n	1210e <_malloc_r+0x282>
   12336:	2101      	movs	r1, #1
   12338:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1233c:	1092      	asrs	r2, r2, #2
   1233e:	fa01 f202 	lsl.w	r2, r1, r2
   12342:	431a      	orrs	r2, r3
   12344:	f8c8 2004 	str.w	r2, [r8, #4]
   12348:	4661      	mov	r1, ip
   1234a:	e777      	b.n	1223c <_malloc_r+0x3b0>
   1234c:	2301      	movs	r3, #1
   1234e:	f8cb 3004 	str.w	r3, [fp, #4]
   12352:	e725      	b.n	121a0 <_malloc_r+0x314>
   12354:	f240 5254 	movw	r2, #1364	; 0x554
   12358:	4293      	cmp	r3, r2
   1235a:	d820      	bhi.n	1239e <_malloc_r+0x512>
   1235c:	0ca8      	lsrs	r0, r5, #18
   1235e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   12362:	ea4f 034e 	mov.w	r3, lr, lsl #1
   12366:	307c      	adds	r0, #124	; 0x7c
   12368:	e5b2      	b.n	11ed0 <_malloc_r+0x44>
   1236a:	3210      	adds	r2, #16
   1236c:	e6a4      	b.n	120b8 <_malloc_r+0x22c>
   1236e:	2a54      	cmp	r2, #84	; 0x54
   12370:	d826      	bhi.n	123c0 <_malloc_r+0x534>
   12372:	0b1a      	lsrs	r2, r3, #12
   12374:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   12378:	0049      	lsls	r1, r1, #1
   1237a:	326e      	adds	r2, #110	; 0x6e
   1237c:	e748      	b.n	12210 <_malloc_r+0x384>
   1237e:	68bc      	ldr	r4, [r7, #8]
   12380:	6862      	ldr	r2, [r4, #4]
   12382:	f022 0203 	bic.w	r2, r2, #3
   12386:	e705      	b.n	12194 <_malloc_r+0x308>
   12388:	f3ca 000b 	ubfx	r0, sl, #0, #12
   1238c:	2800      	cmp	r0, #0
   1238e:	f47f aea8 	bne.w	120e2 <_malloc_r+0x256>
   12392:	4442      	add	r2, r8
   12394:	68bb      	ldr	r3, [r7, #8]
   12396:	f042 0201 	orr.w	r2, r2, #1
   1239a:	605a      	str	r2, [r3, #4]
   1239c:	e6ec      	b.n	12178 <_malloc_r+0x2ec>
   1239e:	23fe      	movs	r3, #254	; 0xfe
   123a0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   123a4:	207e      	movs	r0, #126	; 0x7e
   123a6:	e593      	b.n	11ed0 <_malloc_r+0x44>
   123a8:	2201      	movs	r2, #1
   123aa:	f04f 0900 	mov.w	r9, #0
   123ae:	e6c1      	b.n	12134 <_malloc_r+0x2a8>
   123b0:	f104 0108 	add.w	r1, r4, #8
   123b4:	4630      	mov	r0, r6
   123b6:	f003 feaf 	bl	16118 <_free_r>
   123ba:	f8d9 1000 	ldr.w	r1, [r9]
   123be:	e6db      	b.n	12178 <_malloc_r+0x2ec>
   123c0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   123c4:	d805      	bhi.n	123d2 <_malloc_r+0x546>
   123c6:	0bda      	lsrs	r2, r3, #15
   123c8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   123cc:	0049      	lsls	r1, r1, #1
   123ce:	3277      	adds	r2, #119	; 0x77
   123d0:	e71e      	b.n	12210 <_malloc_r+0x384>
   123d2:	f240 5154 	movw	r1, #1364	; 0x554
   123d6:	428a      	cmp	r2, r1
   123d8:	d805      	bhi.n	123e6 <_malloc_r+0x55a>
   123da:	0c9a      	lsrs	r2, r3, #18
   123dc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   123e0:	0049      	lsls	r1, r1, #1
   123e2:	327c      	adds	r2, #124	; 0x7c
   123e4:	e714      	b.n	12210 <_malloc_r+0x384>
   123e6:	21fe      	movs	r1, #254	; 0xfe
   123e8:	227e      	movs	r2, #126	; 0x7e
   123ea:	e711      	b.n	12210 <_malloc_r+0x384>
   123ec:	687b      	ldr	r3, [r7, #4]
   123ee:	e784      	b.n	122fa <_malloc_r+0x46e>
   123f0:	08e8      	lsrs	r0, r5, #3
   123f2:	1c43      	adds	r3, r0, #1
   123f4:	005b      	lsls	r3, r3, #1
   123f6:	e5f8      	b.n	11fea <_malloc_r+0x15e>
   123f8:	1fff5150 	.word	0x1fff5150

000123fc <__ascii_mbtowc>:
   123fc:	b082      	sub	sp, #8
   123fe:	b149      	cbz	r1, 12414 <__ascii_mbtowc+0x18>
   12400:	b15a      	cbz	r2, 1241a <__ascii_mbtowc+0x1e>
   12402:	b16b      	cbz	r3, 12420 <__ascii_mbtowc+0x24>
   12404:	7813      	ldrb	r3, [r2, #0]
   12406:	600b      	str	r3, [r1, #0]
   12408:	7812      	ldrb	r2, [r2, #0]
   1240a:	1c10      	adds	r0, r2, #0
   1240c:	bf18      	it	ne
   1240e:	2001      	movne	r0, #1
   12410:	b002      	add	sp, #8
   12412:	4770      	bx	lr
   12414:	a901      	add	r1, sp, #4
   12416:	2a00      	cmp	r2, #0
   12418:	d1f3      	bne.n	12402 <__ascii_mbtowc+0x6>
   1241a:	4610      	mov	r0, r2
   1241c:	b002      	add	sp, #8
   1241e:	4770      	bx	lr
   12420:	f06f 0001 	mvn.w	r0, #1
   12424:	e7f4      	b.n	12410 <__ascii_mbtowc+0x14>
   12426:	bf00      	nop
   12428:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   1242c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00012430 <memchr>:
   12430:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12434:	2a10      	cmp	r2, #16
   12436:	db2b      	blt.n	12490 <memchr+0x60>
   12438:	f010 0f07 	tst.w	r0, #7
   1243c:	d008      	beq.n	12450 <memchr+0x20>
   1243e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12442:	3a01      	subs	r2, #1
   12444:	428b      	cmp	r3, r1
   12446:	d02d      	beq.n	124a4 <memchr+0x74>
   12448:	f010 0f07 	tst.w	r0, #7
   1244c:	b342      	cbz	r2, 124a0 <memchr+0x70>
   1244e:	d1f6      	bne.n	1243e <memchr+0xe>
   12450:	b4f0      	push	{r4, r5, r6, r7}
   12452:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12456:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1245a:	f022 0407 	bic.w	r4, r2, #7
   1245e:	f07f 0700 	mvns.w	r7, #0
   12462:	2300      	movs	r3, #0
   12464:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   12468:	3c08      	subs	r4, #8
   1246a:	ea85 0501 	eor.w	r5, r5, r1
   1246e:	ea86 0601 	eor.w	r6, r6, r1
   12472:	fa85 f547 	uadd8	r5, r5, r7
   12476:	faa3 f587 	sel	r5, r3, r7
   1247a:	fa86 f647 	uadd8	r6, r6, r7
   1247e:	faa5 f687 	sel	r6, r5, r7
   12482:	b98e      	cbnz	r6, 124a8 <memchr+0x78>
   12484:	d1ee      	bne.n	12464 <memchr+0x34>
   12486:	bcf0      	pop	{r4, r5, r6, r7}
   12488:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1248c:	f002 0207 	and.w	r2, r2, #7
   12490:	b132      	cbz	r2, 124a0 <memchr+0x70>
   12492:	f810 3b01 	ldrb.w	r3, [r0], #1
   12496:	3a01      	subs	r2, #1
   12498:	ea83 0301 	eor.w	r3, r3, r1
   1249c:	b113      	cbz	r3, 124a4 <memchr+0x74>
   1249e:	d1f8      	bne.n	12492 <memchr+0x62>
   124a0:	2000      	movs	r0, #0
   124a2:	4770      	bx	lr
   124a4:	3801      	subs	r0, #1
   124a6:	4770      	bx	lr
   124a8:	2d00      	cmp	r5, #0
   124aa:	bf06      	itte	eq
   124ac:	4635      	moveq	r5, r6
   124ae:	3803      	subeq	r0, #3
   124b0:	3807      	subne	r0, #7
   124b2:	f015 0f01 	tst.w	r5, #1
   124b6:	d107      	bne.n	124c8 <memchr+0x98>
   124b8:	3001      	adds	r0, #1
   124ba:	f415 7f80 	tst.w	r5, #256	; 0x100
   124be:	bf02      	ittt	eq
   124c0:	3001      	addeq	r0, #1
   124c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   124c6:	3001      	addeq	r0, #1
   124c8:	bcf0      	pop	{r4, r5, r6, r7}
   124ca:	3801      	subs	r0, #1
   124cc:	4770      	bx	lr
   124ce:	bf00      	nop

000124d0 <memcmp>:
   124d0:	2a03      	cmp	r2, #3
   124d2:	b470      	push	{r4, r5, r6}
   124d4:	d926      	bls.n	12524 <memcmp+0x54>
   124d6:	ea40 0301 	orr.w	r3, r0, r1
   124da:	079b      	lsls	r3, r3, #30
   124dc:	d011      	beq.n	12502 <memcmp+0x32>
   124de:	7804      	ldrb	r4, [r0, #0]
   124e0:	780d      	ldrb	r5, [r1, #0]
   124e2:	42ac      	cmp	r4, r5
   124e4:	d122      	bne.n	1252c <memcmp+0x5c>
   124e6:	4402      	add	r2, r0
   124e8:	1c43      	adds	r3, r0, #1
   124ea:	e005      	b.n	124f8 <memcmp+0x28>
   124ec:	f813 4b01 	ldrb.w	r4, [r3], #1
   124f0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   124f4:	42ac      	cmp	r4, r5
   124f6:	d119      	bne.n	1252c <memcmp+0x5c>
   124f8:	4293      	cmp	r3, r2
   124fa:	d1f7      	bne.n	124ec <memcmp+0x1c>
   124fc:	2000      	movs	r0, #0
   124fe:	bc70      	pop	{r4, r5, r6}
   12500:	4770      	bx	lr
   12502:	460c      	mov	r4, r1
   12504:	4603      	mov	r3, r0
   12506:	681e      	ldr	r6, [r3, #0]
   12508:	6825      	ldr	r5, [r4, #0]
   1250a:	42ae      	cmp	r6, r5
   1250c:	4618      	mov	r0, r3
   1250e:	4621      	mov	r1, r4
   12510:	f103 0304 	add.w	r3, r3, #4
   12514:	f104 0404 	add.w	r4, r4, #4
   12518:	d1e1      	bne.n	124de <memcmp+0xe>
   1251a:	3a04      	subs	r2, #4
   1251c:	2a03      	cmp	r2, #3
   1251e:	4618      	mov	r0, r3
   12520:	4621      	mov	r1, r4
   12522:	d8f0      	bhi.n	12506 <memcmp+0x36>
   12524:	2a00      	cmp	r2, #0
   12526:	d1da      	bne.n	124de <memcmp+0xe>
   12528:	4610      	mov	r0, r2
   1252a:	e7e8      	b.n	124fe <memcmp+0x2e>
   1252c:	1b60      	subs	r0, r4, r5
   1252e:	bc70      	pop	{r4, r5, r6}
   12530:	4770      	bx	lr
   12532:	bf00      	nop

00012534 <memmove>:
   12534:	4288      	cmp	r0, r1
   12536:	b5f0      	push	{r4, r5, r6, r7, lr}
   12538:	d90d      	bls.n	12556 <memmove+0x22>
   1253a:	188b      	adds	r3, r1, r2
   1253c:	4298      	cmp	r0, r3
   1253e:	d20a      	bcs.n	12556 <memmove+0x22>
   12540:	1881      	adds	r1, r0, r2
   12542:	2a00      	cmp	r2, #0
   12544:	d051      	beq.n	125ea <memmove+0xb6>
   12546:	1a9a      	subs	r2, r3, r2
   12548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   1254c:	f801 4d01 	strb.w	r4, [r1, #-1]!
   12550:	4293      	cmp	r3, r2
   12552:	d1f9      	bne.n	12548 <memmove+0x14>
   12554:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12556:	2a0f      	cmp	r2, #15
   12558:	d948      	bls.n	125ec <memmove+0xb8>
   1255a:	ea41 0300 	orr.w	r3, r1, r0
   1255e:	079b      	lsls	r3, r3, #30
   12560:	d146      	bne.n	125f0 <memmove+0xbc>
   12562:	f100 0410 	add.w	r4, r0, #16
   12566:	f101 0310 	add.w	r3, r1, #16
   1256a:	4615      	mov	r5, r2
   1256c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   12570:	f844 6c10 	str.w	r6, [r4, #-16]
   12574:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   12578:	f844 6c0c 	str.w	r6, [r4, #-12]
   1257c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   12580:	f844 6c08 	str.w	r6, [r4, #-8]
   12584:	3d10      	subs	r5, #16
   12586:	f853 6c04 	ldr.w	r6, [r3, #-4]
   1258a:	f844 6c04 	str.w	r6, [r4, #-4]
   1258e:	2d0f      	cmp	r5, #15
   12590:	f103 0310 	add.w	r3, r3, #16
   12594:	f104 0410 	add.w	r4, r4, #16
   12598:	d8e8      	bhi.n	1256c <memmove+0x38>
   1259a:	f1a2 0310 	sub.w	r3, r2, #16
   1259e:	f023 030f 	bic.w	r3, r3, #15
   125a2:	f002 0e0f 	and.w	lr, r2, #15
   125a6:	3310      	adds	r3, #16
   125a8:	f1be 0f03 	cmp.w	lr, #3
   125ac:	4419      	add	r1, r3
   125ae:	4403      	add	r3, r0
   125b0:	d921      	bls.n	125f6 <memmove+0xc2>
   125b2:	1f1e      	subs	r6, r3, #4
   125b4:	460d      	mov	r5, r1
   125b6:	4674      	mov	r4, lr
   125b8:	3c04      	subs	r4, #4
   125ba:	f855 7b04 	ldr.w	r7, [r5], #4
   125be:	f846 7f04 	str.w	r7, [r6, #4]!
   125c2:	2c03      	cmp	r4, #3
   125c4:	d8f8      	bhi.n	125b8 <memmove+0x84>
   125c6:	f1ae 0404 	sub.w	r4, lr, #4
   125ca:	f024 0403 	bic.w	r4, r4, #3
   125ce:	3404      	adds	r4, #4
   125d0:	4423      	add	r3, r4
   125d2:	4421      	add	r1, r4
   125d4:	f002 0203 	and.w	r2, r2, #3
   125d8:	b162      	cbz	r2, 125f4 <memmove+0xc0>
   125da:	3b01      	subs	r3, #1
   125dc:	440a      	add	r2, r1
   125de:	f811 4b01 	ldrb.w	r4, [r1], #1
   125e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   125e6:	428a      	cmp	r2, r1
   125e8:	d1f9      	bne.n	125de <memmove+0xaa>
   125ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125ec:	4603      	mov	r3, r0
   125ee:	e7f3      	b.n	125d8 <memmove+0xa4>
   125f0:	4603      	mov	r3, r0
   125f2:	e7f2      	b.n	125da <memmove+0xa6>
   125f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   125f6:	4672      	mov	r2, lr
   125f8:	e7ee      	b.n	125d8 <memmove+0xa4>
   125fa:	bf00      	nop

000125fc <memset>:
   125fc:	b470      	push	{r4, r5, r6}
   125fe:	0784      	lsls	r4, r0, #30
   12600:	d046      	beq.n	12690 <memset+0x94>
   12602:	1e54      	subs	r4, r2, #1
   12604:	2a00      	cmp	r2, #0
   12606:	d041      	beq.n	1268c <memset+0x90>
   12608:	b2cd      	uxtb	r5, r1
   1260a:	4603      	mov	r3, r0
   1260c:	e002      	b.n	12614 <memset+0x18>
   1260e:	1e62      	subs	r2, r4, #1
   12610:	b3e4      	cbz	r4, 1268c <memset+0x90>
   12612:	4614      	mov	r4, r2
   12614:	f803 5b01 	strb.w	r5, [r3], #1
   12618:	079a      	lsls	r2, r3, #30
   1261a:	d1f8      	bne.n	1260e <memset+0x12>
   1261c:	2c03      	cmp	r4, #3
   1261e:	d92e      	bls.n	1267e <memset+0x82>
   12620:	b2cd      	uxtb	r5, r1
   12622:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   12626:	2c0f      	cmp	r4, #15
   12628:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1262c:	d919      	bls.n	12662 <memset+0x66>
   1262e:	f103 0210 	add.w	r2, r3, #16
   12632:	4626      	mov	r6, r4
   12634:	3e10      	subs	r6, #16
   12636:	2e0f      	cmp	r6, #15
   12638:	f842 5c10 	str.w	r5, [r2, #-16]
   1263c:	f842 5c0c 	str.w	r5, [r2, #-12]
   12640:	f842 5c08 	str.w	r5, [r2, #-8]
   12644:	f842 5c04 	str.w	r5, [r2, #-4]
   12648:	f102 0210 	add.w	r2, r2, #16
   1264c:	d8f2      	bhi.n	12634 <memset+0x38>
   1264e:	f1a4 0210 	sub.w	r2, r4, #16
   12652:	f022 020f 	bic.w	r2, r2, #15
   12656:	f004 040f 	and.w	r4, r4, #15
   1265a:	3210      	adds	r2, #16
   1265c:	2c03      	cmp	r4, #3
   1265e:	4413      	add	r3, r2
   12660:	d90d      	bls.n	1267e <memset+0x82>
   12662:	461e      	mov	r6, r3
   12664:	4622      	mov	r2, r4
   12666:	3a04      	subs	r2, #4
   12668:	2a03      	cmp	r2, #3
   1266a:	f846 5b04 	str.w	r5, [r6], #4
   1266e:	d8fa      	bhi.n	12666 <memset+0x6a>
   12670:	1f22      	subs	r2, r4, #4
   12672:	f022 0203 	bic.w	r2, r2, #3
   12676:	3204      	adds	r2, #4
   12678:	4413      	add	r3, r2
   1267a:	f004 0403 	and.w	r4, r4, #3
   1267e:	b12c      	cbz	r4, 1268c <memset+0x90>
   12680:	b2c9      	uxtb	r1, r1
   12682:	441c      	add	r4, r3
   12684:	f803 1b01 	strb.w	r1, [r3], #1
   12688:	42a3      	cmp	r3, r4
   1268a:	d1fb      	bne.n	12684 <memset+0x88>
   1268c:	bc70      	pop	{r4, r5, r6}
   1268e:	4770      	bx	lr
   12690:	4614      	mov	r4, r2
   12692:	4603      	mov	r3, r0
   12694:	e7c2      	b.n	1261c <memset+0x20>
   12696:	bf00      	nop

00012698 <__malloc_lock>:
   12698:	4770      	bx	lr
   1269a:	bf00      	nop

0001269c <__malloc_unlock>:
   1269c:	4770      	bx	lr
   1269e:	bf00      	nop

000126a0 <realloc>:
   126a0:	4b02      	ldr	r3, [pc, #8]	; (126ac <realloc+0xc>)
   126a2:	460a      	mov	r2, r1
   126a4:	4601      	mov	r1, r0
   126a6:	6818      	ldr	r0, [r3, #0]
   126a8:	f000 b802 	b.w	126b0 <_realloc_r>
   126ac:	1fff4fe0 	.word	0x1fff4fe0

000126b0 <_realloc_r>:
   126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126b4:	4617      	mov	r7, r2
   126b6:	b083      	sub	sp, #12
   126b8:	2900      	cmp	r1, #0
   126ba:	f000 80c1 	beq.w	12840 <_realloc_r+0x190>
   126be:	460e      	mov	r6, r1
   126c0:	4681      	mov	r9, r0
   126c2:	f107 050b 	add.w	r5, r7, #11
   126c6:	f7ff ffe7 	bl	12698 <__malloc_lock>
   126ca:	f856 ec04 	ldr.w	lr, [r6, #-4]
   126ce:	2d16      	cmp	r5, #22
   126d0:	f02e 0403 	bic.w	r4, lr, #3
   126d4:	f1a6 0808 	sub.w	r8, r6, #8
   126d8:	d840      	bhi.n	1275c <_realloc_r+0xac>
   126da:	2210      	movs	r2, #16
   126dc:	4615      	mov	r5, r2
   126de:	42af      	cmp	r7, r5
   126e0:	d841      	bhi.n	12766 <_realloc_r+0xb6>
   126e2:	4294      	cmp	r4, r2
   126e4:	da75      	bge.n	127d2 <_realloc_r+0x122>
   126e6:	4bc9      	ldr	r3, [pc, #804]	; (12a0c <_realloc_r+0x35c>)
   126e8:	6899      	ldr	r1, [r3, #8]
   126ea:	eb08 0004 	add.w	r0, r8, r4
   126ee:	4288      	cmp	r0, r1
   126f0:	6841      	ldr	r1, [r0, #4]
   126f2:	f000 80d9 	beq.w	128a8 <_realloc_r+0x1f8>
   126f6:	f021 0301 	bic.w	r3, r1, #1
   126fa:	4403      	add	r3, r0
   126fc:	685b      	ldr	r3, [r3, #4]
   126fe:	07db      	lsls	r3, r3, #31
   12700:	d57d      	bpl.n	127fe <_realloc_r+0x14e>
   12702:	f01e 0f01 	tst.w	lr, #1
   12706:	d035      	beq.n	12774 <_realloc_r+0xc4>
   12708:	4639      	mov	r1, r7
   1270a:	4648      	mov	r0, r9
   1270c:	f7ff fbbe 	bl	11e8c <_malloc_r>
   12710:	4607      	mov	r7, r0
   12712:	b1e0      	cbz	r0, 1274e <_realloc_r+0x9e>
   12714:	f856 3c04 	ldr.w	r3, [r6, #-4]
   12718:	f023 0301 	bic.w	r3, r3, #1
   1271c:	4443      	add	r3, r8
   1271e:	f1a0 0208 	sub.w	r2, r0, #8
   12722:	429a      	cmp	r2, r3
   12724:	f000 8144 	beq.w	129b0 <_realloc_r+0x300>
   12728:	1f22      	subs	r2, r4, #4
   1272a:	2a24      	cmp	r2, #36	; 0x24
   1272c:	f200 8131 	bhi.w	12992 <_realloc_r+0x2e2>
   12730:	2a13      	cmp	r2, #19
   12732:	f200 8104 	bhi.w	1293e <_realloc_r+0x28e>
   12736:	4603      	mov	r3, r0
   12738:	4632      	mov	r2, r6
   1273a:	6811      	ldr	r1, [r2, #0]
   1273c:	6019      	str	r1, [r3, #0]
   1273e:	6851      	ldr	r1, [r2, #4]
   12740:	6059      	str	r1, [r3, #4]
   12742:	6892      	ldr	r2, [r2, #8]
   12744:	609a      	str	r2, [r3, #8]
   12746:	4631      	mov	r1, r6
   12748:	4648      	mov	r0, r9
   1274a:	f003 fce5 	bl	16118 <_free_r>
   1274e:	4648      	mov	r0, r9
   12750:	f7ff ffa4 	bl	1269c <__malloc_unlock>
   12754:	4638      	mov	r0, r7
   12756:	b003      	add	sp, #12
   12758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1275c:	f025 0507 	bic.w	r5, r5, #7
   12760:	2d00      	cmp	r5, #0
   12762:	462a      	mov	r2, r5
   12764:	dabb      	bge.n	126de <_realloc_r+0x2e>
   12766:	230c      	movs	r3, #12
   12768:	2000      	movs	r0, #0
   1276a:	f8c9 3000 	str.w	r3, [r9]
   1276e:	b003      	add	sp, #12
   12770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12774:	f856 3c08 	ldr.w	r3, [r6, #-8]
   12778:	ebc3 0a08 	rsb	sl, r3, r8
   1277c:	f8da 3004 	ldr.w	r3, [sl, #4]
   12780:	f023 0c03 	bic.w	ip, r3, #3
   12784:	eb04 030c 	add.w	r3, r4, ip
   12788:	4293      	cmp	r3, r2
   1278a:	dbbd      	blt.n	12708 <_realloc_r+0x58>
   1278c:	4657      	mov	r7, sl
   1278e:	f8da 100c 	ldr.w	r1, [sl, #12]
   12792:	f857 0f08 	ldr.w	r0, [r7, #8]!
   12796:	1f22      	subs	r2, r4, #4
   12798:	2a24      	cmp	r2, #36	; 0x24
   1279a:	60c1      	str	r1, [r0, #12]
   1279c:	6088      	str	r0, [r1, #8]
   1279e:	f200 8117 	bhi.w	129d0 <_realloc_r+0x320>
   127a2:	2a13      	cmp	r2, #19
   127a4:	f240 8112 	bls.w	129cc <_realloc_r+0x31c>
   127a8:	6831      	ldr	r1, [r6, #0]
   127aa:	f8ca 1008 	str.w	r1, [sl, #8]
   127ae:	6871      	ldr	r1, [r6, #4]
   127b0:	f8ca 100c 	str.w	r1, [sl, #12]
   127b4:	2a1b      	cmp	r2, #27
   127b6:	f200 812b 	bhi.w	12a10 <_realloc_r+0x360>
   127ba:	3608      	adds	r6, #8
   127bc:	f10a 0210 	add.w	r2, sl, #16
   127c0:	6831      	ldr	r1, [r6, #0]
   127c2:	6011      	str	r1, [r2, #0]
   127c4:	6871      	ldr	r1, [r6, #4]
   127c6:	6051      	str	r1, [r2, #4]
   127c8:	68b1      	ldr	r1, [r6, #8]
   127ca:	6091      	str	r1, [r2, #8]
   127cc:	463e      	mov	r6, r7
   127ce:	461c      	mov	r4, r3
   127d0:	46d0      	mov	r8, sl
   127d2:	1b63      	subs	r3, r4, r5
   127d4:	2b0f      	cmp	r3, #15
   127d6:	d81d      	bhi.n	12814 <_realloc_r+0x164>
   127d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   127dc:	f003 0301 	and.w	r3, r3, #1
   127e0:	4323      	orrs	r3, r4
   127e2:	4444      	add	r4, r8
   127e4:	f8c8 3004 	str.w	r3, [r8, #4]
   127e8:	6863      	ldr	r3, [r4, #4]
   127ea:	f043 0301 	orr.w	r3, r3, #1
   127ee:	6063      	str	r3, [r4, #4]
   127f0:	4648      	mov	r0, r9
   127f2:	f7ff ff53 	bl	1269c <__malloc_unlock>
   127f6:	4630      	mov	r0, r6
   127f8:	b003      	add	sp, #12
   127fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127fe:	f021 0103 	bic.w	r1, r1, #3
   12802:	4421      	add	r1, r4
   12804:	4291      	cmp	r1, r2
   12806:	db21      	blt.n	1284c <_realloc_r+0x19c>
   12808:	68c3      	ldr	r3, [r0, #12]
   1280a:	6882      	ldr	r2, [r0, #8]
   1280c:	460c      	mov	r4, r1
   1280e:	60d3      	str	r3, [r2, #12]
   12810:	609a      	str	r2, [r3, #8]
   12812:	e7de      	b.n	127d2 <_realloc_r+0x122>
   12814:	f8d8 2004 	ldr.w	r2, [r8, #4]
   12818:	eb08 0105 	add.w	r1, r8, r5
   1281c:	f002 0201 	and.w	r2, r2, #1
   12820:	4315      	orrs	r5, r2
   12822:	f043 0201 	orr.w	r2, r3, #1
   12826:	440b      	add	r3, r1
   12828:	f8c8 5004 	str.w	r5, [r8, #4]
   1282c:	604a      	str	r2, [r1, #4]
   1282e:	685a      	ldr	r2, [r3, #4]
   12830:	f042 0201 	orr.w	r2, r2, #1
   12834:	3108      	adds	r1, #8
   12836:	605a      	str	r2, [r3, #4]
   12838:	4648      	mov	r0, r9
   1283a:	f003 fc6d 	bl	16118 <_free_r>
   1283e:	e7d7      	b.n	127f0 <_realloc_r+0x140>
   12840:	4611      	mov	r1, r2
   12842:	b003      	add	sp, #12
   12844:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12848:	f7ff bb20 	b.w	11e8c <_malloc_r>
   1284c:	f01e 0f01 	tst.w	lr, #1
   12850:	f47f af5a 	bne.w	12708 <_realloc_r+0x58>
   12854:	f856 3c08 	ldr.w	r3, [r6, #-8]
   12858:	ebc3 0a08 	rsb	sl, r3, r8
   1285c:	f8da 3004 	ldr.w	r3, [sl, #4]
   12860:	f023 0c03 	bic.w	ip, r3, #3
   12864:	eb01 0e0c 	add.w	lr, r1, ip
   12868:	4596      	cmp	lr, r2
   1286a:	db8b      	blt.n	12784 <_realloc_r+0xd4>
   1286c:	68c3      	ldr	r3, [r0, #12]
   1286e:	6882      	ldr	r2, [r0, #8]
   12870:	4657      	mov	r7, sl
   12872:	60d3      	str	r3, [r2, #12]
   12874:	609a      	str	r2, [r3, #8]
   12876:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1287a:	f8da 300c 	ldr.w	r3, [sl, #12]
   1287e:	60cb      	str	r3, [r1, #12]
   12880:	1f22      	subs	r2, r4, #4
   12882:	2a24      	cmp	r2, #36	; 0x24
   12884:	6099      	str	r1, [r3, #8]
   12886:	f200 8099 	bhi.w	129bc <_realloc_r+0x30c>
   1288a:	2a13      	cmp	r2, #19
   1288c:	d962      	bls.n	12954 <_realloc_r+0x2a4>
   1288e:	6833      	ldr	r3, [r6, #0]
   12890:	f8ca 3008 	str.w	r3, [sl, #8]
   12894:	6873      	ldr	r3, [r6, #4]
   12896:	f8ca 300c 	str.w	r3, [sl, #12]
   1289a:	2a1b      	cmp	r2, #27
   1289c:	f200 80a0 	bhi.w	129e0 <_realloc_r+0x330>
   128a0:	3608      	adds	r6, #8
   128a2:	f10a 0310 	add.w	r3, sl, #16
   128a6:	e056      	b.n	12956 <_realloc_r+0x2a6>
   128a8:	f021 0b03 	bic.w	fp, r1, #3
   128ac:	44a3      	add	fp, r4
   128ae:	f105 0010 	add.w	r0, r5, #16
   128b2:	4583      	cmp	fp, r0
   128b4:	da59      	bge.n	1296a <_realloc_r+0x2ba>
   128b6:	f01e 0f01 	tst.w	lr, #1
   128ba:	f47f af25 	bne.w	12708 <_realloc_r+0x58>
   128be:	f856 1c08 	ldr.w	r1, [r6, #-8]
   128c2:	ebc1 0a08 	rsb	sl, r1, r8
   128c6:	f8da 1004 	ldr.w	r1, [sl, #4]
   128ca:	f021 0c03 	bic.w	ip, r1, #3
   128ce:	44e3      	add	fp, ip
   128d0:	4558      	cmp	r0, fp
   128d2:	f73f af57 	bgt.w	12784 <_realloc_r+0xd4>
   128d6:	4657      	mov	r7, sl
   128d8:	f8da 100c 	ldr.w	r1, [sl, #12]
   128dc:	f857 0f08 	ldr.w	r0, [r7, #8]!
   128e0:	1f22      	subs	r2, r4, #4
   128e2:	2a24      	cmp	r2, #36	; 0x24
   128e4:	60c1      	str	r1, [r0, #12]
   128e6:	6088      	str	r0, [r1, #8]
   128e8:	f200 80b4 	bhi.w	12a54 <_realloc_r+0x3a4>
   128ec:	2a13      	cmp	r2, #19
   128ee:	f240 80a5 	bls.w	12a3c <_realloc_r+0x38c>
   128f2:	6831      	ldr	r1, [r6, #0]
   128f4:	f8ca 1008 	str.w	r1, [sl, #8]
   128f8:	6871      	ldr	r1, [r6, #4]
   128fa:	f8ca 100c 	str.w	r1, [sl, #12]
   128fe:	2a1b      	cmp	r2, #27
   12900:	f200 80af 	bhi.w	12a62 <_realloc_r+0x3b2>
   12904:	3608      	adds	r6, #8
   12906:	f10a 0210 	add.w	r2, sl, #16
   1290a:	6831      	ldr	r1, [r6, #0]
   1290c:	6011      	str	r1, [r2, #0]
   1290e:	6871      	ldr	r1, [r6, #4]
   12910:	6051      	str	r1, [r2, #4]
   12912:	68b1      	ldr	r1, [r6, #8]
   12914:	6091      	str	r1, [r2, #8]
   12916:	eb0a 0105 	add.w	r1, sl, r5
   1291a:	ebc5 020b 	rsb	r2, r5, fp
   1291e:	f042 0201 	orr.w	r2, r2, #1
   12922:	6099      	str	r1, [r3, #8]
   12924:	604a      	str	r2, [r1, #4]
   12926:	f8da 3004 	ldr.w	r3, [sl, #4]
   1292a:	f003 0301 	and.w	r3, r3, #1
   1292e:	431d      	orrs	r5, r3
   12930:	4648      	mov	r0, r9
   12932:	f8ca 5004 	str.w	r5, [sl, #4]
   12936:	f7ff feb1 	bl	1269c <__malloc_unlock>
   1293a:	4638      	mov	r0, r7
   1293c:	e75c      	b.n	127f8 <_realloc_r+0x148>
   1293e:	6833      	ldr	r3, [r6, #0]
   12940:	6003      	str	r3, [r0, #0]
   12942:	6873      	ldr	r3, [r6, #4]
   12944:	6043      	str	r3, [r0, #4]
   12946:	2a1b      	cmp	r2, #27
   12948:	d827      	bhi.n	1299a <_realloc_r+0x2ea>
   1294a:	f100 0308 	add.w	r3, r0, #8
   1294e:	f106 0208 	add.w	r2, r6, #8
   12952:	e6f2      	b.n	1273a <_realloc_r+0x8a>
   12954:	463b      	mov	r3, r7
   12956:	6832      	ldr	r2, [r6, #0]
   12958:	601a      	str	r2, [r3, #0]
   1295a:	6872      	ldr	r2, [r6, #4]
   1295c:	605a      	str	r2, [r3, #4]
   1295e:	68b2      	ldr	r2, [r6, #8]
   12960:	609a      	str	r2, [r3, #8]
   12962:	463e      	mov	r6, r7
   12964:	4674      	mov	r4, lr
   12966:	46d0      	mov	r8, sl
   12968:	e733      	b.n	127d2 <_realloc_r+0x122>
   1296a:	eb08 0105 	add.w	r1, r8, r5
   1296e:	ebc5 0b0b 	rsb	fp, r5, fp
   12972:	f04b 0201 	orr.w	r2, fp, #1
   12976:	6099      	str	r1, [r3, #8]
   12978:	604a      	str	r2, [r1, #4]
   1297a:	f856 3c04 	ldr.w	r3, [r6, #-4]
   1297e:	f003 0301 	and.w	r3, r3, #1
   12982:	431d      	orrs	r5, r3
   12984:	4648      	mov	r0, r9
   12986:	f846 5c04 	str.w	r5, [r6, #-4]
   1298a:	f7ff fe87 	bl	1269c <__malloc_unlock>
   1298e:	4630      	mov	r0, r6
   12990:	e732      	b.n	127f8 <_realloc_r+0x148>
   12992:	4631      	mov	r1, r6
   12994:	f7ff fdce 	bl	12534 <memmove>
   12998:	e6d5      	b.n	12746 <_realloc_r+0x96>
   1299a:	68b3      	ldr	r3, [r6, #8]
   1299c:	6083      	str	r3, [r0, #8]
   1299e:	68f3      	ldr	r3, [r6, #12]
   129a0:	60c3      	str	r3, [r0, #12]
   129a2:	2a24      	cmp	r2, #36	; 0x24
   129a4:	d028      	beq.n	129f8 <_realloc_r+0x348>
   129a6:	f100 0310 	add.w	r3, r0, #16
   129aa:	f106 0210 	add.w	r2, r6, #16
   129ae:	e6c4      	b.n	1273a <_realloc_r+0x8a>
   129b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
   129b4:	f023 0303 	bic.w	r3, r3, #3
   129b8:	441c      	add	r4, r3
   129ba:	e70a      	b.n	127d2 <_realloc_r+0x122>
   129bc:	4631      	mov	r1, r6
   129be:	4638      	mov	r0, r7
   129c0:	4674      	mov	r4, lr
   129c2:	46d0      	mov	r8, sl
   129c4:	f7ff fdb6 	bl	12534 <memmove>
   129c8:	463e      	mov	r6, r7
   129ca:	e702      	b.n	127d2 <_realloc_r+0x122>
   129cc:	463a      	mov	r2, r7
   129ce:	e6f7      	b.n	127c0 <_realloc_r+0x110>
   129d0:	4631      	mov	r1, r6
   129d2:	4638      	mov	r0, r7
   129d4:	461c      	mov	r4, r3
   129d6:	46d0      	mov	r8, sl
   129d8:	f7ff fdac 	bl	12534 <memmove>
   129dc:	463e      	mov	r6, r7
   129de:	e6f8      	b.n	127d2 <_realloc_r+0x122>
   129e0:	68b3      	ldr	r3, [r6, #8]
   129e2:	f8ca 3010 	str.w	r3, [sl, #16]
   129e6:	68f3      	ldr	r3, [r6, #12]
   129e8:	f8ca 3014 	str.w	r3, [sl, #20]
   129ec:	2a24      	cmp	r2, #36	; 0x24
   129ee:	d01b      	beq.n	12a28 <_realloc_r+0x378>
   129f0:	3610      	adds	r6, #16
   129f2:	f10a 0318 	add.w	r3, sl, #24
   129f6:	e7ae      	b.n	12956 <_realloc_r+0x2a6>
   129f8:	6933      	ldr	r3, [r6, #16]
   129fa:	6103      	str	r3, [r0, #16]
   129fc:	6973      	ldr	r3, [r6, #20]
   129fe:	6143      	str	r3, [r0, #20]
   12a00:	f106 0218 	add.w	r2, r6, #24
   12a04:	f100 0318 	add.w	r3, r0, #24
   12a08:	e697      	b.n	1273a <_realloc_r+0x8a>
   12a0a:	bf00      	nop
   12a0c:	1fff5150 	.word	0x1fff5150
   12a10:	68b1      	ldr	r1, [r6, #8]
   12a12:	f8ca 1010 	str.w	r1, [sl, #16]
   12a16:	68f1      	ldr	r1, [r6, #12]
   12a18:	f8ca 1014 	str.w	r1, [sl, #20]
   12a1c:	2a24      	cmp	r2, #36	; 0x24
   12a1e:	d00f      	beq.n	12a40 <_realloc_r+0x390>
   12a20:	3610      	adds	r6, #16
   12a22:	f10a 0218 	add.w	r2, sl, #24
   12a26:	e6cb      	b.n	127c0 <_realloc_r+0x110>
   12a28:	6933      	ldr	r3, [r6, #16]
   12a2a:	f8ca 3018 	str.w	r3, [sl, #24]
   12a2e:	6973      	ldr	r3, [r6, #20]
   12a30:	f8ca 301c 	str.w	r3, [sl, #28]
   12a34:	3618      	adds	r6, #24
   12a36:	f10a 0320 	add.w	r3, sl, #32
   12a3a:	e78c      	b.n	12956 <_realloc_r+0x2a6>
   12a3c:	463a      	mov	r2, r7
   12a3e:	e764      	b.n	1290a <_realloc_r+0x25a>
   12a40:	6932      	ldr	r2, [r6, #16]
   12a42:	f8ca 2018 	str.w	r2, [sl, #24]
   12a46:	6972      	ldr	r2, [r6, #20]
   12a48:	f8ca 201c 	str.w	r2, [sl, #28]
   12a4c:	3618      	adds	r6, #24
   12a4e:	f10a 0220 	add.w	r2, sl, #32
   12a52:	e6b5      	b.n	127c0 <_realloc_r+0x110>
   12a54:	4631      	mov	r1, r6
   12a56:	4638      	mov	r0, r7
   12a58:	9301      	str	r3, [sp, #4]
   12a5a:	f7ff fd6b 	bl	12534 <memmove>
   12a5e:	9b01      	ldr	r3, [sp, #4]
   12a60:	e759      	b.n	12916 <_realloc_r+0x266>
   12a62:	68b1      	ldr	r1, [r6, #8]
   12a64:	f8ca 1010 	str.w	r1, [sl, #16]
   12a68:	68f1      	ldr	r1, [r6, #12]
   12a6a:	f8ca 1014 	str.w	r1, [sl, #20]
   12a6e:	2a24      	cmp	r2, #36	; 0x24
   12a70:	d003      	beq.n	12a7a <_realloc_r+0x3ca>
   12a72:	3610      	adds	r6, #16
   12a74:	f10a 0218 	add.w	r2, sl, #24
   12a78:	e747      	b.n	1290a <_realloc_r+0x25a>
   12a7a:	6932      	ldr	r2, [r6, #16]
   12a7c:	f8ca 2018 	str.w	r2, [sl, #24]
   12a80:	6972      	ldr	r2, [r6, #20]
   12a82:	f8ca 201c 	str.w	r2, [sl, #28]
   12a86:	3618      	adds	r6, #24
   12a88:	f10a 0220 	add.w	r2, sl, #32
   12a8c:	e73d      	b.n	1290a <_realloc_r+0x25a>
   12a8e:	bf00      	nop

00012a90 <_sbrk_r>:
   12a90:	b538      	push	{r3, r4, r5, lr}
   12a92:	4c07      	ldr	r4, [pc, #28]	; (12ab0 <_sbrk_r+0x20>)
   12a94:	2300      	movs	r3, #0
   12a96:	4605      	mov	r5, r0
   12a98:	4608      	mov	r0, r1
   12a9a:	6023      	str	r3, [r4, #0]
   12a9c:	f7fb feb2 	bl	e804 <_sbrk>
   12aa0:	1c43      	adds	r3, r0, #1
   12aa2:	d000      	beq.n	12aa6 <_sbrk_r+0x16>
   12aa4:	bd38      	pop	{r3, r4, r5, pc}
   12aa6:	6823      	ldr	r3, [r4, #0]
   12aa8:	2b00      	cmp	r3, #0
   12aaa:	d0fb      	beq.n	12aa4 <_sbrk_r+0x14>
   12aac:	602b      	str	r3, [r5, #0]
   12aae:	bd38      	pop	{r3, r4, r5, pc}
   12ab0:	1fff6c64 	.word	0x1fff6c64

00012ab4 <sprintf>:
   12ab4:	b40e      	push	{r1, r2, r3}
   12ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ab8:	b09c      	sub	sp, #112	; 0x70
   12aba:	ab21      	add	r3, sp, #132	; 0x84
   12abc:	490f      	ldr	r1, [pc, #60]	; (12afc <sprintf+0x48>)
   12abe:	f853 2b04 	ldr.w	r2, [r3], #4
   12ac2:	9301      	str	r3, [sp, #4]
   12ac4:	4605      	mov	r5, r0
   12ac6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   12aca:	6808      	ldr	r0, [r1, #0]
   12acc:	9502      	str	r5, [sp, #8]
   12ace:	f44f 7702 	mov.w	r7, #520	; 0x208
   12ad2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   12ad6:	a902      	add	r1, sp, #8
   12ad8:	9506      	str	r5, [sp, #24]
   12ada:	f8ad 7014 	strh.w	r7, [sp, #20]
   12ade:	9404      	str	r4, [sp, #16]
   12ae0:	9407      	str	r4, [sp, #28]
   12ae2:	f8ad 6016 	strh.w	r6, [sp, #22]
   12ae6:	f000 fe0b 	bl	13700 <_svfprintf_r>
   12aea:	9b02      	ldr	r3, [sp, #8]
   12aec:	2200      	movs	r2, #0
   12aee:	701a      	strb	r2, [r3, #0]
   12af0:	b01c      	add	sp, #112	; 0x70
   12af2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   12af6:	b003      	add	sp, #12
   12af8:	4770      	bx	lr
   12afa:	bf00      	nop
   12afc:	1fff4fe0 	.word	0x1fff4fe0

00012b00 <strchr>:
   12b00:	b470      	push	{r4, r5, r6}
   12b02:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   12b06:	d034      	beq.n	12b72 <strchr+0x72>
   12b08:	0785      	lsls	r5, r0, #30
   12b0a:	d00f      	beq.n	12b2c <strchr+0x2c>
   12b0c:	7803      	ldrb	r3, [r0, #0]
   12b0e:	2b00      	cmp	r3, #0
   12b10:	d05a      	beq.n	12bc8 <strchr+0xc8>
   12b12:	429c      	cmp	r4, r3
   12b14:	d02b      	beq.n	12b6e <strchr+0x6e>
   12b16:	1c43      	adds	r3, r0, #1
   12b18:	e005      	b.n	12b26 <strchr+0x26>
   12b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   12b1e:	2a00      	cmp	r2, #0
   12b20:	d04f      	beq.n	12bc2 <strchr+0xc2>
   12b22:	4294      	cmp	r4, r2
   12b24:	d023      	beq.n	12b6e <strchr+0x6e>
   12b26:	079a      	lsls	r2, r3, #30
   12b28:	4618      	mov	r0, r3
   12b2a:	d1f6      	bne.n	12b1a <strchr+0x1a>
   12b2c:	020e      	lsls	r6, r1, #8
   12b2e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   12b32:	4326      	orrs	r6, r4
   12b34:	6803      	ldr	r3, [r0, #0]
   12b36:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   12b3a:	e001      	b.n	12b40 <strchr+0x40>
   12b3c:	f850 3f04 	ldr.w	r3, [r0, #4]!
   12b40:	ea86 0503 	eor.w	r5, r6, r3
   12b44:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   12b48:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   12b4c:	ea22 0205 	bic.w	r2, r2, r5
   12b50:	ea21 0303 	bic.w	r3, r1, r3
   12b54:	4313      	orrs	r3, r2
   12b56:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   12b5a:	d0ef      	beq.n	12b3c <strchr+0x3c>
   12b5c:	7803      	ldrb	r3, [r0, #0]
   12b5e:	b923      	cbnz	r3, 12b6a <strchr+0x6a>
   12b60:	e032      	b.n	12bc8 <strchr+0xc8>
   12b62:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   12b66:	2b00      	cmp	r3, #0
   12b68:	d02e      	beq.n	12bc8 <strchr+0xc8>
   12b6a:	429c      	cmp	r4, r3
   12b6c:	d1f9      	bne.n	12b62 <strchr+0x62>
   12b6e:	bc70      	pop	{r4, r5, r6}
   12b70:	4770      	bx	lr
   12b72:	0784      	lsls	r4, r0, #30
   12b74:	d00b      	beq.n	12b8e <strchr+0x8e>
   12b76:	7803      	ldrb	r3, [r0, #0]
   12b78:	2b00      	cmp	r3, #0
   12b7a:	d0f8      	beq.n	12b6e <strchr+0x6e>
   12b7c:	1c43      	adds	r3, r0, #1
   12b7e:	e003      	b.n	12b88 <strchr+0x88>
   12b80:	7802      	ldrb	r2, [r0, #0]
   12b82:	3301      	adds	r3, #1
   12b84:	2a00      	cmp	r2, #0
   12b86:	d0f2      	beq.n	12b6e <strchr+0x6e>
   12b88:	0799      	lsls	r1, r3, #30
   12b8a:	4618      	mov	r0, r3
   12b8c:	d1f8      	bne.n	12b80 <strchr+0x80>
   12b8e:	6802      	ldr	r2, [r0, #0]
   12b90:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   12b94:	ea23 0302 	bic.w	r3, r3, r2
   12b98:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   12b9c:	d108      	bne.n	12bb0 <strchr+0xb0>
   12b9e:	f850 2f04 	ldr.w	r2, [r0, #4]!
   12ba2:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   12ba6:	ea23 0302 	bic.w	r3, r3, r2
   12baa:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   12bae:	d0f6      	beq.n	12b9e <strchr+0x9e>
   12bb0:	7803      	ldrb	r3, [r0, #0]
   12bb2:	2b00      	cmp	r3, #0
   12bb4:	d0db      	beq.n	12b6e <strchr+0x6e>
   12bb6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   12bba:	2b00      	cmp	r3, #0
   12bbc:	d1fb      	bne.n	12bb6 <strchr+0xb6>
   12bbe:	bc70      	pop	{r4, r5, r6}
   12bc0:	4770      	bx	lr
   12bc2:	4610      	mov	r0, r2
   12bc4:	bc70      	pop	{r4, r5, r6}
   12bc6:	4770      	bx	lr
   12bc8:	4618      	mov	r0, r3
   12bca:	bc70      	pop	{r4, r5, r6}
   12bcc:	4770      	bx	lr
   12bce:	bf00      	nop
   12bd0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12bd4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12bd8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12bdc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12be0:	eba2 0003 	sub.w	r0, r2, r3
   12be4:	4770      	bx	lr
   12be6:	bf00      	nop

00012be8 <strcmp>:
   12be8:	7802      	ldrb	r2, [r0, #0]
   12bea:	780b      	ldrb	r3, [r1, #0]
   12bec:	2a01      	cmp	r2, #1
   12bee:	bf28      	it	cs
   12bf0:	429a      	cmpcs	r2, r3
   12bf2:	d1f5      	bne.n	12be0 <strchr+0xe0>
   12bf4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   12bf8:	ea40 0401 	orr.w	r4, r0, r1
   12bfc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   12c00:	f06f 0c00 	mvn.w	ip, #0
   12c04:	ea4f 7244 	mov.w	r2, r4, lsl #29
   12c08:	b312      	cbz	r2, 12c50 <strcmp+0x68>
   12c0a:	ea80 0401 	eor.w	r4, r0, r1
   12c0e:	f014 0f07 	tst.w	r4, #7
   12c12:	d16a      	bne.n	12cea <strcmp+0x102>
   12c14:	f000 0407 	and.w	r4, r0, #7
   12c18:	f020 0007 	bic.w	r0, r0, #7
   12c1c:	f004 0503 	and.w	r5, r4, #3
   12c20:	f021 0107 	bic.w	r1, r1, #7
   12c24:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   12c28:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   12c2c:	f014 0f04 	tst.w	r4, #4
   12c30:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12c34:	fa0c f405 	lsl.w	r4, ip, r5
   12c38:	ea62 0204 	orn	r2, r2, r4
   12c3c:	ea66 0604 	orn	r6, r6, r4
   12c40:	d00a      	beq.n	12c58 <strcmp+0x70>
   12c42:	ea63 0304 	orn	r3, r3, r4
   12c46:	4662      	mov	r2, ip
   12c48:	ea67 0704 	orn	r7, r7, r4
   12c4c:	4666      	mov	r6, ip
   12c4e:	e003      	b.n	12c58 <strcmp+0x70>
   12c50:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   12c54:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   12c58:	fa82 f54c 	uadd8	r5, r2, ip
   12c5c:	ea82 0406 	eor.w	r4, r2, r6
   12c60:	faa4 f48c 	sel	r4, r4, ip
   12c64:	bb6c      	cbnz	r4, 12cc2 <strcmp+0xda>
   12c66:	fa83 f54c 	uadd8	r5, r3, ip
   12c6a:	ea83 0507 	eor.w	r5, r3, r7
   12c6e:	faa5 f58c 	sel	r5, r5, ip
   12c72:	b995      	cbnz	r5, 12c9a <strcmp+0xb2>
   12c74:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   12c78:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   12c7c:	fa82 f54c 	uadd8	r5, r2, ip
   12c80:	ea82 0406 	eor.w	r4, r2, r6
   12c84:	faa4 f48c 	sel	r4, r4, ip
   12c88:	fa83 f54c 	uadd8	r5, r3, ip
   12c8c:	ea83 0507 	eor.w	r5, r3, r7
   12c90:	faa5 f58c 	sel	r5, r5, ip
   12c94:	4325      	orrs	r5, r4
   12c96:	d0db      	beq.n	12c50 <strcmp+0x68>
   12c98:	b99c      	cbnz	r4, 12cc2 <strcmp+0xda>
   12c9a:	ba2d      	rev	r5, r5
   12c9c:	fab5 f485 	clz	r4, r5
   12ca0:	f024 0407 	bic.w	r4, r4, #7
   12ca4:	fa27 f104 	lsr.w	r1, r7, r4
   12ca8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12cac:	fa23 f304 	lsr.w	r3, r3, r4
   12cb0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   12cb4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12cb8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12cbc:	eba0 0001 	sub.w	r0, r0, r1
   12cc0:	4770      	bx	lr
   12cc2:	ba24      	rev	r4, r4
   12cc4:	fab4 f484 	clz	r4, r4
   12cc8:	f024 0407 	bic.w	r4, r4, #7
   12ccc:	fa26 f104 	lsr.w	r1, r6, r4
   12cd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   12cd4:	fa22 f204 	lsr.w	r2, r2, r4
   12cd8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   12cdc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12ce0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12ce4:	eba0 0001 	sub.w	r0, r0, r1
   12ce8:	4770      	bx	lr
   12cea:	f014 0f03 	tst.w	r4, #3
   12cee:	d13c      	bne.n	12d6a <strcmp+0x182>
   12cf0:	f010 0403 	ands.w	r4, r0, #3
   12cf4:	d128      	bne.n	12d48 <strcmp+0x160>
   12cf6:	f850 2b08 	ldr.w	r2, [r0], #8
   12cfa:	f851 3b08 	ldr.w	r3, [r1], #8
   12cfe:	fa82 f54c 	uadd8	r5, r2, ip
   12d02:	ea82 0503 	eor.w	r5, r2, r3
   12d06:	faa5 f58c 	sel	r5, r5, ip
   12d0a:	b95d      	cbnz	r5, 12d24 <strcmp+0x13c>
   12d0c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   12d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12d14:	fa82 f54c 	uadd8	r5, r2, ip
   12d18:	ea82 0503 	eor.w	r5, r2, r3
   12d1c:	faa5 f58c 	sel	r5, r5, ip
   12d20:	2d00      	cmp	r5, #0
   12d22:	d0e8      	beq.n	12cf6 <strcmp+0x10e>
   12d24:	ba2d      	rev	r5, r5
   12d26:	fab5 f485 	clz	r4, r5
   12d2a:	f024 0407 	bic.w	r4, r4, #7
   12d2e:	fa23 f104 	lsr.w	r1, r3, r4
   12d32:	fa22 f204 	lsr.w	r2, r2, r4
   12d36:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   12d3a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   12d3e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12d42:	eba0 0001 	sub.w	r0, r0, r1
   12d46:	4770      	bx	lr
   12d48:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   12d4c:	f020 0003 	bic.w	r0, r0, #3
   12d50:	f850 2b08 	ldr.w	r2, [r0], #8
   12d54:	f021 0103 	bic.w	r1, r1, #3
   12d58:	f851 3b08 	ldr.w	r3, [r1], #8
   12d5c:	fa0c f404 	lsl.w	r4, ip, r4
   12d60:	ea62 0204 	orn	r2, r2, r4
   12d64:	ea63 0304 	orn	r3, r3, r4
   12d68:	e7c9      	b.n	12cfe <strcmp+0x116>
   12d6a:	f010 0403 	ands.w	r4, r0, #3
   12d6e:	d01a      	beq.n	12da6 <strcmp+0x1be>
   12d70:	eba1 0104 	sub.w	r1, r1, r4
   12d74:	f020 0003 	bic.w	r0, r0, #3
   12d78:	07e4      	lsls	r4, r4, #31
   12d7a:	f850 2b04 	ldr.w	r2, [r0], #4
   12d7e:	d006      	beq.n	12d8e <strcmp+0x1a6>
   12d80:	d20f      	bcs.n	12da2 <strcmp+0x1ba>
   12d82:	788b      	ldrb	r3, [r1, #2]
   12d84:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   12d88:	1ae4      	subs	r4, r4, r3
   12d8a:	d106      	bne.n	12d9a <strcmp+0x1b2>
   12d8c:	b12b      	cbz	r3, 12d9a <strcmp+0x1b2>
   12d8e:	78cb      	ldrb	r3, [r1, #3]
   12d90:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   12d94:	1ae4      	subs	r4, r4, r3
   12d96:	d100      	bne.n	12d9a <strcmp+0x1b2>
   12d98:	b91b      	cbnz	r3, 12da2 <strcmp+0x1ba>
   12d9a:	4620      	mov	r0, r4
   12d9c:	f85d 4b10 	ldr.w	r4, [sp], #16
   12da0:	4770      	bx	lr
   12da2:	f101 0104 	add.w	r1, r1, #4
   12da6:	f850 2b04 	ldr.w	r2, [r0], #4
   12daa:	07cc      	lsls	r4, r1, #31
   12dac:	f021 0103 	bic.w	r1, r1, #3
   12db0:	f851 3b04 	ldr.w	r3, [r1], #4
   12db4:	d848      	bhi.n	12e48 <strcmp+0x260>
   12db6:	d224      	bcs.n	12e02 <strcmp+0x21a>
   12db8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   12dbc:	fa82 f54c 	uadd8	r5, r2, ip
   12dc0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   12dc4:	faa5 f58c 	sel	r5, r5, ip
   12dc8:	d10a      	bne.n	12de0 <strcmp+0x1f8>
   12dca:	b965      	cbnz	r5, 12de6 <strcmp+0x1fe>
   12dcc:	f851 3b04 	ldr.w	r3, [r1], #4
   12dd0:	ea84 0402 	eor.w	r4, r4, r2
   12dd4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   12dd8:	d10e      	bne.n	12df8 <strcmp+0x210>
   12dda:	f850 2b04 	ldr.w	r2, [r0], #4
   12dde:	e7eb      	b.n	12db8 <strcmp+0x1d0>
   12de0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   12de4:	e055      	b.n	12e92 <strcmp+0x2aa>
   12de6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   12dea:	d14d      	bne.n	12e88 <strcmp+0x2a0>
   12dec:	7808      	ldrb	r0, [r1, #0]
   12dee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12df2:	f1c0 0000 	rsb	r0, r0, #0
   12df6:	4770      	bx	lr
   12df8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   12dfc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   12e00:	e047      	b.n	12e92 <strcmp+0x2aa>
   12e02:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   12e06:	fa82 f54c 	uadd8	r5, r2, ip
   12e0a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   12e0e:	faa5 f58c 	sel	r5, r5, ip
   12e12:	d10a      	bne.n	12e2a <strcmp+0x242>
   12e14:	b965      	cbnz	r5, 12e30 <strcmp+0x248>
   12e16:	f851 3b04 	ldr.w	r3, [r1], #4
   12e1a:	ea84 0402 	eor.w	r4, r4, r2
   12e1e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   12e22:	d10c      	bne.n	12e3e <strcmp+0x256>
   12e24:	f850 2b04 	ldr.w	r2, [r0], #4
   12e28:	e7eb      	b.n	12e02 <strcmp+0x21a>
   12e2a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   12e2e:	e030      	b.n	12e92 <strcmp+0x2aa>
   12e30:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   12e34:	d128      	bne.n	12e88 <strcmp+0x2a0>
   12e36:	880b      	ldrh	r3, [r1, #0]
   12e38:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12e3c:	e029      	b.n	12e92 <strcmp+0x2aa>
   12e3e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   12e42:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   12e46:	e024      	b.n	12e92 <strcmp+0x2aa>
   12e48:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   12e4c:	fa82 f54c 	uadd8	r5, r2, ip
   12e50:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   12e54:	faa5 f58c 	sel	r5, r5, ip
   12e58:	d10a      	bne.n	12e70 <strcmp+0x288>
   12e5a:	b965      	cbnz	r5, 12e76 <strcmp+0x28e>
   12e5c:	f851 3b04 	ldr.w	r3, [r1], #4
   12e60:	ea84 0402 	eor.w	r4, r4, r2
   12e64:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   12e68:	d109      	bne.n	12e7e <strcmp+0x296>
   12e6a:	f850 2b04 	ldr.w	r2, [r0], #4
   12e6e:	e7eb      	b.n	12e48 <strcmp+0x260>
   12e70:	ea4f 6313 	mov.w	r3, r3, lsr #24
   12e74:	e00d      	b.n	12e92 <strcmp+0x2aa>
   12e76:	f015 0fff 	tst.w	r5, #255	; 0xff
   12e7a:	d105      	bne.n	12e88 <strcmp+0x2a0>
   12e7c:	680b      	ldr	r3, [r1, #0]
   12e7e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   12e82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   12e86:	e004      	b.n	12e92 <strcmp+0x2aa>
   12e88:	f04f 0000 	mov.w	r0, #0
   12e8c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12e90:	4770      	bx	lr
   12e92:	ba12      	rev	r2, r2
   12e94:	ba1b      	rev	r3, r3
   12e96:	fa82 f44c 	uadd8	r4, r2, ip
   12e9a:	ea82 0403 	eor.w	r4, r2, r3
   12e9e:	faa4 f58c 	sel	r5, r4, ip
   12ea2:	fab5 f485 	clz	r4, r5
   12ea6:	fa02 f204 	lsl.w	r2, r2, r4
   12eaa:	fa03 f304 	lsl.w	r3, r3, r4
   12eae:	ea4f 6012 	mov.w	r0, r2, lsr #24
   12eb2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   12eb6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   12eba:	4770      	bx	lr

00012ebc <strcpy>:
   12ebc:	ea80 0201 	eor.w	r2, r0, r1
   12ec0:	4684      	mov	ip, r0
   12ec2:	f012 0f03 	tst.w	r2, #3
   12ec6:	d14f      	bne.n	12f68 <strcpy+0xac>
   12ec8:	f011 0f03 	tst.w	r1, #3
   12ecc:	d132      	bne.n	12f34 <strcpy+0x78>
   12ece:	f84d 4d04 	str.w	r4, [sp, #-4]!
   12ed2:	f011 0f04 	tst.w	r1, #4
   12ed6:	f851 3b04 	ldr.w	r3, [r1], #4
   12eda:	d00b      	beq.n	12ef4 <strcpy+0x38>
   12edc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12ee0:	439a      	bics	r2, r3
   12ee2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12ee6:	bf04      	itt	eq
   12ee8:	f84c 3b04 	streq.w	r3, [ip], #4
   12eec:	f851 3b04 	ldreq.w	r3, [r1], #4
   12ef0:	d116      	bne.n	12f20 <strcpy+0x64>
   12ef2:	bf00      	nop
   12ef4:	f851 4b04 	ldr.w	r4, [r1], #4
   12ef8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   12efc:	439a      	bics	r2, r3
   12efe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12f02:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   12f06:	d10b      	bne.n	12f20 <strcpy+0x64>
   12f08:	f84c 3b04 	str.w	r3, [ip], #4
   12f0c:	43a2      	bics	r2, r4
   12f0e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   12f12:	bf04      	itt	eq
   12f14:	f851 3b04 	ldreq.w	r3, [r1], #4
   12f18:	f84c 4b04 	streq.w	r4, [ip], #4
   12f1c:	d0ea      	beq.n	12ef4 <strcpy+0x38>
   12f1e:	4623      	mov	r3, r4
   12f20:	f80c 3b01 	strb.w	r3, [ip], #1
   12f24:	f013 0fff 	tst.w	r3, #255	; 0xff
   12f28:	ea4f 2333 	mov.w	r3, r3, ror #8
   12f2c:	d1f8      	bne.n	12f20 <strcpy+0x64>
   12f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12f32:	4770      	bx	lr
   12f34:	f011 0f01 	tst.w	r1, #1
   12f38:	d006      	beq.n	12f48 <strcpy+0x8c>
   12f3a:	f811 2b01 	ldrb.w	r2, [r1], #1
   12f3e:	f80c 2b01 	strb.w	r2, [ip], #1
   12f42:	2a00      	cmp	r2, #0
   12f44:	bf08      	it	eq
   12f46:	4770      	bxeq	lr
   12f48:	f011 0f02 	tst.w	r1, #2
   12f4c:	d0bf      	beq.n	12ece <strcpy+0x12>
   12f4e:	f831 2b02 	ldrh.w	r2, [r1], #2
   12f52:	f012 0fff 	tst.w	r2, #255	; 0xff
   12f56:	bf16      	itet	ne
   12f58:	f82c 2b02 	strhne.w	r2, [ip], #2
   12f5c:	f88c 2000 	strbeq.w	r2, [ip]
   12f60:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   12f64:	d1b3      	bne.n	12ece <strcpy+0x12>
   12f66:	4770      	bx	lr
   12f68:	f811 2b01 	ldrb.w	r2, [r1], #1
   12f6c:	f80c 2b01 	strb.w	r2, [ip], #1
   12f70:	2a00      	cmp	r2, #0
   12f72:	d1f9      	bne.n	12f68 <strcpy+0xac>
   12f74:	4770      	bx	lr
   12f76:	bf00      	nop
   12f78:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
   12f7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00012f80 <strlen>:
   12f80:	f890 f000 	pld	[r0]
   12f84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   12f88:	f020 0107 	bic.w	r1, r0, #7
   12f8c:	f06f 0c00 	mvn.w	ip, #0
   12f90:	f010 0407 	ands.w	r4, r0, #7
   12f94:	f891 f020 	pld	[r1, #32]
   12f98:	f040 8049 	bne.w	1302e <strlen+0xae>
   12f9c:	f04f 0400 	mov.w	r4, #0
   12fa0:	f06f 0007 	mvn.w	r0, #7
   12fa4:	e9d1 2300 	ldrd	r2, r3, [r1]
   12fa8:	f891 f040 	pld	[r1, #64]	; 0x40
   12fac:	f100 0008 	add.w	r0, r0, #8
   12fb0:	fa82 f24c 	uadd8	r2, r2, ip
   12fb4:	faa4 f28c 	sel	r2, r4, ip
   12fb8:	fa83 f34c 	uadd8	r3, r3, ip
   12fbc:	faa2 f38c 	sel	r3, r2, ip
   12fc0:	bb4b      	cbnz	r3, 13016 <strlen+0x96>
   12fc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   12fc6:	fa82 f24c 	uadd8	r2, r2, ip
   12fca:	f100 0008 	add.w	r0, r0, #8
   12fce:	faa4 f28c 	sel	r2, r4, ip
   12fd2:	fa83 f34c 	uadd8	r3, r3, ip
   12fd6:	faa2 f38c 	sel	r3, r2, ip
   12fda:	b9e3      	cbnz	r3, 13016 <strlen+0x96>
   12fdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   12fe0:	fa82 f24c 	uadd8	r2, r2, ip
   12fe4:	f100 0008 	add.w	r0, r0, #8
   12fe8:	faa4 f28c 	sel	r2, r4, ip
   12fec:	fa83 f34c 	uadd8	r3, r3, ip
   12ff0:	faa2 f38c 	sel	r3, r2, ip
   12ff4:	b97b      	cbnz	r3, 13016 <strlen+0x96>
   12ff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   12ffa:	f101 0120 	add.w	r1, r1, #32
   12ffe:	fa82 f24c 	uadd8	r2, r2, ip
   13002:	f100 0008 	add.w	r0, r0, #8
   13006:	faa4 f28c 	sel	r2, r4, ip
   1300a:	fa83 f34c 	uadd8	r3, r3, ip
   1300e:	faa2 f38c 	sel	r3, r2, ip
   13012:	2b00      	cmp	r3, #0
   13014:	d0c6      	beq.n	12fa4 <strlen+0x24>
   13016:	2a00      	cmp	r2, #0
   13018:	bf04      	itt	eq
   1301a:	3004      	addeq	r0, #4
   1301c:	461a      	moveq	r2, r3
   1301e:	ba12      	rev	r2, r2
   13020:	fab2 f282 	clz	r2, r2
   13024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   13028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   1302c:	4770      	bx	lr
   1302e:	e9d1 2300 	ldrd	r2, r3, [r1]
   13032:	f004 0503 	and.w	r5, r4, #3
   13036:	f1c4 0000 	rsb	r0, r4, #0
   1303a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1303e:	f014 0f04 	tst.w	r4, #4
   13042:	f891 f040 	pld	[r1, #64]	; 0x40
   13046:	fa0c f505 	lsl.w	r5, ip, r5
   1304a:	ea62 0205 	orn	r2, r2, r5
   1304e:	bf1c      	itt	ne
   13050:	ea63 0305 	ornne	r3, r3, r5
   13054:	4662      	movne	r2, ip
   13056:	f04f 0400 	mov.w	r4, #0
   1305a:	e7a9      	b.n	12fb0 <strlen+0x30>

0001305c <strncpy>:
   1305c:	ea40 0301 	orr.w	r3, r0, r1
   13060:	079b      	lsls	r3, r3, #30
   13062:	b470      	push	{r4, r5, r6}
   13064:	d12b      	bne.n	130be <strncpy+0x62>
   13066:	2a03      	cmp	r2, #3
   13068:	d929      	bls.n	130be <strncpy+0x62>
   1306a:	460c      	mov	r4, r1
   1306c:	4603      	mov	r3, r0
   1306e:	4621      	mov	r1, r4
   13070:	f854 6b04 	ldr.w	r6, [r4], #4
   13074:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   13078:	ea25 0506 	bic.w	r5, r5, r6
   1307c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   13080:	d106      	bne.n	13090 <strncpy+0x34>
   13082:	3a04      	subs	r2, #4
   13084:	2a03      	cmp	r2, #3
   13086:	f843 6b04 	str.w	r6, [r3], #4
   1308a:	4621      	mov	r1, r4
   1308c:	d8ef      	bhi.n	1306e <strncpy+0x12>
   1308e:	b1a2      	cbz	r2, 130ba <strncpy+0x5e>
   13090:	780c      	ldrb	r4, [r1, #0]
   13092:	701c      	strb	r4, [r3, #0]
   13094:	3a01      	subs	r2, #1
   13096:	3301      	adds	r3, #1
   13098:	3101      	adds	r1, #1
   1309a:	b13c      	cbz	r4, 130ac <strncpy+0x50>
   1309c:	b16a      	cbz	r2, 130ba <strncpy+0x5e>
   1309e:	f811 4b01 	ldrb.w	r4, [r1], #1
   130a2:	f803 4b01 	strb.w	r4, [r3], #1
   130a6:	3a01      	subs	r2, #1
   130a8:	2c00      	cmp	r4, #0
   130aa:	d1f7      	bne.n	1309c <strncpy+0x40>
   130ac:	b12a      	cbz	r2, 130ba <strncpy+0x5e>
   130ae:	441a      	add	r2, r3
   130b0:	2100      	movs	r1, #0
   130b2:	f803 1b01 	strb.w	r1, [r3], #1
   130b6:	429a      	cmp	r2, r3
   130b8:	d1fb      	bne.n	130b2 <strncpy+0x56>
   130ba:	bc70      	pop	{r4, r5, r6}
   130bc:	4770      	bx	lr
   130be:	4603      	mov	r3, r0
   130c0:	e7e5      	b.n	1308e <strncpy+0x32>
   130c2:	bf00      	nop

000130c4 <critical_factorization>:
   130c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   130c8:	f04f 0e01 	mov.w	lr, #1
   130cc:	4674      	mov	r4, lr
   130ce:	2500      	movs	r5, #0
   130d0:	f04f 36ff 	mov.w	r6, #4294967295
   130d4:	192b      	adds	r3, r5, r4
   130d6:	428b      	cmp	r3, r1
   130d8:	eb00 0706 	add.w	r7, r0, r6
   130dc:	d20d      	bcs.n	130fa <critical_factorization+0x36>
   130de:	5d3f      	ldrb	r7, [r7, r4]
   130e0:	f810 c003 	ldrb.w	ip, [r0, r3]
   130e4:	45bc      	cmp	ip, r7
   130e6:	d22d      	bcs.n	13144 <critical_factorization+0x80>
   130e8:	461d      	mov	r5, r3
   130ea:	2401      	movs	r4, #1
   130ec:	ebc6 0e03 	rsb	lr, r6, r3
   130f0:	192b      	adds	r3, r5, r4
   130f2:	428b      	cmp	r3, r1
   130f4:	eb00 0706 	add.w	r7, r0, r6
   130f8:	d3f1      	bcc.n	130de <critical_factorization+0x1a>
   130fa:	f04f 0801 	mov.w	r8, #1
   130fe:	f8c2 e000 	str.w	lr, [r2]
   13102:	4644      	mov	r4, r8
   13104:	2500      	movs	r5, #0
   13106:	f04f 37ff 	mov.w	r7, #4294967295
   1310a:	192b      	adds	r3, r5, r4
   1310c:	4299      	cmp	r1, r3
   1310e:	eb00 0e07 	add.w	lr, r0, r7
   13112:	d90e      	bls.n	13132 <critical_factorization+0x6e>
   13114:	f81e e004 	ldrb.w	lr, [lr, r4]
   13118:	f810 c003 	ldrb.w	ip, [r0, r3]
   1311c:	45f4      	cmp	ip, lr
   1311e:	d918      	bls.n	13152 <critical_factorization+0x8e>
   13120:	461d      	mov	r5, r3
   13122:	2401      	movs	r4, #1
   13124:	ebc7 0803 	rsb	r8, r7, r3
   13128:	192b      	adds	r3, r5, r4
   1312a:	4299      	cmp	r1, r3
   1312c:	eb00 0e07 	add.w	lr, r0, r7
   13130:	d8f0      	bhi.n	13114 <critical_factorization+0x50>
   13132:	3701      	adds	r7, #1
   13134:	1c70      	adds	r0, r6, #1
   13136:	4287      	cmp	r7, r0
   13138:	bf24      	itt	cs
   1313a:	f8c2 8000 	strcs.w	r8, [r2]
   1313e:	4638      	movcs	r0, r7
   13140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13144:	d00c      	beq.n	13160 <critical_factorization+0x9c>
   13146:	f04f 0e01 	mov.w	lr, #1
   1314a:	462e      	mov	r6, r5
   1314c:	4674      	mov	r4, lr
   1314e:	4475      	add	r5, lr
   13150:	e7c0      	b.n	130d4 <critical_factorization+0x10>
   13152:	d00c      	beq.n	1316e <critical_factorization+0xaa>
   13154:	f04f 0801 	mov.w	r8, #1
   13158:	462f      	mov	r7, r5
   1315a:	4644      	mov	r4, r8
   1315c:	4445      	add	r5, r8
   1315e:	e7d4      	b.n	1310a <critical_factorization+0x46>
   13160:	4574      	cmp	r4, lr
   13162:	bf09      	itett	eq
   13164:	46a6      	moveq	lr, r4
   13166:	3401      	addne	r4, #1
   13168:	461d      	moveq	r5, r3
   1316a:	2401      	moveq	r4, #1
   1316c:	e7b2      	b.n	130d4 <critical_factorization+0x10>
   1316e:	4544      	cmp	r4, r8
   13170:	bf09      	itett	eq
   13172:	46a0      	moveq	r8, r4
   13174:	3401      	addne	r4, #1
   13176:	461d      	moveq	r5, r3
   13178:	2401      	moveq	r4, #1
   1317a:	e7c6      	b.n	1310a <critical_factorization+0x46>

0001317c <two_way_long_needle>:
   1317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13180:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   13184:	4616      	mov	r6, r2
   13186:	4605      	mov	r5, r0
   13188:	468b      	mov	fp, r1
   1318a:	4610      	mov	r0, r2
   1318c:	4619      	mov	r1, r3
   1318e:	aa03      	add	r2, sp, #12
   13190:	461c      	mov	r4, r3
   13192:	f7ff ff97 	bl	130c4 <critical_factorization>
   13196:	ab03      	add	r3, sp, #12
   13198:	4681      	mov	r9, r0
   1319a:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   1319e:	f843 4f04 	str.w	r4, [r3, #4]!
   131a2:	4293      	cmp	r3, r2
   131a4:	d1fb      	bne.n	1319e <two_way_long_needle+0x22>
   131a6:	b14c      	cbz	r4, 131bc <two_way_long_needle+0x40>
   131a8:	1e63      	subs	r3, r4, #1
   131aa:	4632      	mov	r2, r6
   131ac:	a804      	add	r0, sp, #16
   131ae:	f812 1b01 	ldrb.w	r1, [r2], #1
   131b2:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   131b6:	f113 33ff 	adds.w	r3, r3, #4294967295
   131ba:	d2f8      	bcs.n	131ae <two_way_long_needle+0x32>
   131bc:	9903      	ldr	r1, [sp, #12]
   131be:	464a      	mov	r2, r9
   131c0:	4431      	add	r1, r6
   131c2:	4630      	mov	r0, r6
   131c4:	f7ff f984 	bl	124d0 <memcmp>
   131c8:	2800      	cmp	r0, #0
   131ca:	d171      	bne.n	132b0 <two_way_long_needle+0x134>
   131cc:	f109 33ff 	add.w	r3, r9, #4294967295
   131d0:	9300      	str	r3, [sp, #0]
   131d2:	18f3      	adds	r3, r6, r3
   131d4:	4682      	mov	sl, r0
   131d6:	9301      	str	r3, [sp, #4]
   131d8:	4623      	mov	r3, r4
   131da:	4680      	mov	r8, r0
   131dc:	4654      	mov	r4, sl
   131de:	4658      	mov	r0, fp
   131e0:	469a      	mov	sl, r3
   131e2:	eb08 070a 	add.w	r7, r8, sl
   131e6:	1a3a      	subs	r2, r7, r0
   131e8:	2100      	movs	r1, #0
   131ea:	4428      	add	r0, r5
   131ec:	f7ff f920 	bl	12430 <memchr>
   131f0:	2800      	cmp	r0, #0
   131f2:	d158      	bne.n	132a6 <two_way_long_needle+0x12a>
   131f4:	2f00      	cmp	r7, #0
   131f6:	d056      	beq.n	132a6 <two_way_long_needle+0x12a>
   131f8:	19eb      	adds	r3, r5, r7
   131fa:	aa04      	add	r2, sp, #16
   131fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   13200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13204:	b14b      	cbz	r3, 1321a <two_way_long_needle+0x9e>
   13206:	b124      	cbz	r4, 13212 <two_way_long_needle+0x96>
   13208:	9a03      	ldr	r2, [sp, #12]
   1320a:	4293      	cmp	r3, r2
   1320c:	d201      	bcs.n	13212 <two_way_long_needle+0x96>
   1320e:	ebc2 030a 	rsb	r3, r2, sl
   13212:	4498      	add	r8, r3
   13214:	2400      	movs	r4, #0
   13216:	4638      	mov	r0, r7
   13218:	e7e3      	b.n	131e2 <two_way_long_needle+0x66>
   1321a:	454c      	cmp	r4, r9
   1321c:	4623      	mov	r3, r4
   1321e:	f10a 3eff 	add.w	lr, sl, #4294967295
   13222:	bf38      	it	cc
   13224:	464b      	movcc	r3, r9
   13226:	4573      	cmp	r3, lr
   13228:	d213      	bcs.n	13252 <two_way_long_needle+0xd6>
   1322a:	eb08 0203 	add.w	r2, r8, r3
   1322e:	f816 c003 	ldrb.w	ip, [r6, r3]
   13232:	5ca8      	ldrb	r0, [r5, r2]
   13234:	4584      	cmp	ip, r0
   13236:	442a      	add	r2, r5
   13238:	eb06 0103 	add.w	r1, r6, r3
   1323c:	d006      	beq.n	1324c <two_way_long_needle+0xd0>
   1323e:	e02e      	b.n	1329e <two_way_long_needle+0x122>
   13240:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   13244:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   13248:	4584      	cmp	ip, r0
   1324a:	d128      	bne.n	1329e <two_way_long_needle+0x122>
   1324c:	3301      	adds	r3, #1
   1324e:	4573      	cmp	r3, lr
   13250:	d3f6      	bcc.n	13240 <two_way_long_needle+0xc4>
   13252:	454c      	cmp	r4, r9
   13254:	9900      	ldr	r1, [sp, #0]
   13256:	f080 808b 	bcs.w	13370 <two_way_long_needle+0x1f4>
   1325a:	9b00      	ldr	r3, [sp, #0]
   1325c:	9801      	ldr	r0, [sp, #4]
   1325e:	eb08 0203 	add.w	r2, r8, r3
   13262:	7803      	ldrb	r3, [r0, #0]
   13264:	5ca8      	ldrb	r0, [r5, r2]
   13266:	4283      	cmp	r3, r0
   13268:	442a      	add	r2, r5
   1326a:	f040 8081 	bne.w	13370 <two_way_long_needle+0x1f4>
   1326e:	9b01      	ldr	r3, [sp, #4]
   13270:	eb06 0b04 	add.w	fp, r6, r4
   13274:	e006      	b.n	13284 <two_way_long_needle+0x108>
   13276:	f813 ed01 	ldrb.w	lr, [r3, #-1]!
   1327a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   1327e:	4586      	cmp	lr, r0
   13280:	d104      	bne.n	1328c <two_way_long_needle+0x110>
   13282:	4661      	mov	r1, ip
   13284:	459b      	cmp	fp, r3
   13286:	f101 3cff 	add.w	ip, r1, #4294967295
   1328a:	d1f4      	bne.n	13276 <two_way_long_needle+0xfa>
   1328c:	3401      	adds	r4, #1
   1328e:	428c      	cmp	r4, r1
   13290:	d870      	bhi.n	13374 <two_way_long_needle+0x1f8>
   13292:	9c03      	ldr	r4, [sp, #12]
   13294:	4638      	mov	r0, r7
   13296:	44a0      	add	r8, r4
   13298:	ebc4 040a 	rsb	r4, r4, sl
   1329c:	e7a1      	b.n	131e2 <two_way_long_needle+0x66>
   1329e:	f1c9 0201 	rsb	r2, r9, #1
   132a2:	4490      	add	r8, r2
   132a4:	e7b5      	b.n	13212 <two_way_long_needle+0x96>
   132a6:	2000      	movs	r0, #0
   132a8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   132ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132b0:	ebc9 0304 	rsb	r3, r9, r4
   132b4:	454b      	cmp	r3, r9
   132b6:	bf38      	it	cc
   132b8:	464b      	movcc	r3, r9
   132ba:	3301      	adds	r3, #1
   132bc:	f109 38ff 	add.w	r8, r9, #4294967295
   132c0:	9303      	str	r3, [sp, #12]
   132c2:	eb06 0308 	add.w	r3, r6, r8
   132c6:	4658      	mov	r0, fp
   132c8:	f04f 0a00 	mov.w	sl, #0
   132cc:	46cb      	mov	fp, r9
   132ce:	4699      	mov	r9, r3
   132d0:	eb0a 0704 	add.w	r7, sl, r4
   132d4:	1a3a      	subs	r2, r7, r0
   132d6:	2100      	movs	r1, #0
   132d8:	4428      	add	r0, r5
   132da:	f7ff f8a9 	bl	12430 <memchr>
   132de:	2800      	cmp	r0, #0
   132e0:	d1e1      	bne.n	132a6 <two_way_long_needle+0x12a>
   132e2:	2f00      	cmp	r7, #0
   132e4:	d0df      	beq.n	132a6 <two_way_long_needle+0x12a>
   132e6:	19eb      	adds	r3, r5, r7
   132e8:	aa04      	add	r2, sp, #16
   132ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   132ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   132f2:	bba3      	cbnz	r3, 1335e <two_way_long_needle+0x1e2>
   132f4:	1e61      	subs	r1, r4, #1
   132f6:	458b      	cmp	fp, r1
   132f8:	d215      	bcs.n	13326 <two_way_long_needle+0x1aa>
   132fa:	eb0a 020b 	add.w	r2, sl, fp
   132fe:	f816 300b 	ldrb.w	r3, [r6, fp]
   13302:	f815 e002 	ldrb.w	lr, [r5, r2]
   13306:	459e      	cmp	lr, r3
   13308:	442a      	add	r2, r5
   1330a:	eb06 000b 	add.w	r0, r6, fp
   1330e:	465b      	mov	r3, fp
   13310:	d006      	beq.n	13320 <two_way_long_needle+0x1a4>
   13312:	e027      	b.n	13364 <two_way_long_needle+0x1e8>
   13314:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   13318:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   1331c:	45f4      	cmp	ip, lr
   1331e:	d121      	bne.n	13364 <two_way_long_needle+0x1e8>
   13320:	3301      	adds	r3, #1
   13322:	428b      	cmp	r3, r1
   13324:	d3f6      	bcc.n	13314 <two_way_long_needle+0x198>
   13326:	f1b8 3fff 	cmp.w	r8, #4294967295
   1332a:	d011      	beq.n	13350 <two_way_long_needle+0x1d4>
   1332c:	eb0a 0208 	add.w	r2, sl, r8
   13330:	f899 1000 	ldrb.w	r1, [r9]
   13334:	5cab      	ldrb	r3, [r5, r2]
   13336:	4299      	cmp	r1, r3
   13338:	442a      	add	r2, r5
   1333a:	d10f      	bne.n	1335c <two_way_long_needle+0x1e0>
   1333c:	464b      	mov	r3, r9
   1333e:	e005      	b.n	1334c <two_way_long_needle+0x1d0>
   13340:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   13344:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   13348:	4288      	cmp	r0, r1
   1334a:	d107      	bne.n	1335c <two_way_long_needle+0x1e0>
   1334c:	42b3      	cmp	r3, r6
   1334e:	d1f7      	bne.n	13340 <two_way_long_needle+0x1c4>
   13350:	eb05 000a 	add.w	r0, r5, sl
   13354:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   13358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1335c:	9b03      	ldr	r3, [sp, #12]
   1335e:	449a      	add	sl, r3
   13360:	4638      	mov	r0, r7
   13362:	e7b5      	b.n	132d0 <two_way_long_needle+0x154>
   13364:	f1cb 0201 	rsb	r2, fp, #1
   13368:	4492      	add	sl, r2
   1336a:	449a      	add	sl, r3
   1336c:	4638      	mov	r0, r7
   1336e:	e7af      	b.n	132d0 <two_way_long_needle+0x154>
   13370:	4649      	mov	r1, r9
   13372:	e78b      	b.n	1328c <two_way_long_needle+0x110>
   13374:	eb05 0008 	add.w	r0, r5, r8
   13378:	e796      	b.n	132a8 <two_way_long_needle+0x12c>
   1337a:	bf00      	nop

0001337c <strstr>:
   1337c:	7803      	ldrb	r3, [r0, #0]
   1337e:	2b00      	cmp	r3, #0
   13380:	f000 8104 	beq.w	1358c <strstr+0x210>
   13384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13388:	f891 8000 	ldrb.w	r8, [r1]
   1338c:	b085      	sub	sp, #20
   1338e:	4644      	mov	r4, r8
   13390:	f1b8 0f00 	cmp.w	r8, #0
   13394:	d016      	beq.n	133c4 <strstr+0x48>
   13396:	4686      	mov	lr, r0
   13398:	f101 0c01 	add.w	ip, r1, #1
   1339c:	2701      	movs	r7, #1
   1339e:	e003      	b.n	133a8 <strstr+0x2c>
   133a0:	f812 4b01 	ldrb.w	r4, [r2], #1
   133a4:	b16c      	cbz	r4, 133c2 <strstr+0x46>
   133a6:	4694      	mov	ip, r2
   133a8:	429c      	cmp	r4, r3
   133aa:	bf14      	ite	ne
   133ac:	2700      	movne	r7, #0
   133ae:	f007 0701 	andeq.w	r7, r7, #1
   133b2:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
   133b6:	4662      	mov	r2, ip
   133b8:	2b00      	cmp	r3, #0
   133ba:	d1f1      	bne.n	133a0 <strstr+0x24>
   133bc:	f89c 3000 	ldrb.w	r3, [ip]
   133c0:	bb0b      	cbnz	r3, 13406 <strstr+0x8a>
   133c2:	b117      	cbz	r7, 133ca <strstr+0x4e>
   133c4:	b005      	add	sp, #20
   133c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ca:	460e      	mov	r6, r1
   133cc:	4605      	mov	r5, r0
   133ce:	4641      	mov	r1, r8
   133d0:	3001      	adds	r0, #1
   133d2:	ebc6 040c 	rsb	r4, r6, ip
   133d6:	f7ff fb93 	bl	12b00 <strchr>
   133da:	4607      	mov	r7, r0
   133dc:	b198      	cbz	r0, 13406 <strstr+0x8a>
   133de:	2c01      	cmp	r4, #1
   133e0:	d0f0      	beq.n	133c4 <strstr+0x48>
   133e2:	1928      	adds	r0, r5, r4
   133e4:	4287      	cmp	r7, r0
   133e6:	bf94      	ite	ls
   133e8:	ebc7 0b00 	rsbls	fp, r7, r0
   133ec:	f04f 0b01 	movhi.w	fp, #1
   133f0:	2c1f      	cmp	r4, #31
   133f2:	d90c      	bls.n	1340e <strstr+0x92>
   133f4:	4623      	mov	r3, r4
   133f6:	4632      	mov	r2, r6
   133f8:	4659      	mov	r1, fp
   133fa:	4638      	mov	r0, r7
   133fc:	f7ff febe 	bl	1317c <two_way_long_needle>
   13400:	b005      	add	sp, #20
   13402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13406:	2000      	movs	r0, #0
   13408:	b005      	add	sp, #20
   1340a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1340e:	aa03      	add	r2, sp, #12
   13410:	4621      	mov	r1, r4
   13412:	4630      	mov	r0, r6
   13414:	f7ff fe56 	bl	130c4 <critical_factorization>
   13418:	9903      	ldr	r1, [sp, #12]
   1341a:	4680      	mov	r8, r0
   1341c:	4602      	mov	r2, r0
   1341e:	4431      	add	r1, r6
   13420:	4630      	mov	r0, r6
   13422:	f7ff f855 	bl	124d0 <memcmp>
   13426:	2800      	cmp	r0, #0
   13428:	d158      	bne.n	134dc <strstr+0x160>
   1342a:	f108 33ff 	add.w	r3, r8, #4294967295
   1342e:	9301      	str	r3, [sp, #4]
   13430:	18f3      	adds	r3, r6, r3
   13432:	4681      	mov	r9, r0
   13434:	4605      	mov	r5, r0
   13436:	9300      	str	r3, [sp, #0]
   13438:	4658      	mov	r0, fp
   1343a:	46b2      	mov	sl, r6
   1343c:	1966      	adds	r6, r4, r5
   1343e:	1a32      	subs	r2, r6, r0
   13440:	2100      	movs	r1, #0
   13442:	4438      	add	r0, r7
   13444:	f7fe fff4 	bl	12430 <memchr>
   13448:	2800      	cmp	r0, #0
   1344a:	d1dc      	bne.n	13406 <strstr+0x8a>
   1344c:	2e00      	cmp	r6, #0
   1344e:	d0da      	beq.n	13406 <strstr+0x8a>
   13450:	45c8      	cmp	r8, r9
   13452:	4643      	mov	r3, r8
   13454:	bf38      	it	cc
   13456:	464b      	movcc	r3, r9
   13458:	429c      	cmp	r4, r3
   1345a:	d912      	bls.n	13482 <strstr+0x106>
   1345c:	195a      	adds	r2, r3, r5
   1345e:	f81a 1003 	ldrb.w	r1, [sl, r3]
   13462:	5cb8      	ldrb	r0, [r7, r2]
   13464:	4288      	cmp	r0, r1
   13466:	443a      	add	r2, r7
   13468:	eb0a 0e03 	add.w	lr, sl, r3
   1346c:	d006      	beq.n	1347c <strstr+0x100>
   1346e:	e02d      	b.n	134cc <strstr+0x150>
   13470:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   13474:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   13478:	4288      	cmp	r0, r1
   1347a:	d127      	bne.n	134cc <strstr+0x150>
   1347c:	3301      	adds	r3, #1
   1347e:	429c      	cmp	r4, r3
   13480:	d8f6      	bhi.n	13470 <strstr+0xf4>
   13482:	9b01      	ldr	r3, [sp, #4]
   13484:	45c8      	cmp	r8, r9
   13486:	4619      	mov	r1, r3
   13488:	f240 8083 	bls.w	13592 <strstr+0x216>
   1348c:	18ea      	adds	r2, r5, r3
   1348e:	9800      	ldr	r0, [sp, #0]
   13490:	7803      	ldrb	r3, [r0, #0]
   13492:	5cb8      	ldrb	r0, [r7, r2]
   13494:	4283      	cmp	r3, r0
   13496:	443a      	add	r2, r7
   13498:	d17b      	bne.n	13592 <strstr+0x216>
   1349a:	9b00      	ldr	r3, [sp, #0]
   1349c:	eb0a 0b09 	add.w	fp, sl, r9
   134a0:	e006      	b.n	134b0 <strstr+0x134>
   134a2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   134a6:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   134aa:	45f4      	cmp	ip, lr
   134ac:	d104      	bne.n	134b8 <strstr+0x13c>
   134ae:	4601      	mov	r1, r0
   134b0:	455b      	cmp	r3, fp
   134b2:	f101 30ff 	add.w	r0, r1, #4294967295
   134b6:	d1f4      	bne.n	134a2 <strstr+0x126>
   134b8:	f109 0901 	add.w	r9, r9, #1
   134bc:	4589      	cmp	r9, r1
   134be:	d857      	bhi.n	13570 <strstr+0x1f4>
   134c0:	9b03      	ldr	r3, [sp, #12]
   134c2:	4630      	mov	r0, r6
   134c4:	441d      	add	r5, r3
   134c6:	ebc3 0904 	rsb	r9, r3, r4
   134ca:	e7b7      	b.n	1343c <strstr+0xc0>
   134cc:	f1c8 0201 	rsb	r2, r8, #1
   134d0:	4415      	add	r5, r2
   134d2:	441d      	add	r5, r3
   134d4:	f04f 0900 	mov.w	r9, #0
   134d8:	4630      	mov	r0, r6
   134da:	e7af      	b.n	1343c <strstr+0xc0>
   134dc:	ebc8 0304 	rsb	r3, r8, r4
   134e0:	4543      	cmp	r3, r8
   134e2:	bf38      	it	cc
   134e4:	4643      	movcc	r3, r8
   134e6:	3301      	adds	r3, #1
   134e8:	f108 39ff 	add.w	r9, r8, #4294967295
   134ec:	9303      	str	r3, [sp, #12]
   134ee:	eb06 0309 	add.w	r3, r6, r9
   134f2:	4658      	mov	r0, fp
   134f4:	2500      	movs	r5, #0
   134f6:	46bb      	mov	fp, r7
   134f8:	469a      	mov	sl, r3
   134fa:	1967      	adds	r7, r4, r5
   134fc:	1a3a      	subs	r2, r7, r0
   134fe:	2100      	movs	r1, #0
   13500:	4458      	add	r0, fp
   13502:	f7fe ff95 	bl	12430 <memchr>
   13506:	2800      	cmp	r0, #0
   13508:	f47f af7d 	bne.w	13406 <strstr+0x8a>
   1350c:	2f00      	cmp	r7, #0
   1350e:	f43f af7a 	beq.w	13406 <strstr+0x8a>
   13512:	4544      	cmp	r4, r8
   13514:	d915      	bls.n	13542 <strstr+0x1c6>
   13516:	eb08 0205 	add.w	r2, r8, r5
   1351a:	f816 3008 	ldrb.w	r3, [r6, r8]
   1351e:	f81b 0002 	ldrb.w	r0, [fp, r2]
   13522:	4298      	cmp	r0, r3
   13524:	445a      	add	r2, fp
   13526:	eb06 0108 	add.w	r1, r6, r8
   1352a:	4643      	mov	r3, r8
   1352c:	d006      	beq.n	1353c <strstr+0x1c0>
   1352e:	e023      	b.n	13578 <strstr+0x1fc>
   13530:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   13534:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   13538:	4586      	cmp	lr, r0
   1353a:	d11d      	bne.n	13578 <strstr+0x1fc>
   1353c:	3301      	adds	r3, #1
   1353e:	429c      	cmp	r4, r3
   13540:	d8f6      	bhi.n	13530 <strstr+0x1b4>
   13542:	f1b9 3fff 	cmp.w	r9, #4294967295
   13546:	d012      	beq.n	1356e <strstr+0x1f2>
   13548:	eb05 0209 	add.w	r2, r5, r9
   1354c:	f89a 1000 	ldrb.w	r1, [sl]
   13550:	f81b 3002 	ldrb.w	r3, [fp, r2]
   13554:	4299      	cmp	r1, r3
   13556:	445a      	add	r2, fp
   13558:	d114      	bne.n	13584 <strstr+0x208>
   1355a:	4653      	mov	r3, sl
   1355c:	e005      	b.n	1356a <strstr+0x1ee>
   1355e:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   13562:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   13566:	4288      	cmp	r0, r1
   13568:	d10c      	bne.n	13584 <strstr+0x208>
   1356a:	42b3      	cmp	r3, r6
   1356c:	d1f7      	bne.n	1355e <strstr+0x1e2>
   1356e:	465f      	mov	r7, fp
   13570:	1978      	adds	r0, r7, r5
   13572:	b005      	add	sp, #20
   13574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13578:	f1c8 0201 	rsb	r2, r8, #1
   1357c:	4415      	add	r5, r2
   1357e:	441d      	add	r5, r3
   13580:	4638      	mov	r0, r7
   13582:	e7ba      	b.n	134fa <strstr+0x17e>
   13584:	9b03      	ldr	r3, [sp, #12]
   13586:	4638      	mov	r0, r7
   13588:	441d      	add	r5, r3
   1358a:	e7b6      	b.n	134fa <strstr+0x17e>
   1358c:	780b      	ldrb	r3, [r1, #0]
   1358e:	b913      	cbnz	r3, 13596 <strstr+0x21a>
   13590:	4770      	bx	lr
   13592:	4641      	mov	r1, r8
   13594:	e790      	b.n	134b8 <strstr+0x13c>
   13596:	2000      	movs	r0, #0
   13598:	4770      	bx	lr
   1359a:	bf00      	nop

0001359c <_strtol_l.isra.0>:
   1359c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   135a4:	460f      	mov	r7, r1
   135a6:	4680      	mov	r8, r0
   135a8:	4616      	mov	r6, r2
   135aa:	461d      	mov	r5, r3
   135ac:	468b      	mov	fp, r1
   135ae:	e000      	b.n	135b2 <_strtol_l.isra.0+0x16>
   135b0:	46a3      	mov	fp, r4
   135b2:	465c      	mov	r4, fp
   135b4:	4648      	mov	r0, r9
   135b6:	f814 ab01 	ldrb.w	sl, [r4], #1
   135ba:	f7fe fc49 	bl	11e50 <__locale_ctype_ptr_l>
   135be:	4450      	add	r0, sl
   135c0:	7841      	ldrb	r1, [r0, #1]
   135c2:	f001 0108 	and.w	r1, r1, #8
   135c6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   135ca:	2900      	cmp	r1, #0
   135cc:	d1f0      	bne.n	135b0 <_strtol_l.isra.0+0x14>
   135ce:	4652      	mov	r2, sl
   135d0:	2a2d      	cmp	r2, #45	; 0x2d
   135d2:	d061      	beq.n	13698 <_strtol_l.isra.0+0xfc>
   135d4:	2a2b      	cmp	r2, #43	; 0x2b
   135d6:	bf04      	itt	eq
   135d8:	f89b 2001 	ldrbeq.w	r2, [fp, #1]
   135dc:	f10b 0402 	addeq.w	r4, fp, #2
   135e0:	2d00      	cmp	r5, #0
   135e2:	d043      	beq.n	1366c <_strtol_l.isra.0+0xd0>
   135e4:	2d10      	cmp	r5, #16
   135e6:	d065      	beq.n	136b4 <_strtol_l.isra.0+0x118>
   135e8:	46a9      	mov	r9, r5
   135ea:	f1bc 0f00 	cmp.w	ip, #0
   135ee:	bf0c      	ite	eq
   135f0:	f06f 4a00 	mvneq.w	sl, #2147483648	; 0x80000000
   135f4:	f04f 4a00 	movne.w	sl, #2147483648	; 0x80000000
   135f8:	2100      	movs	r1, #0
   135fa:	fbba fef9 	udiv	lr, sl, r9
   135fe:	4608      	mov	r0, r1
   13600:	fb09 aa1e 	mls	sl, r9, lr, sl
   13604:	e005      	b.n	13612 <_strtol_l.isra.0+0x76>
   13606:	d029      	beq.n	1365c <_strtol_l.isra.0+0xc0>
   13608:	fb09 3000 	mla	r0, r9, r0, r3
   1360c:	2101      	movs	r1, #1
   1360e:	f814 2b01 	ldrb.w	r2, [r4], #1
   13612:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   13616:	2b09      	cmp	r3, #9
   13618:	d905      	bls.n	13626 <_strtol_l.isra.0+0x8a>
   1361a:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   1361e:	2b19      	cmp	r3, #25
   13620:	d80a      	bhi.n	13638 <_strtol_l.isra.0+0x9c>
   13622:	f1a2 0337 	sub.w	r3, r2, #55	; 0x37
   13626:	429d      	cmp	r5, r3
   13628:	dd0e      	ble.n	13648 <_strtol_l.isra.0+0xac>
   1362a:	1c4a      	adds	r2, r1, #1
   1362c:	d0ef      	beq.n	1360e <_strtol_l.isra.0+0x72>
   1362e:	4586      	cmp	lr, r0
   13630:	d2e9      	bcs.n	13606 <_strtol_l.isra.0+0x6a>
   13632:	f04f 31ff 	mov.w	r1, #4294967295
   13636:	e7ea      	b.n	1360e <_strtol_l.isra.0+0x72>
   13638:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   1363c:	2b19      	cmp	r3, #25
   1363e:	d803      	bhi.n	13648 <_strtol_l.isra.0+0xac>
   13640:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   13644:	429d      	cmp	r5, r3
   13646:	dcf0      	bgt.n	1362a <_strtol_l.isra.0+0x8e>
   13648:	1c4b      	adds	r3, r1, #1
   1364a:	d015      	beq.n	13678 <_strtol_l.isra.0+0xdc>
   1364c:	f1bc 0f00 	cmp.w	ip, #0
   13650:	d110      	bne.n	13674 <_strtol_l.isra.0+0xd8>
   13652:	b14e      	cbz	r6, 13668 <_strtol_l.isra.0+0xcc>
   13654:	b9e1      	cbnz	r1, 13690 <_strtol_l.isra.0+0xf4>
   13656:	6037      	str	r7, [r6, #0]
   13658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1365c:	459a      	cmp	sl, r3
   1365e:	dad3      	bge.n	13608 <_strtol_l.isra.0+0x6c>
   13660:	4670      	mov	r0, lr
   13662:	f04f 31ff 	mov.w	r1, #4294967295
   13666:	e7d2      	b.n	1360e <_strtol_l.isra.0+0x72>
   13668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1366c:	2a30      	cmp	r2, #48	; 0x30
   1366e:	d01a      	beq.n	136a6 <_strtol_l.isra.0+0x10a>
   13670:	250a      	movs	r5, #10
   13672:	e7b9      	b.n	135e8 <_strtol_l.isra.0+0x4c>
   13674:	4240      	negs	r0, r0
   13676:	e7ec      	b.n	13652 <_strtol_l.isra.0+0xb6>
   13678:	f1bc 0f00 	cmp.w	ip, #0
   1367c:	f04f 0322 	mov.w	r3, #34	; 0x22
   13680:	bf0c      	ite	eq
   13682:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13686:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   1368a:	f8c8 3000 	str.w	r3, [r8]
   1368e:	b1f6      	cbz	r6, 136ce <_strtol_l.isra.0+0x132>
   13690:	1e67      	subs	r7, r4, #1
   13692:	6037      	str	r7, [r6, #0]
   13694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13698:	f10b 0402 	add.w	r4, fp, #2
   1369c:	f89b 2001 	ldrb.w	r2, [fp, #1]
   136a0:	f04f 0c01 	mov.w	ip, #1
   136a4:	e79c      	b.n	135e0 <_strtol_l.isra.0+0x44>
   136a6:	7823      	ldrb	r3, [r4, #0]
   136a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   136ac:	2b58      	cmp	r3, #88	; 0x58
   136ae:	d008      	beq.n	136c2 <_strtol_l.isra.0+0x126>
   136b0:	2508      	movs	r5, #8
   136b2:	e799      	b.n	135e8 <_strtol_l.isra.0+0x4c>
   136b4:	2a30      	cmp	r2, #48	; 0x30
   136b6:	d197      	bne.n	135e8 <_strtol_l.isra.0+0x4c>
   136b8:	7823      	ldrb	r3, [r4, #0]
   136ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   136be:	2b58      	cmp	r3, #88	; 0x58
   136c0:	d192      	bne.n	135e8 <_strtol_l.isra.0+0x4c>
   136c2:	f04f 0910 	mov.w	r9, #16
   136c6:	7862      	ldrb	r2, [r4, #1]
   136c8:	464d      	mov	r5, r9
   136ca:	3402      	adds	r4, #2
   136cc:	e78d      	b.n	135ea <_strtol_l.isra.0+0x4e>
   136ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d2:	bf00      	nop

000136d4 <strtol>:
   136d4:	b530      	push	{r4, r5, lr}
   136d6:	4c08      	ldr	r4, [pc, #32]	; (136f8 <strtol+0x24>)
   136d8:	4b08      	ldr	r3, [pc, #32]	; (136fc <strtol+0x28>)
   136da:	6825      	ldr	r5, [r4, #0]
   136dc:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   136de:	b083      	sub	sp, #12
   136e0:	2c00      	cmp	r4, #0
   136e2:	bf08      	it	eq
   136e4:	461c      	moveq	r4, r3
   136e6:	9400      	str	r4, [sp, #0]
   136e8:	4613      	mov	r3, r2
   136ea:	460a      	mov	r2, r1
   136ec:	4601      	mov	r1, r0
   136ee:	4628      	mov	r0, r5
   136f0:	f7ff ff54 	bl	1359c <_strtol_l.isra.0>
   136f4:	b003      	add	sp, #12
   136f6:	bd30      	pop	{r4, r5, pc}
   136f8:	1fff4fe0 	.word	0x1fff4fe0
   136fc:	1fff4fe4 	.word	0x1fff4fe4

00013700 <_svfprintf_r>:
   13700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13704:	b0c1      	sub	sp, #260	; 0x104
   13706:	460c      	mov	r4, r1
   13708:	9105      	str	r1, [sp, #20]
   1370a:	4615      	mov	r5, r2
   1370c:	930a      	str	r3, [sp, #40]	; 0x28
   1370e:	9006      	str	r0, [sp, #24]
   13710:	f002 fdea 	bl	162e8 <_localeconv_r>
   13714:	6803      	ldr	r3, [r0, #0]
   13716:	9313      	str	r3, [sp, #76]	; 0x4c
   13718:	4618      	mov	r0, r3
   1371a:	f7ff fc31 	bl	12f80 <strlen>
   1371e:	89a3      	ldrh	r3, [r4, #12]
   13720:	9012      	str	r0, [sp, #72]	; 0x48
   13722:	061e      	lsls	r6, r3, #24
   13724:	d503      	bpl.n	1372e <_svfprintf_r+0x2e>
   13726:	6923      	ldr	r3, [r4, #16]
   13728:	2b00      	cmp	r3, #0
   1372a:	f001 8131 	beq.w	14990 <_svfprintf_r+0x1290>
   1372e:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 139c8 <_svfprintf_r+0x2c8>
   13732:	2300      	movs	r3, #0
   13734:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   13738:	930e      	str	r3, [sp, #56]	; 0x38
   1373a:	9325      	str	r3, [sp, #148]	; 0x94
   1373c:	9324      	str	r3, [sp, #144]	; 0x90
   1373e:	9315      	str	r3, [sp, #84]	; 0x54
   13740:	9307      	str	r3, [sp, #28]
   13742:	f8df a290 	ldr.w	sl, [pc, #656]	; 139d4 <_svfprintf_r+0x2d4>
   13746:	ab30      	add	r3, sp, #192	; 0xc0
   13748:	9323      	str	r3, [sp, #140]	; 0x8c
   1374a:	4699      	mov	r9, r3
   1374c:	46a8      	mov	r8, r5
   1374e:	f898 3000 	ldrb.w	r3, [r8]
   13752:	4644      	mov	r4, r8
   13754:	b1eb      	cbz	r3, 13792 <_svfprintf_r+0x92>
   13756:	2b25      	cmp	r3, #37	; 0x25
   13758:	d102      	bne.n	13760 <_svfprintf_r+0x60>
   1375a:	e01a      	b.n	13792 <_svfprintf_r+0x92>
   1375c:	2b25      	cmp	r3, #37	; 0x25
   1375e:	d003      	beq.n	13768 <_svfprintf_r+0x68>
   13760:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   13764:	2b00      	cmp	r3, #0
   13766:	d1f9      	bne.n	1375c <_svfprintf_r+0x5c>
   13768:	ebc8 0504 	rsb	r5, r8, r4
   1376c:	b18d      	cbz	r5, 13792 <_svfprintf_r+0x92>
   1376e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13770:	9a25      	ldr	r2, [sp, #148]	; 0x94
   13772:	f8c9 8000 	str.w	r8, [r9]
   13776:	3301      	adds	r3, #1
   13778:	442a      	add	r2, r5
   1377a:	2b07      	cmp	r3, #7
   1377c:	f8c9 5004 	str.w	r5, [r9, #4]
   13780:	9225      	str	r2, [sp, #148]	; 0x94
   13782:	9324      	str	r3, [sp, #144]	; 0x90
   13784:	f300 80a6 	bgt.w	138d4 <_svfprintf_r+0x1d4>
   13788:	f109 0908 	add.w	r9, r9, #8
   1378c:	9b07      	ldr	r3, [sp, #28]
   1378e:	442b      	add	r3, r5
   13790:	9307      	str	r3, [sp, #28]
   13792:	7823      	ldrb	r3, [r4, #0]
   13794:	2b00      	cmp	r3, #0
   13796:	f000 80a6 	beq.w	138e6 <_svfprintf_r+0x1e6>
   1379a:	2300      	movs	r3, #0
   1379c:	461a      	mov	r2, r3
   1379e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   137a2:	4619      	mov	r1, r3
   137a4:	9308      	str	r3, [sp, #32]
   137a6:	9303      	str	r3, [sp, #12]
   137a8:	f04f 3bff 	mov.w	fp, #4294967295
   137ac:	7863      	ldrb	r3, [r4, #1]
   137ae:	f104 0801 	add.w	r8, r4, #1
   137b2:	465d      	mov	r5, fp
   137b4:	f108 0801 	add.w	r8, r8, #1
   137b8:	f1a3 0020 	sub.w	r0, r3, #32
   137bc:	2858      	cmp	r0, #88	; 0x58
   137be:	f200 8434 	bhi.w	1402a <_svfprintf_r+0x92a>
   137c2:	e8df f010 	tbh	[pc, r0, lsl #1]
   137c6:	03a0      	.short	0x03a0
   137c8:	04320432 	.word	0x04320432
   137cc:	043203a8 	.word	0x043203a8
   137d0:	04320432 	.word	0x04320432
   137d4:	04320432 	.word	0x04320432
   137d8:	03af0432 	.word	0x03af0432
   137dc:	043203bd 	.word	0x043203bd
   137e0:	00e2005d 	.word	0x00e2005d
   137e4:	01090432 	.word	0x01090432
   137e8:	01100110 	.word	0x01100110
   137ec:	01100110 	.word	0x01100110
   137f0:	01100110 	.word	0x01100110
   137f4:	01100110 	.word	0x01100110
   137f8:	04320110 	.word	0x04320110
   137fc:	04320432 	.word	0x04320432
   13800:	04320432 	.word	0x04320432
   13804:	04320432 	.word	0x04320432
   13808:	04320432 	.word	0x04320432
   1380c:	01200432 	.word	0x01200432
   13810:	04320286 	.word	0x04320286
   13814:	04320286 	.word	0x04320286
   13818:	04320432 	.word	0x04320432
   1381c:	02d40432 	.word	0x02d40432
   13820:	04320432 	.word	0x04320432
   13824:	043202e5 	.word	0x043202e5
   13828:	04320432 	.word	0x04320432
   1382c:	04320432 	.word	0x04320432
   13830:	0432030f 	.word	0x0432030f
   13834:	033d0432 	.word	0x033d0432
   13838:	04320432 	.word	0x04320432
   1383c:	04320432 	.word	0x04320432
   13840:	04320432 	.word	0x04320432
   13844:	04320432 	.word	0x04320432
   13848:	04320432 	.word	0x04320432
   1384c:	0391037e 	.word	0x0391037e
   13850:	02860286 	.word	0x02860286
   13854:	03990286 	.word	0x03990286
   13858:	04320391 	.word	0x04320391
   1385c:	04070432 	.word	0x04070432
   13860:	04120432 	.word	0x04120432
   13864:	006400a3 	.word	0x006400a3
   13868:	043203c2 	.word	0x043203c2
   1386c:	043203c9 	.word	0x043203c9
   13870:	043203ea 	.word	0x043203ea
   13874:	03f20432 	.word	0x03f20432
   13878:	9808      	ldr	r0, [sp, #32]
   1387a:	930a      	str	r3, [sp, #40]	; 0x28
   1387c:	4240      	negs	r0, r0
   1387e:	9008      	str	r0, [sp, #32]
   13880:	9b03      	ldr	r3, [sp, #12]
   13882:	f043 0304 	orr.w	r3, r3, #4
   13886:	9303      	str	r3, [sp, #12]
   13888:	f898 3000 	ldrb.w	r3, [r8]
   1388c:	e792      	b.n	137b4 <_svfprintf_r+0xb4>
   1388e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13890:	46ab      	mov	fp, r5
   13892:	2100      	movs	r1, #0
   13894:	6804      	ldr	r4, [r0, #0]
   13896:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   1389a:	1d07      	adds	r7, r0, #4
   1389c:	9803      	ldr	r0, [sp, #12]
   1389e:	2330      	movs	r3, #48	; 0x30
   138a0:	2278      	movs	r2, #120	; 0x78
   138a2:	458b      	cmp	fp, r1
   138a4:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   138a8:	f04f 0500 	mov.w	r5, #0
   138ac:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   138b0:	f040 0302 	orr.w	r3, r0, #2
   138b4:	f2c0 83d6 	blt.w	14064 <_svfprintf_r+0x964>
   138b8:	f020 0380 	bic.w	r3, r0, #128	; 0x80
   138bc:	f043 0302 	orr.w	r3, r3, #2
   138c0:	9303      	str	r3, [sp, #12]
   138c2:	ea54 0305 	orrs.w	r3, r4, r5
   138c6:	970a      	str	r7, [sp, #40]	; 0x28
   138c8:	f000 83a2 	beq.w	14010 <_svfprintf_r+0x910>
   138cc:	460f      	mov	r7, r1
   138ce:	920d      	str	r2, [sp, #52]	; 0x34
   138d0:	483f      	ldr	r0, [pc, #252]	; (139d0 <_svfprintf_r+0x2d0>)
   138d2:	e2e6      	b.n	13ea2 <_svfprintf_r+0x7a2>
   138d4:	aa23      	add	r2, sp, #140	; 0x8c
   138d6:	9905      	ldr	r1, [sp, #20]
   138d8:	9806      	ldr	r0, [sp, #24]
   138da:	f003 f825 	bl	16928 <__ssprint_r>
   138de:	b948      	cbnz	r0, 138f4 <_svfprintf_r+0x1f4>
   138e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   138e4:	e752      	b.n	1378c <_svfprintf_r+0x8c>
   138e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   138e8:	b123      	cbz	r3, 138f4 <_svfprintf_r+0x1f4>
   138ea:	9806      	ldr	r0, [sp, #24]
   138ec:	9905      	ldr	r1, [sp, #20]
   138ee:	aa23      	add	r2, sp, #140	; 0x8c
   138f0:	f003 f81a 	bl	16928 <__ssprint_r>
   138f4:	9b05      	ldr	r3, [sp, #20]
   138f6:	899b      	ldrh	r3, [r3, #12]
   138f8:	f013 0f40 	tst.w	r3, #64	; 0x40
   138fc:	9b07      	ldr	r3, [sp, #28]
   138fe:	bf18      	it	ne
   13900:	f04f 33ff 	movne.w	r3, #4294967295
   13904:	4618      	mov	r0, r3
   13906:	b041      	add	sp, #260	; 0x104
   13908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1390c:	930d      	str	r3, [sp, #52]	; 0x34
   1390e:	46ab      	mov	fp, r5
   13910:	2a00      	cmp	r2, #0
   13912:	f041 8233 	bne.w	14d7c <_svfprintf_r+0x167c>
   13916:	9a03      	ldr	r2, [sp, #12]
   13918:	f012 0320 	ands.w	r3, r2, #32
   1391c:	f000 8246 	beq.w	13dac <_svfprintf_r+0x6ac>
   13920:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   13922:	3707      	adds	r7, #7
   13924:	f027 0307 	bic.w	r3, r7, #7
   13928:	2700      	movs	r7, #0
   1392a:	f103 0108 	add.w	r1, r3, #8
   1392e:	45bb      	cmp	fp, r7
   13930:	910a      	str	r1, [sp, #40]	; 0x28
   13932:	e9d3 4500 	ldrd	r4, r5, [r3]
   13936:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   1393a:	f2c0 8762 	blt.w	14802 <_svfprintf_r+0x1102>
   1393e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
   13942:	9303      	str	r3, [sp, #12]
   13944:	ea54 0305 	orrs.w	r3, r4, r5
   13948:	f000 8384 	beq.w	14054 <_svfprintf_r+0x954>
   1394c:	ae30      	add	r6, sp, #192	; 0xc0
   1394e:	08e2      	lsrs	r2, r4, #3
   13950:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   13954:	08e9      	lsrs	r1, r5, #3
   13956:	f004 0307 	and.w	r3, r4, #7
   1395a:	460d      	mov	r5, r1
   1395c:	4614      	mov	r4, r2
   1395e:	3330      	adds	r3, #48	; 0x30
   13960:	ea54 0205 	orrs.w	r2, r4, r5
   13964:	f806 3d01 	strb.w	r3, [r6, #-1]!
   13968:	d1f1      	bne.n	1394e <_svfprintf_r+0x24e>
   1396a:	9a03      	ldr	r2, [sp, #12]
   1396c:	07d1      	lsls	r1, r2, #31
   1396e:	f140 808f 	bpl.w	13a90 <_svfprintf_r+0x390>
   13972:	2b30      	cmp	r3, #48	; 0x30
   13974:	f000 808c 	beq.w	13a90 <_svfprintf_r+0x390>
   13978:	2230      	movs	r2, #48	; 0x30
   1397a:	1e73      	subs	r3, r6, #1
   1397c:	f806 2c01 	strb.w	r2, [r6, #-1]
   13980:	aa30      	add	r2, sp, #192	; 0xc0
   13982:	1ad2      	subs	r2, r2, r3
   13984:	9209      	str	r2, [sp, #36]	; 0x24
   13986:	461e      	mov	r6, r3
   13988:	e085      	b.n	13a96 <_svfprintf_r+0x396>
   1398a:	f898 3000 	ldrb.w	r3, [r8]
   1398e:	2b2a      	cmp	r3, #42	; 0x2a
   13990:	f108 0401 	add.w	r4, r8, #1
   13994:	f001 81e4 	beq.w	14d60 <_svfprintf_r+0x1660>
   13998:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1399c:	2809      	cmp	r0, #9
   1399e:	bf98      	it	ls
   139a0:	2500      	movls	r5, #0
   139a2:	f201 8186 	bhi.w	14cb2 <_svfprintf_r+0x15b2>
   139a6:	f814 3b01 	ldrb.w	r3, [r4], #1
   139aa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   139ae:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   139b2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   139b6:	2809      	cmp	r0, #9
   139b8:	d9f5      	bls.n	139a6 <_svfprintf_r+0x2a6>
   139ba:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   139be:	46a0      	mov	r8, r4
   139c0:	e6fa      	b.n	137b8 <_svfprintf_r+0xb8>
   139c2:	bf00      	nop
   139c4:	f3af 8000 	nop.w
	...
   139d0:	00017a50 	.word	0x00017a50
   139d4:	00017a1c 	.word	0x00017a1c
   139d8:	9b03      	ldr	r3, [sp, #12]
   139da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   139de:	9303      	str	r3, [sp, #12]
   139e0:	f898 3000 	ldrb.w	r3, [r8]
   139e4:	e6e6      	b.n	137b4 <_svfprintf_r+0xb4>
   139e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   139ea:	2300      	movs	r3, #0
   139ec:	461c      	mov	r4, r3
   139ee:	f818 3b01 	ldrb.w	r3, [r8], #1
   139f2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   139f6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   139fa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   139fe:	2809      	cmp	r0, #9
   13a00:	d9f5      	bls.n	139ee <_svfprintf_r+0x2ee>
   13a02:	9408      	str	r4, [sp, #32]
   13a04:	e6d8      	b.n	137b8 <_svfprintf_r+0xb8>
   13a06:	930d      	str	r3, [sp, #52]	; 0x34
   13a08:	46ab      	mov	fp, r5
   13a0a:	2a00      	cmp	r2, #0
   13a0c:	f041 81c4 	bne.w	14d98 <_svfprintf_r+0x1698>
   13a10:	9b03      	ldr	r3, [sp, #12]
   13a12:	f043 0310 	orr.w	r3, r3, #16
   13a16:	9303      	str	r3, [sp, #12]
   13a18:	9b03      	ldr	r3, [sp, #12]
   13a1a:	069c      	lsls	r4, r3, #26
   13a1c:	f140 8537 	bpl.w	1448e <_svfprintf_r+0xd8e>
   13a20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   13a22:	3707      	adds	r7, #7
   13a24:	f027 0707 	bic.w	r7, r7, #7
   13a28:	e9d7 2300 	ldrd	r2, r3, [r7]
   13a2c:	f107 0108 	add.w	r1, r7, #8
   13a30:	910a      	str	r1, [sp, #40]	; 0x28
   13a32:	4614      	mov	r4, r2
   13a34:	461d      	mov	r5, r3
   13a36:	2a00      	cmp	r2, #0
   13a38:	f173 0300 	sbcs.w	r3, r3, #0
   13a3c:	f2c0 8562 	blt.w	14504 <_svfprintf_r+0xe04>
   13a40:	f1bb 0f00 	cmp.w	fp, #0
   13a44:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   13a48:	f2c0 853f 	blt.w	144ca <_svfprintf_r+0xdca>
   13a4c:	9b03      	ldr	r3, [sp, #12]
   13a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13a52:	9303      	str	r3, [sp, #12]
   13a54:	ea54 0305 	orrs.w	r3, r4, r5
   13a58:	f000 81e8 	beq.w	13e2c <_svfprintf_r+0x72c>
   13a5c:	2d00      	cmp	r5, #0
   13a5e:	bf08      	it	eq
   13a60:	2c0a      	cmpeq	r4, #10
   13a62:	f0c0 81e8 	bcc.w	13e36 <_svfprintf_r+0x736>
   13a66:	ae30      	add	r6, sp, #192	; 0xc0
   13a68:	4620      	mov	r0, r4
   13a6a:	4629      	mov	r1, r5
   13a6c:	220a      	movs	r2, #10
   13a6e:	2300      	movs	r3, #0
   13a70:	f003 f83a 	bl	16ae8 <__aeabi_uldivmod>
   13a74:	3230      	adds	r2, #48	; 0x30
   13a76:	f806 2d01 	strb.w	r2, [r6, #-1]!
   13a7a:	4620      	mov	r0, r4
   13a7c:	4629      	mov	r1, r5
   13a7e:	2300      	movs	r3, #0
   13a80:	220a      	movs	r2, #10
   13a82:	f003 f831 	bl	16ae8 <__aeabi_uldivmod>
   13a86:	4604      	mov	r4, r0
   13a88:	460d      	mov	r5, r1
   13a8a:	ea54 0305 	orrs.w	r3, r4, r5
   13a8e:	d1eb      	bne.n	13a68 <_svfprintf_r+0x368>
   13a90:	ab30      	add	r3, sp, #192	; 0xc0
   13a92:	1b9b      	subs	r3, r3, r6
   13a94:	9309      	str	r3, [sp, #36]	; 0x24
   13a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13a98:	455b      	cmp	r3, fp
   13a9a:	bfb8      	it	lt
   13a9c:	465b      	movlt	r3, fp
   13a9e:	9304      	str	r3, [sp, #16]
   13aa0:	2300      	movs	r3, #0
   13aa2:	930f      	str	r3, [sp, #60]	; 0x3c
   13aa4:	b117      	cbz	r7, 13aac <_svfprintf_r+0x3ac>
   13aa6:	9b04      	ldr	r3, [sp, #16]
   13aa8:	3301      	adds	r3, #1
   13aaa:	9304      	str	r3, [sp, #16]
   13aac:	9b03      	ldr	r3, [sp, #12]
   13aae:	f013 0302 	ands.w	r3, r3, #2
   13ab2:	930b      	str	r3, [sp, #44]	; 0x2c
   13ab4:	d002      	beq.n	13abc <_svfprintf_r+0x3bc>
   13ab6:	9b04      	ldr	r3, [sp, #16]
   13ab8:	3302      	adds	r3, #2
   13aba:	9304      	str	r3, [sp, #16]
   13abc:	9b03      	ldr	r3, [sp, #12]
   13abe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   13ac2:	930c      	str	r3, [sp, #48]	; 0x30
   13ac4:	f040 82db 	bne.w	1407e <_svfprintf_r+0x97e>
   13ac8:	9b08      	ldr	r3, [sp, #32]
   13aca:	9a04      	ldr	r2, [sp, #16]
   13acc:	1a9d      	subs	r5, r3, r2
   13ace:	2d00      	cmp	r5, #0
   13ad0:	f340 82d5 	ble.w	1407e <_svfprintf_r+0x97e>
   13ad4:	2d10      	cmp	r5, #16
   13ad6:	9925      	ldr	r1, [sp, #148]	; 0x94
   13ad8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13ada:	4fa8      	ldr	r7, [pc, #672]	; (13d7c <_svfprintf_r+0x67c>)
   13adc:	dd27      	ble.n	13b2e <_svfprintf_r+0x42e>
   13ade:	9614      	str	r6, [sp, #80]	; 0x50
   13ae0:	4648      	mov	r0, r9
   13ae2:	2410      	movs	r4, #16
   13ae4:	46b9      	mov	r9, r7
   13ae6:	9e05      	ldr	r6, [sp, #20]
   13ae8:	462f      	mov	r7, r5
   13aea:	9d06      	ldr	r5, [sp, #24]
   13aec:	e004      	b.n	13af8 <_svfprintf_r+0x3f8>
   13aee:	3f10      	subs	r7, #16
   13af0:	2f10      	cmp	r7, #16
   13af2:	f100 0008 	add.w	r0, r0, #8
   13af6:	dd16      	ble.n	13b26 <_svfprintf_r+0x426>
   13af8:	3201      	adds	r2, #1
   13afa:	4ba0      	ldr	r3, [pc, #640]	; (13d7c <_svfprintf_r+0x67c>)
   13afc:	9224      	str	r2, [sp, #144]	; 0x90
   13afe:	3110      	adds	r1, #16
   13b00:	2a07      	cmp	r2, #7
   13b02:	9125      	str	r1, [sp, #148]	; 0x94
   13b04:	e880 0018 	stmia.w	r0, {r3, r4}
   13b08:	ddf1      	ble.n	13aee <_svfprintf_r+0x3ee>
   13b0a:	aa23      	add	r2, sp, #140	; 0x8c
   13b0c:	4631      	mov	r1, r6
   13b0e:	4628      	mov	r0, r5
   13b10:	f002 ff0a 	bl	16928 <__ssprint_r>
   13b14:	2800      	cmp	r0, #0
   13b16:	f47f aeed 	bne.w	138f4 <_svfprintf_r+0x1f4>
   13b1a:	3f10      	subs	r7, #16
   13b1c:	2f10      	cmp	r7, #16
   13b1e:	9925      	ldr	r1, [sp, #148]	; 0x94
   13b20:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13b22:	a830      	add	r0, sp, #192	; 0xc0
   13b24:	dce8      	bgt.n	13af8 <_svfprintf_r+0x3f8>
   13b26:	9e14      	ldr	r6, [sp, #80]	; 0x50
   13b28:	463d      	mov	r5, r7
   13b2a:	464f      	mov	r7, r9
   13b2c:	4681      	mov	r9, r0
   13b2e:	3201      	adds	r2, #1
   13b30:	186c      	adds	r4, r5, r1
   13b32:	2a07      	cmp	r2, #7
   13b34:	9425      	str	r4, [sp, #148]	; 0x94
   13b36:	9224      	str	r2, [sp, #144]	; 0x90
   13b38:	f8c9 7000 	str.w	r7, [r9]
   13b3c:	f8c9 5004 	str.w	r5, [r9, #4]
   13b40:	f300 842d 	bgt.w	1439e <_svfprintf_r+0xc9e>
   13b44:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   13b48:	f109 0908 	add.w	r9, r9, #8
   13b4c:	b177      	cbz	r7, 13b6c <_svfprintf_r+0x46c>
   13b4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13b50:	3301      	adds	r3, #1
   13b52:	3401      	adds	r4, #1
   13b54:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
   13b58:	2201      	movs	r2, #1
   13b5a:	2b07      	cmp	r3, #7
   13b5c:	9425      	str	r4, [sp, #148]	; 0x94
   13b5e:	9324      	str	r3, [sp, #144]	; 0x90
   13b60:	e889 0006 	stmia.w	r9, {r1, r2}
   13b64:	f300 83a5 	bgt.w	142b2 <_svfprintf_r+0xbb2>
   13b68:	f109 0908 	add.w	r9, r9, #8
   13b6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   13b6e:	b16b      	cbz	r3, 13b8c <_svfprintf_r+0x48c>
   13b70:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13b72:	3301      	adds	r3, #1
   13b74:	3402      	adds	r4, #2
   13b76:	a91c      	add	r1, sp, #112	; 0x70
   13b78:	2202      	movs	r2, #2
   13b7a:	2b07      	cmp	r3, #7
   13b7c:	9425      	str	r4, [sp, #148]	; 0x94
   13b7e:	9324      	str	r3, [sp, #144]	; 0x90
   13b80:	e889 0006 	stmia.w	r9, {r1, r2}
   13b84:	f300 83a1 	bgt.w	142ca <_svfprintf_r+0xbca>
   13b88:	f109 0908 	add.w	r9, r9, #8
   13b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13b8e:	2b80      	cmp	r3, #128	; 0x80
   13b90:	f000 82e1 	beq.w	14156 <_svfprintf_r+0xa56>
   13b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13b96:	ebc3 070b 	rsb	r7, r3, fp
   13b9a:	2f00      	cmp	r7, #0
   13b9c:	dd33      	ble.n	13c06 <_svfprintf_r+0x506>
   13b9e:	4a78      	ldr	r2, [pc, #480]	; (13d80 <_svfprintf_r+0x680>)
   13ba0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13ba2:	920b      	str	r2, [sp, #44]	; 0x2c
   13ba4:	2f10      	cmp	r7, #16
   13ba6:	dd22      	ble.n	13bee <_svfprintf_r+0x4ee>
   13ba8:	4622      	mov	r2, r4
   13baa:	f04f 0b10 	mov.w	fp, #16
   13bae:	9d06      	ldr	r5, [sp, #24]
   13bb0:	9c05      	ldr	r4, [sp, #20]
   13bb2:	e004      	b.n	13bbe <_svfprintf_r+0x4be>
   13bb4:	3f10      	subs	r7, #16
   13bb6:	2f10      	cmp	r7, #16
   13bb8:	f109 0908 	add.w	r9, r9, #8
   13bbc:	dd16      	ble.n	13bec <_svfprintf_r+0x4ec>
   13bbe:	3301      	adds	r3, #1
   13bc0:	3210      	adds	r2, #16
   13bc2:	2b07      	cmp	r3, #7
   13bc4:	9225      	str	r2, [sp, #148]	; 0x94
   13bc6:	9324      	str	r3, [sp, #144]	; 0x90
   13bc8:	e889 0c00 	stmia.w	r9, {sl, fp}
   13bcc:	ddf2      	ble.n	13bb4 <_svfprintf_r+0x4b4>
   13bce:	aa23      	add	r2, sp, #140	; 0x8c
   13bd0:	4621      	mov	r1, r4
   13bd2:	4628      	mov	r0, r5
   13bd4:	f002 fea8 	bl	16928 <__ssprint_r>
   13bd8:	2800      	cmp	r0, #0
   13bda:	f47f ae8b 	bne.w	138f4 <_svfprintf_r+0x1f4>
   13bde:	3f10      	subs	r7, #16
   13be0:	2f10      	cmp	r7, #16
   13be2:	9a25      	ldr	r2, [sp, #148]	; 0x94
   13be4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13be6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   13bea:	dce8      	bgt.n	13bbe <_svfprintf_r+0x4be>
   13bec:	4614      	mov	r4, r2
   13bee:	3301      	adds	r3, #1
   13bf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13bf2:	9324      	str	r3, [sp, #144]	; 0x90
   13bf4:	443c      	add	r4, r7
   13bf6:	2b07      	cmp	r3, #7
   13bf8:	9425      	str	r4, [sp, #148]	; 0x94
   13bfa:	e889 0084 	stmia.w	r9, {r2, r7}
   13bfe:	f300 834c 	bgt.w	1429a <_svfprintf_r+0xb9a>
   13c02:	f109 0908 	add.w	r9, r9, #8
   13c06:	9b03      	ldr	r3, [sp, #12]
   13c08:	05da      	lsls	r2, r3, #23
   13c0a:	f100 823a 	bmi.w	14082 <_svfprintf_r+0x982>
   13c0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13c10:	9909      	ldr	r1, [sp, #36]	; 0x24
   13c12:	f8c9 6000 	str.w	r6, [r9]
   13c16:	3301      	adds	r3, #1
   13c18:	440c      	add	r4, r1
   13c1a:	2b07      	cmp	r3, #7
   13c1c:	9425      	str	r4, [sp, #148]	; 0x94
   13c1e:	f8c9 1004 	str.w	r1, [r9, #4]
   13c22:	9324      	str	r3, [sp, #144]	; 0x90
   13c24:	f300 8323 	bgt.w	1426e <_svfprintf_r+0xb6e>
   13c28:	f109 0908 	add.w	r9, r9, #8
   13c2c:	9b03      	ldr	r3, [sp, #12]
   13c2e:	0759      	lsls	r1, r3, #29
   13c30:	d53f      	bpl.n	13cb2 <_svfprintf_r+0x5b2>
   13c32:	9b08      	ldr	r3, [sp, #32]
   13c34:	9a04      	ldr	r2, [sp, #16]
   13c36:	1a9d      	subs	r5, r3, r2
   13c38:	2d00      	cmp	r5, #0
   13c3a:	dd3a      	ble.n	13cb2 <_svfprintf_r+0x5b2>
   13c3c:	2d10      	cmp	r5, #16
   13c3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13c40:	4f4e      	ldr	r7, [pc, #312]	; (13d7c <_svfprintf_r+0x67c>)
   13c42:	dd23      	ble.n	13c8c <_svfprintf_r+0x58c>
   13c44:	4622      	mov	r2, r4
   13c46:	2610      	movs	r6, #16
   13c48:	f8dd b018 	ldr.w	fp, [sp, #24]
   13c4c:	9c05      	ldr	r4, [sp, #20]
   13c4e:	e004      	b.n	13c5a <_svfprintf_r+0x55a>
   13c50:	3d10      	subs	r5, #16
   13c52:	2d10      	cmp	r5, #16
   13c54:	f109 0908 	add.w	r9, r9, #8
   13c58:	dd17      	ble.n	13c8a <_svfprintf_r+0x58a>
   13c5a:	3301      	adds	r3, #1
   13c5c:	4947      	ldr	r1, [pc, #284]	; (13d7c <_svfprintf_r+0x67c>)
   13c5e:	9324      	str	r3, [sp, #144]	; 0x90
   13c60:	3210      	adds	r2, #16
   13c62:	2b07      	cmp	r3, #7
   13c64:	9225      	str	r2, [sp, #148]	; 0x94
   13c66:	e889 0042 	stmia.w	r9, {r1, r6}
   13c6a:	ddf1      	ble.n	13c50 <_svfprintf_r+0x550>
   13c6c:	aa23      	add	r2, sp, #140	; 0x8c
   13c6e:	4621      	mov	r1, r4
   13c70:	4658      	mov	r0, fp
   13c72:	f002 fe59 	bl	16928 <__ssprint_r>
   13c76:	2800      	cmp	r0, #0
   13c78:	f47f ae3c 	bne.w	138f4 <_svfprintf_r+0x1f4>
   13c7c:	3d10      	subs	r5, #16
   13c7e:	2d10      	cmp	r5, #16
   13c80:	9a25      	ldr	r2, [sp, #148]	; 0x94
   13c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
   13c84:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   13c88:	dce7      	bgt.n	13c5a <_svfprintf_r+0x55a>
   13c8a:	4614      	mov	r4, r2
   13c8c:	3301      	adds	r3, #1
   13c8e:	442c      	add	r4, r5
   13c90:	2b07      	cmp	r3, #7
   13c92:	9425      	str	r4, [sp, #148]	; 0x94
   13c94:	9324      	str	r3, [sp, #144]	; 0x90
   13c96:	f8c9 7000 	str.w	r7, [r9]
   13c9a:	f8c9 5004 	str.w	r5, [r9, #4]
   13c9e:	dd08      	ble.n	13cb2 <_svfprintf_r+0x5b2>
   13ca0:	aa23      	add	r2, sp, #140	; 0x8c
   13ca2:	9905      	ldr	r1, [sp, #20]
   13ca4:	9806      	ldr	r0, [sp, #24]
   13ca6:	f002 fe3f 	bl	16928 <__ssprint_r>
   13caa:	2800      	cmp	r0, #0
   13cac:	f47f ae22 	bne.w	138f4 <_svfprintf_r+0x1f4>
   13cb0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   13cb2:	9b07      	ldr	r3, [sp, #28]
   13cb4:	9a08      	ldr	r2, [sp, #32]
   13cb6:	9904      	ldr	r1, [sp, #16]
   13cb8:	428a      	cmp	r2, r1
   13cba:	bfac      	ite	ge
   13cbc:	189b      	addge	r3, r3, r2
   13cbe:	185b      	addlt	r3, r3, r1
   13cc0:	9307      	str	r3, [sp, #28]
   13cc2:	2c00      	cmp	r4, #0
   13cc4:	f040 82df 	bne.w	14286 <_svfprintf_r+0xb86>
   13cc8:	2300      	movs	r3, #0
   13cca:	9324      	str	r3, [sp, #144]	; 0x90
   13ccc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   13cd0:	e53d      	b.n	1374e <_svfprintf_r+0x4e>
   13cd2:	930d      	str	r3, [sp, #52]	; 0x34
   13cd4:	46ab      	mov	fp, r5
   13cd6:	2a00      	cmp	r2, #0
   13cd8:	f041 8062 	bne.w	14da0 <_svfprintf_r+0x16a0>
   13cdc:	9b03      	ldr	r3, [sp, #12]
   13cde:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   13ce0:	071a      	lsls	r2, r3, #28
   13ce2:	f107 0707 	add.w	r7, r7, #7
   13ce6:	f140 8574 	bpl.w	147d2 <_svfprintf_r+0x10d2>
   13cea:	f027 0307 	bic.w	r3, r7, #7
   13cee:	ed93 7b00 	vldr	d7, [r3]
   13cf2:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   13cf6:	f103 0208 	add.w	r2, r3, #8
   13cfa:	920a      	str	r2, [sp, #40]	; 0x28
   13cfc:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   13d00:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   13d04:	9116      	str	r1, [sp, #88]	; 0x58
   13d06:	9317      	str	r3, [sp, #92]	; 0x5c
   13d08:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   13d0c:	f04f 32ff 	mov.w	r2, #4294967295
   13d10:	4620      	mov	r0, r4
   13d12:	4629      	mov	r1, r5
   13d14:	4b1b      	ldr	r3, [pc, #108]	; (13d84 <_svfprintf_r+0x684>)
   13d16:	f7fd fe49 	bl	119ac <__aeabi_dcmpun>
   13d1a:	2800      	cmp	r0, #0
   13d1c:	f040 84da 	bne.w	146d4 <_svfprintf_r+0xfd4>
   13d20:	f04f 32ff 	mov.w	r2, #4294967295
   13d24:	4b17      	ldr	r3, [pc, #92]	; (13d84 <_svfprintf_r+0x684>)
   13d26:	4620      	mov	r0, r4
   13d28:	4629      	mov	r1, r5
   13d2a:	f7fd fe21 	bl	11970 <__aeabi_dcmple>
   13d2e:	2800      	cmp	r0, #0
   13d30:	f040 84d0 	bne.w	146d4 <_svfprintf_r+0xfd4>
   13d34:	2200      	movs	r2, #0
   13d36:	2300      	movs	r3, #0
   13d38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   13d3c:	f7fd fe0e 	bl	1195c <__aeabi_dcmplt>
   13d40:	2800      	cmp	r0, #0
   13d42:	f040 8752 	bne.w	14bea <_svfprintf_r+0x14ea>
   13d46:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   13d4a:	4e0f      	ldr	r6, [pc, #60]	; (13d88 <_svfprintf_r+0x688>)
   13d4c:	4b0f      	ldr	r3, [pc, #60]	; (13d8c <_svfprintf_r+0x68c>)
   13d4e:	9903      	ldr	r1, [sp, #12]
   13d50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   13d54:	9103      	str	r1, [sp, #12]
   13d56:	990d      	ldr	r1, [sp, #52]	; 0x34
   13d58:	2203      	movs	r2, #3
   13d5a:	f04f 0b00 	mov.w	fp, #0
   13d5e:	9204      	str	r2, [sp, #16]
   13d60:	2947      	cmp	r1, #71	; 0x47
   13d62:	bfd8      	it	le
   13d64:	461e      	movle	r6, r3
   13d66:	9209      	str	r2, [sp, #36]	; 0x24
   13d68:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   13d6c:	e69a      	b.n	13aa4 <_svfprintf_r+0x3a4>
   13d6e:	9b03      	ldr	r3, [sp, #12]
   13d70:	f043 0308 	orr.w	r3, r3, #8
   13d74:	9303      	str	r3, [sp, #12]
   13d76:	f898 3000 	ldrb.w	r3, [r8]
   13d7a:	e51b      	b.n	137b4 <_svfprintf_r+0xb4>
   13d7c:	00017a6c 	.word	0x00017a6c
   13d80:	00017a1c 	.word	0x00017a1c
   13d84:	7fefffff 	.word	0x7fefffff
   13d88:	00017a30 	.word	0x00017a30
   13d8c:	00017a2c 	.word	0x00017a2c
   13d90:	930d      	str	r3, [sp, #52]	; 0x34
   13d92:	46ab      	mov	fp, r5
   13d94:	2a00      	cmp	r2, #0
   13d96:	f041 800f 	bne.w	14db8 <_svfprintf_r+0x16b8>
   13d9a:	9b03      	ldr	r3, [sp, #12]
   13d9c:	f043 0310 	orr.w	r3, r3, #16
   13da0:	9303      	str	r3, [sp, #12]
   13da2:	9a03      	ldr	r2, [sp, #12]
   13da4:	f012 0320 	ands.w	r3, r2, #32
   13da8:	f47f adba 	bne.w	13920 <_svfprintf_r+0x220>
   13dac:	9903      	ldr	r1, [sp, #12]
   13dae:	f011 0210 	ands.w	r2, r1, #16
   13db2:	f000 845b 	beq.w	1466c <_svfprintf_r+0xf6c>
   13db6:	980a      	ldr	r0, [sp, #40]	; 0x28
   13db8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   13dbc:	f1bb 0f00 	cmp.w	fp, #0
   13dc0:	6804      	ldr	r4, [r0, #0]
   13dc2:	f100 0704 	add.w	r7, r0, #4
   13dc6:	f04f 0500 	mov.w	r5, #0
   13dca:	f2c0 8519 	blt.w	14800 <_svfprintf_r+0x1100>
   13dce:	460a      	mov	r2, r1
   13dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   13dd4:	9203      	str	r2, [sp, #12]
   13dd6:	ea54 0205 	orrs.w	r2, r4, r5
   13dda:	970a      	str	r7, [sp, #40]	; 0x28
   13ddc:	f000 813a 	beq.w	14054 <_svfprintf_r+0x954>
   13de0:	461f      	mov	r7, r3
   13de2:	e5b3      	b.n	1394c <_svfprintf_r+0x24c>
   13de4:	930d      	str	r3, [sp, #52]	; 0x34
   13de6:	46ab      	mov	fp, r5
   13de8:	2a00      	cmp	r2, #0
   13dea:	f040 87e1 	bne.w	14db0 <_svfprintf_r+0x16b0>
   13dee:	9b03      	ldr	r3, [sp, #12]
   13df0:	f043 0310 	orr.w	r3, r3, #16
   13df4:	9303      	str	r3, [sp, #12]
   13df6:	9a03      	ldr	r2, [sp, #12]
   13df8:	f012 0320 	ands.w	r3, r2, #32
   13dfc:	f000 832c 	beq.w	14458 <_svfprintf_r+0xd58>
   13e00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   13e02:	3707      	adds	r7, #7
   13e04:	f027 0307 	bic.w	r3, r7, #7
   13e08:	2700      	movs	r7, #0
   13e0a:	f103 0108 	add.w	r1, r3, #8
   13e0e:	45bb      	cmp	fp, r7
   13e10:	910a      	str	r1, [sp, #40]	; 0x28
   13e12:	e9d3 4500 	ldrd	r4, r5, [r3]
   13e16:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   13e1a:	f2c0 8356 	blt.w	144ca <_svfprintf_r+0xdca>
   13e1e:	f022 0380 	bic.w	r3, r2, #128	; 0x80
   13e22:	9303      	str	r3, [sp, #12]
   13e24:	ea54 0305 	orrs.w	r3, r4, r5
   13e28:	f47f ae18 	bne.w	13a5c <_svfprintf_r+0x35c>
   13e2c:	f1bb 0f00 	cmp.w	fp, #0
   13e30:	f000 80f5 	beq.w	1401e <_svfprintf_r+0x91e>
   13e34:	2400      	movs	r4, #0
   13e36:	ae40      	add	r6, sp, #256	; 0x100
   13e38:	3430      	adds	r4, #48	; 0x30
   13e3a:	f806 4d41 	strb.w	r4, [r6, #-65]!
   13e3e:	e627      	b.n	13a90 <_svfprintf_r+0x390>
   13e40:	930d      	str	r3, [sp, #52]	; 0x34
   13e42:	46ab      	mov	fp, r5
   13e44:	2a00      	cmp	r2, #0
   13e46:	f040 87af 	bne.w	14da8 <_svfprintf_r+0x16a8>
   13e4a:	9b03      	ldr	r3, [sp, #12]
   13e4c:	48af      	ldr	r0, [pc, #700]	; (1410c <_svfprintf_r+0xa0c>)
   13e4e:	069d      	lsls	r5, r3, #26
   13e50:	f140 80b5 	bpl.w	13fbe <_svfprintf_r+0x8be>
   13e54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   13e56:	3707      	adds	r7, #7
   13e58:	f027 0307 	bic.w	r3, r7, #7
   13e5c:	e9d3 4500 	ldrd	r4, r5, [r3]
   13e60:	f103 0208 	add.w	r2, r3, #8
   13e64:	920a      	str	r2, [sp, #40]	; 0x28
   13e66:	9a03      	ldr	r2, [sp, #12]
   13e68:	f012 0701 	ands.w	r7, r2, #1
   13e6c:	f000 8239 	beq.w	142e2 <_svfprintf_r+0xbe2>
   13e70:	ea54 0305 	orrs.w	r3, r4, r5
   13e74:	f000 8502 	beq.w	1487c <_svfprintf_r+0x117c>
   13e78:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   13e7c:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
   13e80:	2700      	movs	r7, #0
   13e82:	9a03      	ldr	r2, [sp, #12]
   13e84:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   13e88:	2330      	movs	r3, #48	; 0x30
   13e8a:	45bb      	cmp	fp, r7
   13e8c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
   13e90:	f042 0302 	orr.w	r3, r2, #2
   13e94:	f2c0 86ae 	blt.w	14bf4 <_svfprintf_r+0x14f4>
   13e98:	f022 0380 	bic.w	r3, r2, #128	; 0x80
   13e9c:	f043 0302 	orr.w	r3, r3, #2
   13ea0:	9303      	str	r3, [sp, #12]
   13ea2:	ae30      	add	r6, sp, #192	; 0xc0
   13ea4:	0923      	lsrs	r3, r4, #4
   13ea6:	f004 010f 	and.w	r1, r4, #15
   13eaa:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   13eae:	092a      	lsrs	r2, r5, #4
   13eb0:	461c      	mov	r4, r3
   13eb2:	4615      	mov	r5, r2
   13eb4:	5c43      	ldrb	r3, [r0, r1]
   13eb6:	f806 3d01 	strb.w	r3, [r6, #-1]!
   13eba:	ea54 0305 	orrs.w	r3, r4, r5
   13ebe:	d1f1      	bne.n	13ea4 <_svfprintf_r+0x7a4>
   13ec0:	e5e6      	b.n	13a90 <_svfprintf_r+0x390>
   13ec2:	990a      	ldr	r1, [sp, #40]	; 0x28
   13ec4:	930d      	str	r3, [sp, #52]	; 0x34
   13ec6:	680a      	ldr	r2, [r1, #0]
   13ec8:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   13ecc:	2300      	movs	r3, #0
   13ece:	460a      	mov	r2, r1
   13ed0:	461f      	mov	r7, r3
   13ed2:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   13ed6:	3204      	adds	r2, #4
   13ed8:	2301      	movs	r3, #1
   13eda:	9304      	str	r3, [sp, #16]
   13edc:	46bb      	mov	fp, r7
   13ede:	970f      	str	r7, [sp, #60]	; 0x3c
   13ee0:	920a      	str	r2, [sp, #40]	; 0x28
   13ee2:	9309      	str	r3, [sp, #36]	; 0x24
   13ee4:	ae26      	add	r6, sp, #152	; 0x98
   13ee6:	e5e1      	b.n	13aac <_svfprintf_r+0x3ac>
   13ee8:	930d      	str	r3, [sp, #52]	; 0x34
   13eea:	46ab      	mov	fp, r5
   13eec:	2a00      	cmp	r2, #0
   13eee:	f43f ad93 	beq.w	13a18 <_svfprintf_r+0x318>
   13ef2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   13ef6:	e58f      	b.n	13a18 <_svfprintf_r+0x318>
   13ef8:	9b03      	ldr	r3, [sp, #12]
   13efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13efe:	9303      	str	r3, [sp, #12]
   13f00:	f898 3000 	ldrb.w	r3, [r8]
   13f04:	e456      	b.n	137b4 <_svfprintf_r+0xb4>
   13f06:	f898 3000 	ldrb.w	r3, [r8]
   13f0a:	2900      	cmp	r1, #0
   13f0c:	f47f ac52 	bne.w	137b4 <_svfprintf_r+0xb4>
   13f10:	2201      	movs	r2, #1
   13f12:	2120      	movs	r1, #32
   13f14:	e44e      	b.n	137b4 <_svfprintf_r+0xb4>
   13f16:	9b03      	ldr	r3, [sp, #12]
   13f18:	f043 0301 	orr.w	r3, r3, #1
   13f1c:	9303      	str	r3, [sp, #12]
   13f1e:	f898 3000 	ldrb.w	r3, [r8]
   13f22:	e447      	b.n	137b4 <_svfprintf_r+0xb4>
   13f24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   13f26:	6823      	ldr	r3, [r4, #0]
   13f28:	9308      	str	r3, [sp, #32]
   13f2a:	4618      	mov	r0, r3
   13f2c:	2800      	cmp	r0, #0
   13f2e:	4623      	mov	r3, r4
   13f30:	f103 0304 	add.w	r3, r3, #4
   13f34:	f6ff aca0 	blt.w	13878 <_svfprintf_r+0x178>
   13f38:	930a      	str	r3, [sp, #40]	; 0x28
   13f3a:	f898 3000 	ldrb.w	r3, [r8]
   13f3e:	e439      	b.n	137b4 <_svfprintf_r+0xb4>
   13f40:	f898 3000 	ldrb.w	r3, [r8]
   13f44:	2201      	movs	r2, #1
   13f46:	212b      	movs	r1, #43	; 0x2b
   13f48:	e434      	b.n	137b4 <_svfprintf_r+0xb4>
   13f4a:	9b03      	ldr	r3, [sp, #12]
   13f4c:	f043 0320 	orr.w	r3, r3, #32
   13f50:	9303      	str	r3, [sp, #12]
   13f52:	f898 3000 	ldrb.w	r3, [r8]
   13f56:	e42d      	b.n	137b4 <_svfprintf_r+0xb4>
   13f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13f5a:	930d      	str	r3, [sp, #52]	; 0x34
   13f5c:	6816      	ldr	r6, [r2, #0]
   13f5e:	2400      	movs	r4, #0
   13f60:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
   13f64:	1d17      	adds	r7, r2, #4
   13f66:	2e00      	cmp	r6, #0
   13f68:	f000 861c 	beq.w	14ba4 <_svfprintf_r+0x14a4>
   13f6c:	2d00      	cmp	r5, #0
   13f6e:	f2c0 8561 	blt.w	14a34 <_svfprintf_r+0x1334>
   13f72:	462a      	mov	r2, r5
   13f74:	4621      	mov	r1, r4
   13f76:	4630      	mov	r0, r6
   13f78:	f7fe fa5a 	bl	12430 <memchr>
   13f7c:	2800      	cmp	r0, #0
   13f7e:	f000 8663 	beq.w	14c48 <_svfprintf_r+0x1548>
   13f82:	1b83      	subs	r3, r0, r6
   13f84:	9309      	str	r3, [sp, #36]	; 0x24
   13f86:	46a3      	mov	fp, r4
   13f88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   13f8c:	970a      	str	r7, [sp, #40]	; 0x28
   13f8e:	9304      	str	r3, [sp, #16]
   13f90:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   13f94:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   13f98:	e584      	b.n	13aa4 <_svfprintf_r+0x3a4>
   13f9a:	930d      	str	r3, [sp, #52]	; 0x34
   13f9c:	46ab      	mov	fp, r5
   13f9e:	2a00      	cmp	r2, #0
   13fa0:	f43f af29 	beq.w	13df6 <_svfprintf_r+0x6f6>
   13fa4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   13fa8:	e725      	b.n	13df6 <_svfprintf_r+0x6f6>
   13faa:	930d      	str	r3, [sp, #52]	; 0x34
   13fac:	46ab      	mov	fp, r5
   13fae:	2a00      	cmp	r2, #0
   13fb0:	f040 870e 	bne.w	14dd0 <_svfprintf_r+0x16d0>
   13fb4:	9b03      	ldr	r3, [sp, #12]
   13fb6:	4856      	ldr	r0, [pc, #344]	; (14110 <_svfprintf_r+0xa10>)
   13fb8:	069d      	lsls	r5, r3, #26
   13fba:	f53f af4b 	bmi.w	13e54 <_svfprintf_r+0x754>
   13fbe:	9b03      	ldr	r3, [sp, #12]
   13fc0:	06dc      	lsls	r4, r3, #27
   13fc2:	f140 843e 	bpl.w	14842 <_svfprintf_r+0x1142>
   13fc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13fc8:	4613      	mov	r3, r2
   13fca:	3304      	adds	r3, #4
   13fcc:	6814      	ldr	r4, [r2, #0]
   13fce:	930a      	str	r3, [sp, #40]	; 0x28
   13fd0:	2500      	movs	r5, #0
   13fd2:	e748      	b.n	13e66 <_svfprintf_r+0x766>
   13fd4:	f898 3000 	ldrb.w	r3, [r8]
   13fd8:	2b6c      	cmp	r3, #108	; 0x6c
   13fda:	f000 84c2 	beq.w	14962 <_svfprintf_r+0x1262>
   13fde:	9803      	ldr	r0, [sp, #12]
   13fe0:	f040 0010 	orr.w	r0, r0, #16
   13fe4:	9003      	str	r0, [sp, #12]
   13fe6:	f7ff bbe5 	b.w	137b4 <_svfprintf_r+0xb4>
   13fea:	2a00      	cmp	r2, #0
   13fec:	f040 86ec 	bne.w	14dc8 <_svfprintf_r+0x16c8>
   13ff0:	9b03      	ldr	r3, [sp, #12]
   13ff2:	069b      	lsls	r3, r3, #26
   13ff4:	f140 8357 	bpl.w	146a6 <_svfprintf_r+0xfa6>
   13ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13ffa:	9907      	ldr	r1, [sp, #28]
   13ffc:	6813      	ldr	r3, [r2, #0]
   13ffe:	17cd      	asrs	r5, r1, #31
   14000:	4608      	mov	r0, r1
   14002:	3204      	adds	r2, #4
   14004:	4629      	mov	r1, r5
   14006:	920a      	str	r2, [sp, #40]	; 0x28
   14008:	e9c3 0100 	strd	r0, r1, [r3]
   1400c:	f7ff bb9f 	b.w	1374e <_svfprintf_r+0x4e>
   14010:	483f      	ldr	r0, [pc, #252]	; (14110 <_svfprintf_r+0xa10>)
   14012:	920d      	str	r2, [sp, #52]	; 0x34
   14014:	f1bb 0f00 	cmp.w	fp, #0
   14018:	f040 8174 	bne.w	14304 <_svfprintf_r+0xc04>
   1401c:	465f      	mov	r7, fp
   1401e:	f04f 0b00 	mov.w	fp, #0
   14022:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   14026:	ae30      	add	r6, sp, #192	; 0xc0
   14028:	e535      	b.n	13a96 <_svfprintf_r+0x396>
   1402a:	930d      	str	r3, [sp, #52]	; 0x34
   1402c:	2a00      	cmp	r2, #0
   1402e:	f040 86c7 	bne.w	14dc0 <_svfprintf_r+0x16c0>
   14032:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14034:	2a00      	cmp	r2, #0
   14036:	f43f ac56 	beq.w	138e6 <_svfprintf_r+0x1e6>
   1403a:	2300      	movs	r3, #0
   1403c:	2101      	movs	r1, #1
   1403e:	461f      	mov	r7, r3
   14040:	9104      	str	r1, [sp, #16]
   14042:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   14046:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   1404a:	469b      	mov	fp, r3
   1404c:	930f      	str	r3, [sp, #60]	; 0x3c
   1404e:	9109      	str	r1, [sp, #36]	; 0x24
   14050:	ae26      	add	r6, sp, #152	; 0x98
   14052:	e52b      	b.n	13aac <_svfprintf_r+0x3ac>
   14054:	f1bb 0f00 	cmp.w	fp, #0
   14058:	f000 860e 	beq.w	14c78 <_svfprintf_r+0x1578>
   1405c:	2700      	movs	r7, #0
   1405e:	2400      	movs	r4, #0
   14060:	2500      	movs	r5, #0
   14062:	e473      	b.n	1394c <_svfprintf_r+0x24c>
   14064:	482a      	ldr	r0, [pc, #168]	; (14110 <_svfprintf_r+0xa10>)
   14066:	9303      	str	r3, [sp, #12]
   14068:	920d      	str	r2, [sp, #52]	; 0x34
   1406a:	ea54 0305 	orrs.w	r3, r4, r5
   1406e:	970a      	str	r7, [sp, #40]	; 0x28
   14070:	f04f 0700 	mov.w	r7, #0
   14074:	f47f af15 	bne.w	13ea2 <_svfprintf_r+0x7a2>
   14078:	2400      	movs	r4, #0
   1407a:	2500      	movs	r5, #0
   1407c:	e711      	b.n	13ea2 <_svfprintf_r+0x7a2>
   1407e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14080:	e564      	b.n	13b4c <_svfprintf_r+0x44c>
   14082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14084:	2b65      	cmp	r3, #101	; 0x65
   14086:	f340 80aa 	ble.w	141de <_svfprintf_r+0xade>
   1408a:	2200      	movs	r2, #0
   1408c:	2300      	movs	r3, #0
   1408e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   14092:	f7fd fc59 	bl	11948 <__aeabi_dcmpeq>
   14096:	2800      	cmp	r0, #0
   14098:	f000 8136 	beq.w	14308 <_svfprintf_r+0xc08>
   1409c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1409e:	4a1d      	ldr	r2, [pc, #116]	; (14114 <_svfprintf_r+0xa14>)
   140a0:	f8c9 2000 	str.w	r2, [r9]
   140a4:	3301      	adds	r3, #1
   140a6:	3401      	adds	r4, #1
   140a8:	2201      	movs	r2, #1
   140aa:	2b07      	cmp	r3, #7
   140ac:	9425      	str	r4, [sp, #148]	; 0x94
   140ae:	9324      	str	r3, [sp, #144]	; 0x90
   140b0:	f8c9 2004 	str.w	r2, [r9, #4]
   140b4:	f300 83ee 	bgt.w	14894 <_svfprintf_r+0x1194>
   140b8:	f109 0908 	add.w	r9, r9, #8
   140bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   140be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   140c0:	4293      	cmp	r3, r2
   140c2:	db03      	blt.n	140cc <_svfprintf_r+0x9cc>
   140c4:	9b03      	ldr	r3, [sp, #12]
   140c6:	07db      	lsls	r3, r3, #31
   140c8:	f57f adb0 	bpl.w	13c2c <_svfprintf_r+0x52c>
   140cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140ce:	9912      	ldr	r1, [sp, #72]	; 0x48
   140d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   140d2:	f8c9 2000 	str.w	r2, [r9]
   140d6:	3301      	adds	r3, #1
   140d8:	440c      	add	r4, r1
   140da:	2b07      	cmp	r3, #7
   140dc:	9425      	str	r4, [sp, #148]	; 0x94
   140de:	f8c9 1004 	str.w	r1, [r9, #4]
   140e2:	9324      	str	r3, [sp, #144]	; 0x90
   140e4:	f300 8447 	bgt.w	14976 <_svfprintf_r+0x1276>
   140e8:	f109 0908 	add.w	r9, r9, #8
   140ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   140ee:	1e5d      	subs	r5, r3, #1
   140f0:	2d00      	cmp	r5, #0
   140f2:	f77f ad9b 	ble.w	13c2c <_svfprintf_r+0x52c>
   140f6:	4a08      	ldr	r2, [pc, #32]	; (14118 <_svfprintf_r+0xa18>)
   140f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   140fa:	920b      	str	r2, [sp, #44]	; 0x2c
   140fc:	2d10      	cmp	r5, #16
   140fe:	f340 81e9 	ble.w	144d4 <_svfprintf_r+0xdd4>
   14102:	2610      	movs	r6, #16
   14104:	9f06      	ldr	r7, [sp, #24]
   14106:	f8dd b014 	ldr.w	fp, [sp, #20]
   1410a:	e00d      	b.n	14128 <_svfprintf_r+0xa28>
   1410c:	00017a3c 	.word	0x00017a3c
   14110:	00017a50 	.word	0x00017a50
   14114:	00017784 	.word	0x00017784
   14118:	00017a1c 	.word	0x00017a1c
   1411c:	f109 0908 	add.w	r9, r9, #8
   14120:	3d10      	subs	r5, #16
   14122:	2d10      	cmp	r5, #16
   14124:	f340 81d6 	ble.w	144d4 <_svfprintf_r+0xdd4>
   14128:	3301      	adds	r3, #1
   1412a:	3410      	adds	r4, #16
   1412c:	2b07      	cmp	r3, #7
   1412e:	9425      	str	r4, [sp, #148]	; 0x94
   14130:	9324      	str	r3, [sp, #144]	; 0x90
   14132:	f8c9 a000 	str.w	sl, [r9]
   14136:	f8c9 6004 	str.w	r6, [r9, #4]
   1413a:	ddef      	ble.n	1411c <_svfprintf_r+0xa1c>
   1413c:	aa23      	add	r2, sp, #140	; 0x8c
   1413e:	4659      	mov	r1, fp
   14140:	4638      	mov	r0, r7
   14142:	f002 fbf1 	bl	16928 <__ssprint_r>
   14146:	2800      	cmp	r0, #0
   14148:	f47f abd4 	bne.w	138f4 <_svfprintf_r+0x1f4>
   1414c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1414e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14150:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14154:	e7e4      	b.n	14120 <_svfprintf_r+0xa20>
   14156:	9b08      	ldr	r3, [sp, #32]
   14158:	9a04      	ldr	r2, [sp, #16]
   1415a:	1a9f      	subs	r7, r3, r2
   1415c:	2f00      	cmp	r7, #0
   1415e:	f77f ad19 	ble.w	13b94 <_svfprintf_r+0x494>
   14162:	4abc      	ldr	r2, [pc, #752]	; (14454 <_svfprintf_r+0xd54>)
   14164:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14166:	920b      	str	r2, [sp, #44]	; 0x2c
   14168:	2f10      	cmp	r7, #16
   1416a:	dd2b      	ble.n	141c4 <_svfprintf_r+0xac4>
   1416c:	464a      	mov	r2, r9
   1416e:	4621      	mov	r1, r4
   14170:	46b9      	mov	r9, r7
   14172:	2510      	movs	r5, #16
   14174:	4637      	mov	r7, r6
   14176:	9c06      	ldr	r4, [sp, #24]
   14178:	9e05      	ldr	r6, [sp, #20]
   1417a:	e006      	b.n	1418a <_svfprintf_r+0xa8a>
   1417c:	f1a9 0910 	sub.w	r9, r9, #16
   14180:	f1b9 0f10 	cmp.w	r9, #16
   14184:	f102 0208 	add.w	r2, r2, #8
   14188:	dd18      	ble.n	141bc <_svfprintf_r+0xabc>
   1418a:	3301      	adds	r3, #1
   1418c:	3110      	adds	r1, #16
   1418e:	2b07      	cmp	r3, #7
   14190:	9125      	str	r1, [sp, #148]	; 0x94
   14192:	9324      	str	r3, [sp, #144]	; 0x90
   14194:	f8c2 a000 	str.w	sl, [r2]
   14198:	6055      	str	r5, [r2, #4]
   1419a:	ddef      	ble.n	1417c <_svfprintf_r+0xa7c>
   1419c:	aa23      	add	r2, sp, #140	; 0x8c
   1419e:	4631      	mov	r1, r6
   141a0:	4620      	mov	r0, r4
   141a2:	f002 fbc1 	bl	16928 <__ssprint_r>
   141a6:	2800      	cmp	r0, #0
   141a8:	f47f aba4 	bne.w	138f4 <_svfprintf_r+0x1f4>
   141ac:	f1a9 0910 	sub.w	r9, r9, #16
   141b0:	f1b9 0f10 	cmp.w	r9, #16
   141b4:	9925      	ldr	r1, [sp, #148]	; 0x94
   141b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   141b8:	aa30      	add	r2, sp, #192	; 0xc0
   141ba:	dce6      	bgt.n	1418a <_svfprintf_r+0xa8a>
   141bc:	463e      	mov	r6, r7
   141be:	460c      	mov	r4, r1
   141c0:	464f      	mov	r7, r9
   141c2:	4691      	mov	r9, r2
   141c4:	3301      	adds	r3, #1
   141c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   141c8:	9324      	str	r3, [sp, #144]	; 0x90
   141ca:	443c      	add	r4, r7
   141cc:	2b07      	cmp	r3, #7
   141ce:	9425      	str	r4, [sp, #148]	; 0x94
   141d0:	e889 0084 	stmia.w	r9, {r2, r7}
   141d4:	f300 823d 	bgt.w	14652 <_svfprintf_r+0xf52>
   141d8:	f109 0908 	add.w	r9, r9, #8
   141dc:	e4da      	b.n	13b94 <_svfprintf_r+0x494>
   141de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   141e0:	9d24      	ldr	r5, [sp, #144]	; 0x90
   141e2:	2b01      	cmp	r3, #1
   141e4:	f340 820a 	ble.w	145fc <_svfprintf_r+0xefc>
   141e8:	3501      	adds	r5, #1
   141ea:	3401      	adds	r4, #1
   141ec:	2301      	movs	r3, #1
   141ee:	2d07      	cmp	r5, #7
   141f0:	9425      	str	r4, [sp, #148]	; 0x94
   141f2:	9524      	str	r5, [sp, #144]	; 0x90
   141f4:	f8c9 6000 	str.w	r6, [r9]
   141f8:	f8c9 3004 	str.w	r3, [r9, #4]
   141fc:	f300 820f 	bgt.w	1461e <_svfprintf_r+0xf1e>
   14200:	f109 0908 	add.w	r9, r9, #8
   14204:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   14208:	f8c9 3000 	str.w	r3, [r9]
   1420c:	3501      	adds	r5, #1
   1420e:	4414      	add	r4, r2
   14210:	2d07      	cmp	r5, #7
   14212:	9425      	str	r4, [sp, #148]	; 0x94
   14214:	9524      	str	r5, [sp, #144]	; 0x90
   14216:	f8c9 2004 	str.w	r2, [r9, #4]
   1421a:	f300 820d 	bgt.w	14638 <_svfprintf_r+0xf38>
   1421e:	f109 0908 	add.w	r9, r9, #8
   14222:	2300      	movs	r3, #0
   14224:	2200      	movs	r2, #0
   14226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1422a:	f7fd fb8d 	bl	11948 <__aeabi_dcmpeq>
   1422e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14230:	2800      	cmp	r0, #0
   14232:	f040 80c3 	bne.w	143bc <_svfprintf_r+0xcbc>
   14236:	3b01      	subs	r3, #1
   14238:	3501      	adds	r5, #1
   1423a:	3601      	adds	r6, #1
   1423c:	441c      	add	r4, r3
   1423e:	2d07      	cmp	r5, #7
   14240:	9524      	str	r5, [sp, #144]	; 0x90
   14242:	9425      	str	r4, [sp, #148]	; 0x94
   14244:	f8c9 6000 	str.w	r6, [r9]
   14248:	f8c9 3004 	str.w	r3, [r9, #4]
   1424c:	f300 80f5 	bgt.w	1443a <_svfprintf_r+0xd3a>
   14250:	f109 0908 	add.w	r9, r9, #8
   14254:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14256:	f8c9 2004 	str.w	r2, [r9, #4]
   1425a:	3501      	adds	r5, #1
   1425c:	4414      	add	r4, r2
   1425e:	ab1f      	add	r3, sp, #124	; 0x7c
   14260:	2d07      	cmp	r5, #7
   14262:	9425      	str	r4, [sp, #148]	; 0x94
   14264:	9524      	str	r5, [sp, #144]	; 0x90
   14266:	f8c9 3000 	str.w	r3, [r9]
   1426a:	f77f acdd 	ble.w	13c28 <_svfprintf_r+0x528>
   1426e:	aa23      	add	r2, sp, #140	; 0x8c
   14270:	9905      	ldr	r1, [sp, #20]
   14272:	9806      	ldr	r0, [sp, #24]
   14274:	f002 fb58 	bl	16928 <__ssprint_r>
   14278:	2800      	cmp	r0, #0
   1427a:	f47f ab3b 	bne.w	138f4 <_svfprintf_r+0x1f4>
   1427e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14280:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14284:	e4d2      	b.n	13c2c <_svfprintf_r+0x52c>
   14286:	aa23      	add	r2, sp, #140	; 0x8c
   14288:	9905      	ldr	r1, [sp, #20]
   1428a:	9806      	ldr	r0, [sp, #24]
   1428c:	f002 fb4c 	bl	16928 <__ssprint_r>
   14290:	2800      	cmp	r0, #0
   14292:	f43f ad19 	beq.w	13cc8 <_svfprintf_r+0x5c8>
   14296:	f7ff bb2d 	b.w	138f4 <_svfprintf_r+0x1f4>
   1429a:	aa23      	add	r2, sp, #140	; 0x8c
   1429c:	9905      	ldr	r1, [sp, #20]
   1429e:	9806      	ldr	r0, [sp, #24]
   142a0:	f002 fb42 	bl	16928 <__ssprint_r>
   142a4:	2800      	cmp	r0, #0
   142a6:	f47f ab25 	bne.w	138f4 <_svfprintf_r+0x1f4>
   142aa:	9c25      	ldr	r4, [sp, #148]	; 0x94
   142ac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   142b0:	e4a9      	b.n	13c06 <_svfprintf_r+0x506>
   142b2:	aa23      	add	r2, sp, #140	; 0x8c
   142b4:	9905      	ldr	r1, [sp, #20]
   142b6:	9806      	ldr	r0, [sp, #24]
   142b8:	f002 fb36 	bl	16928 <__ssprint_r>
   142bc:	2800      	cmp	r0, #0
   142be:	f47f ab19 	bne.w	138f4 <_svfprintf_r+0x1f4>
   142c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   142c4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   142c8:	e450      	b.n	13b6c <_svfprintf_r+0x46c>
   142ca:	aa23      	add	r2, sp, #140	; 0x8c
   142cc:	9905      	ldr	r1, [sp, #20]
   142ce:	9806      	ldr	r0, [sp, #24]
   142d0:	f002 fb2a 	bl	16928 <__ssprint_r>
   142d4:	2800      	cmp	r0, #0
   142d6:	f47f ab0d 	bne.w	138f4 <_svfprintf_r+0x1f4>
   142da:	9c25      	ldr	r4, [sp, #148]	; 0x94
   142dc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   142e0:	e454      	b.n	13b8c <_svfprintf_r+0x48c>
   142e2:	f1bb 0f00 	cmp.w	fp, #0
   142e6:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   142ea:	f2c0 82df 	blt.w	148ac <_svfprintf_r+0x11ac>
   142ee:	f022 0380 	bic.w	r3, r2, #128	; 0x80
   142f2:	9303      	str	r3, [sp, #12]
   142f4:	ea54 0305 	orrs.w	r3, r4, r5
   142f8:	f47f add3 	bne.w	13ea2 <_svfprintf_r+0x7a2>
   142fc:	f1bb 0f00 	cmp.w	fp, #0
   14300:	f43f ae8c 	beq.w	1401c <_svfprintf_r+0x91c>
   14304:	2700      	movs	r7, #0
   14306:	e6b7      	b.n	14078 <_svfprintf_r+0x978>
   14308:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   1430a:	2d00      	cmp	r5, #0
   1430c:	f340 82d1 	ble.w	148b2 <_svfprintf_r+0x11b2>
   14310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14312:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14314:	4293      	cmp	r3, r2
   14316:	bfa8      	it	ge
   14318:	4613      	movge	r3, r2
   1431a:	2b00      	cmp	r3, #0
   1431c:	461d      	mov	r5, r3
   1431e:	dd0d      	ble.n	1433c <_svfprintf_r+0xc3c>
   14320:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14322:	f8c9 6000 	str.w	r6, [r9]
   14326:	3301      	adds	r3, #1
   14328:	442c      	add	r4, r5
   1432a:	2b07      	cmp	r3, #7
   1432c:	9425      	str	r4, [sp, #148]	; 0x94
   1432e:	f8c9 5004 	str.w	r5, [r9, #4]
   14332:	9324      	str	r3, [sp, #144]	; 0x90
   14334:	f300 83a9 	bgt.w	14a8a <_svfprintf_r+0x138a>
   14338:	f109 0908 	add.w	r9, r9, #8
   1433c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1433e:	2d00      	cmp	r5, #0
   14340:	bfa8      	it	ge
   14342:	1b5b      	subge	r3, r3, r5
   14344:	2b00      	cmp	r3, #0
   14346:	461d      	mov	r5, r3
   14348:	f340 80f8 	ble.w	1453c <_svfprintf_r+0xe3c>
   1434c:	4a41      	ldr	r2, [pc, #260]	; (14454 <_svfprintf_r+0xd54>)
   1434e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14350:	920b      	str	r2, [sp, #44]	; 0x2c
   14352:	2d10      	cmp	r5, #16
   14354:	f340 8283 	ble.w	1485e <_svfprintf_r+0x115e>
   14358:	4622      	mov	r2, r4
   1435a:	2710      	movs	r7, #16
   1435c:	f8dd b018 	ldr.w	fp, [sp, #24]
   14360:	9c05      	ldr	r4, [sp, #20]
   14362:	e005      	b.n	14370 <_svfprintf_r+0xc70>
   14364:	f109 0908 	add.w	r9, r9, #8
   14368:	3d10      	subs	r5, #16
   1436a:	2d10      	cmp	r5, #16
   1436c:	f340 8276 	ble.w	1485c <_svfprintf_r+0x115c>
   14370:	3301      	adds	r3, #1
   14372:	3210      	adds	r2, #16
   14374:	2b07      	cmp	r3, #7
   14376:	9225      	str	r2, [sp, #148]	; 0x94
   14378:	9324      	str	r3, [sp, #144]	; 0x90
   1437a:	f8c9 a000 	str.w	sl, [r9]
   1437e:	f8c9 7004 	str.w	r7, [r9, #4]
   14382:	ddef      	ble.n	14364 <_svfprintf_r+0xc64>
   14384:	aa23      	add	r2, sp, #140	; 0x8c
   14386:	4621      	mov	r1, r4
   14388:	4658      	mov	r0, fp
   1438a:	f002 facd 	bl	16928 <__ssprint_r>
   1438e:	2800      	cmp	r0, #0
   14390:	f47f aab0 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14394:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14396:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14398:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1439c:	e7e4      	b.n	14368 <_svfprintf_r+0xc68>
   1439e:	aa23      	add	r2, sp, #140	; 0x8c
   143a0:	9905      	ldr	r1, [sp, #20]
   143a2:	9806      	ldr	r0, [sp, #24]
   143a4:	f002 fac0 	bl	16928 <__ssprint_r>
   143a8:	2800      	cmp	r0, #0
   143aa:	f47f aaa3 	bne.w	138f4 <_svfprintf_r+0x1f4>
   143ae:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   143b2:	9c25      	ldr	r4, [sp, #148]	; 0x94
   143b4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   143b8:	f7ff bbc8 	b.w	13b4c <_svfprintf_r+0x44c>
   143bc:	1e5e      	subs	r6, r3, #1
   143be:	2e00      	cmp	r6, #0
   143c0:	f77f af48 	ble.w	14254 <_svfprintf_r+0xb54>
   143c4:	4b23      	ldr	r3, [pc, #140]	; (14454 <_svfprintf_r+0xd54>)
   143c6:	930b      	str	r3, [sp, #44]	; 0x2c
   143c8:	2e10      	cmp	r6, #16
   143ca:	dd2c      	ble.n	14426 <_svfprintf_r+0xd26>
   143cc:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   143d0:	2710      	movs	r7, #16
   143d2:	46b0      	mov	r8, r6
   143d4:	f8dd b018 	ldr.w	fp, [sp, #24]
   143d8:	9e05      	ldr	r6, [sp, #20]
   143da:	e006      	b.n	143ea <_svfprintf_r+0xcea>
   143dc:	f1a8 0810 	sub.w	r8, r8, #16
   143e0:	f1b8 0f10 	cmp.w	r8, #16
   143e4:	f109 0908 	add.w	r9, r9, #8
   143e8:	dd1a      	ble.n	14420 <_svfprintf_r+0xd20>
   143ea:	3501      	adds	r5, #1
   143ec:	3410      	adds	r4, #16
   143ee:	2d07      	cmp	r5, #7
   143f0:	9425      	str	r4, [sp, #148]	; 0x94
   143f2:	9524      	str	r5, [sp, #144]	; 0x90
   143f4:	f8c9 a000 	str.w	sl, [r9]
   143f8:	f8c9 7004 	str.w	r7, [r9, #4]
   143fc:	ddee      	ble.n	143dc <_svfprintf_r+0xcdc>
   143fe:	aa23      	add	r2, sp, #140	; 0x8c
   14400:	4631      	mov	r1, r6
   14402:	4658      	mov	r0, fp
   14404:	f002 fa90 	bl	16928 <__ssprint_r>
   14408:	2800      	cmp	r0, #0
   1440a:	f47f aa73 	bne.w	138f4 <_svfprintf_r+0x1f4>
   1440e:	f1a8 0810 	sub.w	r8, r8, #16
   14412:	f1b8 0f10 	cmp.w	r8, #16
   14416:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14418:	9d24      	ldr	r5, [sp, #144]	; 0x90
   1441a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1441e:	dce4      	bgt.n	143ea <_svfprintf_r+0xcea>
   14420:	4646      	mov	r6, r8
   14422:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   14426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14428:	3501      	adds	r5, #1
   1442a:	4434      	add	r4, r6
   1442c:	2d07      	cmp	r5, #7
   1442e:	9425      	str	r4, [sp, #148]	; 0x94
   14430:	9524      	str	r5, [sp, #144]	; 0x90
   14432:	e889 0048 	stmia.w	r9, {r3, r6}
   14436:	f77f af0b 	ble.w	14250 <_svfprintf_r+0xb50>
   1443a:	aa23      	add	r2, sp, #140	; 0x8c
   1443c:	9905      	ldr	r1, [sp, #20]
   1443e:	9806      	ldr	r0, [sp, #24]
   14440:	f002 fa72 	bl	16928 <__ssprint_r>
   14444:	2800      	cmp	r0, #0
   14446:	f47f aa55 	bne.w	138f4 <_svfprintf_r+0x1f4>
   1444a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1444c:	9d24      	ldr	r5, [sp, #144]	; 0x90
   1444e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14452:	e6ff      	b.n	14254 <_svfprintf_r+0xb54>
   14454:	00017a1c 	.word	0x00017a1c
   14458:	9903      	ldr	r1, [sp, #12]
   1445a:	f011 0210 	ands.w	r2, r1, #16
   1445e:	f000 81d3 	beq.w	14808 <_svfprintf_r+0x1108>
   14462:	980a      	ldr	r0, [sp, #40]	; 0x28
   14464:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   14468:	f1bb 0f00 	cmp.w	fp, #0
   1446c:	6804      	ldr	r4, [r0, #0]
   1446e:	f100 0704 	add.w	r7, r0, #4
   14472:	f04f 0500 	mov.w	r5, #0
   14476:	db26      	blt.n	144c6 <_svfprintf_r+0xdc6>
   14478:	460a      	mov	r2, r1
   1447a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1447e:	9203      	str	r2, [sp, #12]
   14480:	ea54 0205 	orrs.w	r2, r4, r5
   14484:	970a      	str	r7, [sp, #40]	; 0x28
   14486:	461f      	mov	r7, r3
   14488:	f47f aae8 	bne.w	13a5c <_svfprintf_r+0x35c>
   1448c:	e4ce      	b.n	13e2c <_svfprintf_r+0x72c>
   1448e:	9b03      	ldr	r3, [sp, #12]
   14490:	06d8      	lsls	r0, r3, #27
   14492:	d42a      	bmi.n	144ea <_svfprintf_r+0xdea>
   14494:	9b03      	ldr	r3, [sp, #12]
   14496:	0659      	lsls	r1, r3, #25
   14498:	d527      	bpl.n	144ea <_svfprintf_r+0xdea>
   1449a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1449c:	f9b1 4000 	ldrsh.w	r4, [r1]
   144a0:	3104      	adds	r1, #4
   144a2:	17e5      	asrs	r5, r4, #31
   144a4:	4622      	mov	r2, r4
   144a6:	462b      	mov	r3, r5
   144a8:	910a      	str	r1, [sp, #40]	; 0x28
   144aa:	f7ff bac4 	b.w	13a36 <_svfprintf_r+0x336>
   144ae:	990a      	ldr	r1, [sp, #40]	; 0x28
   144b0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   144b4:	f1bb 0f00 	cmp.w	fp, #0
   144b8:	680c      	ldr	r4, [r1, #0]
   144ba:	f101 0704 	add.w	r7, r1, #4
   144be:	f04f 0500 	mov.w	r5, #0
   144c2:	f280 824c 	bge.w	1495e <_svfprintf_r+0x125e>
   144c6:	970a      	str	r7, [sp, #40]	; 0x28
   144c8:	461f      	mov	r7, r3
   144ca:	ea54 0305 	orrs.w	r3, r4, r5
   144ce:	f47f aac5 	bne.w	13a5c <_svfprintf_r+0x35c>
   144d2:	e4b0      	b.n	13e36 <_svfprintf_r+0x736>
   144d4:	3301      	adds	r3, #1
   144d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   144d8:	9324      	str	r3, [sp, #144]	; 0x90
   144da:	442c      	add	r4, r5
   144dc:	2b07      	cmp	r3, #7
   144de:	9425      	str	r4, [sp, #148]	; 0x94
   144e0:	e889 0024 	stmia.w	r9, {r2, r5}
   144e4:	f77f aba0 	ble.w	13c28 <_svfprintf_r+0x528>
   144e8:	e6c1      	b.n	1426e <_svfprintf_r+0xb6e>
   144ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   144ec:	6814      	ldr	r4, [r2, #0]
   144ee:	4613      	mov	r3, r2
   144f0:	3304      	adds	r3, #4
   144f2:	17e5      	asrs	r5, r4, #31
   144f4:	4622      	mov	r2, r4
   144f6:	930a      	str	r3, [sp, #40]	; 0x28
   144f8:	2a00      	cmp	r2, #0
   144fa:	462b      	mov	r3, r5
   144fc:	f173 0300 	sbcs.w	r3, r3, #0
   14500:	f6bf aa9e 	bge.w	13a40 <_svfprintf_r+0x340>
   14504:	4264      	negs	r4, r4
   14506:	f04f 072d 	mov.w	r7, #45	; 0x2d
   1450a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   1450e:	f1bb 0f00 	cmp.w	fp, #0
   14512:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   14516:	f6ff aaa1 	blt.w	13a5c <_svfprintf_r+0x35c>
   1451a:	9b03      	ldr	r3, [sp, #12]
   1451c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14520:	9303      	str	r3, [sp, #12]
   14522:	f7ff ba9b 	b.w	13a5c <_svfprintf_r+0x35c>
   14526:	aa23      	add	r2, sp, #140	; 0x8c
   14528:	9905      	ldr	r1, [sp, #20]
   1452a:	9806      	ldr	r0, [sp, #24]
   1452c:	f002 f9fc 	bl	16928 <__ssprint_r>
   14530:	2800      	cmp	r0, #0
   14532:	f47f a9df 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14536:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14538:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1453c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1453e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14540:	4432      	add	r2, r6
   14542:	4617      	mov	r7, r2
   14544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14546:	4293      	cmp	r3, r2
   14548:	db47      	blt.n	145da <_svfprintf_r+0xeda>
   1454a:	9a03      	ldr	r2, [sp, #12]
   1454c:	07d5      	lsls	r5, r2, #31
   1454e:	d444      	bmi.n	145da <_svfprintf_r+0xeda>
   14550:	990e      	ldr	r1, [sp, #56]	; 0x38
   14552:	440e      	add	r6, r1
   14554:	1bf5      	subs	r5, r6, r7
   14556:	1acb      	subs	r3, r1, r3
   14558:	429d      	cmp	r5, r3
   1455a:	bfa8      	it	ge
   1455c:	461d      	movge	r5, r3
   1455e:	2d00      	cmp	r5, #0
   14560:	462e      	mov	r6, r5
   14562:	dd0d      	ble.n	14580 <_svfprintf_r+0xe80>
   14564:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14566:	f8c9 7000 	str.w	r7, [r9]
   1456a:	3201      	adds	r2, #1
   1456c:	442c      	add	r4, r5
   1456e:	2a07      	cmp	r2, #7
   14570:	9425      	str	r4, [sp, #148]	; 0x94
   14572:	f8c9 5004 	str.w	r5, [r9, #4]
   14576:	9224      	str	r2, [sp, #144]	; 0x90
   14578:	f300 82fe 	bgt.w	14b78 <_svfprintf_r+0x1478>
   1457c:	f109 0908 	add.w	r9, r9, #8
   14580:	2e00      	cmp	r6, #0
   14582:	bfac      	ite	ge
   14584:	1b9d      	subge	r5, r3, r6
   14586:	461d      	movlt	r5, r3
   14588:	2d00      	cmp	r5, #0
   1458a:	f77f ab4f 	ble.w	13c2c <_svfprintf_r+0x52c>
   1458e:	4aba      	ldr	r2, [pc, #744]	; (14878 <_svfprintf_r+0x1178>)
   14590:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14592:	920b      	str	r2, [sp, #44]	; 0x2c
   14594:	2d10      	cmp	r5, #16
   14596:	dd9d      	ble.n	144d4 <_svfprintf_r+0xdd4>
   14598:	2610      	movs	r6, #16
   1459a:	9f06      	ldr	r7, [sp, #24]
   1459c:	f8dd b014 	ldr.w	fp, [sp, #20]
   145a0:	e004      	b.n	145ac <_svfprintf_r+0xeac>
   145a2:	f109 0908 	add.w	r9, r9, #8
   145a6:	3d10      	subs	r5, #16
   145a8:	2d10      	cmp	r5, #16
   145aa:	dd93      	ble.n	144d4 <_svfprintf_r+0xdd4>
   145ac:	3301      	adds	r3, #1
   145ae:	3410      	adds	r4, #16
   145b0:	2b07      	cmp	r3, #7
   145b2:	9425      	str	r4, [sp, #148]	; 0x94
   145b4:	9324      	str	r3, [sp, #144]	; 0x90
   145b6:	f8c9 a000 	str.w	sl, [r9]
   145ba:	f8c9 6004 	str.w	r6, [r9, #4]
   145be:	ddf0      	ble.n	145a2 <_svfprintf_r+0xea2>
   145c0:	aa23      	add	r2, sp, #140	; 0x8c
   145c2:	4659      	mov	r1, fp
   145c4:	4638      	mov	r0, r7
   145c6:	f002 f9af 	bl	16928 <__ssprint_r>
   145ca:	2800      	cmp	r0, #0
   145cc:	f47f a992 	bne.w	138f4 <_svfprintf_r+0x1f4>
   145d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
   145d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   145d4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   145d8:	e7e5      	b.n	145a6 <_svfprintf_r+0xea6>
   145da:	9a24      	ldr	r2, [sp, #144]	; 0x90
   145dc:	9812      	ldr	r0, [sp, #72]	; 0x48
   145de:	9913      	ldr	r1, [sp, #76]	; 0x4c
   145e0:	f8c9 1000 	str.w	r1, [r9]
   145e4:	3201      	adds	r2, #1
   145e6:	4404      	add	r4, r0
   145e8:	2a07      	cmp	r2, #7
   145ea:	9425      	str	r4, [sp, #148]	; 0x94
   145ec:	f8c9 0004 	str.w	r0, [r9, #4]
   145f0:	9224      	str	r2, [sp, #144]	; 0x90
   145f2:	f300 82b4 	bgt.w	14b5e <_svfprintf_r+0x145e>
   145f6:	f109 0908 	add.w	r9, r9, #8
   145fa:	e7a9      	b.n	14550 <_svfprintf_r+0xe50>
   145fc:	9b03      	ldr	r3, [sp, #12]
   145fe:	07d8      	lsls	r0, r3, #31
   14600:	f53f adf2 	bmi.w	141e8 <_svfprintf_r+0xae8>
   14604:	3501      	adds	r5, #1
   14606:	3401      	adds	r4, #1
   14608:	2301      	movs	r3, #1
   1460a:	2d07      	cmp	r5, #7
   1460c:	9425      	str	r4, [sp, #148]	; 0x94
   1460e:	9524      	str	r5, [sp, #144]	; 0x90
   14610:	f8c9 6000 	str.w	r6, [r9]
   14614:	f8c9 3004 	str.w	r3, [r9, #4]
   14618:	f77f ae1a 	ble.w	14250 <_svfprintf_r+0xb50>
   1461c:	e70d      	b.n	1443a <_svfprintf_r+0xd3a>
   1461e:	aa23      	add	r2, sp, #140	; 0x8c
   14620:	9905      	ldr	r1, [sp, #20]
   14622:	9806      	ldr	r0, [sp, #24]
   14624:	f002 f980 	bl	16928 <__ssprint_r>
   14628:	2800      	cmp	r0, #0
   1462a:	f47f a963 	bne.w	138f4 <_svfprintf_r+0x1f4>
   1462e:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14630:	9d24      	ldr	r5, [sp, #144]	; 0x90
   14632:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14636:	e5e5      	b.n	14204 <_svfprintf_r+0xb04>
   14638:	aa23      	add	r2, sp, #140	; 0x8c
   1463a:	9905      	ldr	r1, [sp, #20]
   1463c:	9806      	ldr	r0, [sp, #24]
   1463e:	f002 f973 	bl	16928 <__ssprint_r>
   14642:	2800      	cmp	r0, #0
   14644:	f47f a956 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14648:	9c25      	ldr	r4, [sp, #148]	; 0x94
   1464a:	9d24      	ldr	r5, [sp, #144]	; 0x90
   1464c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14650:	e5e7      	b.n	14222 <_svfprintf_r+0xb22>
   14652:	aa23      	add	r2, sp, #140	; 0x8c
   14654:	9905      	ldr	r1, [sp, #20]
   14656:	9806      	ldr	r0, [sp, #24]
   14658:	f002 f966 	bl	16928 <__ssprint_r>
   1465c:	2800      	cmp	r0, #0
   1465e:	f47f a949 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14662:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14664:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14668:	f7ff ba94 	b.w	13b94 <_svfprintf_r+0x494>
   1466c:	9903      	ldr	r1, [sp, #12]
   1466e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
   14672:	f000 80b9 	beq.w	147e8 <_svfprintf_r+0x10e8>
   14676:	980a      	ldr	r0, [sp, #40]	; 0x28
   14678:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
   1467c:	4603      	mov	r3, r0
   1467e:	f1bb 0f00 	cmp.w	fp, #0
   14682:	f103 0304 	add.w	r3, r3, #4
   14686:	8804      	ldrh	r4, [r0, #0]
   14688:	f04f 0500 	mov.w	r5, #0
   1468c:	f2c0 81c0 	blt.w	14a10 <_svfprintf_r+0x1310>
   14690:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   14694:	9103      	str	r1, [sp, #12]
   14696:	ea54 0105 	orrs.w	r1, r4, r5
   1469a:	930a      	str	r3, [sp, #40]	; 0x28
   1469c:	f43f acda 	beq.w	14054 <_svfprintf_r+0x954>
   146a0:	4617      	mov	r7, r2
   146a2:	f7ff b953 	b.w	1394c <_svfprintf_r+0x24c>
   146a6:	9b03      	ldr	r3, [sp, #12]
   146a8:	06df      	lsls	r7, r3, #27
   146aa:	d40b      	bmi.n	146c4 <_svfprintf_r+0xfc4>
   146ac:	9b03      	ldr	r3, [sp, #12]
   146ae:	065e      	lsls	r6, r3, #25
   146b0:	d508      	bpl.n	146c4 <_svfprintf_r+0xfc4>
   146b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   146b4:	6813      	ldr	r3, [r2, #0]
   146b6:	3204      	adds	r2, #4
   146b8:	920a      	str	r2, [sp, #40]	; 0x28
   146ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   146be:	801a      	strh	r2, [r3, #0]
   146c0:	f7ff b845 	b.w	1374e <_svfprintf_r+0x4e>
   146c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   146c6:	6813      	ldr	r3, [r2, #0]
   146c8:	3204      	adds	r2, #4
   146ca:	920a      	str	r2, [sp, #40]	; 0x28
   146cc:	9a07      	ldr	r2, [sp, #28]
   146ce:	601a      	str	r2, [r3, #0]
   146d0:	f7ff b83d 	b.w	1374e <_svfprintf_r+0x4e>
   146d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   146d8:	4602      	mov	r2, r0
   146da:	460b      	mov	r3, r1
   146dc:	f7fd f966 	bl	119ac <__aeabi_dcmpun>
   146e0:	2800      	cmp	r0, #0
   146e2:	f040 82fd 	bne.w	14ce0 <_svfprintf_r+0x15e0>
   146e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   146e8:	f1bb 3fff 	cmp.w	fp, #4294967295
   146ec:	f023 0720 	bic.w	r7, r3, #32
   146f0:	f000 8267 	beq.w	14bc2 <_svfprintf_r+0x14c2>
   146f4:	2f47      	cmp	r7, #71	; 0x47
   146f6:	f000 8182 	beq.w	149fe <_svfprintf_r+0x12fe>
   146fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   146fc:	9a03      	ldr	r2, [sp, #12]
   146fe:	2b00      	cmp	r3, #0
   14700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   14704:	920b      	str	r2, [sp, #44]	; 0x2c
   14706:	f2c0 8278 	blt.w	14bfa <_svfprintf_r+0x14fa>
   1470a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   1470e:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
   14712:	2300      	movs	r3, #0
   14714:	9304      	str	r3, [sp, #16]
   14716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14718:	2b66      	cmp	r3, #102	; 0x66
   1471a:	f000 8255 	beq.w	14bc8 <_svfprintf_r+0x14c8>
   1471e:	2b46      	cmp	r3, #70	; 0x46
   14720:	f000 8145 	beq.w	149ae <_svfprintf_r+0x12ae>
   14724:	2f45      	cmp	r7, #69	; 0x45
   14726:	bf0c      	ite	eq
   14728:	f10b 0501 	addeq.w	r5, fp, #1
   1472c:	465d      	movne	r5, fp
   1472e:	aa21      	add	r2, sp, #132	; 0x84
   14730:	ab1e      	add	r3, sp, #120	; 0x78
   14732:	9201      	str	r2, [sp, #4]
   14734:	9300      	str	r3, [sp, #0]
   14736:	462a      	mov	r2, r5
   14738:	ab1d      	add	r3, sp, #116	; 0x74
   1473a:	2102      	movs	r1, #2
   1473c:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   14740:	9806      	ldr	r0, [sp, #24]
   14742:	f000 fced 	bl	15120 <_dtoa_r>
   14746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14748:	2b67      	cmp	r3, #103	; 0x67
   1474a:	4606      	mov	r6, r0
   1474c:	f040 826b 	bne.w	14c26 <_svfprintf_r+0x1526>
   14750:	9b03      	ldr	r3, [sp, #12]
   14752:	07da      	lsls	r2, r3, #31
   14754:	f140 82b9 	bpl.w	14cca <_svfprintf_r+0x15ca>
   14758:	1974      	adds	r4, r6, r5
   1475a:	2200      	movs	r2, #0
   1475c:	2300      	movs	r3, #0
   1475e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   14762:	f7fd f8f1 	bl	11948 <__aeabi_dcmpeq>
   14766:	2800      	cmp	r0, #0
   14768:	f040 818d 	bne.w	14a86 <_svfprintf_r+0x1386>
   1476c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1476e:	429c      	cmp	r4, r3
   14770:	d906      	bls.n	14780 <_svfprintf_r+0x1080>
   14772:	2130      	movs	r1, #48	; 0x30
   14774:	1c5a      	adds	r2, r3, #1
   14776:	9221      	str	r2, [sp, #132]	; 0x84
   14778:	7019      	strb	r1, [r3, #0]
   1477a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1477c:	429c      	cmp	r4, r3
   1477e:	d8f9      	bhi.n	14774 <_svfprintf_r+0x1074>
   14780:	1b9b      	subs	r3, r3, r6
   14782:	2f47      	cmp	r7, #71	; 0x47
   14784:	930e      	str	r3, [sp, #56]	; 0x38
   14786:	f000 8177 	beq.w	14a78 <_svfprintf_r+0x1378>
   1478a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1478c:	2b65      	cmp	r3, #101	; 0x65
   1478e:	f340 8259 	ble.w	14c44 <_svfprintf_r+0x1544>
   14792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14794:	2b66      	cmp	r3, #102	; 0x66
   14796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14798:	930f      	str	r3, [sp, #60]	; 0x3c
   1479a:	f000 8260 	beq.w	14c5e <_svfprintf_r+0x155e>
   1479e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   147a0:	990e      	ldr	r1, [sp, #56]	; 0x38
   147a2:	428a      	cmp	r2, r1
   147a4:	f2c0 8232 	blt.w	14c0c <_svfprintf_r+0x150c>
   147a8:	9b03      	ldr	r3, [sp, #12]
   147aa:	07d9      	lsls	r1, r3, #31
   147ac:	f100 828f 	bmi.w	14cce <_svfprintf_r+0x15ce>
   147b0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   147b4:	9209      	str	r2, [sp, #36]	; 0x24
   147b6:	2267      	movs	r2, #103	; 0x67
   147b8:	920d      	str	r2, [sp, #52]	; 0x34
   147ba:	9a04      	ldr	r2, [sp, #16]
   147bc:	2a00      	cmp	r2, #0
   147be:	f040 812f 	bne.w	14a20 <_svfprintf_r+0x1320>
   147c2:	9304      	str	r3, [sp, #16]
   147c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   147c6:	9303      	str	r3, [sp, #12]
   147c8:	4693      	mov	fp, r2
   147ca:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   147ce:	f7ff b969 	b.w	13aa4 <_svfprintf_r+0x3a4>
   147d2:	f027 0707 	bic.w	r7, r7, #7
   147d6:	ed97 7b00 	vldr	d7, [r7]
   147da:	f107 0308 	add.w	r3, r7, #8
   147de:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
   147e2:	930a      	str	r3, [sp, #40]	; 0x28
   147e4:	f7ff ba8a 	b.w	13cfc <_svfprintf_r+0x5fc>
   147e8:	990a      	ldr	r1, [sp, #40]	; 0x28
   147ea:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
   147ee:	f1bb 0f00 	cmp.w	fp, #0
   147f2:	680c      	ldr	r4, [r1, #0]
   147f4:	f101 0704 	add.w	r7, r1, #4
   147f8:	f04f 0500 	mov.w	r5, #0
   147fc:	f280 80ac 	bge.w	14958 <_svfprintf_r+0x1258>
   14800:	970a      	str	r7, [sp, #40]	; 0x28
   14802:	2700      	movs	r7, #0
   14804:	f7ff b8a2 	b.w	1394c <_svfprintf_r+0x24c>
   14808:	9903      	ldr	r1, [sp, #12]
   1480a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
   1480e:	f43f ae4e 	beq.w	144ae <_svfprintf_r+0xdae>
   14812:	980a      	ldr	r0, [sp, #40]	; 0x28
   14814:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
   14818:	4603      	mov	r3, r0
   1481a:	f1bb 0f00 	cmp.w	fp, #0
   1481e:	f103 0304 	add.w	r3, r3, #4
   14822:	8804      	ldrh	r4, [r0, #0]
   14824:	f04f 0500 	mov.w	r5, #0
   14828:	f2c0 80ef 	blt.w	14a0a <_svfprintf_r+0x130a>
   1482c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   14830:	9103      	str	r1, [sp, #12]
   14832:	ea54 0105 	orrs.w	r1, r4, r5
   14836:	930a      	str	r3, [sp, #40]	; 0x28
   14838:	4617      	mov	r7, r2
   1483a:	f47f a90f 	bne.w	13a5c <_svfprintf_r+0x35c>
   1483e:	f7ff baf5 	b.w	13e2c <_svfprintf_r+0x72c>
   14842:	9b03      	ldr	r3, [sp, #12]
   14844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14846:	f013 0f40 	tst.w	r3, #64	; 0x40
   1484a:	4613      	mov	r3, r2
   1484c:	f000 80e2 	beq.w	14a14 <_svfprintf_r+0x1314>
   14850:	3304      	adds	r3, #4
   14852:	8814      	ldrh	r4, [r2, #0]
   14854:	930a      	str	r3, [sp, #40]	; 0x28
   14856:	2500      	movs	r5, #0
   14858:	f7ff bb05 	b.w	13e66 <_svfprintf_r+0x766>
   1485c:	4614      	mov	r4, r2
   1485e:	3301      	adds	r3, #1
   14860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14862:	9324      	str	r3, [sp, #144]	; 0x90
   14864:	442c      	add	r4, r5
   14866:	2b07      	cmp	r3, #7
   14868:	9425      	str	r4, [sp, #148]	; 0x94
   1486a:	e889 0024 	stmia.w	r9, {r2, r5}
   1486e:	f73f ae5a 	bgt.w	14526 <_svfprintf_r+0xe26>
   14872:	f109 0908 	add.w	r9, r9, #8
   14876:	e661      	b.n	1453c <_svfprintf_r+0xe3c>
   14878:	00017a1c 	.word	0x00017a1c
   1487c:	2700      	movs	r7, #0
   1487e:	45bb      	cmp	fp, r7
   14880:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   14884:	f6ff abf8 	blt.w	14078 <_svfprintf_r+0x978>
   14888:	9b03      	ldr	r3, [sp, #12]
   1488a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1488e:	9303      	str	r3, [sp, #12]
   14890:	f7ff bbc0 	b.w	14014 <_svfprintf_r+0x914>
   14894:	aa23      	add	r2, sp, #140	; 0x8c
   14896:	9905      	ldr	r1, [sp, #20]
   14898:	9806      	ldr	r0, [sp, #24]
   1489a:	f002 f845 	bl	16928 <__ssprint_r>
   1489e:	2800      	cmp	r0, #0
   148a0:	f47f a828 	bne.w	138f4 <_svfprintf_r+0x1f4>
   148a4:	9c25      	ldr	r4, [sp, #148]	; 0x94
   148a6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   148aa:	e407      	b.n	140bc <_svfprintf_r+0x9bc>
   148ac:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   148ae:	f7ff bbdc 	b.w	1406a <_svfprintf_r+0x96a>
   148b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   148b4:	4ab8      	ldr	r2, [pc, #736]	; (14b98 <_svfprintf_r+0x1498>)
   148b6:	f8c9 2000 	str.w	r2, [r9]
   148ba:	3301      	adds	r3, #1
   148bc:	3401      	adds	r4, #1
   148be:	2201      	movs	r2, #1
   148c0:	2b07      	cmp	r3, #7
   148c2:	9425      	str	r4, [sp, #148]	; 0x94
   148c4:	9324      	str	r3, [sp, #144]	; 0x90
   148c6:	f8c9 2004 	str.w	r2, [r9, #4]
   148ca:	f300 808b 	bgt.w	149e4 <_svfprintf_r+0x12e4>
   148ce:	f109 0908 	add.w	r9, r9, #8
   148d2:	b92d      	cbnz	r5, 148e0 <_svfprintf_r+0x11e0>
   148d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   148d6:	b91b      	cbnz	r3, 148e0 <_svfprintf_r+0x11e0>
   148d8:	9b03      	ldr	r3, [sp, #12]
   148da:	07df      	lsls	r7, r3, #31
   148dc:	f57f a9a6 	bpl.w	13c2c <_svfprintf_r+0x52c>
   148e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
   148e2:	9912      	ldr	r1, [sp, #72]	; 0x48
   148e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   148e6:	f8c9 2000 	str.w	r2, [r9]
   148ea:	3301      	adds	r3, #1
   148ec:	440c      	add	r4, r1
   148ee:	2b07      	cmp	r3, #7
   148f0:	9425      	str	r4, [sp, #148]	; 0x94
   148f2:	f8c9 1004 	str.w	r1, [r9, #4]
   148f6:	9324      	str	r3, [sp, #144]	; 0x90
   148f8:	f300 81cd 	bgt.w	14c96 <_svfprintf_r+0x1596>
   148fc:	f109 0908 	add.w	r9, r9, #8
   14900:	426d      	negs	r5, r5
   14902:	2d00      	cmp	r5, #0
   14904:	f340 80aa 	ble.w	14a5c <_svfprintf_r+0x135c>
   14908:	4aa4      	ldr	r2, [pc, #656]	; (14b9c <_svfprintf_r+0x149c>)
   1490a:	920b      	str	r2, [sp, #44]	; 0x2c
   1490c:	2d10      	cmp	r5, #16
   1490e:	f340 80c9 	ble.w	14aa4 <_svfprintf_r+0x13a4>
   14912:	4622      	mov	r2, r4
   14914:	2710      	movs	r7, #16
   14916:	f8dd b018 	ldr.w	fp, [sp, #24]
   1491a:	9c05      	ldr	r4, [sp, #20]
   1491c:	e005      	b.n	1492a <_svfprintf_r+0x122a>
   1491e:	f109 0908 	add.w	r9, r9, #8
   14922:	3d10      	subs	r5, #16
   14924:	2d10      	cmp	r5, #16
   14926:	f340 80bc 	ble.w	14aa2 <_svfprintf_r+0x13a2>
   1492a:	3301      	adds	r3, #1
   1492c:	3210      	adds	r2, #16
   1492e:	2b07      	cmp	r3, #7
   14930:	9225      	str	r2, [sp, #148]	; 0x94
   14932:	9324      	str	r3, [sp, #144]	; 0x90
   14934:	f8c9 a000 	str.w	sl, [r9]
   14938:	f8c9 7004 	str.w	r7, [r9, #4]
   1493c:	ddef      	ble.n	1491e <_svfprintf_r+0x121e>
   1493e:	aa23      	add	r2, sp, #140	; 0x8c
   14940:	4621      	mov	r1, r4
   14942:	4658      	mov	r0, fp
   14944:	f001 fff0 	bl	16928 <__ssprint_r>
   14948:	2800      	cmp	r0, #0
   1494a:	f47e afd3 	bne.w	138f4 <_svfprintf_r+0x1f4>
   1494e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   14950:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14952:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14956:	e7e4      	b.n	14922 <_svfprintf_r+0x1222>
   14958:	9a03      	ldr	r2, [sp, #12]
   1495a:	f7ff ba39 	b.w	13dd0 <_svfprintf_r+0x6d0>
   1495e:	9a03      	ldr	r2, [sp, #12]
   14960:	e58b      	b.n	1447a <_svfprintf_r+0xd7a>
   14962:	9b03      	ldr	r3, [sp, #12]
   14964:	f043 0320 	orr.w	r3, r3, #32
   14968:	9303      	str	r3, [sp, #12]
   1496a:	f108 0801 	add.w	r8, r8, #1
   1496e:	f898 3000 	ldrb.w	r3, [r8]
   14972:	f7fe bf1f 	b.w	137b4 <_svfprintf_r+0xb4>
   14976:	aa23      	add	r2, sp, #140	; 0x8c
   14978:	9905      	ldr	r1, [sp, #20]
   1497a:	9806      	ldr	r0, [sp, #24]
   1497c:	f001 ffd4 	bl	16928 <__ssprint_r>
   14980:	2800      	cmp	r0, #0
   14982:	f47e afb7 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14986:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14988:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   1498c:	f7ff bbae 	b.w	140ec <_svfprintf_r+0x9ec>
   14990:	2140      	movs	r1, #64	; 0x40
   14992:	9806      	ldr	r0, [sp, #24]
   14994:	f7fd fa7a 	bl	11e8c <_malloc_r>
   14998:	9a05      	ldr	r2, [sp, #20]
   1499a:	6010      	str	r0, [r2, #0]
   1499c:	6110      	str	r0, [r2, #16]
   1499e:	2800      	cmp	r0, #0
   149a0:	f000 81f3 	beq.w	14d8a <_svfprintf_r+0x168a>
   149a4:	9a05      	ldr	r2, [sp, #20]
   149a6:	2340      	movs	r3, #64	; 0x40
   149a8:	6153      	str	r3, [r2, #20]
   149aa:	f7fe bec0 	b.w	1372e <_svfprintf_r+0x2e>
   149ae:	aa21      	add	r2, sp, #132	; 0x84
   149b0:	ab1e      	add	r3, sp, #120	; 0x78
   149b2:	9201      	str	r2, [sp, #4]
   149b4:	9300      	str	r3, [sp, #0]
   149b6:	465a      	mov	r2, fp
   149b8:	ab1d      	add	r3, sp, #116	; 0x74
   149ba:	2103      	movs	r1, #3
   149bc:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   149c0:	9806      	ldr	r0, [sp, #24]
   149c2:	f000 fbad 	bl	15120 <_dtoa_r>
   149c6:	465d      	mov	r5, fp
   149c8:	4606      	mov	r6, r0
   149ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   149cc:	2b46      	cmp	r3, #70	; 0x46
   149ce:	eb06 0405 	add.w	r4, r6, r5
   149d2:	f47f aec2 	bne.w	1475a <_svfprintf_r+0x105a>
   149d6:	7833      	ldrb	r3, [r6, #0]
   149d8:	2b30      	cmp	r3, #48	; 0x30
   149da:	f000 8187 	beq.w	14cec <_svfprintf_r+0x15ec>
   149de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   149e0:	442c      	add	r4, r5
   149e2:	e6ba      	b.n	1475a <_svfprintf_r+0x105a>
   149e4:	aa23      	add	r2, sp, #140	; 0x8c
   149e6:	9905      	ldr	r1, [sp, #20]
   149e8:	9806      	ldr	r0, [sp, #24]
   149ea:	f001 ff9d 	bl	16928 <__ssprint_r>
   149ee:	2800      	cmp	r0, #0
   149f0:	f47e af80 	bne.w	138f4 <_svfprintf_r+0x1f4>
   149f4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   149f6:	9c25      	ldr	r4, [sp, #148]	; 0x94
   149f8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   149fc:	e769      	b.n	148d2 <_svfprintf_r+0x11d2>
   149fe:	f1bb 0f00 	cmp.w	fp, #0
   14a02:	bf08      	it	eq
   14a04:	f04f 0b01 	moveq.w	fp, #1
   14a08:	e677      	b.n	146fa <_svfprintf_r+0xffa>
   14a0a:	930a      	str	r3, [sp, #40]	; 0x28
   14a0c:	4617      	mov	r7, r2
   14a0e:	e55c      	b.n	144ca <_svfprintf_r+0xdca>
   14a10:	930a      	str	r3, [sp, #40]	; 0x28
   14a12:	e6f6      	b.n	14802 <_svfprintf_r+0x1102>
   14a14:	3304      	adds	r3, #4
   14a16:	6814      	ldr	r4, [r2, #0]
   14a18:	930a      	str	r3, [sp, #40]	; 0x28
   14a1a:	2500      	movs	r5, #0
   14a1c:	f7ff ba23 	b.w	13e66 <_svfprintf_r+0x766>
   14a20:	272d      	movs	r7, #45	; 0x2d
   14a22:	9304      	str	r3, [sp, #16]
   14a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14a26:	9303      	str	r3, [sp, #12]
   14a28:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   14a2c:	f04f 0b00 	mov.w	fp, #0
   14a30:	f7ff b839 	b.w	13aa6 <_svfprintf_r+0x3a6>
   14a34:	4630      	mov	r0, r6
   14a36:	f7fe faa3 	bl	12f80 <strlen>
   14a3a:	46a3      	mov	fp, r4
   14a3c:	4603      	mov	r3, r0
   14a3e:	9009      	str	r0, [sp, #36]	; 0x24
   14a40:	f7ff baa2 	b.w	13f88 <_svfprintf_r+0x888>
   14a44:	aa23      	add	r2, sp, #140	; 0x8c
   14a46:	9905      	ldr	r1, [sp, #20]
   14a48:	9806      	ldr	r0, [sp, #24]
   14a4a:	f001 ff6d 	bl	16928 <__ssprint_r>
   14a4e:	2800      	cmp	r0, #0
   14a50:	f47e af50 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14a54:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14a56:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14a58:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14a5c:	990e      	ldr	r1, [sp, #56]	; 0x38
   14a5e:	f8c9 6000 	str.w	r6, [r9]
   14a62:	3301      	adds	r3, #1
   14a64:	440c      	add	r4, r1
   14a66:	2b07      	cmp	r3, #7
   14a68:	9425      	str	r4, [sp, #148]	; 0x94
   14a6a:	9324      	str	r3, [sp, #144]	; 0x90
   14a6c:	f8c9 1004 	str.w	r1, [r9, #4]
   14a70:	f77f a8da 	ble.w	13c28 <_svfprintf_r+0x528>
   14a74:	f7ff bbfb 	b.w	1426e <_svfprintf_r+0xb6e>
   14a78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14a7a:	1cdd      	adds	r5, r3, #3
   14a7c:	db1e      	blt.n	14abc <_svfprintf_r+0x13bc>
   14a7e:	459b      	cmp	fp, r3
   14a80:	db1c      	blt.n	14abc <_svfprintf_r+0x13bc>
   14a82:	930f      	str	r3, [sp, #60]	; 0x3c
   14a84:	e68b      	b.n	1479e <_svfprintf_r+0x109e>
   14a86:	4623      	mov	r3, r4
   14a88:	e67a      	b.n	14780 <_svfprintf_r+0x1080>
   14a8a:	aa23      	add	r2, sp, #140	; 0x8c
   14a8c:	9905      	ldr	r1, [sp, #20]
   14a8e:	9806      	ldr	r0, [sp, #24]
   14a90:	f001 ff4a 	bl	16928 <__ssprint_r>
   14a94:	2800      	cmp	r0, #0
   14a96:	f47e af2d 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14a9a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14a9c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14aa0:	e44c      	b.n	1433c <_svfprintf_r+0xc3c>
   14aa2:	4614      	mov	r4, r2
   14aa4:	3301      	adds	r3, #1
   14aa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14aa8:	9324      	str	r3, [sp, #144]	; 0x90
   14aaa:	442c      	add	r4, r5
   14aac:	2b07      	cmp	r3, #7
   14aae:	9425      	str	r4, [sp, #148]	; 0x94
   14ab0:	e889 0024 	stmia.w	r9, {r2, r5}
   14ab4:	dcc6      	bgt.n	14a44 <_svfprintf_r+0x1344>
   14ab6:	f109 0908 	add.w	r9, r9, #8
   14aba:	e7cf      	b.n	14a5c <_svfprintf_r+0x135c>
   14abc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14abe:	3a02      	subs	r2, #2
   14ac0:	920d      	str	r2, [sp, #52]	; 0x34
   14ac2:	3b01      	subs	r3, #1
   14ac4:	2b00      	cmp	r3, #0
   14ac6:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   14aca:	931d      	str	r3, [sp, #116]	; 0x74
   14acc:	bfb8      	it	lt
   14ace:	425b      	neglt	r3, r3
   14ad0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
   14ad4:	bfb4      	ite	lt
   14ad6:	222d      	movlt	r2, #45	; 0x2d
   14ad8:	222b      	movge	r2, #43	; 0x2b
   14ada:	2b09      	cmp	r3, #9
   14adc:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
   14ae0:	f340 80eb 	ble.w	14cba <_svfprintf_r+0x15ba>
   14ae4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
   14ae8:	4604      	mov	r4, r0
   14aea:	4a2d      	ldr	r2, [pc, #180]	; (14ba0 <_svfprintf_r+0x14a0>)
   14aec:	fb82 2103 	smull	r2, r1, r2, r3
   14af0:	17da      	asrs	r2, r3, #31
   14af2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   14af6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   14afa:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
   14afe:	f103 0130 	add.w	r1, r3, #48	; 0x30
   14b02:	2a09      	cmp	r2, #9
   14b04:	4613      	mov	r3, r2
   14b06:	f804 1d01 	strb.w	r1, [r4, #-1]!
   14b0a:	dcee      	bgt.n	14aea <_svfprintf_r+0x13ea>
   14b0c:	4621      	mov	r1, r4
   14b0e:	3330      	adds	r3, #48	; 0x30
   14b10:	b2da      	uxtb	r2, r3
   14b12:	f801 2d01 	strb.w	r2, [r1, #-1]!
   14b16:	4288      	cmp	r0, r1
   14b18:	f240 8134 	bls.w	14d84 <_svfprintf_r+0x1684>
   14b1c:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
   14b20:	4623      	mov	r3, r4
   14b22:	e001      	b.n	14b28 <_svfprintf_r+0x1428>
   14b24:	f813 2b01 	ldrb.w	r2, [r3], #1
   14b28:	f801 2b01 	strb.w	r2, [r1], #1
   14b2c:	4298      	cmp	r0, r3
   14b2e:	d1f9      	bne.n	14b24 <_svfprintf_r+0x1424>
   14b30:	1c43      	adds	r3, r0, #1
   14b32:	1b1b      	subs	r3, r3, r4
   14b34:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
   14b38:	4413      	add	r3, r2
   14b3a:	aa1f      	add	r2, sp, #124	; 0x7c
   14b3c:	1a9b      	subs	r3, r3, r2
   14b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14b40:	9315      	str	r3, [sp, #84]	; 0x54
   14b42:	2a01      	cmp	r2, #1
   14b44:	4413      	add	r3, r2
   14b46:	9309      	str	r3, [sp, #36]	; 0x24
   14b48:	f340 80e7 	ble.w	14d1a <_svfprintf_r+0x161a>
   14b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14b4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14b50:	4413      	add	r3, r2
   14b52:	2200      	movs	r2, #0
   14b54:	9309      	str	r3, [sp, #36]	; 0x24
   14b56:	920f      	str	r2, [sp, #60]	; 0x3c
   14b58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14b5c:	e62d      	b.n	147ba <_svfprintf_r+0x10ba>
   14b5e:	aa23      	add	r2, sp, #140	; 0x8c
   14b60:	9905      	ldr	r1, [sp, #20]
   14b62:	9806      	ldr	r0, [sp, #24]
   14b64:	f001 fee0 	bl	16928 <__ssprint_r>
   14b68:	2800      	cmp	r0, #0
   14b6a:	f47e aec3 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14b6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14b70:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14b72:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14b76:	e4eb      	b.n	14550 <_svfprintf_r+0xe50>
   14b78:	aa23      	add	r2, sp, #140	; 0x8c
   14b7a:	9905      	ldr	r1, [sp, #20]
   14b7c:	9806      	ldr	r0, [sp, #24]
   14b7e:	f001 fed3 	bl	16928 <__ssprint_r>
   14b82:	2800      	cmp	r0, #0
   14b84:	f47e aeb6 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14b8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14b8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14b8e:	1ad3      	subs	r3, r2, r3
   14b90:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14b94:	e4f4      	b.n	14580 <_svfprintf_r+0xe80>
   14b96:	bf00      	nop
   14b98:	00017784 	.word	0x00017784
   14b9c:	00017a1c 	.word	0x00017a1c
   14ba0:	66666667 	.word	0x66666667
   14ba4:	2d06      	cmp	r5, #6
   14ba6:	462b      	mov	r3, r5
   14ba8:	bf28      	it	cs
   14baa:	2306      	movcs	r3, #6
   14bac:	9309      	str	r3, [sp, #36]	; 0x24
   14bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14bb2:	46b3      	mov	fp, r6
   14bb4:	970a      	str	r7, [sp, #40]	; 0x28
   14bb6:	960f      	str	r6, [sp, #60]	; 0x3c
   14bb8:	4637      	mov	r7, r6
   14bba:	9304      	str	r3, [sp, #16]
   14bbc:	4e86      	ldr	r6, [pc, #536]	; (14dd8 <_svfprintf_r+0x16d8>)
   14bbe:	f7fe bf71 	b.w	13aa4 <_svfprintf_r+0x3a4>
   14bc2:	f04f 0b06 	mov.w	fp, #6
   14bc6:	e598      	b.n	146fa <_svfprintf_r+0xffa>
   14bc8:	aa21      	add	r2, sp, #132	; 0x84
   14bca:	ab1e      	add	r3, sp, #120	; 0x78
   14bcc:	9201      	str	r2, [sp, #4]
   14bce:	9300      	str	r3, [sp, #0]
   14bd0:	465a      	mov	r2, fp
   14bd2:	ab1d      	add	r3, sp, #116	; 0x74
   14bd4:	2103      	movs	r1, #3
   14bd6:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
   14bda:	9806      	ldr	r0, [sp, #24]
   14bdc:	f000 faa0 	bl	15120 <_dtoa_r>
   14be0:	465d      	mov	r5, fp
   14be2:	4606      	mov	r6, r0
   14be4:	eb00 040b 	add.w	r4, r0, fp
   14be8:	e6f5      	b.n	149d6 <_svfprintf_r+0x12d6>
   14bea:	272d      	movs	r7, #45	; 0x2d
   14bec:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
   14bf0:	f7ff b8ab 	b.w	13d4a <_svfprintf_r+0x64a>
   14bf4:	9303      	str	r3, [sp, #12]
   14bf6:	f7ff b954 	b.w	13ea2 <_svfprintf_r+0x7a2>
   14bfa:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
   14bfe:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
   14c02:	9319      	str	r3, [sp, #100]	; 0x64
   14c04:	232d      	movs	r3, #45	; 0x2d
   14c06:	9118      	str	r1, [sp, #96]	; 0x60
   14c08:	9304      	str	r3, [sp, #16]
   14c0a:	e584      	b.n	14716 <_svfprintf_r+0x1016>
   14c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14c10:	4413      	add	r3, r2
   14c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14c14:	9309      	str	r3, [sp, #36]	; 0x24
   14c16:	2a00      	cmp	r2, #0
   14c18:	f340 8089 	ble.w	14d2e <_svfprintf_r+0x162e>
   14c1c:	2267      	movs	r2, #103	; 0x67
   14c1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14c22:	920d      	str	r2, [sp, #52]	; 0x34
   14c24:	e5c9      	b.n	147ba <_svfprintf_r+0x10ba>
   14c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14c28:	2b47      	cmp	r3, #71	; 0x47
   14c2a:	f47f ad95 	bne.w	14758 <_svfprintf_r+0x1058>
   14c2e:	9b03      	ldr	r3, [sp, #12]
   14c30:	07db      	lsls	r3, r3, #31
   14c32:	f53f aeca 	bmi.w	149ca <_svfprintf_r+0x12ca>
   14c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14c38:	2f47      	cmp	r7, #71	; 0x47
   14c3a:	eba3 0306 	sub.w	r3, r3, r6
   14c3e:	930e      	str	r3, [sp, #56]	; 0x38
   14c40:	f43f af1a 	beq.w	14a78 <_svfprintf_r+0x1378>
   14c44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14c46:	e73c      	b.n	14ac2 <_svfprintf_r+0x13c2>
   14c48:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   14c4c:	970a      	str	r7, [sp, #40]	; 0x28
   14c4e:	9304      	str	r3, [sp, #16]
   14c50:	9509      	str	r5, [sp, #36]	; 0x24
   14c52:	4683      	mov	fp, r0
   14c54:	900f      	str	r0, [sp, #60]	; 0x3c
   14c56:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   14c5a:	f7fe bf23 	b.w	13aa4 <_svfprintf_r+0x3a4>
   14c5e:	2b00      	cmp	r3, #0
   14c60:	dd6d      	ble.n	14d3e <_svfprintf_r+0x163e>
   14c62:	f1bb 0f00 	cmp.w	fp, #0
   14c66:	d14f      	bne.n	14d08 <_svfprintf_r+0x1608>
   14c68:	9a03      	ldr	r2, [sp, #12]
   14c6a:	07d4      	lsls	r4, r2, #31
   14c6c:	d44c      	bmi.n	14d08 <_svfprintf_r+0x1608>
   14c6e:	461a      	mov	r2, r3
   14c70:	9209      	str	r2, [sp, #36]	; 0x24
   14c72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14c76:	e5a0      	b.n	147ba <_svfprintf_r+0x10ba>
   14c78:	9b03      	ldr	r3, [sp, #12]
   14c7a:	07db      	lsls	r3, r3, #31
   14c7c:	465f      	mov	r7, fp
   14c7e:	d505      	bpl.n	14c8c <_svfprintf_r+0x158c>
   14c80:	ae40      	add	r6, sp, #256	; 0x100
   14c82:	2330      	movs	r3, #48	; 0x30
   14c84:	f806 3d41 	strb.w	r3, [r6, #-65]!
   14c88:	f7fe bf02 	b.w	13a90 <_svfprintf_r+0x390>
   14c8c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   14c90:	ae30      	add	r6, sp, #192	; 0xc0
   14c92:	f7fe bf00 	b.w	13a96 <_svfprintf_r+0x396>
   14c96:	aa23      	add	r2, sp, #140	; 0x8c
   14c98:	9905      	ldr	r1, [sp, #20]
   14c9a:	9806      	ldr	r0, [sp, #24]
   14c9c:	f001 fe44 	bl	16928 <__ssprint_r>
   14ca0:	2800      	cmp	r0, #0
   14ca2:	f47e ae27 	bne.w	138f4 <_svfprintf_r+0x1f4>
   14ca6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
   14ca8:	9c25      	ldr	r4, [sp, #148]	; 0x94
   14caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   14cac:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
   14cb0:	e626      	b.n	14900 <_svfprintf_r+0x1200>
   14cb2:	46a0      	mov	r8, r4
   14cb4:	2500      	movs	r5, #0
   14cb6:	f7fe bd7f 	b.w	137b8 <_svfprintf_r+0xb8>
   14cba:	3330      	adds	r3, #48	; 0x30
   14cbc:	2230      	movs	r2, #48	; 0x30
   14cbe:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
   14cc2:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
   14cc6:	ab20      	add	r3, sp, #128	; 0x80
   14cc8:	e737      	b.n	14b3a <_svfprintf_r+0x143a>
   14cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14ccc:	e558      	b.n	14780 <_svfprintf_r+0x1080>
   14cce:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14cd2:	4413      	add	r3, r2
   14cd4:	2267      	movs	r2, #103	; 0x67
   14cd6:	9309      	str	r3, [sp, #36]	; 0x24
   14cd8:	920d      	str	r2, [sp, #52]	; 0x34
   14cda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14cde:	e56c      	b.n	147ba <_svfprintf_r+0x10ba>
   14ce0:	4e3e      	ldr	r6, [pc, #248]	; (14ddc <_svfprintf_r+0x16dc>)
   14ce2:	4b3f      	ldr	r3, [pc, #252]	; (14de0 <_svfprintf_r+0x16e0>)
   14ce4:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
   14ce8:	f7ff b831 	b.w	13d4e <_svfprintf_r+0x64e>
   14cec:	2200      	movs	r2, #0
   14cee:	2300      	movs	r3, #0
   14cf0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   14cf4:	f7fc fe28 	bl	11948 <__aeabi_dcmpeq>
   14cf8:	2800      	cmp	r0, #0
   14cfa:	f47f ae70 	bne.w	149de <_svfprintf_r+0x12de>
   14cfe:	f1c5 0501 	rsb	r5, r5, #1
   14d02:	951d      	str	r5, [sp, #116]	; 0x74
   14d04:	442c      	add	r4, r5
   14d06:	e528      	b.n	1475a <_svfprintf_r+0x105a>
   14d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14d0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14d0c:	189d      	adds	r5, r3, r2
   14d0e:	eb05 030b 	add.w	r3, r5, fp
   14d12:	9309      	str	r3, [sp, #36]	; 0x24
   14d14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14d18:	e54f      	b.n	147ba <_svfprintf_r+0x10ba>
   14d1a:	9b03      	ldr	r3, [sp, #12]
   14d1c:	f013 0301 	ands.w	r3, r3, #1
   14d20:	f47f af14 	bne.w	14b4c <_svfprintf_r+0x144c>
   14d24:	930f      	str	r3, [sp, #60]	; 0x3c
   14d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14d28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14d2c:	e545      	b.n	147ba <_svfprintf_r+0x10ba>
   14d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14d30:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14d32:	f1c3 0301 	rsb	r3, r3, #1
   14d36:	441a      	add	r2, r3
   14d38:	4613      	mov	r3, r2
   14d3a:	9209      	str	r2, [sp, #36]	; 0x24
   14d3c:	e76e      	b.n	14c1c <_svfprintf_r+0x151c>
   14d3e:	f1bb 0f00 	cmp.w	fp, #0
   14d42:	d102      	bne.n	14d4a <_svfprintf_r+0x164a>
   14d44:	9b03      	ldr	r3, [sp, #12]
   14d46:	07d8      	lsls	r0, r3, #31
   14d48:	d507      	bpl.n	14d5a <_svfprintf_r+0x165a>
   14d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14d4c:	1c5d      	adds	r5, r3, #1
   14d4e:	eb05 030b 	add.w	r3, r5, fp
   14d52:	9309      	str	r3, [sp, #36]	; 0x24
   14d54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14d58:	e52f      	b.n	147ba <_svfprintf_r+0x10ba>
   14d5a:	2301      	movs	r3, #1
   14d5c:	9309      	str	r3, [sp, #36]	; 0x24
   14d5e:	e52c      	b.n	147ba <_svfprintf_r+0x10ba>
   14d60:	980a      	ldr	r0, [sp, #40]	; 0x28
   14d62:	f898 3001 	ldrb.w	r3, [r8, #1]
   14d66:	6805      	ldr	r5, [r0, #0]
   14d68:	3004      	adds	r0, #4
   14d6a:	2d00      	cmp	r5, #0
   14d6c:	900a      	str	r0, [sp, #40]	; 0x28
   14d6e:	46a0      	mov	r8, r4
   14d70:	f6be ad20 	bge.w	137b4 <_svfprintf_r+0xb4>
   14d74:	f04f 35ff 	mov.w	r5, #4294967295
   14d78:	f7fe bd1c 	b.w	137b4 <_svfprintf_r+0xb4>
   14d7c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14d80:	f7fe bdc9 	b.w	13916 <_svfprintf_r+0x216>
   14d84:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
   14d88:	e6d7      	b.n	14b3a <_svfprintf_r+0x143a>
   14d8a:	9a06      	ldr	r2, [sp, #24]
   14d8c:	230c      	movs	r3, #12
   14d8e:	6013      	str	r3, [r2, #0]
   14d90:	f04f 30ff 	mov.w	r0, #4294967295
   14d94:	f7fe bdb7 	b.w	13906 <_svfprintf_r+0x206>
   14d98:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14d9c:	f7fe be38 	b.w	13a10 <_svfprintf_r+0x310>
   14da0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14da4:	f7fe bf9a 	b.w	13cdc <_svfprintf_r+0x5dc>
   14da8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14dac:	f7ff b84d 	b.w	13e4a <_svfprintf_r+0x74a>
   14db0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14db4:	f7ff b81b 	b.w	13dee <_svfprintf_r+0x6ee>
   14db8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14dbc:	f7fe bfed 	b.w	13d9a <_svfprintf_r+0x69a>
   14dc0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14dc4:	f7ff b935 	b.w	14032 <_svfprintf_r+0x932>
   14dc8:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14dcc:	f7ff b910 	b.w	13ff0 <_svfprintf_r+0x8f0>
   14dd0:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
   14dd4:	f7ff b8ee 	b.w	13fb4 <_svfprintf_r+0x8b4>
   14dd8:	00017a64 	.word	0x00017a64
   14ddc:	00017a38 	.word	0x00017a38
   14de0:	00017a34 	.word	0x00017a34

00014de4 <tolower>:
   14de4:	b510      	push	{r4, lr}
   14de6:	4604      	mov	r4, r0
   14de8:	f7fd f836 	bl	11e58 <__locale_ctype_ptr>
   14dec:	4420      	add	r0, r4
   14dee:	7843      	ldrb	r3, [r0, #1]
   14df0:	f003 0303 	and.w	r3, r3, #3
   14df4:	2b01      	cmp	r3, #1
   14df6:	bf0c      	ite	eq
   14df8:	f104 0020 	addeq.w	r0, r4, #32
   14dfc:	4620      	movne	r0, r4
   14dfe:	bd10      	pop	{r4, pc}

00014e00 <__utoa>:
   14e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e02:	f8df e078 	ldr.w	lr, [pc, #120]	; 14e7c <__utoa+0x7c>
   14e06:	4616      	mov	r6, r2
   14e08:	4604      	mov	r4, r0
   14e0a:	460f      	mov	r7, r1
   14e0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14e10:	b08b      	sub	sp, #44	; 0x2c
   14e12:	466d      	mov	r5, sp
   14e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14e16:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14e1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
   14e20:	1eb3      	subs	r3, r6, #2
   14e22:	f845 0b04 	str.w	r0, [r5], #4
   14e26:	2b22      	cmp	r3, #34	; 0x22
   14e28:	7029      	strb	r1, [r5, #0]
   14e2a:	d822      	bhi.n	14e72 <__utoa+0x72>
   14e2c:	1e7d      	subs	r5, r7, #1
   14e2e:	4628      	mov	r0, r5
   14e30:	2200      	movs	r2, #0
   14e32:	e000      	b.n	14e36 <__utoa+0x36>
   14e34:	461a      	mov	r2, r3
   14e36:	fbb4 f1f6 	udiv	r1, r4, r6
   14e3a:	ab0a      	add	r3, sp, #40	; 0x28
   14e3c:	fb06 4411 	mls	r4, r6, r1, r4
   14e40:	4423      	add	r3, r4
   14e42:	460c      	mov	r4, r1
   14e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   14e48:	f800 3f01 	strb.w	r3, [r0, #1]!
   14e4c:	1c53      	adds	r3, r2, #1
   14e4e:	2900      	cmp	r1, #0
   14e50:	d1f0      	bne.n	14e34 <__utoa+0x34>
   14e52:	54f9      	strb	r1, [r7, r3]
   14e54:	18bb      	adds	r3, r7, r2
   14e56:	b14a      	cbz	r2, 14e6c <__utoa+0x6c>
   14e58:	7819      	ldrb	r1, [r3, #0]
   14e5a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   14e5e:	7029      	strb	r1, [r5, #0]
   14e60:	3401      	adds	r4, #1
   14e62:	1b11      	subs	r1, r2, r4
   14e64:	428c      	cmp	r4, r1
   14e66:	f803 0901 	strb.w	r0, [r3], #-1
   14e6a:	dbf5      	blt.n	14e58 <__utoa+0x58>
   14e6c:	4638      	mov	r0, r7
   14e6e:	b00b      	add	sp, #44	; 0x2c
   14e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e72:	2000      	movs	r0, #0
   14e74:	7038      	strb	r0, [r7, #0]
   14e76:	b00b      	add	sp, #44	; 0x2c
   14e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e7a:	bf00      	nop
   14e7c:	00017a7c 	.word	0x00017a7c

00014e80 <utoa>:
   14e80:	f7ff bfbe 	b.w	14e00 <__utoa>

00014e84 <_vdprintf_r>:
   14e84:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e86:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   14e8a:	ad04      	add	r5, sp, #16
   14e8c:	9300      	str	r3, [sp, #0]
   14e8e:	460f      	mov	r7, r1
   14e90:	4613      	mov	r3, r2
   14e92:	f44f 7400 	mov.w	r4, #512	; 0x200
   14e96:	aa03      	add	r2, sp, #12
   14e98:	4629      	mov	r1, r5
   14e9a:	9403      	str	r4, [sp, #12]
   14e9c:	4606      	mov	r6, r0
   14e9e:	f001 fdc3 	bl	16a28 <_vasnprintf_r>
   14ea2:	b188      	cbz	r0, 14ec8 <_vdprintf_r+0x44>
   14ea4:	4604      	mov	r4, r0
   14ea6:	4602      	mov	r2, r0
   14ea8:	4639      	mov	r1, r7
   14eaa:	9b03      	ldr	r3, [sp, #12]
   14eac:	4630      	mov	r0, r6
   14eae:	f000 f829 	bl	14f04 <_write_r>
   14eb2:	42ac      	cmp	r4, r5
   14eb4:	9003      	str	r0, [sp, #12]
   14eb6:	d004      	beq.n	14ec2 <_vdprintf_r+0x3e>
   14eb8:	4630      	mov	r0, r6
   14eba:	4621      	mov	r1, r4
   14ebc:	f001 f92c 	bl	16118 <_free_r>
   14ec0:	9803      	ldr	r0, [sp, #12]
   14ec2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   14ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ec8:	f04f 30ff 	mov.w	r0, #4294967295
   14ecc:	e7f9      	b.n	14ec2 <_vdprintf_r+0x3e>
   14ece:	bf00      	nop

00014ed0 <vdprintf>:
   14ed0:	b410      	push	{r4}
   14ed2:	4c04      	ldr	r4, [pc, #16]	; (14ee4 <vdprintf+0x14>)
   14ed4:	4613      	mov	r3, r2
   14ed6:	460a      	mov	r2, r1
   14ed8:	4601      	mov	r1, r0
   14eda:	6820      	ldr	r0, [r4, #0]
   14edc:	f85d 4b04 	ldr.w	r4, [sp], #4
   14ee0:	f7ff bfd0 	b.w	14e84 <_vdprintf_r>
   14ee4:	1fff4fe0 	.word	0x1fff4fe0

00014ee8 <__ascii_wctomb>:
   14ee8:	b121      	cbz	r1, 14ef4 <__ascii_wctomb+0xc>
   14eea:	2aff      	cmp	r2, #255	; 0xff
   14eec:	d804      	bhi.n	14ef8 <__ascii_wctomb+0x10>
   14eee:	700a      	strb	r2, [r1, #0]
   14ef0:	2001      	movs	r0, #1
   14ef2:	4770      	bx	lr
   14ef4:	4608      	mov	r0, r1
   14ef6:	4770      	bx	lr
   14ef8:	238a      	movs	r3, #138	; 0x8a
   14efa:	6003      	str	r3, [r0, #0]
   14efc:	f04f 30ff 	mov.w	r0, #4294967295
   14f00:	4770      	bx	lr
   14f02:	bf00      	nop

00014f04 <_write_r>:
   14f04:	b570      	push	{r4, r5, r6, lr}
   14f06:	460d      	mov	r5, r1
   14f08:	4c08      	ldr	r4, [pc, #32]	; (14f2c <_write_r+0x28>)
   14f0a:	4611      	mov	r1, r2
   14f0c:	4606      	mov	r6, r0
   14f0e:	461a      	mov	r2, r3
   14f10:	4628      	mov	r0, r5
   14f12:	2300      	movs	r3, #0
   14f14:	6023      	str	r3, [r4, #0]
   14f16:	f7f8 fcf3 	bl	d900 <_write>
   14f1a:	1c43      	adds	r3, r0, #1
   14f1c:	d000      	beq.n	14f20 <_write_r+0x1c>
   14f1e:	bd70      	pop	{r4, r5, r6, pc}
   14f20:	6823      	ldr	r3, [r4, #0]
   14f22:	2b00      	cmp	r3, #0
   14f24:	d0fb      	beq.n	14f1e <_write_r+0x1a>
   14f26:	6033      	str	r3, [r6, #0]
   14f28:	bd70      	pop	{r4, r5, r6, pc}
   14f2a:	bf00      	nop
   14f2c:	1fff6c64 	.word	0x1fff6c64

00014f30 <__register_exitproc>:
   14f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14f34:	4c25      	ldr	r4, [pc, #148]	; (14fcc <__register_exitproc+0x9c>)
   14f36:	6825      	ldr	r5, [r4, #0]
   14f38:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   14f3c:	4606      	mov	r6, r0
   14f3e:	4688      	mov	r8, r1
   14f40:	4692      	mov	sl, r2
   14f42:	4699      	mov	r9, r3
   14f44:	b3c4      	cbz	r4, 14fb8 <__register_exitproc+0x88>
   14f46:	6860      	ldr	r0, [r4, #4]
   14f48:	281f      	cmp	r0, #31
   14f4a:	dc17      	bgt.n	14f7c <__register_exitproc+0x4c>
   14f4c:	1c43      	adds	r3, r0, #1
   14f4e:	b176      	cbz	r6, 14f6e <__register_exitproc+0x3e>
   14f50:	eb04 0580 	add.w	r5, r4, r0, lsl #2
   14f54:	2201      	movs	r2, #1
   14f56:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
   14f5a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   14f5e:	4082      	lsls	r2, r0
   14f60:	4311      	orrs	r1, r2
   14f62:	2e02      	cmp	r6, #2
   14f64:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   14f68:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
   14f6c:	d01e      	beq.n	14fac <__register_exitproc+0x7c>
   14f6e:	3002      	adds	r0, #2
   14f70:	6063      	str	r3, [r4, #4]
   14f72:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
   14f76:	2000      	movs	r0, #0
   14f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14f7c:	4b14      	ldr	r3, [pc, #80]	; (14fd0 <__register_exitproc+0xa0>)
   14f7e:	b303      	cbz	r3, 14fc2 <__register_exitproc+0x92>
   14f80:	f44f 70c8 	mov.w	r0, #400	; 0x190
   14f84:	f7fc ff72 	bl	11e6c <malloc>
   14f88:	4604      	mov	r4, r0
   14f8a:	b1d0      	cbz	r0, 14fc2 <__register_exitproc+0x92>
   14f8c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   14f90:	2700      	movs	r7, #0
   14f92:	e880 0088 	stmia.w	r0, {r3, r7}
   14f96:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   14f9a:	4638      	mov	r0, r7
   14f9c:	2301      	movs	r3, #1
   14f9e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   14fa2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   14fa6:	2e00      	cmp	r6, #0
   14fa8:	d0e1      	beq.n	14f6e <__register_exitproc+0x3e>
   14faa:	e7d1      	b.n	14f50 <__register_exitproc+0x20>
   14fac:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
   14fb0:	430a      	orrs	r2, r1
   14fb2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   14fb6:	e7da      	b.n	14f6e <__register_exitproc+0x3e>
   14fb8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   14fbc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   14fc0:	e7c1      	b.n	14f46 <__register_exitproc+0x16>
   14fc2:	f04f 30ff 	mov.w	r0, #4294967295
   14fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14fca:	bf00      	nop
   14fcc:	00017a0c 	.word	0x00017a0c
   14fd0:	00011e6d 	.word	0x00011e6d

00014fd4 <register_fini>:
   14fd4:	4b02      	ldr	r3, [pc, #8]	; (14fe0 <register_fini+0xc>)
   14fd6:	b113      	cbz	r3, 14fde <register_fini+0xa>
   14fd8:	4802      	ldr	r0, [pc, #8]	; (14fe4 <register_fini+0x10>)
   14fda:	f000 b805 	b.w	14fe8 <atexit>
   14fde:	4770      	bx	lr
   14fe0:	00000000 	.word	0x00000000
   14fe4:	00016055 	.word	0x00016055

00014fe8 <atexit>:
   14fe8:	2300      	movs	r3, #0
   14fea:	4601      	mov	r1, r0
   14fec:	461a      	mov	r2, r3
   14fee:	4618      	mov	r0, r3
   14ff0:	f7ff bf9e 	b.w	14f30 <__register_exitproc>

00014ff4 <quorem>:
   14ff4:	6902      	ldr	r2, [r0, #16]
   14ff6:	690b      	ldr	r3, [r1, #16]
   14ff8:	4293      	cmp	r3, r2
   14ffa:	f300 808d 	bgt.w	15118 <quorem+0x124>
   14ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15002:	f103 38ff 	add.w	r8, r3, #4294967295
   15006:	f101 0714 	add.w	r7, r1, #20
   1500a:	f100 0b14 	add.w	fp, r0, #20
   1500e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   15012:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   15016:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1501a:	b083      	sub	sp, #12
   1501c:	3201      	adds	r2, #1
   1501e:	fbb3 f9f2 	udiv	r9, r3, r2
   15022:	eb0b 0304 	add.w	r3, fp, r4
   15026:	9400      	str	r4, [sp, #0]
   15028:	eb07 0a04 	add.w	sl, r7, r4
   1502c:	9301      	str	r3, [sp, #4]
   1502e:	f1b9 0f00 	cmp.w	r9, #0
   15032:	d039      	beq.n	150a8 <quorem+0xb4>
   15034:	2500      	movs	r5, #0
   15036:	46bc      	mov	ip, r7
   15038:	46de      	mov	lr, fp
   1503a:	462b      	mov	r3, r5
   1503c:	f85c 6b04 	ldr.w	r6, [ip], #4
   15040:	f8de 2000 	ldr.w	r2, [lr]
   15044:	b2b4      	uxth	r4, r6
   15046:	fb09 5504 	mla	r5, r9, r4, r5
   1504a:	0c36      	lsrs	r6, r6, #16
   1504c:	0c2c      	lsrs	r4, r5, #16
   1504e:	fb09 4406 	mla	r4, r9, r6, r4
   15052:	b2ad      	uxth	r5, r5
   15054:	1b5b      	subs	r3, r3, r5
   15056:	b2a6      	uxth	r6, r4
   15058:	fa13 f382 	uxtah	r3, r3, r2
   1505c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
   15060:	eb06 4623 	add.w	r6, r6, r3, asr #16
   15064:	b29b      	uxth	r3, r3
   15066:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   1506a:	45e2      	cmp	sl, ip
   1506c:	f84e 3b04 	str.w	r3, [lr], #4
   15070:	ea4f 4514 	mov.w	r5, r4, lsr #16
   15074:	ea4f 4326 	mov.w	r3, r6, asr #16
   15078:	d2e0      	bcs.n	1503c <quorem+0x48>
   1507a:	9b00      	ldr	r3, [sp, #0]
   1507c:	f85b 3003 	ldr.w	r3, [fp, r3]
   15080:	b993      	cbnz	r3, 150a8 <quorem+0xb4>
   15082:	9c01      	ldr	r4, [sp, #4]
   15084:	1f23      	subs	r3, r4, #4
   15086:	459b      	cmp	fp, r3
   15088:	d20c      	bcs.n	150a4 <quorem+0xb0>
   1508a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1508e:	b94b      	cbnz	r3, 150a4 <quorem+0xb0>
   15090:	f1a4 0308 	sub.w	r3, r4, #8
   15094:	e002      	b.n	1509c <quorem+0xa8>
   15096:	681a      	ldr	r2, [r3, #0]
   15098:	3b04      	subs	r3, #4
   1509a:	b91a      	cbnz	r2, 150a4 <quorem+0xb0>
   1509c:	459b      	cmp	fp, r3
   1509e:	f108 38ff 	add.w	r8, r8, #4294967295
   150a2:	d3f8      	bcc.n	15096 <quorem+0xa2>
   150a4:	f8c0 8010 	str.w	r8, [r0, #16]
   150a8:	4604      	mov	r4, r0
   150aa:	f001 fb33 	bl	16714 <__mcmp>
   150ae:	2800      	cmp	r0, #0
   150b0:	db2e      	blt.n	15110 <quorem+0x11c>
   150b2:	f109 0901 	add.w	r9, r9, #1
   150b6:	465d      	mov	r5, fp
   150b8:	2300      	movs	r3, #0
   150ba:	f857 1b04 	ldr.w	r1, [r7], #4
   150be:	6828      	ldr	r0, [r5, #0]
   150c0:	b28a      	uxth	r2, r1
   150c2:	1a9a      	subs	r2, r3, r2
   150c4:	0c09      	lsrs	r1, r1, #16
   150c6:	fa12 f280 	uxtah	r2, r2, r0
   150ca:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
   150ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
   150d2:	b291      	uxth	r1, r2
   150d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   150d8:	45ba      	cmp	sl, r7
   150da:	f845 1b04 	str.w	r1, [r5], #4
   150de:	ea4f 4323 	mov.w	r3, r3, asr #16
   150e2:	d2ea      	bcs.n	150ba <quorem+0xc6>
   150e4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   150e8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   150ec:	b982      	cbnz	r2, 15110 <quorem+0x11c>
   150ee:	1f1a      	subs	r2, r3, #4
   150f0:	4593      	cmp	fp, r2
   150f2:	d20b      	bcs.n	1510c <quorem+0x118>
   150f4:	f853 2c04 	ldr.w	r2, [r3, #-4]
   150f8:	b942      	cbnz	r2, 1510c <quorem+0x118>
   150fa:	3b08      	subs	r3, #8
   150fc:	e002      	b.n	15104 <quorem+0x110>
   150fe:	681a      	ldr	r2, [r3, #0]
   15100:	3b04      	subs	r3, #4
   15102:	b91a      	cbnz	r2, 1510c <quorem+0x118>
   15104:	459b      	cmp	fp, r3
   15106:	f108 38ff 	add.w	r8, r8, #4294967295
   1510a:	d3f8      	bcc.n	150fe <quorem+0x10a>
   1510c:	f8c4 8010 	str.w	r8, [r4, #16]
   15110:	4648      	mov	r0, r9
   15112:	b003      	add	sp, #12
   15114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15118:	2000      	movs	r0, #0
   1511a:	4770      	bx	lr
   1511c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00015120 <_dtoa_r>:
   15120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15124:	ec57 6b10 	vmov	r6, r7, d0
   15128:	b09b      	sub	sp, #108	; 0x6c
   1512a:	6c04      	ldr	r4, [r0, #64]	; 0x40
   1512c:	9d24      	ldr	r5, [sp, #144]	; 0x90
   1512e:	9100      	str	r1, [sp, #0]
   15130:	4681      	mov	r9, r0
   15132:	9205      	str	r2, [sp, #20]
   15134:	9303      	str	r3, [sp, #12]
   15136:	ee10 aa10 	vmov	sl, s0
   1513a:	46bb      	mov	fp, r7
   1513c:	b154      	cbz	r4, 15154 <_dtoa_r+0x34>
   1513e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15140:	6062      	str	r2, [r4, #4]
   15142:	2301      	movs	r3, #1
   15144:	4093      	lsls	r3, r2
   15146:	60a3      	str	r3, [r4, #8]
   15148:	4621      	mov	r1, r4
   1514a:	f001 f901 	bl	16350 <_Bfree>
   1514e:	2300      	movs	r3, #0
   15150:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
   15154:	f1bb 0f00 	cmp.w	fp, #0
   15158:	465c      	mov	r4, fp
   1515a:	db34      	blt.n	151c6 <_dtoa_r+0xa6>
   1515c:	2300      	movs	r3, #0
   1515e:	602b      	str	r3, [r5, #0]
   15160:	4ba1      	ldr	r3, [pc, #644]	; (153e8 <_dtoa_r+0x2c8>)
   15162:	461a      	mov	r2, r3
   15164:	4023      	ands	r3, r4
   15166:	4293      	cmp	r3, r2
   15168:	d016      	beq.n	15198 <_dtoa_r+0x78>
   1516a:	2200      	movs	r2, #0
   1516c:	2300      	movs	r3, #0
   1516e:	4650      	mov	r0, sl
   15170:	4659      	mov	r1, fp
   15172:	f7fc fbe9 	bl	11948 <__aeabi_dcmpeq>
   15176:	4656      	mov	r6, sl
   15178:	465f      	mov	r7, fp
   1517a:	4680      	mov	r8, r0
   1517c:	b348      	cbz	r0, 151d2 <_dtoa_r+0xb2>
   1517e:	9a03      	ldr	r2, [sp, #12]
   15180:	2301      	movs	r3, #1
   15182:	6013      	str	r3, [r2, #0]
   15184:	9b25      	ldr	r3, [sp, #148]	; 0x94
   15186:	2b00      	cmp	r3, #0
   15188:	f000 80be 	beq.w	15308 <_dtoa_r+0x1e8>
   1518c:	4897      	ldr	r0, [pc, #604]	; (153ec <_dtoa_r+0x2cc>)
   1518e:	6018      	str	r0, [r3, #0]
   15190:	3801      	subs	r0, #1
   15192:	b01b      	add	sp, #108	; 0x6c
   15194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15198:	9a03      	ldr	r2, [sp, #12]
   1519a:	f242 730f 	movw	r3, #9999	; 0x270f
   1519e:	6013      	str	r3, [r2, #0]
   151a0:	f1ba 0f00 	cmp.w	sl, #0
   151a4:	f000 809a 	beq.w	152dc <_dtoa_r+0x1bc>
   151a8:	4891      	ldr	r0, [pc, #580]	; (153f0 <_dtoa_r+0x2d0>)
   151aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   151ac:	2b00      	cmp	r3, #0
   151ae:	d0f0      	beq.n	15192 <_dtoa_r+0x72>
   151b0:	78c3      	ldrb	r3, [r0, #3]
   151b2:	2b00      	cmp	r3, #0
   151b4:	f000 80aa 	beq.w	1530c <_dtoa_r+0x1ec>
   151b8:	f100 0308 	add.w	r3, r0, #8
   151bc:	9a25      	ldr	r2, [sp, #148]	; 0x94
   151be:	6013      	str	r3, [r2, #0]
   151c0:	b01b      	add	sp, #108	; 0x6c
   151c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151c6:	2301      	movs	r3, #1
   151c8:	f02b 4400 	bic.w	r4, fp, #2147483648	; 0x80000000
   151cc:	602b      	str	r3, [r5, #0]
   151ce:	46a3      	mov	fp, r4
   151d0:	e7c6      	b.n	15160 <_dtoa_r+0x40>
   151d2:	aa18      	add	r2, sp, #96	; 0x60
   151d4:	a919      	add	r1, sp, #100	; 0x64
   151d6:	ec47 6b10 	vmov	d0, r6, r7
   151da:	4648      	mov	r0, r9
   151dc:	f001 fb46 	bl	1686c <__d2b>
   151e0:	0d25      	lsrs	r5, r4, #20
   151e2:	900a      	str	r0, [sp, #40]	; 0x28
   151e4:	f040 8083 	bne.w	152ee <_dtoa_r+0x1ce>
   151e8:	9d18      	ldr	r5, [sp, #96]	; 0x60
   151ea:	9e19      	ldr	r6, [sp, #100]	; 0x64
   151ec:	442e      	add	r6, r5
   151ee:	f206 4332 	addw	r3, r6, #1074	; 0x432
   151f2:	2b20      	cmp	r3, #32
   151f4:	f340 8288 	ble.w	15708 <_dtoa_r+0x5e8>
   151f8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   151fc:	f206 4012 	addw	r0, r6, #1042	; 0x412
   15200:	409c      	lsls	r4, r3
   15202:	fa2a f000 	lsr.w	r0, sl, r0
   15206:	4320      	orrs	r0, r4
   15208:	f7fc f8c0 	bl	1138c <__aeabi_ui2d>
   1520c:	2301      	movs	r3, #1
   1520e:	1e74      	subs	r4, r6, #1
   15210:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   15214:	930f      	str	r3, [sp, #60]	; 0x3c
   15216:	2200      	movs	r2, #0
   15218:	4b76      	ldr	r3, [pc, #472]	; (153f4 <_dtoa_r+0x2d4>)
   1521a:	f7fb ff79 	bl	11110 <__aeabi_dsub>
   1521e:	a36c      	add	r3, pc, #432	; (adr r3, 153d0 <_dtoa_r+0x2b0>)
   15220:	e9d3 2300 	ldrd	r2, r3, [r3]
   15224:	f7fc f928 	bl	11478 <__aeabi_dmul>
   15228:	a36b      	add	r3, pc, #428	; (adr r3, 153d8 <_dtoa_r+0x2b8>)
   1522a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1522e:	f7fb ff71 	bl	11114 <__adddf3>
   15232:	4606      	mov	r6, r0
   15234:	4620      	mov	r0, r4
   15236:	460f      	mov	r7, r1
   15238:	f7fc f8b8 	bl	113ac <__aeabi_i2d>
   1523c:	a368      	add	r3, pc, #416	; (adr r3, 153e0 <_dtoa_r+0x2c0>)
   1523e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15242:	f7fc f919 	bl	11478 <__aeabi_dmul>
   15246:	4602      	mov	r2, r0
   15248:	460b      	mov	r3, r1
   1524a:	4630      	mov	r0, r6
   1524c:	4639      	mov	r1, r7
   1524e:	f7fb ff61 	bl	11114 <__adddf3>
   15252:	4606      	mov	r6, r0
   15254:	460f      	mov	r7, r1
   15256:	f7fc fbbf 	bl	119d8 <__aeabi_d2iz>
   1525a:	2200      	movs	r2, #0
   1525c:	9004      	str	r0, [sp, #16]
   1525e:	2300      	movs	r3, #0
   15260:	4630      	mov	r0, r6
   15262:	4639      	mov	r1, r7
   15264:	f7fc fb7a 	bl	1195c <__aeabi_dcmplt>
   15268:	2800      	cmp	r0, #0
   1526a:	f040 8228 	bne.w	156be <_dtoa_r+0x59e>
   1526e:	9e04      	ldr	r6, [sp, #16]
   15270:	2e16      	cmp	r6, #22
   15272:	f200 8221 	bhi.w	156b8 <_dtoa_r+0x598>
   15276:	4b60      	ldr	r3, [pc, #384]	; (153f8 <_dtoa_r+0x2d8>)
   15278:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1527c:	e9d3 0100 	ldrd	r0, r1, [r3]
   15280:	4652      	mov	r2, sl
   15282:	465b      	mov	r3, fp
   15284:	f7fc fb88 	bl	11998 <__aeabi_dcmpgt>
   15288:	2800      	cmp	r0, #0
   1528a:	f000 8242 	beq.w	15712 <_dtoa_r+0x5f2>
   1528e:	1e73      	subs	r3, r6, #1
   15290:	9304      	str	r3, [sp, #16]
   15292:	2300      	movs	r3, #0
   15294:	930d      	str	r3, [sp, #52]	; 0x34
   15296:	1b2d      	subs	r5, r5, r4
   15298:	f1b5 0801 	subs.w	r8, r5, #1
   1529c:	f100 822a 	bmi.w	156f4 <_dtoa_r+0x5d4>
   152a0:	2300      	movs	r3, #0
   152a2:	9307      	str	r3, [sp, #28]
   152a4:	9b04      	ldr	r3, [sp, #16]
   152a6:	2b00      	cmp	r3, #0
   152a8:	f2c0 821b 	blt.w	156e2 <_dtoa_r+0x5c2>
   152ac:	4498      	add	r8, r3
   152ae:	930c      	str	r3, [sp, #48]	; 0x30
   152b0:	2300      	movs	r3, #0
   152b2:	9306      	str	r3, [sp, #24]
   152b4:	9b00      	ldr	r3, [sp, #0]
   152b6:	2b09      	cmp	r3, #9
   152b8:	d82a      	bhi.n	15310 <_dtoa_r+0x1f0>
   152ba:	2b05      	cmp	r3, #5
   152bc:	f340 8644 	ble.w	15f48 <_dtoa_r+0xe28>
   152c0:	3b04      	subs	r3, #4
   152c2:	9300      	str	r3, [sp, #0]
   152c4:	2600      	movs	r6, #0
   152c6:	9b00      	ldr	r3, [sp, #0]
   152c8:	3b02      	subs	r3, #2
   152ca:	2b03      	cmp	r3, #3
   152cc:	f200 8623 	bhi.w	15f16 <_dtoa_r+0xdf6>
   152d0:	e8df f013 	tbh	[pc, r3, lsl #1]
   152d4:	0224032b 	.word	0x0224032b
   152d8:	04500336 	.word	0x04500336
   152dc:	4b44      	ldr	r3, [pc, #272]	; (153f0 <_dtoa_r+0x2d0>)
   152de:	4a47      	ldr	r2, [pc, #284]	; (153fc <_dtoa_r+0x2dc>)
   152e0:	f3c4 0013 	ubfx	r0, r4, #0, #20
   152e4:	2800      	cmp	r0, #0
   152e6:	bf14      	ite	ne
   152e8:	4618      	movne	r0, r3
   152ea:	4610      	moveq	r0, r2
   152ec:	e75d      	b.n	151aa <_dtoa_r+0x8a>
   152ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   152f2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   152f6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
   152fa:	4650      	mov	r0, sl
   152fc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
   15300:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   15304:	9d18      	ldr	r5, [sp, #96]	; 0x60
   15306:	e786      	b.n	15216 <_dtoa_r+0xf6>
   15308:	483d      	ldr	r0, [pc, #244]	; (15400 <_dtoa_r+0x2e0>)
   1530a:	e742      	b.n	15192 <_dtoa_r+0x72>
   1530c:	1cc3      	adds	r3, r0, #3
   1530e:	e755      	b.n	151bc <_dtoa_r+0x9c>
   15310:	2100      	movs	r1, #0
   15312:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
   15316:	4648      	mov	r0, r9
   15318:	460c      	mov	r4, r1
   1531a:	9100      	str	r1, [sp, #0]
   1531c:	f000 fff2 	bl	16304 <_Balloc>
   15320:	f04f 33ff 	mov.w	r3, #4294967295
   15324:	9308      	str	r3, [sp, #32]
   15326:	930e      	str	r3, [sp, #56]	; 0x38
   15328:	2301      	movs	r3, #1
   1532a:	9009      	str	r0, [sp, #36]	; 0x24
   1532c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
   15330:	9405      	str	r4, [sp, #20]
   15332:	930b      	str	r3, [sp, #44]	; 0x2c
   15334:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15336:	2b00      	cmp	r3, #0
   15338:	f2c0 80d0 	blt.w	154dc <_dtoa_r+0x3bc>
   1533c:	9a04      	ldr	r2, [sp, #16]
   1533e:	2a0e      	cmp	r2, #14
   15340:	f300 80cc 	bgt.w	154dc <_dtoa_r+0x3bc>
   15344:	4b2c      	ldr	r3, [pc, #176]	; (153f8 <_dtoa_r+0x2d8>)
   15346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1534a:	ed93 7b00 	vldr	d7, [r3]
   1534e:	9b05      	ldr	r3, [sp, #20]
   15350:	2b00      	cmp	r3, #0
   15352:	ed8d 7b00 	vstr	d7, [sp]
   15356:	f2c0 82fe 	blt.w	15956 <_dtoa_r+0x836>
   1535a:	4656      	mov	r6, sl
   1535c:	465f      	mov	r7, fp
   1535e:	e9dd ab00 	ldrd	sl, fp, [sp]
   15362:	4630      	mov	r0, r6
   15364:	4652      	mov	r2, sl
   15366:	465b      	mov	r3, fp
   15368:	4639      	mov	r1, r7
   1536a:	f7fc f9af 	bl	116cc <__aeabi_ddiv>
   1536e:	f7fc fb33 	bl	119d8 <__aeabi_d2iz>
   15372:	4604      	mov	r4, r0
   15374:	f7fc f81a 	bl	113ac <__aeabi_i2d>
   15378:	4652      	mov	r2, sl
   1537a:	465b      	mov	r3, fp
   1537c:	f7fc f87c 	bl	11478 <__aeabi_dmul>
   15380:	460b      	mov	r3, r1
   15382:	4602      	mov	r2, r0
   15384:	4639      	mov	r1, r7
   15386:	4630      	mov	r0, r6
   15388:	f7fb fec2 	bl	11110 <__aeabi_dsub>
   1538c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1538e:	f104 0330 	add.w	r3, r4, #48	; 0x30
   15392:	702b      	strb	r3, [r5, #0]
   15394:	9b08      	ldr	r3, [sp, #32]
   15396:	2b01      	cmp	r3, #1
   15398:	4606      	mov	r6, r0
   1539a:	460f      	mov	r7, r1
   1539c:	f105 0501 	add.w	r5, r5, #1
   153a0:	d061      	beq.n	15466 <_dtoa_r+0x346>
   153a2:	2200      	movs	r2, #0
   153a4:	4b17      	ldr	r3, [pc, #92]	; (15404 <_dtoa_r+0x2e4>)
   153a6:	f7fc f867 	bl	11478 <__aeabi_dmul>
   153aa:	2200      	movs	r2, #0
   153ac:	2300      	movs	r3, #0
   153ae:	4606      	mov	r6, r0
   153b0:	460f      	mov	r7, r1
   153b2:	f7fc fac9 	bl	11948 <__aeabi_dcmpeq>
   153b6:	2800      	cmp	r0, #0
   153b8:	d17d      	bne.n	154b6 <_dtoa_r+0x396>
   153ba:	f8cd 9014 	str.w	r9, [sp, #20]
   153be:	f8dd a020 	ldr.w	sl, [sp, #32]
   153c2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   153c6:	e9dd 8900 	ldrd	r8, r9, [sp]
   153ca:	e028      	b.n	1541e <_dtoa_r+0x2fe>
   153cc:	f3af 8000 	nop.w
   153d0:	636f4361 	.word	0x636f4361
   153d4:	3fd287a7 	.word	0x3fd287a7
   153d8:	8b60c8b3 	.word	0x8b60c8b3
   153dc:	3fc68a28 	.word	0x3fc68a28
   153e0:	509f79fb 	.word	0x509f79fb
   153e4:	3fd34413 	.word	0x3fd34413
   153e8:	7ff00000 	.word	0x7ff00000
   153ec:	00017785 	.word	0x00017785
   153f0:	00017bb4 	.word	0x00017bb4
   153f4:	3ff80000 	.word	0x3ff80000
   153f8:	00017bb8 	.word	0x00017bb8
   153fc:	00017ba8 	.word	0x00017ba8
   15400:	00017784 	.word	0x00017784
   15404:	40240000 	.word	0x40240000
   15408:	f7fc f836 	bl	11478 <__aeabi_dmul>
   1540c:	2200      	movs	r2, #0
   1540e:	2300      	movs	r3, #0
   15410:	4606      	mov	r6, r0
   15412:	460f      	mov	r7, r1
   15414:	f7fc fa98 	bl	11948 <__aeabi_dcmpeq>
   15418:	2800      	cmp	r0, #0
   1541a:	f040 83ae 	bne.w	15b7a <_dtoa_r+0xa5a>
   1541e:	4642      	mov	r2, r8
   15420:	464b      	mov	r3, r9
   15422:	4630      	mov	r0, r6
   15424:	4639      	mov	r1, r7
   15426:	f7fc f951 	bl	116cc <__aeabi_ddiv>
   1542a:	f7fc fad5 	bl	119d8 <__aeabi_d2iz>
   1542e:	4604      	mov	r4, r0
   15430:	f7fb ffbc 	bl	113ac <__aeabi_i2d>
   15434:	4642      	mov	r2, r8
   15436:	464b      	mov	r3, r9
   15438:	f7fc f81e 	bl	11478 <__aeabi_dmul>
   1543c:	4602      	mov	r2, r0
   1543e:	460b      	mov	r3, r1
   15440:	4630      	mov	r0, r6
   15442:	4639      	mov	r1, r7
   15444:	f7fb fe64 	bl	11110 <__aeabi_dsub>
   15448:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   1544c:	f805 eb01 	strb.w	lr, [r5], #1
   15450:	ebcb 0e05 	rsb	lr, fp, r5
   15454:	45d6      	cmp	lr, sl
   15456:	4606      	mov	r6, r0
   15458:	460f      	mov	r7, r1
   1545a:	f04f 0200 	mov.w	r2, #0
   1545e:	4bae      	ldr	r3, [pc, #696]	; (15718 <_dtoa_r+0x5f8>)
   15460:	d1d2      	bne.n	15408 <_dtoa_r+0x2e8>
   15462:	f8dd 9014 	ldr.w	r9, [sp, #20]
   15466:	4632      	mov	r2, r6
   15468:	463b      	mov	r3, r7
   1546a:	4630      	mov	r0, r6
   1546c:	4639      	mov	r1, r7
   1546e:	f7fb fe51 	bl	11114 <__adddf3>
   15472:	4606      	mov	r6, r0
   15474:	460f      	mov	r7, r1
   15476:	4602      	mov	r2, r0
   15478:	460b      	mov	r3, r1
   1547a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1547e:	f7fc fa6d 	bl	1195c <__aeabi_dcmplt>
   15482:	b940      	cbnz	r0, 15496 <_dtoa_r+0x376>
   15484:	4632      	mov	r2, r6
   15486:	463b      	mov	r3, r7
   15488:	e9dd 0100 	ldrd	r0, r1, [sp]
   1548c:	f7fc fa5c 	bl	11948 <__aeabi_dcmpeq>
   15490:	b188      	cbz	r0, 154b6 <_dtoa_r+0x396>
   15492:	07e3      	lsls	r3, r4, #31
   15494:	d50f      	bpl.n	154b6 <_dtoa_r+0x396>
   15496:	f815 4c01 	ldrb.w	r4, [r5, #-1]
   1549a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1549c:	1e6b      	subs	r3, r5, #1
   1549e:	e004      	b.n	154aa <_dtoa_r+0x38a>
   154a0:	429a      	cmp	r2, r3
   154a2:	f000 83fc 	beq.w	15c9e <_dtoa_r+0xb7e>
   154a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   154aa:	2c39      	cmp	r4, #57	; 0x39
   154ac:	f103 0501 	add.w	r5, r3, #1
   154b0:	d0f6      	beq.n	154a0 <_dtoa_r+0x380>
   154b2:	3401      	adds	r4, #1
   154b4:	701c      	strb	r4, [r3, #0]
   154b6:	990a      	ldr	r1, [sp, #40]	; 0x28
   154b8:	4648      	mov	r0, r9
   154ba:	f000 ff49 	bl	16350 <_Bfree>
   154be:	2200      	movs	r2, #0
   154c0:	9b04      	ldr	r3, [sp, #16]
   154c2:	702a      	strb	r2, [r5, #0]
   154c4:	9a03      	ldr	r2, [sp, #12]
   154c6:	3301      	adds	r3, #1
   154c8:	6013      	str	r3, [r2, #0]
   154ca:	9b25      	ldr	r3, [sp, #148]	; 0x94
   154cc:	2b00      	cmp	r3, #0
   154ce:	f000 839b 	beq.w	15c08 <_dtoa_r+0xae8>
   154d2:	9809      	ldr	r0, [sp, #36]	; 0x24
   154d4:	601d      	str	r5, [r3, #0]
   154d6:	b01b      	add	sp, #108	; 0x6c
   154d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   154de:	2a00      	cmp	r2, #0
   154e0:	f000 810e 	beq.w	15700 <_dtoa_r+0x5e0>
   154e4:	9a00      	ldr	r2, [sp, #0]
   154e6:	2a01      	cmp	r2, #1
   154e8:	f340 8257 	ble.w	1599a <_dtoa_r+0x87a>
   154ec:	9b08      	ldr	r3, [sp, #32]
   154ee:	9a06      	ldr	r2, [sp, #24]
   154f0:	1e5f      	subs	r7, r3, #1
   154f2:	42ba      	cmp	r2, r7
   154f4:	f2c0 838b 	blt.w	15c0e <_dtoa_r+0xaee>
   154f8:	1bd7      	subs	r7, r2, r7
   154fa:	9b08      	ldr	r3, [sp, #32]
   154fc:	2b00      	cmp	r3, #0
   154fe:	f2c0 8480 	blt.w	15e02 <_dtoa_r+0xce2>
   15502:	9d07      	ldr	r5, [sp, #28]
   15504:	9b08      	ldr	r3, [sp, #32]
   15506:	9a07      	ldr	r2, [sp, #28]
   15508:	2101      	movs	r1, #1
   1550a:	441a      	add	r2, r3
   1550c:	4648      	mov	r0, r9
   1550e:	9207      	str	r2, [sp, #28]
   15510:	4498      	add	r8, r3
   15512:	f000 ffb5 	bl	16480 <__i2b>
   15516:	4606      	mov	r6, r0
   15518:	b165      	cbz	r5, 15534 <_dtoa_r+0x414>
   1551a:	f1b8 0f00 	cmp.w	r8, #0
   1551e:	dd09      	ble.n	15534 <_dtoa_r+0x414>
   15520:	4545      	cmp	r5, r8
   15522:	9a07      	ldr	r2, [sp, #28]
   15524:	462b      	mov	r3, r5
   15526:	bfa8      	it	ge
   15528:	4643      	movge	r3, r8
   1552a:	1ad2      	subs	r2, r2, r3
   1552c:	9207      	str	r2, [sp, #28]
   1552e:	1aed      	subs	r5, r5, r3
   15530:	ebc3 0808 	rsb	r8, r3, r8
   15534:	9b06      	ldr	r3, [sp, #24]
   15536:	2b00      	cmp	r3, #0
   15538:	f340 82f5 	ble.w	15b26 <_dtoa_r+0xa06>
   1553c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1553e:	2a00      	cmp	r2, #0
   15540:	f000 8202 	beq.w	15948 <_dtoa_r+0x828>
   15544:	2f00      	cmp	r7, #0
   15546:	f000 81ff 	beq.w	15948 <_dtoa_r+0x828>
   1554a:	4631      	mov	r1, r6
   1554c:	463a      	mov	r2, r7
   1554e:	4648      	mov	r0, r9
   15550:	f001 f838 	bl	165c4 <__pow5mult>
   15554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15556:	4601      	mov	r1, r0
   15558:	4606      	mov	r6, r0
   1555a:	4648      	mov	r0, r9
   1555c:	f000 ff9a 	bl	16494 <__multiply>
   15560:	990a      	ldr	r1, [sp, #40]	; 0x28
   15562:	4604      	mov	r4, r0
   15564:	4648      	mov	r0, r9
   15566:	f000 fef3 	bl	16350 <_Bfree>
   1556a:	9b06      	ldr	r3, [sp, #24]
   1556c:	1bdb      	subs	r3, r3, r7
   1556e:	9306      	str	r3, [sp, #24]
   15570:	f040 81e9 	bne.w	15946 <_dtoa_r+0x826>
   15574:	2101      	movs	r1, #1
   15576:	4648      	mov	r0, r9
   15578:	f000 ff82 	bl	16480 <__i2b>
   1557c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1557e:	9006      	str	r0, [sp, #24]
   15580:	2b00      	cmp	r3, #0
   15582:	f000 8215 	beq.w	159b0 <_dtoa_r+0x890>
   15586:	4601      	mov	r1, r0
   15588:	461a      	mov	r2, r3
   1558a:	4648      	mov	r0, r9
   1558c:	f001 f81a 	bl	165c4 <__pow5mult>
   15590:	9b00      	ldr	r3, [sp, #0]
   15592:	9006      	str	r0, [sp, #24]
   15594:	2b01      	cmp	r3, #1
   15596:	f340 82f3 	ble.w	15b80 <_dtoa_r+0xa60>
   1559a:	2700      	movs	r7, #0
   1559c:	9a06      	ldr	r2, [sp, #24]
   1559e:	6913      	ldr	r3, [r2, #16]
   155a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   155a4:	6918      	ldr	r0, [r3, #16]
   155a6:	f000 ff1d 	bl	163e4 <__hi0bits>
   155aa:	f1c0 0020 	rsb	r0, r0, #32
   155ae:	4440      	add	r0, r8
   155b0:	f010 001f 	ands.w	r0, r0, #31
   155b4:	f000 81fa 	beq.w	159ac <_dtoa_r+0x88c>
   155b8:	f1c0 0320 	rsb	r3, r0, #32
   155bc:	2b04      	cmp	r3, #4
   155be:	f340 84bd 	ble.w	15f3c <_dtoa_r+0xe1c>
   155c2:	f1c0 001c 	rsb	r0, r0, #28
   155c6:	9b07      	ldr	r3, [sp, #28]
   155c8:	4403      	add	r3, r0
   155ca:	9307      	str	r3, [sp, #28]
   155cc:	4405      	add	r5, r0
   155ce:	4480      	add	r8, r0
   155d0:	9b07      	ldr	r3, [sp, #28]
   155d2:	2b00      	cmp	r3, #0
   155d4:	dd05      	ble.n	155e2 <_dtoa_r+0x4c2>
   155d6:	4621      	mov	r1, r4
   155d8:	461a      	mov	r2, r3
   155da:	4648      	mov	r0, r9
   155dc:	f001 f842 	bl	16664 <__lshift>
   155e0:	4604      	mov	r4, r0
   155e2:	f1b8 0f00 	cmp.w	r8, #0
   155e6:	dd05      	ble.n	155f4 <_dtoa_r+0x4d4>
   155e8:	4642      	mov	r2, r8
   155ea:	9906      	ldr	r1, [sp, #24]
   155ec:	4648      	mov	r0, r9
   155ee:	f001 f839 	bl	16664 <__lshift>
   155f2:	9006      	str	r0, [sp, #24]
   155f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   155f6:	2b00      	cmp	r3, #0
   155f8:	f040 827a 	bne.w	15af0 <_dtoa_r+0x9d0>
   155fc:	9b08      	ldr	r3, [sp, #32]
   155fe:	2b00      	cmp	r3, #0
   15600:	f340 8293 	ble.w	15b2a <_dtoa_r+0xa0a>
   15604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15606:	2b00      	cmp	r3, #0
   15608:	f040 81f4 	bne.w	159f4 <_dtoa_r+0x8d4>
   1560c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   15610:	9f08      	ldr	r7, [sp, #32]
   15612:	f8dd 8018 	ldr.w	r8, [sp, #24]
   15616:	465d      	mov	r5, fp
   15618:	e002      	b.n	15620 <_dtoa_r+0x500>
   1561a:	f000 fea3 	bl	16364 <__multadd>
   1561e:	4604      	mov	r4, r0
   15620:	4641      	mov	r1, r8
   15622:	4620      	mov	r0, r4
   15624:	f7ff fce6 	bl	14ff4 <quorem>
   15628:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1562c:	f805 ab01 	strb.w	sl, [r5], #1
   15630:	ebcb 0305 	rsb	r3, fp, r5
   15634:	42bb      	cmp	r3, r7
   15636:	f04f 020a 	mov.w	r2, #10
   1563a:	f04f 0300 	mov.w	r3, #0
   1563e:	4621      	mov	r1, r4
   15640:	4648      	mov	r0, r9
   15642:	dbea      	blt.n	1561a <_dtoa_r+0x4fa>
   15644:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15646:	9a08      	ldr	r2, [sp, #32]
   15648:	2a01      	cmp	r2, #1
   1564a:	bfac      	ite	ge
   1564c:	189b      	addge	r3, r3, r2
   1564e:	3301      	addlt	r3, #1
   15650:	461d      	mov	r5, r3
   15652:	f04f 0b00 	mov.w	fp, #0
   15656:	4621      	mov	r1, r4
   15658:	2201      	movs	r2, #1
   1565a:	4648      	mov	r0, r9
   1565c:	f001 f802 	bl	16664 <__lshift>
   15660:	9906      	ldr	r1, [sp, #24]
   15662:	900a      	str	r0, [sp, #40]	; 0x28
   15664:	f001 f856 	bl	16714 <__mcmp>
   15668:	2800      	cmp	r0, #0
   1566a:	f340 8305 	ble.w	15c78 <_dtoa_r+0xb58>
   1566e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   15672:	9909      	ldr	r1, [sp, #36]	; 0x24
   15674:	1e6b      	subs	r3, r5, #1
   15676:	e004      	b.n	15682 <_dtoa_r+0x562>
   15678:	428b      	cmp	r3, r1
   1567a:	f000 8274 	beq.w	15b66 <_dtoa_r+0xa46>
   1567e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   15682:	2a39      	cmp	r2, #57	; 0x39
   15684:	f103 0501 	add.w	r5, r3, #1
   15688:	d0f6      	beq.n	15678 <_dtoa_r+0x558>
   1568a:	3201      	adds	r2, #1
   1568c:	701a      	strb	r2, [r3, #0]
   1568e:	9906      	ldr	r1, [sp, #24]
   15690:	4648      	mov	r0, r9
   15692:	f000 fe5d 	bl	16350 <_Bfree>
   15696:	2e00      	cmp	r6, #0
   15698:	f43f af0d 	beq.w	154b6 <_dtoa_r+0x396>
   1569c:	f1bb 0f00 	cmp.w	fp, #0
   156a0:	d005      	beq.n	156ae <_dtoa_r+0x58e>
   156a2:	45b3      	cmp	fp, r6
   156a4:	d003      	beq.n	156ae <_dtoa_r+0x58e>
   156a6:	4659      	mov	r1, fp
   156a8:	4648      	mov	r0, r9
   156aa:	f000 fe51 	bl	16350 <_Bfree>
   156ae:	4631      	mov	r1, r6
   156b0:	4648      	mov	r0, r9
   156b2:	f000 fe4d 	bl	16350 <_Bfree>
   156b6:	e6fe      	b.n	154b6 <_dtoa_r+0x396>
   156b8:	2301      	movs	r3, #1
   156ba:	930d      	str	r3, [sp, #52]	; 0x34
   156bc:	e5eb      	b.n	15296 <_dtoa_r+0x176>
   156be:	f8dd 8010 	ldr.w	r8, [sp, #16]
   156c2:	4640      	mov	r0, r8
   156c4:	f7fb fe72 	bl	113ac <__aeabi_i2d>
   156c8:	4602      	mov	r2, r0
   156ca:	460b      	mov	r3, r1
   156cc:	4630      	mov	r0, r6
   156ce:	4639      	mov	r1, r7
   156d0:	f7fc f93a 	bl	11948 <__aeabi_dcmpeq>
   156d4:	2800      	cmp	r0, #0
   156d6:	f47f adca 	bne.w	1526e <_dtoa_r+0x14e>
   156da:	f108 33ff 	add.w	r3, r8, #4294967295
   156de:	9304      	str	r3, [sp, #16]
   156e0:	e5c5      	b.n	1526e <_dtoa_r+0x14e>
   156e2:	9a07      	ldr	r2, [sp, #28]
   156e4:	9b04      	ldr	r3, [sp, #16]
   156e6:	1ad2      	subs	r2, r2, r3
   156e8:	425b      	negs	r3, r3
   156ea:	9306      	str	r3, [sp, #24]
   156ec:	2300      	movs	r3, #0
   156ee:	9207      	str	r2, [sp, #28]
   156f0:	930c      	str	r3, [sp, #48]	; 0x30
   156f2:	e5df      	b.n	152b4 <_dtoa_r+0x194>
   156f4:	f1c8 0300 	rsb	r3, r8, #0
   156f8:	9307      	str	r3, [sp, #28]
   156fa:	f04f 0800 	mov.w	r8, #0
   156fe:	e5d1      	b.n	152a4 <_dtoa_r+0x184>
   15700:	9f06      	ldr	r7, [sp, #24]
   15702:	9d07      	ldr	r5, [sp, #28]
   15704:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   15706:	e707      	b.n	15518 <_dtoa_r+0x3f8>
   15708:	f1c3 0420 	rsb	r4, r3, #32
   1570c:	fa0a f004 	lsl.w	r0, sl, r4
   15710:	e57a      	b.n	15208 <_dtoa_r+0xe8>
   15712:	900d      	str	r0, [sp, #52]	; 0x34
   15714:	e5bf      	b.n	15296 <_dtoa_r+0x176>
   15716:	bf00      	nop
   15718:	40240000 	.word	0x40240000
   1571c:	2300      	movs	r3, #0
   1571e:	930b      	str	r3, [sp, #44]	; 0x2c
   15720:	9b04      	ldr	r3, [sp, #16]
   15722:	9a05      	ldr	r2, [sp, #20]
   15724:	4413      	add	r3, r2
   15726:	930e      	str	r3, [sp, #56]	; 0x38
   15728:	3301      	adds	r3, #1
   1572a:	2b00      	cmp	r3, #0
   1572c:	9308      	str	r3, [sp, #32]
   1572e:	f340 827d 	ble.w	15c2c <_dtoa_r+0xb0c>
   15732:	9c08      	ldr	r4, [sp, #32]
   15734:	4625      	mov	r5, r4
   15736:	2100      	movs	r1, #0
   15738:	2d17      	cmp	r5, #23
   1573a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
   1573e:	d90b      	bls.n	15758 <_dtoa_r+0x638>
   15740:	2201      	movs	r2, #1
   15742:	2304      	movs	r3, #4
   15744:	005b      	lsls	r3, r3, #1
   15746:	f103 0014 	add.w	r0, r3, #20
   1574a:	42a8      	cmp	r0, r5
   1574c:	4611      	mov	r1, r2
   1574e:	f102 0201 	add.w	r2, r2, #1
   15752:	d9f7      	bls.n	15744 <_dtoa_r+0x624>
   15754:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
   15758:	4648      	mov	r0, r9
   1575a:	f000 fdd3 	bl	16304 <_Balloc>
   1575e:	2c0e      	cmp	r4, #14
   15760:	9009      	str	r0, [sp, #36]	; 0x24
   15762:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
   15766:	f63f ade5 	bhi.w	15334 <_dtoa_r+0x214>
   1576a:	2e00      	cmp	r6, #0
   1576c:	f43f ade2 	beq.w	15334 <_dtoa_r+0x214>
   15770:	9904      	ldr	r1, [sp, #16]
   15772:	2900      	cmp	r1, #0
   15774:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   15778:	f340 829a 	ble.w	15cb0 <_dtoa_r+0xb90>
   1577c:	4b90      	ldr	r3, [pc, #576]	; (159c0 <_dtoa_r+0x8a0>)
   1577e:	f001 020f 	and.w	r2, r1, #15
   15782:	110e      	asrs	r6, r1, #4
   15784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   15788:	06f0      	lsls	r0, r6, #27
   1578a:	e9d3 4500 	ldrd	r4, r5, [r3]
   1578e:	f140 8246 	bpl.w	15c1e <_dtoa_r+0xafe>
   15792:	4b8c      	ldr	r3, [pc, #560]	; (159c4 <_dtoa_r+0x8a4>)
   15794:	4650      	mov	r0, sl
   15796:	4659      	mov	r1, fp
   15798:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1579c:	f7fb ff96 	bl	116cc <__aeabi_ddiv>
   157a0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   157a4:	f006 060f 	and.w	r6, r6, #15
   157a8:	f04f 0a03 	mov.w	sl, #3
   157ac:	b186      	cbz	r6, 157d0 <_dtoa_r+0x6b0>
   157ae:	4f85      	ldr	r7, [pc, #532]	; (159c4 <_dtoa_r+0x8a4>)
   157b0:	07f1      	lsls	r1, r6, #31
   157b2:	d509      	bpl.n	157c8 <_dtoa_r+0x6a8>
   157b4:	4620      	mov	r0, r4
   157b6:	4629      	mov	r1, r5
   157b8:	e9d7 2300 	ldrd	r2, r3, [r7]
   157bc:	f7fb fe5c 	bl	11478 <__aeabi_dmul>
   157c0:	f10a 0a01 	add.w	sl, sl, #1
   157c4:	4604      	mov	r4, r0
   157c6:	460d      	mov	r5, r1
   157c8:	1076      	asrs	r6, r6, #1
   157ca:	f107 0708 	add.w	r7, r7, #8
   157ce:	d1ef      	bne.n	157b0 <_dtoa_r+0x690>
   157d0:	4622      	mov	r2, r4
   157d2:	462b      	mov	r3, r5
   157d4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   157d8:	f7fb ff78 	bl	116cc <__aeabi_ddiv>
   157dc:	4606      	mov	r6, r0
   157de:	460f      	mov	r7, r1
   157e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   157e2:	b143      	cbz	r3, 157f6 <_dtoa_r+0x6d6>
   157e4:	2200      	movs	r2, #0
   157e6:	4b78      	ldr	r3, [pc, #480]	; (159c8 <_dtoa_r+0x8a8>)
   157e8:	4630      	mov	r0, r6
   157ea:	4639      	mov	r1, r7
   157ec:	f7fc f8b6 	bl	1195c <__aeabi_dcmplt>
   157f0:	2800      	cmp	r0, #0
   157f2:	f040 831a 	bne.w	15e2a <_dtoa_r+0xd0a>
   157f6:	4650      	mov	r0, sl
   157f8:	f7fb fdd8 	bl	113ac <__aeabi_i2d>
   157fc:	4632      	mov	r2, r6
   157fe:	463b      	mov	r3, r7
   15800:	f7fb fe3a 	bl	11478 <__aeabi_dmul>
   15804:	4b71      	ldr	r3, [pc, #452]	; (159cc <_dtoa_r+0x8ac>)
   15806:	2200      	movs	r2, #0
   15808:	f7fb fc84 	bl	11114 <__adddf3>
   1580c:	9b08      	ldr	r3, [sp, #32]
   1580e:	4604      	mov	r4, r0
   15810:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
   15814:	2b00      	cmp	r3, #0
   15816:	f000 81db 	beq.w	15bd0 <_dtoa_r+0xab0>
   1581a:	9b04      	ldr	r3, [sp, #16]
   1581c:	9316      	str	r3, [sp, #88]	; 0x58
   1581e:	9b08      	ldr	r3, [sp, #32]
   15820:	9312      	str	r3, [sp, #72]	; 0x48
   15822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15824:	2b00      	cmp	r3, #0
   15826:	f000 8294 	beq.w	15d52 <_dtoa_r+0xc32>
   1582a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1582c:	4b64      	ldr	r3, [pc, #400]	; (159c0 <_dtoa_r+0x8a0>)
   1582e:	4968      	ldr	r1, [pc, #416]	; (159d0 <_dtoa_r+0x8b0>)
   15830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   15834:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   15838:	2000      	movs	r0, #0
   1583a:	f7fb ff47 	bl	116cc <__aeabi_ddiv>
   1583e:	4622      	mov	r2, r4
   15840:	462b      	mov	r3, r5
   15842:	f7fb fc65 	bl	11110 <__aeabi_dsub>
   15846:	4682      	mov	sl, r0
   15848:	468b      	mov	fp, r1
   1584a:	4630      	mov	r0, r6
   1584c:	4639      	mov	r1, r7
   1584e:	f7fc f8c3 	bl	119d8 <__aeabi_d2iz>
   15852:	4604      	mov	r4, r0
   15854:	f7fb fdaa 	bl	113ac <__aeabi_i2d>
   15858:	4602      	mov	r2, r0
   1585a:	460b      	mov	r3, r1
   1585c:	4630      	mov	r0, r6
   1585e:	4639      	mov	r1, r7
   15860:	f7fb fc56 	bl	11110 <__aeabi_dsub>
   15864:	3430      	adds	r4, #48	; 0x30
   15866:	9d09      	ldr	r5, [sp, #36]	; 0x24
   15868:	b2e4      	uxtb	r4, r4
   1586a:	4606      	mov	r6, r0
   1586c:	460f      	mov	r7, r1
   1586e:	702c      	strb	r4, [r5, #0]
   15870:	4602      	mov	r2, r0
   15872:	460b      	mov	r3, r1
   15874:	4650      	mov	r0, sl
   15876:	4659      	mov	r1, fp
   15878:	3501      	adds	r5, #1
   1587a:	f7fc f88d 	bl	11998 <__aeabi_dcmpgt>
   1587e:	2800      	cmp	r0, #0
   15880:	d150      	bne.n	15924 <_dtoa_r+0x804>
   15882:	4632      	mov	r2, r6
   15884:	463b      	mov	r3, r7
   15886:	2000      	movs	r0, #0
   15888:	494f      	ldr	r1, [pc, #316]	; (159c8 <_dtoa_r+0x8a8>)
   1588a:	f7fb fc41 	bl	11110 <__aeabi_dsub>
   1588e:	4602      	mov	r2, r0
   15890:	460b      	mov	r3, r1
   15892:	4650      	mov	r0, sl
   15894:	4659      	mov	r1, fp
   15896:	f7fc f87f 	bl	11998 <__aeabi_dcmpgt>
   1589a:	2800      	cmp	r0, #0
   1589c:	f040 8308 	bne.w	15eb0 <_dtoa_r+0xd90>
   158a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   158a2:	2a01      	cmp	r2, #1
   158a4:	f340 81f7 	ble.w	15c96 <_dtoa_r+0xb76>
   158a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   158aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   158ac:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   158b0:	4413      	add	r3, r2
   158b2:	4698      	mov	r8, r3
   158b4:	e00d      	b.n	158d2 <_dtoa_r+0x7b2>
   158b6:	2000      	movs	r0, #0
   158b8:	4943      	ldr	r1, [pc, #268]	; (159c8 <_dtoa_r+0x8a8>)
   158ba:	f7fb fc29 	bl	11110 <__aeabi_dsub>
   158be:	4652      	mov	r2, sl
   158c0:	465b      	mov	r3, fp
   158c2:	f7fc f84b 	bl	1195c <__aeabi_dcmplt>
   158c6:	2800      	cmp	r0, #0
   158c8:	f040 82f2 	bne.w	15eb0 <_dtoa_r+0xd90>
   158cc:	4545      	cmp	r5, r8
   158ce:	f000 81e0 	beq.w	15c92 <_dtoa_r+0xb72>
   158d2:	4650      	mov	r0, sl
   158d4:	4659      	mov	r1, fp
   158d6:	2200      	movs	r2, #0
   158d8:	4b3e      	ldr	r3, [pc, #248]	; (159d4 <_dtoa_r+0x8b4>)
   158da:	f7fb fdcd 	bl	11478 <__aeabi_dmul>
   158de:	2200      	movs	r2, #0
   158e0:	4b3c      	ldr	r3, [pc, #240]	; (159d4 <_dtoa_r+0x8b4>)
   158e2:	4682      	mov	sl, r0
   158e4:	468b      	mov	fp, r1
   158e6:	4630      	mov	r0, r6
   158e8:	4639      	mov	r1, r7
   158ea:	f7fb fdc5 	bl	11478 <__aeabi_dmul>
   158ee:	460f      	mov	r7, r1
   158f0:	4606      	mov	r6, r0
   158f2:	f7fc f871 	bl	119d8 <__aeabi_d2iz>
   158f6:	4604      	mov	r4, r0
   158f8:	f7fb fd58 	bl	113ac <__aeabi_i2d>
   158fc:	4602      	mov	r2, r0
   158fe:	460b      	mov	r3, r1
   15900:	4630      	mov	r0, r6
   15902:	4639      	mov	r1, r7
   15904:	f7fb fc04 	bl	11110 <__aeabi_dsub>
   15908:	3430      	adds	r4, #48	; 0x30
   1590a:	b2e4      	uxtb	r4, r4
   1590c:	4652      	mov	r2, sl
   1590e:	465b      	mov	r3, fp
   15910:	f805 4b01 	strb.w	r4, [r5], #1
   15914:	4606      	mov	r6, r0
   15916:	460f      	mov	r7, r1
   15918:	f7fc f820 	bl	1195c <__aeabi_dcmplt>
   1591c:	4632      	mov	r2, r6
   1591e:	463b      	mov	r3, r7
   15920:	2800      	cmp	r0, #0
   15922:	d0c8      	beq.n	158b6 <_dtoa_r+0x796>
   15924:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15926:	9304      	str	r3, [sp, #16]
   15928:	e5c5      	b.n	154b6 <_dtoa_r+0x396>
   1592a:	2300      	movs	r3, #0
   1592c:	930b      	str	r3, [sp, #44]	; 0x2c
   1592e:	9b05      	ldr	r3, [sp, #20]
   15930:	2b00      	cmp	r3, #0
   15932:	f340 8180 	ble.w	15c36 <_dtoa_r+0xb16>
   15936:	461d      	mov	r5, r3
   15938:	461c      	mov	r4, r3
   1593a:	930e      	str	r3, [sp, #56]	; 0x38
   1593c:	9308      	str	r3, [sp, #32]
   1593e:	e6fa      	b.n	15736 <_dtoa_r+0x616>
   15940:	2301      	movs	r3, #1
   15942:	930b      	str	r3, [sp, #44]	; 0x2c
   15944:	e7f3      	b.n	1592e <_dtoa_r+0x80e>
   15946:	940a      	str	r4, [sp, #40]	; 0x28
   15948:	9a06      	ldr	r2, [sp, #24]
   1594a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1594c:	4648      	mov	r0, r9
   1594e:	f000 fe39 	bl	165c4 <__pow5mult>
   15952:	4604      	mov	r4, r0
   15954:	e60e      	b.n	15574 <_dtoa_r+0x454>
   15956:	9b08      	ldr	r3, [sp, #32]
   15958:	2b00      	cmp	r3, #0
   1595a:	f73f acfe 	bgt.w	1535a <_dtoa_r+0x23a>
   1595e:	f040 814f 	bne.w	15c00 <_dtoa_r+0xae0>
   15962:	2200      	movs	r2, #0
   15964:	4b1c      	ldr	r3, [pc, #112]	; (159d8 <_dtoa_r+0x8b8>)
   15966:	e9dd 0100 	ldrd	r0, r1, [sp]
   1596a:	f7fb fd85 	bl	11478 <__aeabi_dmul>
   1596e:	465b      	mov	r3, fp
   15970:	4652      	mov	r2, sl
   15972:	f7fc f807 	bl	11984 <__aeabi_dcmpge>
   15976:	9b08      	ldr	r3, [sp, #32]
   15978:	9306      	str	r3, [sp, #24]
   1597a:	461e      	mov	r6, r3
   1597c:	2800      	cmp	r0, #0
   1597e:	f000 80ea 	beq.w	15b56 <_dtoa_r+0xa36>
   15982:	9b05      	ldr	r3, [sp, #20]
   15984:	9d09      	ldr	r5, [sp, #36]	; 0x24
   15986:	43db      	mvns	r3, r3
   15988:	9304      	str	r3, [sp, #16]
   1598a:	9906      	ldr	r1, [sp, #24]
   1598c:	4648      	mov	r0, r9
   1598e:	f000 fcdf 	bl	16350 <_Bfree>
   15992:	2e00      	cmp	r6, #0
   15994:	f43f ad8f 	beq.w	154b6 <_dtoa_r+0x396>
   15998:	e689      	b.n	156ae <_dtoa_r+0x58e>
   1599a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1599c:	2a00      	cmp	r2, #0
   1599e:	f000 8238 	beq.w	15e12 <_dtoa_r+0xcf2>
   159a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
   159a6:	9f06      	ldr	r7, [sp, #24]
   159a8:	9d07      	ldr	r5, [sp, #28]
   159aa:	e5ac      	b.n	15506 <_dtoa_r+0x3e6>
   159ac:	201c      	movs	r0, #28
   159ae:	e60a      	b.n	155c6 <_dtoa_r+0x4a6>
   159b0:	9b00      	ldr	r3, [sp, #0]
   159b2:	2b01      	cmp	r3, #1
   159b4:	f340 8280 	ble.w	15eb8 <_dtoa_r+0xd98>
   159b8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   159ba:	2001      	movs	r0, #1
   159bc:	e5f7      	b.n	155ae <_dtoa_r+0x48e>
   159be:	bf00      	nop
   159c0:	00017bb8 	.word	0x00017bb8
   159c4:	00017c80 	.word	0x00017c80
   159c8:	3ff00000 	.word	0x3ff00000
   159cc:	401c0000 	.word	0x401c0000
   159d0:	3fe00000 	.word	0x3fe00000
   159d4:	40240000 	.word	0x40240000
   159d8:	40140000 	.word	0x40140000
   159dc:	4631      	mov	r1, r6
   159de:	2300      	movs	r3, #0
   159e0:	220a      	movs	r2, #10
   159e2:	4648      	mov	r0, r9
   159e4:	f000 fcbe 	bl	16364 <__multadd>
   159e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   159ea:	2b00      	cmp	r3, #0
   159ec:	4606      	mov	r6, r0
   159ee:	f340 828d 	ble.w	15f0c <_dtoa_r+0xdec>
   159f2:	9308      	str	r3, [sp, #32]
   159f4:	2d00      	cmp	r5, #0
   159f6:	dd05      	ble.n	15a04 <_dtoa_r+0x8e4>
   159f8:	4631      	mov	r1, r6
   159fa:	462a      	mov	r2, r5
   159fc:	4648      	mov	r0, r9
   159fe:	f000 fe31 	bl	16664 <__lshift>
   15a02:	4606      	mov	r6, r0
   15a04:	2f00      	cmp	r7, #0
   15a06:	f040 817c 	bne.w	15d02 <_dtoa_r+0xbe2>
   15a0a:	46b0      	mov	r8, r6
   15a0c:	9b08      	ldr	r3, [sp, #32]
   15a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15a10:	3b01      	subs	r3, #1
   15a12:	18d3      	adds	r3, r2, r3
   15a14:	9308      	str	r3, [sp, #32]
   15a16:	f00a 0301 	and.w	r3, sl, #1
   15a1a:	930a      	str	r3, [sp, #40]	; 0x28
   15a1c:	4617      	mov	r7, r2
   15a1e:	f8dd b018 	ldr.w	fp, [sp, #24]
   15a22:	4620      	mov	r0, r4
   15a24:	4659      	mov	r1, fp
   15a26:	f7ff fae5 	bl	14ff4 <quorem>
   15a2a:	4631      	mov	r1, r6
   15a2c:	4605      	mov	r5, r0
   15a2e:	4620      	mov	r0, r4
   15a30:	f000 fe70 	bl	16714 <__mcmp>
   15a34:	4642      	mov	r2, r8
   15a36:	4659      	mov	r1, fp
   15a38:	4682      	mov	sl, r0
   15a3a:	4648      	mov	r0, r9
   15a3c:	f000 fe8c 	bl	16758 <__mdiff>
   15a40:	68c2      	ldr	r2, [r0, #12]
   15a42:	4683      	mov	fp, r0
   15a44:	f105 0330 	add.w	r3, r5, #48	; 0x30
   15a48:	2a00      	cmp	r2, #0
   15a4a:	d149      	bne.n	15ae0 <_dtoa_r+0x9c0>
   15a4c:	4601      	mov	r1, r0
   15a4e:	4620      	mov	r0, r4
   15a50:	9307      	str	r3, [sp, #28]
   15a52:	f000 fe5f 	bl	16714 <__mcmp>
   15a56:	4659      	mov	r1, fp
   15a58:	9005      	str	r0, [sp, #20]
   15a5a:	4648      	mov	r0, r9
   15a5c:	f000 fc78 	bl	16350 <_Bfree>
   15a60:	9a05      	ldr	r2, [sp, #20]
   15a62:	9b07      	ldr	r3, [sp, #28]
   15a64:	b92a      	cbnz	r2, 15a72 <_dtoa_r+0x952>
   15a66:	9900      	ldr	r1, [sp, #0]
   15a68:	b919      	cbnz	r1, 15a72 <_dtoa_r+0x952>
   15a6a:	990a      	ldr	r1, [sp, #40]	; 0x28
   15a6c:	2900      	cmp	r1, #0
   15a6e:	f000 8235 	beq.w	15edc <_dtoa_r+0xdbc>
   15a72:	f1ba 0f00 	cmp.w	sl, #0
   15a76:	f2c0 80e3 	blt.w	15c40 <_dtoa_r+0xb20>
   15a7a:	d105      	bne.n	15a88 <_dtoa_r+0x968>
   15a7c:	9900      	ldr	r1, [sp, #0]
   15a7e:	b919      	cbnz	r1, 15a88 <_dtoa_r+0x968>
   15a80:	990a      	ldr	r1, [sp, #40]	; 0x28
   15a82:	2900      	cmp	r1, #0
   15a84:	f000 80dc 	beq.w	15c40 <_dtoa_r+0xb20>
   15a88:	2a00      	cmp	r2, #0
   15a8a:	f300 814e 	bgt.w	15d2a <_dtoa_r+0xc0a>
   15a8e:	9a08      	ldr	r2, [sp, #32]
   15a90:	703b      	strb	r3, [r7, #0]
   15a92:	f107 0a01 	add.w	sl, r7, #1
   15a96:	4297      	cmp	r7, r2
   15a98:	4655      	mov	r5, sl
   15a9a:	f000 8152 	beq.w	15d42 <_dtoa_r+0xc22>
   15a9e:	4621      	mov	r1, r4
   15aa0:	2300      	movs	r3, #0
   15aa2:	220a      	movs	r2, #10
   15aa4:	4648      	mov	r0, r9
   15aa6:	f000 fc5d 	bl	16364 <__multadd>
   15aaa:	4546      	cmp	r6, r8
   15aac:	4604      	mov	r4, r0
   15aae:	4631      	mov	r1, r6
   15ab0:	f04f 0300 	mov.w	r3, #0
   15ab4:	f04f 020a 	mov.w	r2, #10
   15ab8:	4648      	mov	r0, r9
   15aba:	d00b      	beq.n	15ad4 <_dtoa_r+0x9b4>
   15abc:	f000 fc52 	bl	16364 <__multadd>
   15ac0:	4641      	mov	r1, r8
   15ac2:	4606      	mov	r6, r0
   15ac4:	2300      	movs	r3, #0
   15ac6:	220a      	movs	r2, #10
   15ac8:	4648      	mov	r0, r9
   15aca:	f000 fc4b 	bl	16364 <__multadd>
   15ace:	4657      	mov	r7, sl
   15ad0:	4680      	mov	r8, r0
   15ad2:	e7a4      	b.n	15a1e <_dtoa_r+0x8fe>
   15ad4:	f000 fc46 	bl	16364 <__multadd>
   15ad8:	4657      	mov	r7, sl
   15ada:	4606      	mov	r6, r0
   15adc:	4680      	mov	r8, r0
   15ade:	e79e      	b.n	15a1e <_dtoa_r+0x8fe>
   15ae0:	4601      	mov	r1, r0
   15ae2:	4648      	mov	r0, r9
   15ae4:	9305      	str	r3, [sp, #20]
   15ae6:	f000 fc33 	bl	16350 <_Bfree>
   15aea:	2201      	movs	r2, #1
   15aec:	9b05      	ldr	r3, [sp, #20]
   15aee:	e7c0      	b.n	15a72 <_dtoa_r+0x952>
   15af0:	9906      	ldr	r1, [sp, #24]
   15af2:	4620      	mov	r0, r4
   15af4:	f000 fe0e 	bl	16714 <__mcmp>
   15af8:	2800      	cmp	r0, #0
   15afa:	f6bf ad7f 	bge.w	155fc <_dtoa_r+0x4dc>
   15afe:	4621      	mov	r1, r4
   15b00:	9c04      	ldr	r4, [sp, #16]
   15b02:	2300      	movs	r3, #0
   15b04:	3c01      	subs	r4, #1
   15b06:	220a      	movs	r2, #10
   15b08:	4648      	mov	r0, r9
   15b0a:	9404      	str	r4, [sp, #16]
   15b0c:	f000 fc2a 	bl	16364 <__multadd>
   15b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15b12:	4604      	mov	r4, r0
   15b14:	2b00      	cmp	r3, #0
   15b16:	f47f af61 	bne.w	159dc <_dtoa_r+0x8bc>
   15b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15b1c:	2b00      	cmp	r3, #0
   15b1e:	f340 81ed 	ble.w	15efc <_dtoa_r+0xddc>
   15b22:	9308      	str	r3, [sp, #32]
   15b24:	e572      	b.n	1560c <_dtoa_r+0x4ec>
   15b26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   15b28:	e524      	b.n	15574 <_dtoa_r+0x454>
   15b2a:	9b00      	ldr	r3, [sp, #0]
   15b2c:	2b02      	cmp	r3, #2
   15b2e:	f77f ad69 	ble.w	15604 <_dtoa_r+0x4e4>
   15b32:	9b08      	ldr	r3, [sp, #32]
   15b34:	2b00      	cmp	r3, #0
   15b36:	f040 819d 	bne.w	15e74 <_dtoa_r+0xd54>
   15b3a:	9906      	ldr	r1, [sp, #24]
   15b3c:	2205      	movs	r2, #5
   15b3e:	4648      	mov	r0, r9
   15b40:	f000 fc10 	bl	16364 <__multadd>
   15b44:	4601      	mov	r1, r0
   15b46:	9006      	str	r0, [sp, #24]
   15b48:	4620      	mov	r0, r4
   15b4a:	f000 fde3 	bl	16714 <__mcmp>
   15b4e:	2800      	cmp	r0, #0
   15b50:	940a      	str	r4, [sp, #40]	; 0x28
   15b52:	f77f af16 	ble.w	15982 <_dtoa_r+0x862>
   15b56:	9a04      	ldr	r2, [sp, #16]
   15b58:	9909      	ldr	r1, [sp, #36]	; 0x24
   15b5a:	2331      	movs	r3, #49	; 0x31
   15b5c:	3201      	adds	r2, #1
   15b5e:	9204      	str	r2, [sp, #16]
   15b60:	700b      	strb	r3, [r1, #0]
   15b62:	1c4d      	adds	r5, r1, #1
   15b64:	e711      	b.n	1598a <_dtoa_r+0x86a>
   15b66:	9a04      	ldr	r2, [sp, #16]
   15b68:	3201      	adds	r2, #1
   15b6a:	9204      	str	r2, [sp, #16]
   15b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15b6e:	2331      	movs	r3, #49	; 0x31
   15b70:	7013      	strb	r3, [r2, #0]
   15b72:	e58c      	b.n	1568e <_dtoa_r+0x56e>
   15b74:	2301      	movs	r3, #1
   15b76:	930b      	str	r3, [sp, #44]	; 0x2c
   15b78:	e5d2      	b.n	15720 <_dtoa_r+0x600>
   15b7a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   15b7e:	e49a      	b.n	154b6 <_dtoa_r+0x396>
   15b80:	f1ba 0f00 	cmp.w	sl, #0
   15b84:	f47f ad09 	bne.w	1559a <_dtoa_r+0x47a>
   15b88:	f3cb 0313 	ubfx	r3, fp, #0, #20
   15b8c:	2b00      	cmp	r3, #0
   15b8e:	f040 813e 	bne.w	15e0e <_dtoa_r+0xcee>
   15b92:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   15b96:	0d3f      	lsrs	r7, r7, #20
   15b98:	053f      	lsls	r7, r7, #20
   15b9a:	b12f      	cbz	r7, 15ba8 <_dtoa_r+0xa88>
   15b9c:	9b07      	ldr	r3, [sp, #28]
   15b9e:	3301      	adds	r3, #1
   15ba0:	9307      	str	r3, [sp, #28]
   15ba2:	f108 0801 	add.w	r8, r8, #1
   15ba6:	2701      	movs	r7, #1
   15ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15baa:	2001      	movs	r0, #1
   15bac:	2b00      	cmp	r3, #0
   15bae:	f43f acfe 	beq.w	155ae <_dtoa_r+0x48e>
   15bb2:	e4f3      	b.n	1559c <_dtoa_r+0x47c>
   15bb4:	4650      	mov	r0, sl
   15bb6:	f7fb fbf9 	bl	113ac <__aeabi_i2d>
   15bba:	4632      	mov	r2, r6
   15bbc:	463b      	mov	r3, r7
   15bbe:	f7fb fc5b 	bl	11478 <__aeabi_dmul>
   15bc2:	2200      	movs	r2, #0
   15bc4:	4bbf      	ldr	r3, [pc, #764]	; (15ec4 <_dtoa_r+0xda4>)
   15bc6:	f7fb faa5 	bl	11114 <__adddf3>
   15bca:	4604      	mov	r4, r0
   15bcc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
   15bd0:	4630      	mov	r0, r6
   15bd2:	4639      	mov	r1, r7
   15bd4:	2200      	movs	r2, #0
   15bd6:	4bbc      	ldr	r3, [pc, #752]	; (15ec8 <_dtoa_r+0xda8>)
   15bd8:	f7fb fa9a 	bl	11110 <__aeabi_dsub>
   15bdc:	4622      	mov	r2, r4
   15bde:	462b      	mov	r3, r5
   15be0:	4606      	mov	r6, r0
   15be2:	460f      	mov	r7, r1
   15be4:	f7fb fed8 	bl	11998 <__aeabi_dcmpgt>
   15be8:	2800      	cmp	r0, #0
   15bea:	f040 80ae 	bne.w	15d4a <_dtoa_r+0xc2a>
   15bee:	4622      	mov	r2, r4
   15bf0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   15bf4:	4630      	mov	r0, r6
   15bf6:	4639      	mov	r1, r7
   15bf8:	f7fb feb0 	bl	1195c <__aeabi_dcmplt>
   15bfc:	2800      	cmp	r0, #0
   15bfe:	d04a      	beq.n	15c96 <_dtoa_r+0xb76>
   15c00:	2300      	movs	r3, #0
   15c02:	9306      	str	r3, [sp, #24]
   15c04:	461e      	mov	r6, r3
   15c06:	e6bc      	b.n	15982 <_dtoa_r+0x862>
   15c08:	9809      	ldr	r0, [sp, #36]	; 0x24
   15c0a:	f7ff bac2 	b.w	15192 <_dtoa_r+0x72>
   15c0e:	9b06      	ldr	r3, [sp, #24]
   15c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15c12:	9706      	str	r7, [sp, #24]
   15c14:	1afb      	subs	r3, r7, r3
   15c16:	441a      	add	r2, r3
   15c18:	920c      	str	r2, [sp, #48]	; 0x30
   15c1a:	2700      	movs	r7, #0
   15c1c:	e46d      	b.n	154fa <_dtoa_r+0x3da>
   15c1e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
   15c22:	f04f 0a02 	mov.w	sl, #2
   15c26:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
   15c2a:	e5bf      	b.n	157ac <_dtoa_r+0x68c>
   15c2c:	461c      	mov	r4, r3
   15c2e:	2100      	movs	r1, #0
   15c30:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
   15c34:	e590      	b.n	15758 <_dtoa_r+0x638>
   15c36:	2401      	movs	r4, #1
   15c38:	940e      	str	r4, [sp, #56]	; 0x38
   15c3a:	9408      	str	r4, [sp, #32]
   15c3c:	9405      	str	r4, [sp, #20]
   15c3e:	e7f6      	b.n	15c2e <_dtoa_r+0xb0e>
   15c40:	2a00      	cmp	r2, #0
   15c42:	469a      	mov	sl, r3
   15c44:	dd11      	ble.n	15c6a <_dtoa_r+0xb4a>
   15c46:	4621      	mov	r1, r4
   15c48:	2201      	movs	r2, #1
   15c4a:	4648      	mov	r0, r9
   15c4c:	f000 fd0a 	bl	16664 <__lshift>
   15c50:	9906      	ldr	r1, [sp, #24]
   15c52:	4604      	mov	r4, r0
   15c54:	f000 fd5e 	bl	16714 <__mcmp>
   15c58:	2800      	cmp	r0, #0
   15c5a:	f340 8148 	ble.w	15eee <_dtoa_r+0xdce>
   15c5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   15c62:	f000 8109 	beq.w	15e78 <_dtoa_r+0xd58>
   15c66:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   15c6a:	46b3      	mov	fp, r6
   15c6c:	f887 a000 	strb.w	sl, [r7]
   15c70:	1c7d      	adds	r5, r7, #1
   15c72:	4646      	mov	r6, r8
   15c74:	940a      	str	r4, [sp, #40]	; 0x28
   15c76:	e50a      	b.n	1568e <_dtoa_r+0x56e>
   15c78:	d104      	bne.n	15c84 <_dtoa_r+0xb64>
   15c7a:	f01a 0f01 	tst.w	sl, #1
   15c7e:	d001      	beq.n	15c84 <_dtoa_r+0xb64>
   15c80:	e4f5      	b.n	1566e <_dtoa_r+0x54e>
   15c82:	4615      	mov	r5, r2
   15c84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   15c88:	2b30      	cmp	r3, #48	; 0x30
   15c8a:	f105 32ff 	add.w	r2, r5, #4294967295
   15c8e:	d0f8      	beq.n	15c82 <_dtoa_r+0xb62>
   15c90:	e4fd      	b.n	1568e <_dtoa_r+0x56e>
   15c92:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   15c96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   15c9a:	f7ff bb4b 	b.w	15334 <_dtoa_r+0x214>
   15c9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15ca0:	2230      	movs	r2, #48	; 0x30
   15ca2:	700a      	strb	r2, [r1, #0]
   15ca4:	9a04      	ldr	r2, [sp, #16]
   15ca6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
   15caa:	3201      	adds	r2, #1
   15cac:	9204      	str	r2, [sp, #16]
   15cae:	e400      	b.n	154b2 <_dtoa_r+0x392>
   15cb0:	9b04      	ldr	r3, [sp, #16]
   15cb2:	425c      	negs	r4, r3
   15cb4:	2c00      	cmp	r4, #0
   15cb6:	f000 80b3 	beq.w	15e20 <_dtoa_r+0xd00>
   15cba:	4b84      	ldr	r3, [pc, #528]	; (15ecc <_dtoa_r+0xdac>)
   15cbc:	f004 020f 	and.w	r2, r4, #15
   15cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   15cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   15cc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   15ccc:	f7fb fbd4 	bl	11478 <__aeabi_dmul>
   15cd0:	1124      	asrs	r4, r4, #4
   15cd2:	4606      	mov	r6, r0
   15cd4:	460f      	mov	r7, r1
   15cd6:	f000 8116 	beq.w	15f06 <_dtoa_r+0xde6>
   15cda:	4d7d      	ldr	r5, [pc, #500]	; (15ed0 <_dtoa_r+0xdb0>)
   15cdc:	f04f 0a02 	mov.w	sl, #2
   15ce0:	07e2      	lsls	r2, r4, #31
   15ce2:	d509      	bpl.n	15cf8 <_dtoa_r+0xbd8>
   15ce4:	4630      	mov	r0, r6
   15ce6:	4639      	mov	r1, r7
   15ce8:	e9d5 2300 	ldrd	r2, r3, [r5]
   15cec:	f7fb fbc4 	bl	11478 <__aeabi_dmul>
   15cf0:	f10a 0a01 	add.w	sl, sl, #1
   15cf4:	4606      	mov	r6, r0
   15cf6:	460f      	mov	r7, r1
   15cf8:	1064      	asrs	r4, r4, #1
   15cfa:	f105 0508 	add.w	r5, r5, #8
   15cfe:	d1ef      	bne.n	15ce0 <_dtoa_r+0xbc0>
   15d00:	e56e      	b.n	157e0 <_dtoa_r+0x6c0>
   15d02:	6871      	ldr	r1, [r6, #4]
   15d04:	4648      	mov	r0, r9
   15d06:	f000 fafd 	bl	16304 <_Balloc>
   15d0a:	6933      	ldr	r3, [r6, #16]
   15d0c:	1c9a      	adds	r2, r3, #2
   15d0e:	4605      	mov	r5, r0
   15d10:	0092      	lsls	r2, r2, #2
   15d12:	f106 010c 	add.w	r1, r6, #12
   15d16:	300c      	adds	r0, #12
   15d18:	f7f8 fcb0 	bl	e67c <memcpy>
   15d1c:	4629      	mov	r1, r5
   15d1e:	2201      	movs	r2, #1
   15d20:	4648      	mov	r0, r9
   15d22:	f000 fc9f 	bl	16664 <__lshift>
   15d26:	4680      	mov	r8, r0
   15d28:	e670      	b.n	15a0c <_dtoa_r+0x8ec>
   15d2a:	2b39      	cmp	r3, #57	; 0x39
   15d2c:	f000 80a4 	beq.w	15e78 <_dtoa_r+0xd58>
   15d30:	f103 0a01 	add.w	sl, r3, #1
   15d34:	46b3      	mov	fp, r6
   15d36:	f887 a000 	strb.w	sl, [r7]
   15d3a:	1c7d      	adds	r5, r7, #1
   15d3c:	4646      	mov	r6, r8
   15d3e:	940a      	str	r4, [sp, #40]	; 0x28
   15d40:	e4a5      	b.n	1568e <_dtoa_r+0x56e>
   15d42:	46b3      	mov	fp, r6
   15d44:	469a      	mov	sl, r3
   15d46:	4646      	mov	r6, r8
   15d48:	e485      	b.n	15656 <_dtoa_r+0x536>
   15d4a:	2300      	movs	r3, #0
   15d4c:	9306      	str	r3, [sp, #24]
   15d4e:	461e      	mov	r6, r3
   15d50:	e701      	b.n	15b56 <_dtoa_r+0xa36>
   15d52:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15d54:	495d      	ldr	r1, [pc, #372]	; (15ecc <_dtoa_r+0xdac>)
   15d56:	1e5a      	subs	r2, r3, #1
   15d58:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   15d5c:	462b      	mov	r3, r5
   15d5e:	9217      	str	r2, [sp, #92]	; 0x5c
   15d60:	e9d1 0100 	ldrd	r0, r1, [r1]
   15d64:	4622      	mov	r2, r4
   15d66:	f7fb fb87 	bl	11478 <__aeabi_dmul>
   15d6a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   15d6e:	4639      	mov	r1, r7
   15d70:	4630      	mov	r0, r6
   15d72:	f7fb fe31 	bl	119d8 <__aeabi_d2iz>
   15d76:	4604      	mov	r4, r0
   15d78:	f7fb fb18 	bl	113ac <__aeabi_i2d>
   15d7c:	460b      	mov	r3, r1
   15d7e:	4602      	mov	r2, r0
   15d80:	4639      	mov	r1, r7
   15d82:	4630      	mov	r0, r6
   15d84:	f7fb f9c4 	bl	11110 <__aeabi_dsub>
   15d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15d8a:	460f      	mov	r7, r1
   15d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
   15d8e:	3430      	adds	r4, #48	; 0x30
   15d90:	2b01      	cmp	r3, #1
   15d92:	4606      	mov	r6, r0
   15d94:	700c      	strb	r4, [r1, #0]
   15d96:	f101 0501 	add.w	r5, r1, #1
   15d9a:	d020      	beq.n	15dde <_dtoa_r+0xcbe>
   15d9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15d9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15da0:	4413      	add	r3, r2
   15da2:	469a      	mov	sl, r3
   15da4:	46ab      	mov	fp, r5
   15da6:	2200      	movs	r2, #0
   15da8:	4b4a      	ldr	r3, [pc, #296]	; (15ed4 <_dtoa_r+0xdb4>)
   15daa:	4630      	mov	r0, r6
   15dac:	4639      	mov	r1, r7
   15dae:	f7fb fb63 	bl	11478 <__aeabi_dmul>
   15db2:	460f      	mov	r7, r1
   15db4:	4606      	mov	r6, r0
   15db6:	f7fb fe0f 	bl	119d8 <__aeabi_d2iz>
   15dba:	4604      	mov	r4, r0
   15dbc:	f7fb faf6 	bl	113ac <__aeabi_i2d>
   15dc0:	3430      	adds	r4, #48	; 0x30
   15dc2:	4602      	mov	r2, r0
   15dc4:	460b      	mov	r3, r1
   15dc6:	4630      	mov	r0, r6
   15dc8:	4639      	mov	r1, r7
   15dca:	f7fb f9a1 	bl	11110 <__aeabi_dsub>
   15dce:	f80b 4b01 	strb.w	r4, [fp], #1
   15dd2:	45da      	cmp	sl, fp
   15dd4:	4606      	mov	r6, r0
   15dd6:	460f      	mov	r7, r1
   15dd8:	d1e5      	bne.n	15da6 <_dtoa_r+0xc86>
   15dda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15ddc:	441d      	add	r5, r3
   15dde:	2200      	movs	r2, #0
   15de0:	4b3d      	ldr	r3, [pc, #244]	; (15ed8 <_dtoa_r+0xdb8>)
   15de2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   15de6:	f7fb f995 	bl	11114 <__adddf3>
   15dea:	4632      	mov	r2, r6
   15dec:	463b      	mov	r3, r7
   15dee:	f7fb fdb5 	bl	1195c <__aeabi_dcmplt>
   15df2:	2800      	cmp	r0, #0
   15df4:	d048      	beq.n	15e88 <_dtoa_r+0xd68>
   15df6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15df8:	9304      	str	r3, [sp, #16]
   15dfa:	f815 4c01 	ldrb.w	r4, [r5, #-1]
   15dfe:	f7ff bb4c 	b.w	1549a <_dtoa_r+0x37a>
   15e02:	9b07      	ldr	r3, [sp, #28]
   15e04:	9a08      	ldr	r2, [sp, #32]
   15e06:	1a9d      	subs	r5, r3, r2
   15e08:	2300      	movs	r3, #0
   15e0a:	f7ff bb7c 	b.w	15506 <_dtoa_r+0x3e6>
   15e0e:	2700      	movs	r7, #0
   15e10:	e6ca      	b.n	15ba8 <_dtoa_r+0xa88>
   15e12:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15e14:	9f06      	ldr	r7, [sp, #24]
   15e16:	9d07      	ldr	r5, [sp, #28]
   15e18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   15e1c:	f7ff bb73 	b.w	15506 <_dtoa_r+0x3e6>
   15e20:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   15e24:	f04f 0a02 	mov.w	sl, #2
   15e28:	e4da      	b.n	157e0 <_dtoa_r+0x6c0>
   15e2a:	9b08      	ldr	r3, [sp, #32]
   15e2c:	2b00      	cmp	r3, #0
   15e2e:	f43f aec1 	beq.w	15bb4 <_dtoa_r+0xa94>
   15e32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15e34:	2b00      	cmp	r3, #0
   15e36:	f77f af2e 	ble.w	15c96 <_dtoa_r+0xb76>
   15e3a:	2200      	movs	r2, #0
   15e3c:	4b25      	ldr	r3, [pc, #148]	; (15ed4 <_dtoa_r+0xdb4>)
   15e3e:	4630      	mov	r0, r6
   15e40:	4639      	mov	r1, r7
   15e42:	f7fb fb19 	bl	11478 <__aeabi_dmul>
   15e46:	4606      	mov	r6, r0
   15e48:	460f      	mov	r7, r1
   15e4a:	f10a 0001 	add.w	r0, sl, #1
   15e4e:	f7fb faad 	bl	113ac <__aeabi_i2d>
   15e52:	4632      	mov	r2, r6
   15e54:	463b      	mov	r3, r7
   15e56:	f7fb fb0f 	bl	11478 <__aeabi_dmul>
   15e5a:	2200      	movs	r2, #0
   15e5c:	4b19      	ldr	r3, [pc, #100]	; (15ec4 <_dtoa_r+0xda4>)
   15e5e:	f7fb f959 	bl	11114 <__adddf3>
   15e62:	9a04      	ldr	r2, [sp, #16]
   15e64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15e66:	9312      	str	r3, [sp, #72]	; 0x48
   15e68:	3a01      	subs	r2, #1
   15e6a:	4604      	mov	r4, r0
   15e6c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
   15e70:	9216      	str	r2, [sp, #88]	; 0x58
   15e72:	e4d6      	b.n	15822 <_dtoa_r+0x702>
   15e74:	940a      	str	r4, [sp, #40]	; 0x28
   15e76:	e584      	b.n	15982 <_dtoa_r+0x862>
   15e78:	2239      	movs	r2, #57	; 0x39
   15e7a:	46b3      	mov	fp, r6
   15e7c:	940a      	str	r4, [sp, #40]	; 0x28
   15e7e:	4646      	mov	r6, r8
   15e80:	703a      	strb	r2, [r7, #0]
   15e82:	1c7d      	adds	r5, r7, #1
   15e84:	f7ff bbf5 	b.w	15672 <_dtoa_r+0x552>
   15e88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   15e8c:	2000      	movs	r0, #0
   15e8e:	4912      	ldr	r1, [pc, #72]	; (15ed8 <_dtoa_r+0xdb8>)
   15e90:	f7fb f93e 	bl	11110 <__aeabi_dsub>
   15e94:	4632      	mov	r2, r6
   15e96:	463b      	mov	r3, r7
   15e98:	f7fb fd7e 	bl	11998 <__aeabi_dcmpgt>
   15e9c:	b908      	cbnz	r0, 15ea2 <_dtoa_r+0xd82>
   15e9e:	e6fa      	b.n	15c96 <_dtoa_r+0xb76>
   15ea0:	4615      	mov	r5, r2
   15ea2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   15ea6:	2b30      	cmp	r3, #48	; 0x30
   15ea8:	f105 32ff 	add.w	r2, r5, #4294967295
   15eac:	d0f8      	beq.n	15ea0 <_dtoa_r+0xd80>
   15eae:	e539      	b.n	15924 <_dtoa_r+0x804>
   15eb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15eb2:	9304      	str	r3, [sp, #16]
   15eb4:	f7ff baf1 	b.w	1549a <_dtoa_r+0x37a>
   15eb8:	f1ba 0f00 	cmp.w	sl, #0
   15ebc:	f47f ad7c 	bne.w	159b8 <_dtoa_r+0x898>
   15ec0:	e662      	b.n	15b88 <_dtoa_r+0xa68>
   15ec2:	bf00      	nop
   15ec4:	401c0000 	.word	0x401c0000
   15ec8:	40140000 	.word	0x40140000
   15ecc:	00017bb8 	.word	0x00017bb8
   15ed0:	00017c80 	.word	0x00017c80
   15ed4:	40240000 	.word	0x40240000
   15ed8:	3fe00000 	.word	0x3fe00000
   15edc:	2b39      	cmp	r3, #57	; 0x39
   15ede:	46d3      	mov	fp, sl
   15ee0:	469a      	mov	sl, r3
   15ee2:	d0c9      	beq.n	15e78 <_dtoa_r+0xd58>
   15ee4:	f1bb 0f00 	cmp.w	fp, #0
   15ee8:	f73f aebd 	bgt.w	15c66 <_dtoa_r+0xb46>
   15eec:	e6bd      	b.n	15c6a <_dtoa_r+0xb4a>
   15eee:	f47f aebc 	bne.w	15c6a <_dtoa_r+0xb4a>
   15ef2:	f01a 0f01 	tst.w	sl, #1
   15ef6:	f43f aeb8 	beq.w	15c6a <_dtoa_r+0xb4a>
   15efa:	e6b0      	b.n	15c5e <_dtoa_r+0xb3e>
   15efc:	9b00      	ldr	r3, [sp, #0]
   15efe:	2b02      	cmp	r3, #2
   15f00:	dc25      	bgt.n	15f4e <_dtoa_r+0xe2e>
   15f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15f04:	e60d      	b.n	15b22 <_dtoa_r+0xa02>
   15f06:	f04f 0a02 	mov.w	sl, #2
   15f0a:	e469      	b.n	157e0 <_dtoa_r+0x6c0>
   15f0c:	9b00      	ldr	r3, [sp, #0]
   15f0e:	2b02      	cmp	r3, #2
   15f10:	dc1d      	bgt.n	15f4e <_dtoa_r+0xe2e>
   15f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15f14:	e56d      	b.n	159f2 <_dtoa_r+0x8d2>
   15f16:	2400      	movs	r4, #0
   15f18:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
   15f1c:	4621      	mov	r1, r4
   15f1e:	4648      	mov	r0, r9
   15f20:	f000 f9f0 	bl	16304 <_Balloc>
   15f24:	f04f 33ff 	mov.w	r3, #4294967295
   15f28:	9308      	str	r3, [sp, #32]
   15f2a:	930e      	str	r3, [sp, #56]	; 0x38
   15f2c:	2301      	movs	r3, #1
   15f2e:	9009      	str	r0, [sp, #36]	; 0x24
   15f30:	9405      	str	r4, [sp, #20]
   15f32:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
   15f36:	930b      	str	r3, [sp, #44]	; 0x2c
   15f38:	f7ff b9fc 	b.w	15334 <_dtoa_r+0x214>
   15f3c:	f43f ab48 	beq.w	155d0 <_dtoa_r+0x4b0>
   15f40:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   15f44:	f7ff bb3f 	b.w	155c6 <_dtoa_r+0x4a6>
   15f48:	2601      	movs	r6, #1
   15f4a:	f7ff b9bc 	b.w	152c6 <_dtoa_r+0x1a6>
   15f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15f50:	9308      	str	r3, [sp, #32]
   15f52:	e5ee      	b.n	15b32 <_dtoa_r+0xa12>

00015f54 <fcvtbuf>:
   15f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15f58:	ed2d 8b02 	vpush	{d8}
   15f5c:	eeb0 8a40 	vmov.f32	s16, s0
   15f60:	eef0 8a60 	vmov.f32	s17, s1
   15f64:	4d38      	ldr	r5, [pc, #224]	; (16048 <fcvtbuf+0xf4>)
   15f66:	b085      	sub	sp, #20
   15f68:	682f      	ldr	r7, [r5, #0]
   15f6a:	4604      	mov	r4, r0
   15f6c:	460e      	mov	r6, r1
   15f6e:	4690      	mov	r8, r2
   15f70:	461d      	mov	r5, r3
   15f72:	2b00      	cmp	r3, #0
   15f74:	d04d      	beq.n	16012 <fcvtbuf+0xbe>
   15f76:	2200      	movs	r2, #0
   15f78:	4b34      	ldr	r3, [pc, #208]	; (1604c <fcvtbuf+0xf8>)
   15f7a:	ec51 0b18 	vmov	r0, r1, d8
   15f7e:	f7fb fced 	bl	1195c <__aeabi_dcmplt>
   15f82:	bb78      	cbnz	r0, 15fe4 <fcvtbuf+0x90>
   15f84:	eeb0 0a48 	vmov.f32	s0, s16
   15f88:	eef0 0a68 	vmov.f32	s1, s17
   15f8c:	ab03      	add	r3, sp, #12
   15f8e:	9301      	str	r3, [sp, #4]
   15f90:	f8cd 8000 	str.w	r8, [sp]
   15f94:	4638      	mov	r0, r7
   15f96:	4633      	mov	r3, r6
   15f98:	4622      	mov	r2, r4
   15f9a:	2103      	movs	r1, #3
   15f9c:	f7ff f8c0 	bl	15120 <_dtoa_r>
   15fa0:	9b03      	ldr	r3, [sp, #12]
   15fa2:	6831      	ldr	r1, [r6, #0]
   15fa4:	4298      	cmp	r0, r3
   15fa6:	f1c1 0100 	rsb	r1, r1, #0
   15faa:	d239      	bcs.n	16020 <fcvtbuf+0xcc>
   15fac:	1b49      	subs	r1, r1, r5
   15fae:	462b      	mov	r3, r5
   15fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
   15fb4:	f803 2b01 	strb.w	r2, [r3], #1
   15fb8:	9a03      	ldr	r2, [sp, #12]
   15fba:	4282      	cmp	r2, r0
   15fbc:	eb03 0601 	add.w	r6, r3, r1
   15fc0:	d8f6      	bhi.n	15fb0 <fcvtbuf+0x5c>
   15fc2:	42b4      	cmp	r4, r6
   15fc4:	dd2f      	ble.n	16026 <fcvtbuf+0xd2>
   15fc6:	1ba2      	subs	r2, r4, r6
   15fc8:	441a      	add	r2, r3
   15fca:	2130      	movs	r1, #48	; 0x30
   15fcc:	f803 1b01 	strb.w	r1, [r3], #1
   15fd0:	429a      	cmp	r2, r3
   15fd2:	d1fb      	bne.n	15fcc <fcvtbuf+0x78>
   15fd4:	2300      	movs	r3, #0
   15fd6:	7013      	strb	r3, [r2, #0]
   15fd8:	4628      	mov	r0, r5
   15fda:	b005      	add	sp, #20
   15fdc:	ecbd 8b02 	vpop	{d8}
   15fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15fe4:	2200      	movs	r2, #0
   15fe6:	4b1a      	ldr	r3, [pc, #104]	; (16050 <fcvtbuf+0xfc>)
   15fe8:	ec51 0b18 	vmov	r0, r1, d8
   15fec:	f7fb fcd4 	bl	11998 <__aeabi_dcmpgt>
   15ff0:	2800      	cmp	r0, #0
   15ff2:	d0c7      	beq.n	15f84 <fcvtbuf+0x30>
   15ff4:	eeb0 0a48 	vmov.f32	s0, s16
   15ff8:	eef0 0a68 	vmov.f32	s1, s17
   15ffc:	ab03      	add	r3, sp, #12
   15ffe:	9301      	str	r3, [sp, #4]
   16000:	f8cd 8000 	str.w	r8, [sp]
   16004:	4638      	mov	r0, r7
   16006:	4633      	mov	r3, r6
   16008:	4622      	mov	r2, r4
   1600a:	2102      	movs	r1, #2
   1600c:	f7ff f888 	bl	15120 <_dtoa_r>
   16010:	e7c6      	b.n	15fa0 <fcvtbuf+0x4c>
   16012:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   16014:	f100 0323 	add.w	r3, r0, #35	; 0x23
   16018:	429a      	cmp	r2, r3
   1601a:	dd06      	ble.n	1602a <fcvtbuf+0xd6>
   1601c:	6d7d      	ldr	r5, [r7, #84]	; 0x54
   1601e:	e7aa      	b.n	15f76 <fcvtbuf+0x22>
   16020:	460e      	mov	r6, r1
   16022:	462b      	mov	r3, r5
   16024:	e7cd      	b.n	15fc2 <fcvtbuf+0x6e>
   16026:	461a      	mov	r2, r3
   16028:	e7d4      	b.n	15fd4 <fcvtbuf+0x80>
   1602a:	f100 0924 	add.w	r9, r0, #36	; 0x24
   1602e:	464a      	mov	r2, r9
   16030:	6d79      	ldr	r1, [r7, #84]	; 0x54
   16032:	4638      	mov	r0, r7
   16034:	f7fc fb3c 	bl	126b0 <_realloc_r>
   16038:	4605      	mov	r5, r0
   1603a:	2800      	cmp	r0, #0
   1603c:	d0cc      	beq.n	15fd8 <fcvtbuf+0x84>
   1603e:	f8c7 9050 	str.w	r9, [r7, #80]	; 0x50
   16042:	6578      	str	r0, [r7, #84]	; 0x54
   16044:	e797      	b.n	15f76 <fcvtbuf+0x22>
   16046:	bf00      	nop
   16048:	1fff4fe0 	.word	0x1fff4fe0
   1604c:	3ff00000 	.word	0x3ff00000
   16050:	bff00000 	.word	0xbff00000

00016054 <__libc_fini_array>:
   16054:	b538      	push	{r3, r4, r5, lr}
   16056:	4d07      	ldr	r5, [pc, #28]	; (16074 <__libc_fini_array+0x20>)
   16058:	4c07      	ldr	r4, [pc, #28]	; (16078 <__libc_fini_array+0x24>)
   1605a:	1b2c      	subs	r4, r5, r4
   1605c:	10a4      	asrs	r4, r4, #2
   1605e:	d005      	beq.n	1606c <__libc_fini_array+0x18>
   16060:	3c01      	subs	r4, #1
   16062:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   16066:	4798      	blx	r3
   16068:	2c00      	cmp	r4, #0
   1606a:	d1f9      	bne.n	16060 <__libc_fini_array+0xc>
   1606c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16070:	f001 be5a 	b.w	17d28 <__init_array_end>
	...

0001607c <_malloc_trim_r>:
   1607c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1607e:	4f23      	ldr	r7, [pc, #140]	; (1610c <_malloc_trim_r+0x90>)
   16080:	460c      	mov	r4, r1
   16082:	4606      	mov	r6, r0
   16084:	f7fc fb08 	bl	12698 <__malloc_lock>
   16088:	68bb      	ldr	r3, [r7, #8]
   1608a:	685d      	ldr	r5, [r3, #4]
   1608c:	f025 0503 	bic.w	r5, r5, #3
   16090:	1b29      	subs	r1, r5, r4
   16092:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   16096:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   1609a:	f021 010f 	bic.w	r1, r1, #15
   1609e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   160a2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   160a6:	db07      	blt.n	160b8 <_malloc_trim_r+0x3c>
   160a8:	2100      	movs	r1, #0
   160aa:	4630      	mov	r0, r6
   160ac:	f7fc fcf0 	bl	12a90 <_sbrk_r>
   160b0:	68bb      	ldr	r3, [r7, #8]
   160b2:	442b      	add	r3, r5
   160b4:	4298      	cmp	r0, r3
   160b6:	d004      	beq.n	160c2 <_malloc_trim_r+0x46>
   160b8:	4630      	mov	r0, r6
   160ba:	f7fc faef 	bl	1269c <__malloc_unlock>
   160be:	2000      	movs	r0, #0
   160c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160c2:	4261      	negs	r1, r4
   160c4:	4630      	mov	r0, r6
   160c6:	f7fc fce3 	bl	12a90 <_sbrk_r>
   160ca:	3001      	adds	r0, #1
   160cc:	d00d      	beq.n	160ea <_malloc_trim_r+0x6e>
   160ce:	4b10      	ldr	r3, [pc, #64]	; (16110 <_malloc_trim_r+0x94>)
   160d0:	68ba      	ldr	r2, [r7, #8]
   160d2:	6819      	ldr	r1, [r3, #0]
   160d4:	1b2d      	subs	r5, r5, r4
   160d6:	f045 0501 	orr.w	r5, r5, #1
   160da:	4630      	mov	r0, r6
   160dc:	1b09      	subs	r1, r1, r4
   160de:	6055      	str	r5, [r2, #4]
   160e0:	6019      	str	r1, [r3, #0]
   160e2:	f7fc fadb 	bl	1269c <__malloc_unlock>
   160e6:	2001      	movs	r0, #1
   160e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160ea:	2100      	movs	r1, #0
   160ec:	4630      	mov	r0, r6
   160ee:	f7fc fccf 	bl	12a90 <_sbrk_r>
   160f2:	68ba      	ldr	r2, [r7, #8]
   160f4:	1a83      	subs	r3, r0, r2
   160f6:	2b0f      	cmp	r3, #15
   160f8:	ddde      	ble.n	160b8 <_malloc_trim_r+0x3c>
   160fa:	4c06      	ldr	r4, [pc, #24]	; (16114 <_malloc_trim_r+0x98>)
   160fc:	4904      	ldr	r1, [pc, #16]	; (16110 <_malloc_trim_r+0x94>)
   160fe:	6824      	ldr	r4, [r4, #0]
   16100:	f043 0301 	orr.w	r3, r3, #1
   16104:	1b00      	subs	r0, r0, r4
   16106:	6053      	str	r3, [r2, #4]
   16108:	6008      	str	r0, [r1, #0]
   1610a:	e7d5      	b.n	160b8 <_malloc_trim_r+0x3c>
   1610c:	1fff5150 	.word	0x1fff5150
   16110:	1fff6c14 	.word	0x1fff6c14
   16114:	1fff555c 	.word	0x1fff555c

00016118 <_free_r>:
   16118:	2900      	cmp	r1, #0
   1611a:	d045      	beq.n	161a8 <_free_r+0x90>
   1611c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16120:	460d      	mov	r5, r1
   16122:	4680      	mov	r8, r0
   16124:	f7fc fab8 	bl	12698 <__malloc_lock>
   16128:	f855 7c04 	ldr.w	r7, [r5, #-4]
   1612c:	496a      	ldr	r1, [pc, #424]	; (162d8 <_free_r+0x1c0>)
   1612e:	f027 0301 	bic.w	r3, r7, #1
   16132:	f1a5 0408 	sub.w	r4, r5, #8
   16136:	18e2      	adds	r2, r4, r3
   16138:	688e      	ldr	r6, [r1, #8]
   1613a:	6850      	ldr	r0, [r2, #4]
   1613c:	42b2      	cmp	r2, r6
   1613e:	f020 0003 	bic.w	r0, r0, #3
   16142:	d062      	beq.n	1620a <_free_r+0xf2>
   16144:	07fe      	lsls	r6, r7, #31
   16146:	6050      	str	r0, [r2, #4]
   16148:	d40b      	bmi.n	16162 <_free_r+0x4a>
   1614a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   1614e:	1be4      	subs	r4, r4, r7
   16150:	f101 0e08 	add.w	lr, r1, #8
   16154:	68a5      	ldr	r5, [r4, #8]
   16156:	4575      	cmp	r5, lr
   16158:	443b      	add	r3, r7
   1615a:	d06f      	beq.n	1623c <_free_r+0x124>
   1615c:	68e7      	ldr	r7, [r4, #12]
   1615e:	60ef      	str	r7, [r5, #12]
   16160:	60bd      	str	r5, [r7, #8]
   16162:	1815      	adds	r5, r2, r0
   16164:	686d      	ldr	r5, [r5, #4]
   16166:	07ed      	lsls	r5, r5, #31
   16168:	d542      	bpl.n	161f0 <_free_r+0xd8>
   1616a:	f043 0201 	orr.w	r2, r3, #1
   1616e:	6062      	str	r2, [r4, #4]
   16170:	50e3      	str	r3, [r4, r3]
   16172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   16176:	d218      	bcs.n	161aa <_free_r+0x92>
   16178:	08db      	lsrs	r3, r3, #3
   1617a:	1c5a      	adds	r2, r3, #1
   1617c:	684d      	ldr	r5, [r1, #4]
   1617e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
   16182:	60a7      	str	r7, [r4, #8]
   16184:	2001      	movs	r0, #1
   16186:	109b      	asrs	r3, r3, #2
   16188:	fa00 f303 	lsl.w	r3, r0, r3
   1618c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
   16190:	431d      	orrs	r5, r3
   16192:	3808      	subs	r0, #8
   16194:	60e0      	str	r0, [r4, #12]
   16196:	604d      	str	r5, [r1, #4]
   16198:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
   1619c:	60fc      	str	r4, [r7, #12]
   1619e:	4640      	mov	r0, r8
   161a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   161a4:	f7fc ba7a 	b.w	1269c <__malloc_unlock>
   161a8:	4770      	bx	lr
   161aa:	0a5a      	lsrs	r2, r3, #9
   161ac:	2a04      	cmp	r2, #4
   161ae:	d853      	bhi.n	16258 <_free_r+0x140>
   161b0:	099a      	lsrs	r2, r3, #6
   161b2:	f102 0739 	add.w	r7, r2, #57	; 0x39
   161b6:	007f      	lsls	r7, r7, #1
   161b8:	f102 0538 	add.w	r5, r2, #56	; 0x38
   161bc:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   161c0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   161c4:	4944      	ldr	r1, [pc, #272]	; (162d8 <_free_r+0x1c0>)
   161c6:	3808      	subs	r0, #8
   161c8:	4290      	cmp	r0, r2
   161ca:	d04d      	beq.n	16268 <_free_r+0x150>
   161cc:	6851      	ldr	r1, [r2, #4]
   161ce:	f021 0103 	bic.w	r1, r1, #3
   161d2:	428b      	cmp	r3, r1
   161d4:	d202      	bcs.n	161dc <_free_r+0xc4>
   161d6:	6892      	ldr	r2, [r2, #8]
   161d8:	4290      	cmp	r0, r2
   161da:	d1f7      	bne.n	161cc <_free_r+0xb4>
   161dc:	68d0      	ldr	r0, [r2, #12]
   161de:	60e0      	str	r0, [r4, #12]
   161e0:	60a2      	str	r2, [r4, #8]
   161e2:	6084      	str	r4, [r0, #8]
   161e4:	60d4      	str	r4, [r2, #12]
   161e6:	4640      	mov	r0, r8
   161e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   161ec:	f7fc ba56 	b.w	1269c <__malloc_unlock>
   161f0:	6895      	ldr	r5, [r2, #8]
   161f2:	4f3a      	ldr	r7, [pc, #232]	; (162dc <_free_r+0x1c4>)
   161f4:	42bd      	cmp	r5, r7
   161f6:	4403      	add	r3, r0
   161f8:	d03f      	beq.n	1627a <_free_r+0x162>
   161fa:	68d0      	ldr	r0, [r2, #12]
   161fc:	60e8      	str	r0, [r5, #12]
   161fe:	f043 0201 	orr.w	r2, r3, #1
   16202:	6085      	str	r5, [r0, #8]
   16204:	6062      	str	r2, [r4, #4]
   16206:	50e3      	str	r3, [r4, r3]
   16208:	e7b3      	b.n	16172 <_free_r+0x5a>
   1620a:	07ff      	lsls	r7, r7, #31
   1620c:	4403      	add	r3, r0
   1620e:	d407      	bmi.n	16220 <_free_r+0x108>
   16210:	f855 2c08 	ldr.w	r2, [r5, #-8]
   16214:	1aa4      	subs	r4, r4, r2
   16216:	4413      	add	r3, r2
   16218:	68a0      	ldr	r0, [r4, #8]
   1621a:	68e2      	ldr	r2, [r4, #12]
   1621c:	60c2      	str	r2, [r0, #12]
   1621e:	6090      	str	r0, [r2, #8]
   16220:	4a2f      	ldr	r2, [pc, #188]	; (162e0 <_free_r+0x1c8>)
   16222:	6812      	ldr	r2, [r2, #0]
   16224:	f043 0001 	orr.w	r0, r3, #1
   16228:	4293      	cmp	r3, r2
   1622a:	6060      	str	r0, [r4, #4]
   1622c:	608c      	str	r4, [r1, #8]
   1622e:	d3b6      	bcc.n	1619e <_free_r+0x86>
   16230:	4b2c      	ldr	r3, [pc, #176]	; (162e4 <_free_r+0x1cc>)
   16232:	4640      	mov	r0, r8
   16234:	6819      	ldr	r1, [r3, #0]
   16236:	f7ff ff21 	bl	1607c <_malloc_trim_r>
   1623a:	e7b0      	b.n	1619e <_free_r+0x86>
   1623c:	1811      	adds	r1, r2, r0
   1623e:	6849      	ldr	r1, [r1, #4]
   16240:	07c9      	lsls	r1, r1, #31
   16242:	d444      	bmi.n	162ce <_free_r+0x1b6>
   16244:	6891      	ldr	r1, [r2, #8]
   16246:	68d2      	ldr	r2, [r2, #12]
   16248:	60ca      	str	r2, [r1, #12]
   1624a:	4403      	add	r3, r0
   1624c:	f043 0001 	orr.w	r0, r3, #1
   16250:	6091      	str	r1, [r2, #8]
   16252:	6060      	str	r0, [r4, #4]
   16254:	50e3      	str	r3, [r4, r3]
   16256:	e7a2      	b.n	1619e <_free_r+0x86>
   16258:	2a14      	cmp	r2, #20
   1625a:	d817      	bhi.n	1628c <_free_r+0x174>
   1625c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   16260:	007f      	lsls	r7, r7, #1
   16262:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   16266:	e7a9      	b.n	161bc <_free_r+0xa4>
   16268:	10aa      	asrs	r2, r5, #2
   1626a:	684b      	ldr	r3, [r1, #4]
   1626c:	2501      	movs	r5, #1
   1626e:	fa05 f202 	lsl.w	r2, r5, r2
   16272:	4313      	orrs	r3, r2
   16274:	604b      	str	r3, [r1, #4]
   16276:	4602      	mov	r2, r0
   16278:	e7b1      	b.n	161de <_free_r+0xc6>
   1627a:	f043 0201 	orr.w	r2, r3, #1
   1627e:	614c      	str	r4, [r1, #20]
   16280:	610c      	str	r4, [r1, #16]
   16282:	60e5      	str	r5, [r4, #12]
   16284:	60a5      	str	r5, [r4, #8]
   16286:	6062      	str	r2, [r4, #4]
   16288:	50e3      	str	r3, [r4, r3]
   1628a:	e788      	b.n	1619e <_free_r+0x86>
   1628c:	2a54      	cmp	r2, #84	; 0x54
   1628e:	d806      	bhi.n	1629e <_free_r+0x186>
   16290:	0b1a      	lsrs	r2, r3, #12
   16292:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   16296:	007f      	lsls	r7, r7, #1
   16298:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   1629c:	e78e      	b.n	161bc <_free_r+0xa4>
   1629e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   162a2:	d806      	bhi.n	162b2 <_free_r+0x19a>
   162a4:	0bda      	lsrs	r2, r3, #15
   162a6:	f102 0778 	add.w	r7, r2, #120	; 0x78
   162aa:	007f      	lsls	r7, r7, #1
   162ac:	f102 0577 	add.w	r5, r2, #119	; 0x77
   162b0:	e784      	b.n	161bc <_free_r+0xa4>
   162b2:	f240 5054 	movw	r0, #1364	; 0x554
   162b6:	4282      	cmp	r2, r0
   162b8:	d806      	bhi.n	162c8 <_free_r+0x1b0>
   162ba:	0c9a      	lsrs	r2, r3, #18
   162bc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   162c0:	007f      	lsls	r7, r7, #1
   162c2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   162c6:	e779      	b.n	161bc <_free_r+0xa4>
   162c8:	27fe      	movs	r7, #254	; 0xfe
   162ca:	257e      	movs	r5, #126	; 0x7e
   162cc:	e776      	b.n	161bc <_free_r+0xa4>
   162ce:	f043 0201 	orr.w	r2, r3, #1
   162d2:	6062      	str	r2, [r4, #4]
   162d4:	50e3      	str	r3, [r4, r3]
   162d6:	e762      	b.n	1619e <_free_r+0x86>
   162d8:	1fff5150 	.word	0x1fff5150
   162dc:	1fff5158 	.word	0x1fff5158
   162e0:	1fff5558 	.word	0x1fff5558
   162e4:	1fff6c10 	.word	0x1fff6c10

000162e8 <_localeconv_r>:
   162e8:	4a04      	ldr	r2, [pc, #16]	; (162fc <_localeconv_r+0x14>)
   162ea:	4b05      	ldr	r3, [pc, #20]	; (16300 <_localeconv_r+0x18>)
   162ec:	6812      	ldr	r2, [r2, #0]
   162ee:	6b50      	ldr	r0, [r2, #52]	; 0x34
   162f0:	2800      	cmp	r0, #0
   162f2:	bf08      	it	eq
   162f4:	4618      	moveq	r0, r3
   162f6:	30f0      	adds	r0, #240	; 0xf0
   162f8:	4770      	bx	lr
   162fa:	bf00      	nop
   162fc:	1fff4fe0 	.word	0x1fff4fe0
   16300:	1fff4fe4 	.word	0x1fff4fe4

00016304 <_Balloc>:
   16304:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   16306:	b570      	push	{r4, r5, r6, lr}
   16308:	4605      	mov	r5, r0
   1630a:	460c      	mov	r4, r1
   1630c:	b14b      	cbz	r3, 16322 <_Balloc+0x1e>
   1630e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   16312:	b180      	cbz	r0, 16336 <_Balloc+0x32>
   16314:	6802      	ldr	r2, [r0, #0]
   16316:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   1631a:	2300      	movs	r3, #0
   1631c:	6103      	str	r3, [r0, #16]
   1631e:	60c3      	str	r3, [r0, #12]
   16320:	bd70      	pop	{r4, r5, r6, pc}
   16322:	2221      	movs	r2, #33	; 0x21
   16324:	2104      	movs	r1, #4
   16326:	f000 fbaf 	bl	16a88 <_calloc_r>
   1632a:	64e8      	str	r0, [r5, #76]	; 0x4c
   1632c:	4603      	mov	r3, r0
   1632e:	2800      	cmp	r0, #0
   16330:	d1ed      	bne.n	1630e <_Balloc+0xa>
   16332:	2000      	movs	r0, #0
   16334:	bd70      	pop	{r4, r5, r6, pc}
   16336:	2101      	movs	r1, #1
   16338:	fa01 f604 	lsl.w	r6, r1, r4
   1633c:	1d72      	adds	r2, r6, #5
   1633e:	4628      	mov	r0, r5
   16340:	0092      	lsls	r2, r2, #2
   16342:	f000 fba1 	bl	16a88 <_calloc_r>
   16346:	2800      	cmp	r0, #0
   16348:	d0f3      	beq.n	16332 <_Balloc+0x2e>
   1634a:	6044      	str	r4, [r0, #4]
   1634c:	6086      	str	r6, [r0, #8]
   1634e:	e7e4      	b.n	1631a <_Balloc+0x16>

00016350 <_Bfree>:
   16350:	b131      	cbz	r1, 16360 <_Bfree+0x10>
   16352:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   16354:	684a      	ldr	r2, [r1, #4]
   16356:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   1635a:	6008      	str	r0, [r1, #0]
   1635c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   16360:	4770      	bx	lr
   16362:	bf00      	nop

00016364 <__multadd>:
   16364:	b5f0      	push	{r4, r5, r6, r7, lr}
   16366:	690c      	ldr	r4, [r1, #16]
   16368:	b083      	sub	sp, #12
   1636a:	460d      	mov	r5, r1
   1636c:	4606      	mov	r6, r0
   1636e:	f101 0e14 	add.w	lr, r1, #20
   16372:	2700      	movs	r7, #0
   16374:	f8de 0000 	ldr.w	r0, [lr]
   16378:	b281      	uxth	r1, r0
   1637a:	fb02 3101 	mla	r1, r2, r1, r3
   1637e:	0c0b      	lsrs	r3, r1, #16
   16380:	0c00      	lsrs	r0, r0, #16
   16382:	fb02 3300 	mla	r3, r2, r0, r3
   16386:	b289      	uxth	r1, r1
   16388:	3701      	adds	r7, #1
   1638a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   1638e:	42bc      	cmp	r4, r7
   16390:	f84e 1b04 	str.w	r1, [lr], #4
   16394:	ea4f 4313 	mov.w	r3, r3, lsr #16
   16398:	dcec      	bgt.n	16374 <__multadd+0x10>
   1639a:	b13b      	cbz	r3, 163ac <__multadd+0x48>
   1639c:	68aa      	ldr	r2, [r5, #8]
   1639e:	4294      	cmp	r4, r2
   163a0:	da07      	bge.n	163b2 <__multadd+0x4e>
   163a2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   163a6:	3401      	adds	r4, #1
   163a8:	6153      	str	r3, [r2, #20]
   163aa:	612c      	str	r4, [r5, #16]
   163ac:	4628      	mov	r0, r5
   163ae:	b003      	add	sp, #12
   163b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   163b2:	6869      	ldr	r1, [r5, #4]
   163b4:	9301      	str	r3, [sp, #4]
   163b6:	3101      	adds	r1, #1
   163b8:	4630      	mov	r0, r6
   163ba:	f7ff ffa3 	bl	16304 <_Balloc>
   163be:	692a      	ldr	r2, [r5, #16]
   163c0:	3202      	adds	r2, #2
   163c2:	f105 010c 	add.w	r1, r5, #12
   163c6:	4607      	mov	r7, r0
   163c8:	0092      	lsls	r2, r2, #2
   163ca:	300c      	adds	r0, #12
   163cc:	f7f8 f956 	bl	e67c <memcpy>
   163d0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   163d2:	6869      	ldr	r1, [r5, #4]
   163d4:	9b01      	ldr	r3, [sp, #4]
   163d6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   163da:	6028      	str	r0, [r5, #0]
   163dc:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   163e0:	463d      	mov	r5, r7
   163e2:	e7de      	b.n	163a2 <__multadd+0x3e>

000163e4 <__hi0bits>:
   163e4:	0c03      	lsrs	r3, r0, #16
   163e6:	041b      	lsls	r3, r3, #16
   163e8:	b9b3      	cbnz	r3, 16418 <__hi0bits+0x34>
   163ea:	0400      	lsls	r0, r0, #16
   163ec:	2310      	movs	r3, #16
   163ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   163f2:	bf04      	itt	eq
   163f4:	0200      	lsleq	r0, r0, #8
   163f6:	3308      	addeq	r3, #8
   163f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   163fc:	bf04      	itt	eq
   163fe:	0100      	lsleq	r0, r0, #4
   16400:	3304      	addeq	r3, #4
   16402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   16406:	bf04      	itt	eq
   16408:	0080      	lsleq	r0, r0, #2
   1640a:	3302      	addeq	r3, #2
   1640c:	2800      	cmp	r0, #0
   1640e:	db07      	blt.n	16420 <__hi0bits+0x3c>
   16410:	0042      	lsls	r2, r0, #1
   16412:	d403      	bmi.n	1641c <__hi0bits+0x38>
   16414:	2020      	movs	r0, #32
   16416:	4770      	bx	lr
   16418:	2300      	movs	r3, #0
   1641a:	e7e8      	b.n	163ee <__hi0bits+0xa>
   1641c:	1c58      	adds	r0, r3, #1
   1641e:	4770      	bx	lr
   16420:	4618      	mov	r0, r3
   16422:	4770      	bx	lr

00016424 <__lo0bits>:
   16424:	6803      	ldr	r3, [r0, #0]
   16426:	f013 0207 	ands.w	r2, r3, #7
   1642a:	d007      	beq.n	1643c <__lo0bits+0x18>
   1642c:	07d9      	lsls	r1, r3, #31
   1642e:	d420      	bmi.n	16472 <__lo0bits+0x4e>
   16430:	079a      	lsls	r2, r3, #30
   16432:	d420      	bmi.n	16476 <__lo0bits+0x52>
   16434:	089b      	lsrs	r3, r3, #2
   16436:	6003      	str	r3, [r0, #0]
   16438:	2002      	movs	r0, #2
   1643a:	4770      	bx	lr
   1643c:	b299      	uxth	r1, r3
   1643e:	b909      	cbnz	r1, 16444 <__lo0bits+0x20>
   16440:	0c1b      	lsrs	r3, r3, #16
   16442:	2210      	movs	r2, #16
   16444:	f013 0fff 	tst.w	r3, #255	; 0xff
   16448:	bf04      	itt	eq
   1644a:	0a1b      	lsreq	r3, r3, #8
   1644c:	3208      	addeq	r2, #8
   1644e:	0719      	lsls	r1, r3, #28
   16450:	bf04      	itt	eq
   16452:	091b      	lsreq	r3, r3, #4
   16454:	3204      	addeq	r2, #4
   16456:	0799      	lsls	r1, r3, #30
   16458:	bf04      	itt	eq
   1645a:	089b      	lsreq	r3, r3, #2
   1645c:	3202      	addeq	r2, #2
   1645e:	07d9      	lsls	r1, r3, #31
   16460:	d404      	bmi.n	1646c <__lo0bits+0x48>
   16462:	085b      	lsrs	r3, r3, #1
   16464:	d101      	bne.n	1646a <__lo0bits+0x46>
   16466:	2020      	movs	r0, #32
   16468:	4770      	bx	lr
   1646a:	3201      	adds	r2, #1
   1646c:	6003      	str	r3, [r0, #0]
   1646e:	4610      	mov	r0, r2
   16470:	4770      	bx	lr
   16472:	2000      	movs	r0, #0
   16474:	4770      	bx	lr
   16476:	085b      	lsrs	r3, r3, #1
   16478:	6003      	str	r3, [r0, #0]
   1647a:	2001      	movs	r0, #1
   1647c:	4770      	bx	lr
   1647e:	bf00      	nop

00016480 <__i2b>:
   16480:	b510      	push	{r4, lr}
   16482:	460c      	mov	r4, r1
   16484:	2101      	movs	r1, #1
   16486:	f7ff ff3d 	bl	16304 <_Balloc>
   1648a:	2201      	movs	r2, #1
   1648c:	6144      	str	r4, [r0, #20]
   1648e:	6102      	str	r2, [r0, #16]
   16490:	bd10      	pop	{r4, pc}
   16492:	bf00      	nop

00016494 <__multiply>:
   16494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16498:	690d      	ldr	r5, [r1, #16]
   1649a:	6917      	ldr	r7, [r2, #16]
   1649c:	42bd      	cmp	r5, r7
   1649e:	b083      	sub	sp, #12
   164a0:	460c      	mov	r4, r1
   164a2:	4616      	mov	r6, r2
   164a4:	da04      	bge.n	164b0 <__multiply+0x1c>
   164a6:	462a      	mov	r2, r5
   164a8:	4634      	mov	r4, r6
   164aa:	463d      	mov	r5, r7
   164ac:	460e      	mov	r6, r1
   164ae:	4617      	mov	r7, r2
   164b0:	68a3      	ldr	r3, [r4, #8]
   164b2:	6861      	ldr	r1, [r4, #4]
   164b4:	eb05 0807 	add.w	r8, r5, r7
   164b8:	4598      	cmp	r8, r3
   164ba:	bfc8      	it	gt
   164bc:	3101      	addgt	r1, #1
   164be:	f7ff ff21 	bl	16304 <_Balloc>
   164c2:	f100 0c14 	add.w	ip, r0, #20
   164c6:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
   164ca:	45cc      	cmp	ip, r9
   164cc:	9000      	str	r0, [sp, #0]
   164ce:	d205      	bcs.n	164dc <__multiply+0x48>
   164d0:	4663      	mov	r3, ip
   164d2:	2100      	movs	r1, #0
   164d4:	f843 1b04 	str.w	r1, [r3], #4
   164d8:	4599      	cmp	r9, r3
   164da:	d8fb      	bhi.n	164d4 <__multiply+0x40>
   164dc:	f106 0214 	add.w	r2, r6, #20
   164e0:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
   164e4:	f104 0314 	add.w	r3, r4, #20
   164e8:	4552      	cmp	r2, sl
   164ea:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
   164ee:	d254      	bcs.n	1659a <__multiply+0x106>
   164f0:	f8cd 9004 	str.w	r9, [sp, #4]
   164f4:	4699      	mov	r9, r3
   164f6:	f852 3b04 	ldr.w	r3, [r2], #4
   164fa:	fa1f fb83 	uxth.w	fp, r3
   164fe:	f1bb 0f00 	cmp.w	fp, #0
   16502:	d020      	beq.n	16546 <__multiply+0xb2>
   16504:	2000      	movs	r0, #0
   16506:	464f      	mov	r7, r9
   16508:	4666      	mov	r6, ip
   1650a:	4605      	mov	r5, r0
   1650c:	e000      	b.n	16510 <__multiply+0x7c>
   1650e:	461e      	mov	r6, r3
   16510:	f857 4b04 	ldr.w	r4, [r7], #4
   16514:	6830      	ldr	r0, [r6, #0]
   16516:	b2a1      	uxth	r1, r4
   16518:	b283      	uxth	r3, r0
   1651a:	fb0b 3101 	mla	r1, fp, r1, r3
   1651e:	0c24      	lsrs	r4, r4, #16
   16520:	0c00      	lsrs	r0, r0, #16
   16522:	194b      	adds	r3, r1, r5
   16524:	fb0b 0004 	mla	r0, fp, r4, r0
   16528:	eb00 4013 	add.w	r0, r0, r3, lsr #16
   1652c:	b299      	uxth	r1, r3
   1652e:	4633      	mov	r3, r6
   16530:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   16534:	45be      	cmp	lr, r7
   16536:	ea4f 4510 	mov.w	r5, r0, lsr #16
   1653a:	f843 1b04 	str.w	r1, [r3], #4
   1653e:	d8e6      	bhi.n	1650e <__multiply+0x7a>
   16540:	6075      	str	r5, [r6, #4]
   16542:	f852 3c04 	ldr.w	r3, [r2, #-4]
   16546:	ea5f 4b13 	movs.w	fp, r3, lsr #16
   1654a:	d020      	beq.n	1658e <__multiply+0xfa>
   1654c:	f8dc 3000 	ldr.w	r3, [ip]
   16550:	4667      	mov	r7, ip
   16552:	4618      	mov	r0, r3
   16554:	464d      	mov	r5, r9
   16556:	2100      	movs	r1, #0
   16558:	e000      	b.n	1655c <__multiply+0xc8>
   1655a:	4637      	mov	r7, r6
   1655c:	882c      	ldrh	r4, [r5, #0]
   1655e:	0c00      	lsrs	r0, r0, #16
   16560:	fb0b 0004 	mla	r0, fp, r4, r0
   16564:	4401      	add	r1, r0
   16566:	b29c      	uxth	r4, r3
   16568:	463e      	mov	r6, r7
   1656a:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
   1656e:	f846 3b04 	str.w	r3, [r6], #4
   16572:	6878      	ldr	r0, [r7, #4]
   16574:	f855 4b04 	ldr.w	r4, [r5], #4
   16578:	b283      	uxth	r3, r0
   1657a:	0c24      	lsrs	r4, r4, #16
   1657c:	fb0b 3404 	mla	r4, fp, r4, r3
   16580:	eb04 4311 	add.w	r3, r4, r1, lsr #16
   16584:	45ae      	cmp	lr, r5
   16586:	ea4f 4113 	mov.w	r1, r3, lsr #16
   1658a:	d8e6      	bhi.n	1655a <__multiply+0xc6>
   1658c:	607b      	str	r3, [r7, #4]
   1658e:	4592      	cmp	sl, r2
   16590:	f10c 0c04 	add.w	ip, ip, #4
   16594:	d8af      	bhi.n	164f6 <__multiply+0x62>
   16596:	f8dd 9004 	ldr.w	r9, [sp, #4]
   1659a:	f1b8 0f00 	cmp.w	r8, #0
   1659e:	dd0b      	ble.n	165b8 <__multiply+0x124>
   165a0:	f859 3c04 	ldr.w	r3, [r9, #-4]
   165a4:	f1a9 0904 	sub.w	r9, r9, #4
   165a8:	b11b      	cbz	r3, 165b2 <__multiply+0x11e>
   165aa:	e005      	b.n	165b8 <__multiply+0x124>
   165ac:	f859 3d04 	ldr.w	r3, [r9, #-4]!
   165b0:	b913      	cbnz	r3, 165b8 <__multiply+0x124>
   165b2:	f1b8 0801 	subs.w	r8, r8, #1
   165b6:	d1f9      	bne.n	165ac <__multiply+0x118>
   165b8:	9800      	ldr	r0, [sp, #0]
   165ba:	f8c0 8010 	str.w	r8, [r0, #16]
   165be:	b003      	add	sp, #12
   165c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000165c4 <__pow5mult>:
   165c4:	f012 0303 	ands.w	r3, r2, #3
   165c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165cc:	4614      	mov	r4, r2
   165ce:	4607      	mov	r7, r0
   165d0:	d12e      	bne.n	16630 <__pow5mult+0x6c>
   165d2:	460e      	mov	r6, r1
   165d4:	10a4      	asrs	r4, r4, #2
   165d6:	d01c      	beq.n	16612 <__pow5mult+0x4e>
   165d8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   165da:	b395      	cbz	r5, 16642 <__pow5mult+0x7e>
   165dc:	07e3      	lsls	r3, r4, #31
   165de:	f04f 0800 	mov.w	r8, #0
   165e2:	d406      	bmi.n	165f2 <__pow5mult+0x2e>
   165e4:	1064      	asrs	r4, r4, #1
   165e6:	d014      	beq.n	16612 <__pow5mult+0x4e>
   165e8:	6828      	ldr	r0, [r5, #0]
   165ea:	b1a8      	cbz	r0, 16618 <__pow5mult+0x54>
   165ec:	4605      	mov	r5, r0
   165ee:	07e3      	lsls	r3, r4, #31
   165f0:	d5f8      	bpl.n	165e4 <__pow5mult+0x20>
   165f2:	462a      	mov	r2, r5
   165f4:	4631      	mov	r1, r6
   165f6:	4638      	mov	r0, r7
   165f8:	f7ff ff4c 	bl	16494 <__multiply>
   165fc:	b1b6      	cbz	r6, 1662c <__pow5mult+0x68>
   165fe:	6872      	ldr	r2, [r6, #4]
   16600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16602:	1064      	asrs	r4, r4, #1
   16604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   16608:	6031      	str	r1, [r6, #0]
   1660a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   1660e:	4606      	mov	r6, r0
   16610:	d1ea      	bne.n	165e8 <__pow5mult+0x24>
   16612:	4630      	mov	r0, r6
   16614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16618:	462a      	mov	r2, r5
   1661a:	4629      	mov	r1, r5
   1661c:	4638      	mov	r0, r7
   1661e:	f7ff ff39 	bl	16494 <__multiply>
   16622:	6028      	str	r0, [r5, #0]
   16624:	f8c0 8000 	str.w	r8, [r0]
   16628:	4605      	mov	r5, r0
   1662a:	e7e0      	b.n	165ee <__pow5mult+0x2a>
   1662c:	4606      	mov	r6, r0
   1662e:	e7d9      	b.n	165e4 <__pow5mult+0x20>
   16630:	1e5a      	subs	r2, r3, #1
   16632:	4d0b      	ldr	r5, [pc, #44]	; (16660 <__pow5mult+0x9c>)
   16634:	2300      	movs	r3, #0
   16636:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   1663a:	f7ff fe93 	bl	16364 <__multadd>
   1663e:	4606      	mov	r6, r0
   16640:	e7c8      	b.n	165d4 <__pow5mult+0x10>
   16642:	2101      	movs	r1, #1
   16644:	4638      	mov	r0, r7
   16646:	f7ff fe5d 	bl	16304 <_Balloc>
   1664a:	f240 2171 	movw	r1, #625	; 0x271
   1664e:	2201      	movs	r2, #1
   16650:	2300      	movs	r3, #0
   16652:	6141      	str	r1, [r0, #20]
   16654:	6102      	str	r2, [r0, #16]
   16656:	4605      	mov	r5, r0
   16658:	64b8      	str	r0, [r7, #72]	; 0x48
   1665a:	6003      	str	r3, [r0, #0]
   1665c:	e7be      	b.n	165dc <__pow5mult+0x18>
   1665e:	bf00      	nop
   16660:	00017ca8 	.word	0x00017ca8

00016664 <__lshift>:
   16664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16668:	4691      	mov	r9, r2
   1666a:	690a      	ldr	r2, [r1, #16]
   1666c:	688b      	ldr	r3, [r1, #8]
   1666e:	ea4f 1469 	mov.w	r4, r9, asr #5
   16672:	eb04 0802 	add.w	r8, r4, r2
   16676:	f108 0501 	add.w	r5, r8, #1
   1667a:	429d      	cmp	r5, r3
   1667c:	460e      	mov	r6, r1
   1667e:	4682      	mov	sl, r0
   16680:	6849      	ldr	r1, [r1, #4]
   16682:	dd04      	ble.n	1668e <__lshift+0x2a>
   16684:	005b      	lsls	r3, r3, #1
   16686:	429d      	cmp	r5, r3
   16688:	f101 0101 	add.w	r1, r1, #1
   1668c:	dcfa      	bgt.n	16684 <__lshift+0x20>
   1668e:	4650      	mov	r0, sl
   16690:	f7ff fe38 	bl	16304 <_Balloc>
   16694:	2c00      	cmp	r4, #0
   16696:	f100 0214 	add.w	r2, r0, #20
   1669a:	dd38      	ble.n	1670e <__lshift+0xaa>
   1669c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
   166a0:	2100      	movs	r1, #0
   166a2:	f842 1b04 	str.w	r1, [r2], #4
   166a6:	4293      	cmp	r3, r2
   166a8:	d1fb      	bne.n	166a2 <__lshift+0x3e>
   166aa:	6934      	ldr	r4, [r6, #16]
   166ac:	f106 0114 	add.w	r1, r6, #20
   166b0:	f019 091f 	ands.w	r9, r9, #31
   166b4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   166b8:	d021      	beq.n	166fe <__lshift+0x9a>
   166ba:	f1c9 0220 	rsb	r2, r9, #32
   166be:	2400      	movs	r4, #0
   166c0:	680f      	ldr	r7, [r1, #0]
   166c2:	fa07 fc09 	lsl.w	ip, r7, r9
   166c6:	ea4c 0404 	orr.w	r4, ip, r4
   166ca:	469c      	mov	ip, r3
   166cc:	f843 4b04 	str.w	r4, [r3], #4
   166d0:	f851 4b04 	ldr.w	r4, [r1], #4
   166d4:	458e      	cmp	lr, r1
   166d6:	fa24 f402 	lsr.w	r4, r4, r2
   166da:	d8f1      	bhi.n	166c0 <__lshift+0x5c>
   166dc:	f8cc 4004 	str.w	r4, [ip, #4]
   166e0:	b10c      	cbz	r4, 166e6 <__lshift+0x82>
   166e2:	f108 0502 	add.w	r5, r8, #2
   166e6:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
   166ea:	6872      	ldr	r2, [r6, #4]
   166ec:	3d01      	subs	r5, #1
   166ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   166f2:	6105      	str	r5, [r0, #16]
   166f4:	6031      	str	r1, [r6, #0]
   166f6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   166fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   166fe:	3b04      	subs	r3, #4
   16700:	f851 2b04 	ldr.w	r2, [r1], #4
   16704:	f843 2f04 	str.w	r2, [r3, #4]!
   16708:	458e      	cmp	lr, r1
   1670a:	d8f9      	bhi.n	16700 <__lshift+0x9c>
   1670c:	e7eb      	b.n	166e6 <__lshift+0x82>
   1670e:	4613      	mov	r3, r2
   16710:	e7cb      	b.n	166aa <__lshift+0x46>
   16712:	bf00      	nop

00016714 <__mcmp>:
   16714:	6902      	ldr	r2, [r0, #16]
   16716:	690b      	ldr	r3, [r1, #16]
   16718:	1ad2      	subs	r2, r2, r3
   1671a:	d113      	bne.n	16744 <__mcmp+0x30>
   1671c:	009b      	lsls	r3, r3, #2
   1671e:	3014      	adds	r0, #20
   16720:	3114      	adds	r1, #20
   16722:	4419      	add	r1, r3
   16724:	b410      	push	{r4}
   16726:	4403      	add	r3, r0
   16728:	e001      	b.n	1672e <__mcmp+0x1a>
   1672a:	4298      	cmp	r0, r3
   1672c:	d20c      	bcs.n	16748 <__mcmp+0x34>
   1672e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   16732:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   16736:	4294      	cmp	r4, r2
   16738:	d0f7      	beq.n	1672a <__mcmp+0x16>
   1673a:	d309      	bcc.n	16750 <__mcmp+0x3c>
   1673c:	2001      	movs	r0, #1
   1673e:	f85d 4b04 	ldr.w	r4, [sp], #4
   16742:	4770      	bx	lr
   16744:	4610      	mov	r0, r2
   16746:	4770      	bx	lr
   16748:	2000      	movs	r0, #0
   1674a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1674e:	4770      	bx	lr
   16750:	f04f 30ff 	mov.w	r0, #4294967295
   16754:	e7f3      	b.n	1673e <__mcmp+0x2a>
   16756:	bf00      	nop

00016758 <__mdiff>:
   16758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1675c:	690b      	ldr	r3, [r1, #16]
   1675e:	460f      	mov	r7, r1
   16760:	6911      	ldr	r1, [r2, #16]
   16762:	1a5b      	subs	r3, r3, r1
   16764:	2b00      	cmp	r3, #0
   16766:	4690      	mov	r8, r2
   16768:	d117      	bne.n	1679a <__mdiff+0x42>
   1676a:	0089      	lsls	r1, r1, #2
   1676c:	f107 0214 	add.w	r2, r7, #20
   16770:	f108 0514 	add.w	r5, r8, #20
   16774:	1853      	adds	r3, r2, r1
   16776:	4429      	add	r1, r5
   16778:	e001      	b.n	1677e <__mdiff+0x26>
   1677a:	429a      	cmp	r2, r3
   1677c:	d25e      	bcs.n	1683c <__mdiff+0xe4>
   1677e:	f853 6d04 	ldr.w	r6, [r3, #-4]!
   16782:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   16786:	42a6      	cmp	r6, r4
   16788:	d0f7      	beq.n	1677a <__mdiff+0x22>
   1678a:	d260      	bcs.n	1684e <__mdiff+0xf6>
   1678c:	463b      	mov	r3, r7
   1678e:	4614      	mov	r4, r2
   16790:	4647      	mov	r7, r8
   16792:	f04f 0901 	mov.w	r9, #1
   16796:	4698      	mov	r8, r3
   16798:	e006      	b.n	167a8 <__mdiff+0x50>
   1679a:	db5d      	blt.n	16858 <__mdiff+0x100>
   1679c:	f107 0514 	add.w	r5, r7, #20
   167a0:	f102 0414 	add.w	r4, r2, #20
   167a4:	f04f 0900 	mov.w	r9, #0
   167a8:	6879      	ldr	r1, [r7, #4]
   167aa:	f7ff fdab 	bl	16304 <_Balloc>
   167ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
   167b2:	693e      	ldr	r6, [r7, #16]
   167b4:	f8c0 900c 	str.w	r9, [r0, #12]
   167b8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   167bc:	46a6      	mov	lr, r4
   167be:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   167c2:	f100 0414 	add.w	r4, r0, #20
   167c6:	2300      	movs	r3, #0
   167c8:	f85e 1b04 	ldr.w	r1, [lr], #4
   167cc:	f855 8b04 	ldr.w	r8, [r5], #4
   167d0:	b28a      	uxth	r2, r1
   167d2:	fa13 f388 	uxtah	r3, r3, r8
   167d6:	0c09      	lsrs	r1, r1, #16
   167d8:	1a9a      	subs	r2, r3, r2
   167da:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   167de:	eb03 4322 	add.w	r3, r3, r2, asr #16
   167e2:	b292      	uxth	r2, r2
   167e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   167e8:	45f4      	cmp	ip, lr
   167ea:	f844 2b04 	str.w	r2, [r4], #4
   167ee:	ea4f 4323 	mov.w	r3, r3, asr #16
   167f2:	d8e9      	bhi.n	167c8 <__mdiff+0x70>
   167f4:	42af      	cmp	r7, r5
   167f6:	d917      	bls.n	16828 <__mdiff+0xd0>
   167f8:	46a4      	mov	ip, r4
   167fa:	4629      	mov	r1, r5
   167fc:	f851 eb04 	ldr.w	lr, [r1], #4
   16800:	fa13 f28e 	uxtah	r2, r3, lr
   16804:	1413      	asrs	r3, r2, #16
   16806:	eb03 431e 	add.w	r3, r3, lr, lsr #16
   1680a:	b292      	uxth	r2, r2
   1680c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   16810:	428f      	cmp	r7, r1
   16812:	f84c 2b04 	str.w	r2, [ip], #4
   16816:	ea4f 4323 	mov.w	r3, r3, asr #16
   1681a:	d8ef      	bhi.n	167fc <__mdiff+0xa4>
   1681c:	43ed      	mvns	r5, r5
   1681e:	443d      	add	r5, r7
   16820:	f025 0503 	bic.w	r5, r5, #3
   16824:	3504      	adds	r5, #4
   16826:	442c      	add	r4, r5
   16828:	3c04      	subs	r4, #4
   1682a:	b922      	cbnz	r2, 16836 <__mdiff+0xde>
   1682c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   16830:	3e01      	subs	r6, #1
   16832:	2b00      	cmp	r3, #0
   16834:	d0fa      	beq.n	1682c <__mdiff+0xd4>
   16836:	6106      	str	r6, [r0, #16]
   16838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1683c:	2100      	movs	r1, #0
   1683e:	f7ff fd61 	bl	16304 <_Balloc>
   16842:	2201      	movs	r2, #1
   16844:	2300      	movs	r3, #0
   16846:	6102      	str	r2, [r0, #16]
   16848:	6143      	str	r3, [r0, #20]
   1684a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1684e:	462c      	mov	r4, r5
   16850:	f04f 0900 	mov.w	r9, #0
   16854:	4615      	mov	r5, r2
   16856:	e7a7      	b.n	167a8 <__mdiff+0x50>
   16858:	463b      	mov	r3, r7
   1685a:	f107 0414 	add.w	r4, r7, #20
   1685e:	f108 0514 	add.w	r5, r8, #20
   16862:	4647      	mov	r7, r8
   16864:	f04f 0901 	mov.w	r9, #1
   16868:	4698      	mov	r8, r3
   1686a:	e79d      	b.n	167a8 <__mdiff+0x50>

0001686c <__d2b>:
   1686c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16870:	ec57 6b10 	vmov	r6, r7, d0
   16874:	b083      	sub	sp, #12
   16876:	4688      	mov	r8, r1
   16878:	2101      	movs	r1, #1
   1687a:	463c      	mov	r4, r7
   1687c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   16880:	4617      	mov	r7, r2
   16882:	f7ff fd3f 	bl	16304 <_Balloc>
   16886:	f3c4 0413 	ubfx	r4, r4, #0, #20
   1688a:	4681      	mov	r9, r0
   1688c:	b10d      	cbz	r5, 16892 <__d2b+0x26>
   1688e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   16892:	9401      	str	r4, [sp, #4]
   16894:	b31e      	cbz	r6, 168de <__d2b+0x72>
   16896:	a802      	add	r0, sp, #8
   16898:	f840 6d08 	str.w	r6, [r0, #-8]!
   1689c:	f7ff fdc2 	bl	16424 <__lo0bits>
   168a0:	2800      	cmp	r0, #0
   168a2:	d134      	bne.n	1690e <__d2b+0xa2>
   168a4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   168a8:	f8c9 2014 	str.w	r2, [r9, #20]
   168ac:	2b00      	cmp	r3, #0
   168ae:	bf0c      	ite	eq
   168b0:	2101      	moveq	r1, #1
   168b2:	2102      	movne	r1, #2
   168b4:	f8c9 3018 	str.w	r3, [r9, #24]
   168b8:	f8c9 1010 	str.w	r1, [r9, #16]
   168bc:	b9dd      	cbnz	r5, 168f6 <__d2b+0x8a>
   168be:	eb09 0381 	add.w	r3, r9, r1, lsl #2
   168c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   168c6:	f8c8 0000 	str.w	r0, [r8]
   168ca:	6918      	ldr	r0, [r3, #16]
   168cc:	f7ff fd8a 	bl	163e4 <__hi0bits>
   168d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   168d4:	6038      	str	r0, [r7, #0]
   168d6:	4648      	mov	r0, r9
   168d8:	b003      	add	sp, #12
   168da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   168de:	a801      	add	r0, sp, #4
   168e0:	f7ff fda0 	bl	16424 <__lo0bits>
   168e4:	9b01      	ldr	r3, [sp, #4]
   168e6:	f8c9 3014 	str.w	r3, [r9, #20]
   168ea:	2101      	movs	r1, #1
   168ec:	3020      	adds	r0, #32
   168ee:	f8c9 1010 	str.w	r1, [r9, #16]
   168f2:	2d00      	cmp	r5, #0
   168f4:	d0e3      	beq.n	168be <__d2b+0x52>
   168f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   168fa:	4405      	add	r5, r0
   168fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   16900:	f8c8 5000 	str.w	r5, [r8]
   16904:	6038      	str	r0, [r7, #0]
   16906:	4648      	mov	r0, r9
   16908:	b003      	add	sp, #12
   1690a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1690e:	e89d 000c 	ldmia.w	sp, {r2, r3}
   16912:	f1c0 0120 	rsb	r1, r0, #32
   16916:	fa03 f101 	lsl.w	r1, r3, r1
   1691a:	430a      	orrs	r2, r1
   1691c:	40c3      	lsrs	r3, r0
   1691e:	9301      	str	r3, [sp, #4]
   16920:	f8c9 2014 	str.w	r2, [r9, #20]
   16924:	e7c2      	b.n	168ac <__d2b+0x40>
   16926:	bf00      	nop

00016928 <__ssprint_r>:
   16928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1692c:	6893      	ldr	r3, [r2, #8]
   1692e:	b083      	sub	sp, #12
   16930:	4690      	mov	r8, r2
   16932:	2b00      	cmp	r3, #0
   16934:	d072      	beq.n	16a1c <__ssprint_r+0xf4>
   16936:	4683      	mov	fp, r0
   16938:	f04f 0900 	mov.w	r9, #0
   1693c:	6816      	ldr	r6, [r2, #0]
   1693e:	6808      	ldr	r0, [r1, #0]
   16940:	688b      	ldr	r3, [r1, #8]
   16942:	460d      	mov	r5, r1
   16944:	464c      	mov	r4, r9
   16946:	2c00      	cmp	r4, #0
   16948:	d045      	beq.n	169d6 <__ssprint_r+0xae>
   1694a:	429c      	cmp	r4, r3
   1694c:	461f      	mov	r7, r3
   1694e:	469a      	mov	sl, r3
   16950:	d346      	bcc.n	169e0 <__ssprint_r+0xb8>
   16952:	89ab      	ldrh	r3, [r5, #12]
   16954:	f413 6f90 	tst.w	r3, #1152	; 0x480
   16958:	d02d      	beq.n	169b6 <__ssprint_r+0x8e>
   1695a:	696f      	ldr	r7, [r5, #20]
   1695c:	6929      	ldr	r1, [r5, #16]
   1695e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   16962:	ebc1 0a00 	rsb	sl, r1, r0
   16966:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   1696a:	1c60      	adds	r0, r4, #1
   1696c:	107f      	asrs	r7, r7, #1
   1696e:	4450      	add	r0, sl
   16970:	42b8      	cmp	r0, r7
   16972:	463a      	mov	r2, r7
   16974:	bf84      	itt	hi
   16976:	4607      	movhi	r7, r0
   16978:	463a      	movhi	r2, r7
   1697a:	055b      	lsls	r3, r3, #21
   1697c:	d533      	bpl.n	169e6 <__ssprint_r+0xbe>
   1697e:	4611      	mov	r1, r2
   16980:	4658      	mov	r0, fp
   16982:	f7fb fa83 	bl	11e8c <_malloc_r>
   16986:	2800      	cmp	r0, #0
   16988:	d037      	beq.n	169fa <__ssprint_r+0xd2>
   1698a:	4652      	mov	r2, sl
   1698c:	6929      	ldr	r1, [r5, #16]
   1698e:	9001      	str	r0, [sp, #4]
   16990:	f7f7 fe74 	bl	e67c <memcpy>
   16994:	89aa      	ldrh	r2, [r5, #12]
   16996:	9b01      	ldr	r3, [sp, #4]
   16998:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   1699c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   169a0:	81aa      	strh	r2, [r5, #12]
   169a2:	ebca 0207 	rsb	r2, sl, r7
   169a6:	eb03 000a 	add.w	r0, r3, sl
   169aa:	616f      	str	r7, [r5, #20]
   169ac:	612b      	str	r3, [r5, #16]
   169ae:	6028      	str	r0, [r5, #0]
   169b0:	60aa      	str	r2, [r5, #8]
   169b2:	4627      	mov	r7, r4
   169b4:	46a2      	mov	sl, r4
   169b6:	4652      	mov	r2, sl
   169b8:	4649      	mov	r1, r9
   169ba:	f7fb fdbb 	bl	12534 <memmove>
   169be:	f8d8 2008 	ldr.w	r2, [r8, #8]
   169c2:	68ab      	ldr	r3, [r5, #8]
   169c4:	6828      	ldr	r0, [r5, #0]
   169c6:	1bdb      	subs	r3, r3, r7
   169c8:	4450      	add	r0, sl
   169ca:	1b14      	subs	r4, r2, r4
   169cc:	60ab      	str	r3, [r5, #8]
   169ce:	6028      	str	r0, [r5, #0]
   169d0:	f8c8 4008 	str.w	r4, [r8, #8]
   169d4:	b314      	cbz	r4, 16a1c <__ssprint_r+0xf4>
   169d6:	f8d6 9000 	ldr.w	r9, [r6]
   169da:	6874      	ldr	r4, [r6, #4]
   169dc:	3608      	adds	r6, #8
   169de:	e7b2      	b.n	16946 <__ssprint_r+0x1e>
   169e0:	4627      	mov	r7, r4
   169e2:	46a2      	mov	sl, r4
   169e4:	e7e7      	b.n	169b6 <__ssprint_r+0x8e>
   169e6:	4658      	mov	r0, fp
   169e8:	f7fb fe62 	bl	126b0 <_realloc_r>
   169ec:	4603      	mov	r3, r0
   169ee:	2800      	cmp	r0, #0
   169f0:	d1d7      	bne.n	169a2 <__ssprint_r+0x7a>
   169f2:	6929      	ldr	r1, [r5, #16]
   169f4:	4658      	mov	r0, fp
   169f6:	f7ff fb8f 	bl	16118 <_free_r>
   169fa:	230c      	movs	r3, #12
   169fc:	f8cb 3000 	str.w	r3, [fp]
   16a00:	89ab      	ldrh	r3, [r5, #12]
   16a02:	2200      	movs	r2, #0
   16a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16a08:	f04f 30ff 	mov.w	r0, #4294967295
   16a0c:	81ab      	strh	r3, [r5, #12]
   16a0e:	f8c8 2008 	str.w	r2, [r8, #8]
   16a12:	f8c8 2004 	str.w	r2, [r8, #4]
   16a16:	b003      	add	sp, #12
   16a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a1c:	2000      	movs	r0, #0
   16a1e:	f8c8 0004 	str.w	r0, [r8, #4]
   16a22:	b003      	add	sp, #12
   16a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016a28 <_vasnprintf_r>:
   16a28:	b570      	push	{r4, r5, r6, lr}
   16a2a:	4615      	mov	r5, r2
   16a2c:	b09a      	sub	sp, #104	; 0x68
   16a2e:	6814      	ldr	r4, [r2, #0]
   16a30:	b109      	cbz	r1, 16a36 <_vasnprintf_r+0xe>
   16a32:	2c00      	cmp	r4, #0
   16a34:	d11a      	bne.n	16a6c <_vasnprintf_r+0x44>
   16a36:	2400      	movs	r4, #0
   16a38:	f44f 7222 	mov.w	r2, #648	; 0x288
   16a3c:	f8ad 200c 	strh.w	r2, [sp, #12]
   16a40:	9400      	str	r4, [sp, #0]
   16a42:	9404      	str	r4, [sp, #16]
   16a44:	461a      	mov	r2, r3
   16a46:	f64f 76ff 	movw	r6, #65535	; 0xffff
   16a4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16a4c:	9402      	str	r4, [sp, #8]
   16a4e:	4669      	mov	r1, sp
   16a50:	9405      	str	r4, [sp, #20]
   16a52:	f8ad 600e 	strh.w	r6, [sp, #14]
   16a56:	f7fc fe53 	bl	13700 <_svfprintf_r>
   16a5a:	2800      	cmp	r0, #0
   16a5c:	db11      	blt.n	16a82 <_vasnprintf_r+0x5a>
   16a5e:	9b00      	ldr	r3, [sp, #0]
   16a60:	6028      	str	r0, [r5, #0]
   16a62:	2200      	movs	r2, #0
   16a64:	701a      	strb	r2, [r3, #0]
   16a66:	9804      	ldr	r0, [sp, #16]
   16a68:	b01a      	add	sp, #104	; 0x68
   16a6a:	bd70      	pop	{r4, r5, r6, pc}
   16a6c:	f44f 62c1 	mov.w	r2, #1544	; 0x608
   16a70:	9100      	str	r1, [sp, #0]
   16a72:	9104      	str	r1, [sp, #16]
   16a74:	f8ad 200c 	strh.w	r2, [sp, #12]
   16a78:	dae4      	bge.n	16a44 <_vasnprintf_r+0x1c>
   16a7a:	238b      	movs	r3, #139	; 0x8b
   16a7c:	6003      	str	r3, [r0, #0]
   16a7e:	2000      	movs	r0, #0
   16a80:	e7f2      	b.n	16a68 <_vasnprintf_r+0x40>
   16a82:	2000      	movs	r0, #0
   16a84:	e7f0      	b.n	16a68 <_vasnprintf_r+0x40>
   16a86:	bf00      	nop

00016a88 <_calloc_r>:
   16a88:	b510      	push	{r4, lr}
   16a8a:	fb02 f101 	mul.w	r1, r2, r1
   16a8e:	f7fb f9fd 	bl	11e8c <_malloc_r>
   16a92:	4604      	mov	r4, r0
   16a94:	b1d8      	cbz	r0, 16ace <_calloc_r+0x46>
   16a96:	f850 2c04 	ldr.w	r2, [r0, #-4]
   16a9a:	f022 0203 	bic.w	r2, r2, #3
   16a9e:	3a04      	subs	r2, #4
   16aa0:	2a24      	cmp	r2, #36	; 0x24
   16aa2:	d818      	bhi.n	16ad6 <_calloc_r+0x4e>
   16aa4:	2a13      	cmp	r2, #19
   16aa6:	d914      	bls.n	16ad2 <_calloc_r+0x4a>
   16aa8:	2300      	movs	r3, #0
   16aaa:	2a1b      	cmp	r2, #27
   16aac:	6003      	str	r3, [r0, #0]
   16aae:	6043      	str	r3, [r0, #4]
   16ab0:	d916      	bls.n	16ae0 <_calloc_r+0x58>
   16ab2:	2a24      	cmp	r2, #36	; 0x24
   16ab4:	6083      	str	r3, [r0, #8]
   16ab6:	60c3      	str	r3, [r0, #12]
   16ab8:	bf11      	iteee	ne
   16aba:	f100 0210 	addne.w	r2, r0, #16
   16abe:	6103      	streq	r3, [r0, #16]
   16ac0:	6143      	streq	r3, [r0, #20]
   16ac2:	f100 0218 	addeq.w	r2, r0, #24
   16ac6:	2300      	movs	r3, #0
   16ac8:	6013      	str	r3, [r2, #0]
   16aca:	6053      	str	r3, [r2, #4]
   16acc:	6093      	str	r3, [r2, #8]
   16ace:	4620      	mov	r0, r4
   16ad0:	bd10      	pop	{r4, pc}
   16ad2:	4602      	mov	r2, r0
   16ad4:	e7f7      	b.n	16ac6 <_calloc_r+0x3e>
   16ad6:	2100      	movs	r1, #0
   16ad8:	f7fb fd90 	bl	125fc <memset>
   16adc:	4620      	mov	r0, r4
   16ade:	bd10      	pop	{r4, pc}
   16ae0:	f100 0208 	add.w	r2, r0, #8
   16ae4:	e7ef      	b.n	16ac6 <_calloc_r+0x3e>
   16ae6:	bf00      	nop

00016ae8 <__aeabi_uldivmod>:
   16ae8:	b953      	cbnz	r3, 16b00 <__aeabi_uldivmod+0x18>
   16aea:	b94a      	cbnz	r2, 16b00 <__aeabi_uldivmod+0x18>
   16aec:	2900      	cmp	r1, #0
   16aee:	bf08      	it	eq
   16af0:	2800      	cmpeq	r0, #0
   16af2:	bf1c      	itt	ne
   16af4:	f04f 31ff 	movne.w	r1, #4294967295
   16af8:	f04f 30ff 	movne.w	r0, #4294967295
   16afc:	f7fb b92c 	b.w	11d58 <__aeabi_idiv0>
   16b00:	f1ad 0c08 	sub.w	ip, sp, #8
   16b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   16b08:	f7fa ffb4 	bl	11a74 <__udivmoddi4>
   16b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   16b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   16b14:	b004      	add	sp, #16
   16b16:	4770      	bx	lr

00016b18 <vtable for SnoozeBlock>:
	...
   16b20:	0661 0000 0a2d 0000 06b1 0000 7561 6f74     a...-.......auto
   16b30:	0000 0000 6552 6f63 6472 6220 7475 6f74     ....Record butto
   16b40:	206e 7270 7365 6573 3a64 7220 6365 735f     n pressed: rec_s
   16b50:	6174 6574 3d20 0020 6f4d 696e 6f74 2072     tate = .Monitor 
   16b60:	7562 7474 6e6f 7020 6572 7373 6465 203a     button pressed: 
   16b70:	6f6d 5f6e 7473 7461 2065 203d 0000 0000     mon_state = ....
   16b80:	6c42 6575 6f74 746f 2068 7562 7474 6e6f     Bluetooth button
   16b90:	7020 6572 7373 6465 203a 6c62 5f65 7473      pressed: ble_st
   16ba0:	7461 2065 203d 0000 4f4d 204e 6572 2e71     ate = ..MON req.
   16bb0:	2e2e 7320 6174 6574 3a73 4220 2054 6425     .. states: BT %d
   16bc0:	202c 4c42 2045 6425 202c 4552 2043 6425     , BLE %d, REC %d
   16bd0:	202c 4f4d 204e 6425 000a 0000 6553 646e     , MON %d....Send
   16be0:	6e69 2067 6f63 6d6d 6e61 2064 7265 6f72     ing command erro
   16bf0:	2172 0021 6553 746e 7420 206f 4c42 4555     r!!.Sent to BLUE
   16c00:	4f50 5452 203a 7325 000a 0000 7543 7272     PORT: %s....Curr
   16c10:	6e65 2074 6974 656d 203a 3025 6432 252e     ent time: %02d.%
   16c20:	3230 2e64 3025 6432 202c 3025 6432 2568     02d.%02d, %02dh%
   16c30:	3230 6d64 3025 6432 0a73 0000 6544 746c     02dm%02ds...Delt
   16c40:	3a61 2520 3230 6864 3025 6432 256d 3230     a: %02dh%02dm%02
   16c50:	7364 000a 6553 7474 6e69 2067 7075 5320     ds..Setting up S
   16c60:	6f6e 7a6f 2065 6c61 7261 006d 4441 4556     nooze alarm.ADVE
   16c70:	5452 5349 4e49 2047 4e4f 000d 6f54 4220     RTISING ON..To B
   16c80:	3143 3732 203a 7325 000a 0000 4441 4556     C127: %s....ADVE
   16c90:	5452 5349 4e49 2047 464f 0d46 0000 0000     RTISING OFF.....
   16ca0:	7753 7469 6863 6e69 2067 6c62 6575 6f74     Switching blueto
   16cb0:	746f 2068 6e6f 0000 4f50 4557 2052 4e4f     oth on..POWER ON
   16cc0:	000d 0000 7753 7469 6863 6e69 2067 6c62     ....Switching bl
   16cd0:	6575 6f74 746f 2068 666f 0066 4f50 4557     uetooth off.POWE
   16ce0:	2052 464f 0d46 0000 414e 454d 0020 0000     R OFF...NAME ...
   16cf0:	6544 6976 6563 6620 756f 646e 6920 206e     Device found in 
   16d00:	696c 7473 0021 0000 704f 6e65 6e69 2067     list!...Opening 
   16d10:	5442 6320 6e6f 656e 7463 6f69 206e 2540     BT connection @%
   16d20:	2073 2528 2973 000a 504f 4e45 0020 0000     s (%s)..OPEN ...
   16d30:	4120 4432 0d50 0000 6f4e 6874 6e69 2067      A2DP...Nothing 
   16d40:	6f66 6e75 2064 6e69 6c20 7369 0074 0000     found in list...
   16d50:	4553 444e 0020 0000 4320 4e4f 204e 5245     SEND ... CONN ER
   16d60:	2052 4f4e 4220 2054 4544 4956 4543 0d21     R NO BT DEVICE!.
   16d70:	0000 0000 4c43 534f 2045 0000 4e49 5551     ....CLOSE ..INQU
   16d80:	5249 2059 3031 000d 554d 4953 2043 0000     IRY 10..MUSIC ..
   16d90:	5020 5541 4553 000d 5020 414c 0d59 0000      PAUSE.. PLAY...
   16da0:	5320 4f54 0d50 0000 6552 6573 7474 6e69      STOP...Resettin
   16db0:	2067 4342 3231 2e37 2e2e 0000 4552 4553     g BC127.....RESE
   16dc0:	0d54 0000 5453 5441 5355 000d 4f56 554c     T...STATUS..VOLU
   16dd0:	454d 0020 5520 0d50 0000 0000 4420 574f     ME . UP..... DOW
   16de0:	0d4e 0000 4220 2054 0000 0000 4220 2054     N... BT .... BT 
   16df0:	4e49 0d51 0000 0000 4220 2054 4449 454c     INQ..... BT IDLE
   16e00:	000d 0000 4620 2050 0000 0000 4920 514e     .... FP .... INQ
   16e10:	4420 4e4f 0d45 0000 4920 514e 5320 4154      DONE... INQ STA
   16e20:	5452 000d 4920 514e 0020 0000 4d20 4e4f     RT.. INQ ... MON
   16e30:	4f20 0d4e 0000 0000 4d20 4e4f 4f20 4646      ON..... MON OFF
   16e40:	000d 0000 5220 4345 4f20 0d4e 0000 0000     .... REC ON.....
   16e50:	5220 4957 204e 4150 4152 534d 4f20 0d4b      RWIN PARAMS OK.
   16e60:	0000 0000 5220 4957 204e 0000 5620 4c4f     .... RWIN .. VOL
   16e70:	0020 0000 5220 4957 204e 5245 2052 4142      ... RWIN ERR BA
   16e80:	2044 4552 5551 5345 2154 000d 5220 4957     D REQUEST!.. RWI
   16e90:	204e 5245 2052 5257 4e4f 2047 4150 4152     N ERR WRONG PARA
   16ea0:	534d 0d21 0000 0000 5620 4c4f 4520 5252     MS!..... VOL ERR
   16eb0:	4e20 204f 5442 4420 5645 4349 2145 000d      NO BT DEVICE!..
   16ec0:	5220 4345 5720 4941 0d54 0000 5220 4345      REC WAIT... REC
   16ed0:	4f20 4646 000d 0000 7246 6d6f 4220 3143      OFF....From BC1
   16ee0:	3732 203a 7325 000a 3241 5044 535f 5254     27: %s..A2DP_STR
   16ef0:	4145 5f4d 5453 5241 0054 0000 4241 5f53     EAM_START...ABS_
   16f00:	4f56 004c 5441 0000 4c42 5f45 4843 5241     VOL.AT..BLE_CHAR
   16f10:	0000 0000 4e49 5551 5249 0059 4552 5643     ....INQUIRY.RECV
   16f20:	0000 0000 494c 4b4e 0000 0000 4e49 5551     ....LINK....INQU
   16f30:	4f5f 004b 4150 5249 505f 4e45 4944 474e     _OK.PAIR_PENDING
   16f40:	0000 0000 4552 4441 0059 0000 3241 5044     ....READY...A2DP
   16f50:	535f 5254 4145 5f4d 5553 5053 4e45 0044     _STREAM_SUSPEND.
   16f60:	5641 4352 5f50 4c50 5941 0000 5641 4352     AVRCP_PLAY..AVRC
   16f70:	5f50 5453 504f 0000 5641 4352 5f50 4150     P_STOP..AVRCP_PA
   16f80:	5355 0045 5641 4352 5f50 4f46 5752 5241     USE.AVRCP_FORWAR
   16f90:	0044 0000 5641 4352 5f50 4142 4b43 4157     D...AVRCP_BACKWA
   16fa0:	4452 0000 5245 4f52 0052 0000 4150 5249     RD..ERROR...PAIR
   16fb0:	455f 5252 524f 0000 4150 5249 4f5f 004b     _ERROR..PAIR_OK.
   16fc0:	4c42 5f45 4552 4441 0000 0000 4c43 534f     BLE_READ....CLOS
   16fd0:	5f45 5245 4f52 0052 494c 4b4e 4c5f 534f     E_ERROR.LINK_LOS
   16fe0:	0053 0000 414e 454d 0000 0000 504f 4e45     S...NAME....OPEN
   16ff0:	455f 5252 524f 0000 4c43 534f 5f45 4b4f     _ERROR..CLOSE_OK
   17000:	0000 0000 504f 4e45 4f5f 004b 3241 5044     ....OPEN_OK.A2DP
   17010:	0000 0000 3241 5044 6320 6e6f 656e 7463     ....A2DP connect
   17020:	6f69 206e 706f 6e65 6465 202e 6f43 6e6e     ion opened. Conn
   17030:	4920 3a44 2520 2c64 7020 6565 2072 6461      ID: %d, peer ad
   17040:	7264 7365 2073 203d 7325 000a 5641 4352     dress = %s..AVRC
   17050:	0050 0000 5641 4352 2050 6f63 6e6e 6365     P...AVRCP connec
   17060:	6974 6e6f 6f20 6570 656e 2e64 4320 6e6f     tion opened. Con
   17070:	206e 4449 203a 6425 202c 6570 7265 6120     n ID: %d, peer a
   17080:	6464 6572 7373 2820 6863 6365 296b 3d20     ddress (check) =
   17090:	2520 0a73 0000 0000 4c42 0045 6e69 0071      %s.....BLE.inq.
   170a0:	6964 6373 0000 0000 7325 2520 2073 7325     disc....%s %s %s
   170b0:	000a 0000 4c42 5f45 4e49 4944 4143 4954     ....BLE_INDICATI
   170c0:	4e4f 0000 4c42 5f45 4f4e 4954 4946 4143     ON..BLE_NOTIFICA
   170d0:	4954 4e4f 0000 0000 4c42 5f45 4552 4441     TION....BLE_READ
   170e0:	525f 5345 0000 0000 4c42 5f45 4553 5652     _RES....BLE_SERV
   170f0:	0000 0000 4c42 5f45 5257 5449 0045 0000     ....BLE_WRITE...
   17100:	5453 5441 0045 0000 6f63 6e6e 0000 0000     STATE...conn....
   17110:	6974 656d 0000 0000 6954 656d 7473 6d61     time....Timestam
   17120:	2070 6572 6563 7669 6465 203a 6c25 0a64     p received: %ld.
   17130:	0000 0000 6552 6563 7669 6465 7420 6d69     ....Received tim
   17140:	2065 6f6e 2074 6f63 7272 6365 2174 0000     e not correct!..
   17150:	6572 0063 7473 7261 0074 0000 7473 706f     rec.start...stop
   17160:	0000 0000 003f 0000 6f6d 006e 6f76 006c     ....?...mon.vol.
   17170:	002b 0000 002d 0000 7462 0000 7772 6e69     +...-...bt..rwin
   17180:	0000 0000 6966 656c 6170 6874 0000 0000     ....filepath....
   17190:	3241 5044 6120 6464 6572 7373 203a 7325     A2DP address: %s
   171a0:	202c 4449 203a 6425 000a 0000 5641 4352     , ID: %d....AVRC
   171b0:	2050 6461 7264 7365 3a73 2520 2c73 4920     P address: %s, I
   171c0:	3a44 2520 0a64 0000 494c 4b4e 2036 6572     D: %d...LINK6 re
   171d0:	6563 7669 6465 0000 494c 4b4e 2037 6572     ceived..LINK7 re
   171e0:	6563 7669 6465 0000 494c 4b4e 2039 6572     ceived..LINK9 re
   171f0:	6563 7669 6465 0000 4550 444e 4e49 0047     ceived..PENDING.
   17200:	6e55 6261 656c 7420 206f 6361 6563 7373     Unable to access
   17210:	7420 6568 5320 2044 6163 6472 0000 0000      the SD card....
   17220:	3025 6432 3025 6432 3025 6432 0000 0000     %02d%02d%02d....
   17230:	3025 6432 3025 6432 3025 6432 772e 7661     %02d%02d%02d.wav
   17240:	0000 0000 2575 3230 2564 3230 2564 3230     ....u%02d%02d%02
   17250:	0064 0000 2575 3230 2564 3230 2564 3230     d...u%02d%02d%02
   17260:	2e64 6177 0076 0000 252f 2f73 7325 ff00     d.wav.../%s/%s..

00017270 <vtable for AudioStream>:
	...
   17278:	e831 0000 654e 7478 7220 6365 726f 3a64     1...Next record:
   17288:	2520 646c 000a 0000 6966 656c 6f20 6570      %ld....file ope
   17298:	696e 676e 6520 7272 726f 0000 2d2d ff00     ning error..--..

000172a8 <str1>:
   172a8:	4724 5250 434d 322c 3130 3435 2e37 3030     $GPRMC,201547.00
   172b8:	2c30 2c41 3033 3431 352e 3235 2c37 2c4e     0,A,3014.5527,N,
   172c8:	3930 3437 2e39 3835 3830 572c 302c 322e     09749.5808,W,0.2
   172d8:	2c34 3631 2e33 3530 302c 3034 3031 2c39     4,163.05,040109,
   172e8:	2a2c 4131 ff00 ffff 6946 2078 6f66 6e75     ,*1A....Fix foun
   172f8:	3f64 2520 0064 0000 6620 614c 3a74 2520     d? %d... fLat: %
   17308:	2c66 6620 6f4c 676e 203a 6625 000a ffff     f, fLong: %f....

00017318 <str2>:
   17318:	4724 4750 4147 322c 3130 3435 2e38 3030     $GPGGA,201548.00
   17328:	2c30 3033 3431 352e 3235 2c39 2c4e 3930     0,3014.5529,N,09
   17338:	3437 2e39 3835 3830 572c 312c 302c 2c37     749.5808,W,1,07,
   17348:	2e31 2c35 3232 2e35 2c36 2c4d 322d 2e32     1.5,225.6,M,-22.
   17358:	2c35 2c4d 3831 382e 302c 3030 2a30 3837     5,M,18.8,0000*78
   17368:	ff00 ffff                                   ....

0001736c <str3>:
   1736c:	4724 5250 434d 322c 3130 3435 2e38 3030     $GPRMC,201548.00
   1737c:	2c30 2c41 3033 3431 352e 3235 2c39 2c4e     0,A,3014.5529,N,
   1738c:	3930 3437 2e39 3835 3830 572c 302c 312e     09749.5808,W,0.1
   1739c:	2c37 3335 322e 2c35 3430 3130 3930 2c2c     7,53.25,040109,,
   173ac:	322a 0042                                   *2B.

000173b0 <str4>:
   173b0:	4724 4750 4147 322c 3130 3435 2e39 3030     $GPGGA,201549.00
   173c0:	2c30 3033 3431 352e 3335 2c33 2c4e 3930     0,3014.5533,N,09
   173d0:	3437 2e39 3835 3231 572c 312c 302c 2c37     749.5812,W,1,07,
   173e0:	2e31 2c35 3232 2e33 2c35 2c4d 322d 2e32     1.5,223.5,M,-22.
   173f0:	2c35 2c4d 3831 382e 302c 3030 2a30 4337     5,M,18.8,0000*7C
   17400:	ff00 ffff 6954 656d 6120 2074 7473 7261     ....Time at star
   17410:	7574 3a70 2520 646c 000a 0000 6552 6f63     tup: %ld....Reco
   17420:	6472 6e69 2067 6f64 656e 2e2e 202e 6f63     rding done... co
   17430:	6e75 6974 676e 203a 6425 000a 6552 6f63     unting: %d..Reco
   17440:	6472 6e69 2067 6573 2074 6966 696e 6873     rding set finish
   17450:	6465 0021                                   ed!.

00017454 <vtable for AudioAnalyzePeak>:
	...
   1745c:	4b45 0000                                   EK..

00017460 <vtable for AudioControlSGTL5000>:
	...
   17468:	4d2d 0000 4b85 0000 50e1 0000 4b89 0000     -M...K...P...K..
   17478:	53b5 0000                                   .S..

0001747c <vtable for AudioFilterBiquad>:
	...
   17484:	5519 0000                                   .U..

00017488 <vtable for AudioInputI2S>:
	...
   17490:	5719 0000                                   .W..

00017494 <vtable for AudioMixer4>:
	...
   1749c:	59e5 0000                                   .Y..

000174a0 <vtable for AudioOutputI2S>:
	...
   174a8:	5c25 0000                                   %\..

000174ac <vtable for AudioPlaySdWav>:
	...
   174b4:	6499 0000                                   .d..

000174b8 <vtable for AudioRecordQueue>:
	...
   174c0:	6a79 0000                                   yj..

000174c4 <SPIClass::spi0_hardware>:
   174c4:	803c 4004 1000 0000 1a04 0000 7fff 0000     <..@............
   174d4:	0e0f 0000 6b91 0000 080c ff27 0200 0000     .....k....'.....
   174e4:	0200 0000 0200 0000 0000 0000 070b ff1c     ................
   174f4:	0200 0000 0200 0000 0200 0000 0000 0000     ................
   17504:	0e0d 001b 0200 0000 0200 0000 0200 0000     ................
   17514:	020a 0609 1714 1615 1a0f 002d 0200 0000     ..........-.....
   17524:	0200 0000 0200 0000 0200 0000 0200 0000     ................
   17534:	0200 0000 0200 0000 0200 0000 0200 0000     ................
   17544:	0200 0000 0300 0000 0101 0202 0404 0808     ................
   17554:	0110 0020                                   .. .

00017558 <vtable for SDLib::File>:
	...
   17560:	6f99 0000 6f01 0000 6ee1 0000 6f8d 0000     .o...o...n...o..
   17570:	6ee9 0000 6f25 0000 6f51 0000 002f ffff     .n..%o..Qo../...

00017580 <vtable for SdFile>:
	...
   17588:	92f1 0000 d7bd 0000 6ee1 0000 6ee5 0000     .........n...n..
   17598:	3c7c 5e3e 3d2b 2f3f 5d5b 2c3b 222a 005c     |<>^+=?/[];,*"\.

000175a8 <vtable for SnoozeAlarm>:
	...
   175b0:	9e49 0000 9df1 0000 9f2d 0000               I.......-...

000175bc <vtable for SnoozeDigital>:
	...
   175c4:	9fc9 0000 a421 0000 a8f1 0000               ....!.......

000175d0 <monthDays>:
   175d0:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e 5047 4d52     ............GPRM
   175e0:	0043 0000 4e47 4d52 0043 0000 5047 4747     C...GNRMC...GPGG
   175f0:	0041 0000 4e47 4e47 0053 0000 4e47 5347     A...GNGNS...GNGS
   17600:	0041 0000 5047 5347 0041 0000 5047 5347     A...GPGSA...GPGS
   17610:	0056 0000 4c47 5347 0056 0000 004e 0000     V...GLGSV...N...
   17620:	4e4e 0045 454e 0000 4e45 0045 5345 0045     NNE.NE..ENE.ESE.
   17630:	4553 0000 5353 0045 5353 0057 5753 0000     SE..SSE.SSW.SW..
   17640:	5357 0057 0057 0000 4e57 0057 574e 0000     WSW.W...WNW.NW..
   17650:	4e4e 0057                                   NNW.

00017654 <TwoWire::i2c0_hardware>:
   17654:	8034 4004 0040 0000 1112 0822 0230 0502     4..@@.....".0...
   17664:	0207 1013 0721 022f 0502 0207 0018 0000     ....!./.........

00017674 <TwoWire::i2c1_hardware>:
   17674:	8034 4004 0080 0000 3a26 ffff 02ff 0006     4..@....&:......
   17684:	0000 3b25 ffff 02ff 0006 0000 0019 0000     ..%;............

00017694 <TwoWire::i2c2_hardware>:
   17694:	8028 4004 0040 0000 ff04 ffff 05ff 0000     (..@@...........
   176a4:	0000 1a03 ffff 05ff 0005 0000 004a 0000     ............J...

000176b4 <vtable for TwoWire>:
	...
   176bc:	c451 0000 c415 0000 6ee1 0000 c411 0000     Q........n......
   176cc:	c3cd 0000 c3d9 0000 c3f9 0000               ............

000176d8 <vtable for HardwareSerial4>:
	...
   176e0:	d549 0000 d56d 0000 d601 0000 d5fd 0000     I...m...........
   176f0:	d5f9 0000 d5f5 0000 d5f1 0000 d5bd 0000     ................
   17700:	d5d1 0000 d5b9 0000 d5b1 0000 d5a9 0000     ................
   17710:	d5a1 0000 d591 0000 d581 0000 d57d 0000     ............}...
   17720:	d625 0000 d645 0000 d665 0000 d605 0000     %...E...e.......
   17730:	d555 0000 d53d 0000 0a0d ffff               U...=.......

0001773c <pin2sc1a>:
   1773c:	0e05 0908 0c0d 0706 040f 9303 8f8e 0e05     ................
   1774c:	0908 0c0d 0706 040f ffff ffff ffff 8eff     ................
   1775c:	118f 8412 8685 9187 ffff ffff ffff ffff     ................
   1776c:	8aff ff8b ffff ffff ffff ffff ffff ffff     ................
   1777c:	9303 9717 8101 921a 0030 0000 0031 ffff     ........0...1...

0001778c <digital_pin_to_info_PGM>:
   1778c:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   1779c:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   177ac:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   177bc:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   177cc:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   177dc:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   177ec:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   177fc:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   1780c:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   1781c:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   1782c:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   1783c:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   1784c:	2068 43fe d068 4004 0014 43fe 9014 4004     h .Ch..@...C...@
   1785c:	0038 43fe 9038 4004 003c 43fe 903c 4004     8..C8..@<..C<..@
   1786c:	0040 43fe 9040 4004 0848 43fe a048 4004     @..C@..@H..CH..@
   1787c:	084c 43fe a04c 4004 0828 43fe a028 4004     L..CL..@(..C(..@
   1788c:	082c 43fe a02c 4004 2060 43fe d060 4004     ,..C,..@` .C`..@
   1789c:	2064 43fe d064 4004 1020 43fe b020 4004     d .Cd..@ ..C ..@
   178ac:	1024 43fe b024 4004 1028 43fe b028 4004     $..C$..@(..C(..@
   178bc:	102c 43fe b02c 4004 0044 43fe 9044 4004     ,..C,..@D..CD..@
   178cc:	0070 43fe 9070 4004 0074 43fe 9074 4004     p..Cp..@t..Ct..@
   178dc:	0068 43fe 9068 4004 0850 43fe a050 4004     h..Ch..@P..CP..@
   178ec:	0858 43fe a058 4004 085c 43fe a05c 4004     X..CX..@\..C\..@
   178fc:	0854 43fe a054 4004 1820 43fe c020 4004     T..CT..@ ..C ..@
   1790c:	1824 43fe c024 4004 0810 43fe a010 4004     $..C$..@...C...@
   1791c:	0814 43fe a014 4004 1838 43fe c038 4004     ...C...@8..C8..@
   1792c:	1834 43fe c034 4004 1830 43fe c030 4004     4..C4..@0..C0..@
   1793c:	183c 43fe c03c 4004 182c 43fe c02c 4004     <..C<..@,..C,..@
   1794c:	2028 43fe d028 4004 202c 43fe d02c 4004     ( .C(..@, .C,..@
   1795c:	2000 43fe d000 4004 2004 43fe d004 4004     . .C...@. .C...@
   1796c:	2008 43fe d008 4004 200c 43fe d00c 4004     . .C...@. .C...@
   1797c:	2010 43fe d010 4004 2014 43fe d014 4004     . .C...@. .C...@

0001798c <vtable for usb_serial_class>:
	...
   17994:	0721 0001 0719 0001 0715 0001 0711 0001     !...............
   179a4:	070d 0001 0709 0001 0705 0001 0701 0001     ................

000179b4 <usb_endpoint_config_table>:
   179b4:	1500 1519                                   ....

000179b8 <usb_descriptor_list>:
   179b8:	0100 0000 4b14 1fff 0012 0000 0200 0000     .....K..........
   179c8:	4b40 1fff 0043 0000 0300 0000 4b9c 1fff     @K..C........K..
   179d8:	0000 0000 0301 0409 4b28 1fff 0000 0000     ........(K......
   179e8:	0302 0409 4b84 1fff 0000 0000 0303 0409     .....K..........
   179f8:	4ba0 1fff 0000 0000 0000 0000 0000 0000     .K..............
   17a08:	0000 0000                                   ....

00017a0c <_global_impure_ptr>:
   17a0c:	4bb8 1fff 4f50 4953 0058 0000 002e ffff     .K..POSIX.......

00017a1c <zeroes.7258>:
   17a1c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   17a2c:	4e49 0046 6e69 0066 414e 004e 616e 006e     INF.inf.NAN.nan.
   17a3c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   17a4c:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   17a5c:	6463 6665 0000 0000 6e28 6c75 296c ff00     cdef....(null)..

00017a6c <blanks.7257>:
   17a6c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   17a7c:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
   17a8c:	6867 6a69 6c6b 6e6d 706f 7271 7473 7675     ghijklmnopqrstuv
   17a9c:	7877 7a79 ff00 ffff                         wxyz....

00017aa4 <_ctype_>:
   17aa4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   17ab4:	2020 2020 2020 2020 2020 2020 2020 2020                     
   17ac4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   17ad4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   17ae4:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   17af4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   17b04:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   17b14:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   17b24:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   17ba4:	ff00 ffff 6e49 6966 696e 7974 0000 0000     ....Infinity....
   17bb4:	614e 004e                                   NaN.

00017bb8 <__mprec_tens>:
   17bb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   17bc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   17bd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   17be8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   17bf8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   17c08:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   17c18:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   17c28:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   17c38:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   17c48:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   17c58:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   17c68:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   17c78:	9db4 79d9 7843 44ea                         ...yCx.D

00017c80 <__mprec_bigtens>:
   17c80:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   17c90:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   17ca0:	bf3c 7f73 4fdd 7515                         <.s..O.u

00017ca8 <p05.6087>:
   17ca8:	0005 0000 0019 0000 007d 0000               ........}...

00017cb4 <_init>:
   17cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cb6:	bf00      	nop
   17cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   17cba:	bc08      	pop	{r3}
   17cbc:	469e      	mov	lr, r3
   17cbe:	4770      	bx	lr

00017cc0 <__init_array_start>:
   17cc0:	00014fd5 	.word	0x00014fd5

00017cc4 <__frame_dummy_init_array_entry>:
   17cc4:	00000435 00001491 000032b1 00003a1d     5........2...:..
   17cd4:	00003ca9 000043b9 000049c1 00005645     .<...C...I..EV..
   17ce4:	0000565d 0000588d 000058a5 000058bd     ]V...X...X...X..
   17cf4:	000058d5 00005ad9 00005af1 00005b09     .X...Z...Z...[..
   17d04:	00005f71 00005f89 00005fa1 00005fb9     q_..._..._..._..
   17d14:	00005fd1 00005fe9 00007a35 000085f5     ._..._..5z......
   17d24:	0000b6dd                                ....

Disassembly of section .fini:

00017d28 <_fini>:
   17d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d2a:	bf00      	nop
